// fe6d5ba13987fa092d59b2bf34af189bc5991230643bba5ecdb70a629ff92d6e
// $ python3.13 ./Tools/jit/build.py aarch64-apple-darwin23.6.0

void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // shim.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 4: f9400129      ldr     x9, [x9]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 8: b9400128      ldr     w8, [x9]
    // c: 37f80068      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // 10: 11000508      add     w8, w8, #0x1
    // 14: b9000128      str     w8, [x9]
    // 18: d102c3ff      sub     sp, sp, #0xb0
    // 1c: 6d013bef      stp     d15, d14, [sp, #0x10]
    // 20: 6d0233ed      stp     d13, d12, [sp, #0x20]
    // 24: 6d032beb      stp     d11, d10, [sp, #0x30]
    // 28: 6d0423e9      stp     d9, d8, [sp, #0x40]
    // 2c: a9056ffc      stp     x28, x27, [sp, #0x50]
    // 30: a90667fa      stp     x26, x25, [sp, #0x60]
    // 34: a9075ff8      stp     x24, x23, [sp, #0x70]
    // 38: a90857f6      stp     x22, x21, [sp, #0x80]
    // 3c: a9094ff4      stp     x20, x19, [sp, #0x90]
    // 40: a90a7bfd      stp     x29, x30, [sp, #0xa0]
    // 44: 910283fd      add     x29, sp, #0xa0
    // 48: aa0003f4      mov     x20, x0
    // 4c: aa0103f5      mov     x21, x1
    // 50: aa0203f6      mov     x22, x2
    // 54: f90007e2      str     x2, [sp, #0x8]
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 5c: f94007e9      ldr     x9, [sp, #0x8]
    // 60: f9408928      ldr     x8, [x9, #0x110]
    // 64: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 68: f940014a      ldr     x10, [x10]
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 6c: f900892a      str     x10, [x9, #0x110]
    // 70: f9400109      ldr     x9, [x8]
    // 74: 37f80109      tbnz    w9, #0x1f, 0x94 <ltmp0+0x94>
    // 78: f1000529      subs    x9, x9, #0x1
    // 7c: f9000109      str     x9, [x8]
    // 80: 540000a1      b.ne    0x94 <ltmp0+0x94>
    // 84: aa0003f3      mov     x19, x0
    // 88: aa0803e0      mov     x0, x8
    // 8c: 94000000      bl      0x8c <ltmp0+0x8c>
    // 000000000000008c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 90: aa1303e0      mov     x0, x19
    // 94: a94a7bfd      ldp     x29, x30, [sp, #0xa0]
    // 98: a9494ff4      ldp     x20, x19, [sp, #0x90]
    // 9c: a94857f6      ldp     x22, x21, [sp, #0x80]
    // a0: a9475ff8      ldp     x24, x23, [sp, #0x70]
    // a4: a94667fa      ldp     x26, x25, [sp, #0x60]
    // a8: a9456ffc      ldp     x28, x27, [sp, #0x50]
    // ac: 6d4423e9      ldp     d9, d8, [sp, #0x40]
    // b0: 6d432beb      ldp     d11, d10, [sp, #0x30]
    // b4: 6d4233ed      ldp     d13, d12, [sp, #0x20]
    // b8: 6d413bef      ldp     d15, d14, [sp, #0x10]
    // bc: 9102c3ff      add     sp, sp, #0xb0
    // c0: d65f03c0      ret
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x01, 0x00, 0xb9,
        0xff, 0xc3, 0x02, 0xd1, 0xef, 0x3b, 0x01, 0x6d,
        0xed, 0x33, 0x02, 0x6d, 0xeb, 0x2b, 0x03, 0x6d,
        0xe9, 0x23, 0x04, 0x6d, 0xfc, 0x6f, 0x05, 0xa9,
        0xfa, 0x67, 0x06, 0xa9, 0xf8, 0x5f, 0x07, 0xa9,
        0xf6, 0x57, 0x08, 0xa9, 0xf4, 0x4f, 0x09, 0xa9,
        0xfd, 0x7b, 0x0a, 0xa9, 0xfd, 0x83, 0x02, 0x91,
        0xf4, 0x03, 0x00, 0xaa, 0xf5, 0x03, 0x01, 0xaa,
        0xf6, 0x03, 0x02, 0xaa, 0xe2, 0x07, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0xe9, 0x07, 0x40, 0xf9,
        0x28, 0x89, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x2a, 0x89, 0x00, 0xf9,
        0x09, 0x01, 0x40, 0xf9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0xf1, 0x09, 0x01, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xf3, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0x4a, 0xa9,
        0xf4, 0x4f, 0x49, 0xa9, 0xf6, 0x57, 0x48, 0xa9,
        0xf8, 0x5f, 0x47, 0xa9, 0xfa, 0x67, 0x46, 0xa9,
        0xfc, 0x6f, 0x45, 0xa9, 0xe9, 0x23, 0x44, 0x6d,
        0xeb, 0x2b, 0x43, 0x6d, 0xed, 0x33, 0x42, 0x6d,
        0xef, 0x3b, 0x41, 0x6d, 0xff, 0xc3, 0x02, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x8c, 0x0, state);
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyEval_BinaryOps
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyEval_BinaryOps
    // 24: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 28: aa1803e0      mov     x0, x24
    // 2c: aa1303e1      mov     x1, x19
    // 30: d63f0100      blr     x8
    // 34: aa0003f7      mov     x23, x0
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400308      ldr     x8, [x24]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000308      str     x8, [x24]
    // 50: 54000120      b.eq    0x74 <ltmp0+0x74>
    // 54: f9400268      ldr     x8, [x19]
    // 58: 37f80168      tbnz    w8, #0x1f, 0x84 <ltmp0+0x84>
    // 5c: f1000508      subs    x8, x8, #0x1
    // 60: f9000268      str     x8, [x19]
    // 64: 54000101      b.ne    0x84 <ltmp0+0x84>
    // 68: aa1303e0      mov     x0, x19
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: 14000005      b       0x84 <ltmp0+0x84>
    // 74: aa1803e0      mov     x0, x24
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 7c: f9400268      ldr     x8, [x19]
    // 80: 36fffee8      tbz     w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 84: b40000b7      cbz     x23, 0x98 <ltmp0+0x98>
    // 88: f81f02b7      stur    x23, [x21, #-0x10]
    // 8c: d10022b5      sub     x21, x21, #0x8
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x79, 0x68, 0xf8,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb7, 0x00, 0x00, 0xb4,
        0xb7, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyEval_BinaryOps+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_trampoline(code + 0x78, 0x0, state);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x9c, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_FLOAT.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e61      ldr     x1, [x19, #-0x8]!
    // 10: f85f8260      ldur    x0, [x19, #-0x8]
    // 14: fd400800      ldr     d0, [x0, #0x10]
    // 18: fd400821      ldr     d1, [x1, #0x10]
    // 1c: 1e612800      fadd    d0, d0, d1
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __PyFloat_FromDouble_ConsumeInputs
    // 24: b40000a0      cbz     x0, 0x38 <ltmp0+0x38>
    // 28: f81f02a0      stur    x0, [x21, #-0x10]
    // 2c: aa1303f5      mov     x21, x19
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x61, 0x8e, 0x5f, 0xf8,
        0x60, 0x82, 0x5f, 0xf8, 0x00, 0x08, 0x40, 0xfd,
        0x21, 0x08, 0x40, 0xfd, 0x00, 0x28, 0x61, 0x1e,
        0x00, 0x00, 0x00, 0x94, 0xa0, 0x00, 0x00, 0xb4,
        0xa0, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x1, state);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_INT.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e79      ldr     x25, [x19, #-0x8]!
    // 10: f85f8278      ldur    x24, [x19, #-0x8]
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1903e1      mov     x1, x25
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyLong_Add
    // 20: aa0003f7      mov     x23, x0
    // 24: f9400328      ldr     x8, [x25]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000328      str     x8, [x25]
    // 34: 54000220      b.eq    0x78 <ltmp0+0x78>
    // 38: f9400308      ldr     x8, [x24]
    // 3c: 37f80368      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000308      str     x8, [x24]
    // 48: 54000301      b.ne    0xa8 <ltmp0+0xa8>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1803e0      mov     x0, x24
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1803e0      mov     x0, x24
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // 74: 1400000d      b       0xa8 <ltmp0+0xa8>
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 80: f952fd28      ldr     x8, [x9, #0x25f8]
    // 84: b40000a8      cbz     x8, 0x98 <ltmp0+0x98>
    // 88: f9530122      ldr     x2, [x9, #0x2600]
    // 8c: aa1903e0      mov     x0, x25
    // 90: 52800021      mov     w1, #0x1                ; =1
    // 94: d63f0100      blr     x8
    // 98: aa1903e0      mov     x0, x25
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // a0: f9400308      ldr     x8, [x24]
    // a4: 36fffce8      tbz     w8, #0x1f, 0x40 <ltmp0+0x40>
    // a8: b40000b7      cbz     x23, 0xbc <ltmp0+0xbc>
    // ac: f81f02b7      stur    x23, [x21, #-0x10]
    // b0: aa1303f5      mov     x21, x19
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x79, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0x08, 0x03, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x03, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0xb7, 0x00, 0x00, 0xb4, 0xb7, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x3, state);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x70, 0x2, state);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x9c, 0x2, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_UNICODE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 10: f85f8279      ldur    x25, [x19, #-0x8]
    // 14: aa1903e0      mov     x0, x25
    // 18: aa1703e1      mov     x1, x23
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 _PyUnicode_Concat
    // 20: aa0003f8      mov     x24, x0
    // 24: f9400328      ldr     x8, [x25]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000328      str     x8, [x25]
    // 34: 54000220      b.eq    0x78 <ltmp0+0x78>
    // 38: f94002e8      ldr     x8, [x23]
    // 3c: 37f80368      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f90002e8      str     x8, [x23]
    // 48: 54000301      b.ne    0xa8 <ltmp0+0xa8>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1703e0      mov     x0, x23
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1703e0      mov     x0, x23
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __PyUnicode_ExactDealloc
    // 74: 1400000d      b       0xa8 <ltmp0+0xa8>
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 80: f952fd28      ldr     x8, [x9, #0x25f8]
    // 84: b40000a8      cbz     x8, 0x98 <ltmp0+0x98>
    // 88: f9530122      ldr     x2, [x9, #0x2600]
    // 8c: aa1903e0      mov     x0, x25
    // 90: 52800021      mov     w1, #0x1                ; =1
    // 94: d63f0100      blr     x8
    // 98: aa1903e0      mov     x0, x25
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __PyUnicode_ExactDealloc
    // a0: f94002e8      ldr     x8, [x23]
    // a4: 36fffce8      tbz     w8, #0x1f, 0x40 <ltmp0+0x40>
    // a8: b40000b8      cbz     x24, 0xbc <ltmp0+0xbc>
    // ac: f81f02b8      stur    x24, [x21, #-0x10]
    // b0: aa1303f5      mov     x21, x19
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x79, 0x82, 0x5f, 0xf8, 0xe0, 0x03, 0x19, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0xe8, 0x02, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0xb8, 0x00, 0x00, 0xb4, 0xb8, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x5, state);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x70, 0x4, state);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x9c, 0x4, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f0e60      ldr     x0, [x19, #-0x10]!
    // 8: 91014298      add     x24, x20, #0x50
    // c: 90000019      adrp    x25, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400339      ldr     x25, [x25]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: f879db08      ldr     x8, [x24, w25, sxtw #3]
    // 18: eb00011f      cmp     x8, x0
    // 1c: 54000040      b.eq    0x24 <ltmp0+0x24>
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: d10083ff      sub     sp, sp, #0x20
    // 28: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 2c: 910043fd      add     x29, sp, #0x10
    // 30: f85f82b7      ldur    x23, [x21, #-0x8]
    // 34: f9400008      ldr     x8, [x0]
    // 38: 37f800a8      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 3c: f1000508      subs    x8, x8, #0x1
    // 40: f9000008      str     x8, [x0]
    // 44: 54000041      b.ne    0x4c <ltmp0+0x4c>
    // 48: 94000000      bl      0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 4c: f879db08      ldr     x8, [x24, w25, sxtw #3]
    // 50: f90007e8      str     x8, [sp, #0x8]
    // 54: 910023e0      add     x0, sp, #0x8
    // 58: aa1703e1      mov     x1, x23
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 _PyUnicode_Append
    // 60: f94007e8      ldr     x8, [sp, #0x8]
    // 64: f839db08      str     x8, [x24, w25, sxtw #3]
    // 68: f94002e9      ldr     x9, [x23]
    // 6c: 37f801e9      tbnz    w9, #0x1f, 0xa8 <ltmp0+0xa8>
    // 70: f1000528      subs    x8, x9, #0x1
    // 74: f90002e8      str     x8, [x23]
    // 78: 54000161      b.ne    0xa4 <ltmp0+0xa4>
    // 7c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 80: f9400129      ldr     x9, [x9]
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 84: f952fd28      ldr     x8, [x9, #0x25f8]
    // 88: b40000a8      cbz     x8, 0x9c <ltmp0+0x9c>
    // 8c: f9530122      ldr     x2, [x9, #0x2600]
    // 90: aa1703e0      mov     x0, x23
    // 94: 52800021      mov     w1, #0x1                ; =1
    // 98: d63f0100      blr     x8
    // 9c: aa1703e0      mov     x0, x23
    // a0: 94000000      bl      0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __PyUnicode_ExactDealloc
    // a4: f879db08      ldr     x8, [x24, w25, sxtw #3]
    // a8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ac: 910083ff      add     sp, sp, #0x20
    // b0: b4000068      cbz     x8, 0xbc <ltmp0+0xbc>
    // b4: aa1303f5      mov     x21, x19
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0xf3, 0x03, 0x15, 0xaa, 0x60, 0x0e, 0x5f, 0xf8,
        0x98, 0x42, 0x01, 0x91, 0x19, 0x00, 0x00, 0x90,
        0x39, 0x03, 0x40, 0xf9, 0x08, 0xdb, 0x79, 0xf8,
        0x1f, 0x01, 0x00, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xff, 0x83, 0x00, 0xd1,
        0xfd, 0x7b, 0x01, 0xa9, 0xfd, 0x43, 0x00, 0x91,
        0xb7, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x08, 0xdb, 0x79, 0xf8,
        0xe8, 0x07, 0x00, 0xf9, 0xe0, 0x23, 0x00, 0x91,
        0xe1, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x07, 0x40, 0xf9, 0x08, 0xdb, 0x39, 0xf8,
        0xe9, 0x02, 0x40, 0xf9, 0xe9, 0x01, 0xf8, 0x37,
        0x28, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x61, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x08, 0xdb, 0x79, 0xf8,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x68, 0x00, 0x00, 0xb4, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x48, 0x0, state);
    patch_aarch64_trampoline(code + 0x5c, 0x6, state);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa0, 0x4, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_FLOAT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e61      ldr     x1, [x19, #-0x8]!
    // 10: f85f8260      ldur    x0, [x19, #-0x8]
    // 14: fd400800      ldr     d0, [x0, #0x10]
    // 18: fd400821      ldr     d1, [x1, #0x10]
    // 1c: 1e610800      fmul    d0, d0, d1
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __PyFloat_FromDouble_ConsumeInputs
    // 24: b40000a0      cbz     x0, 0x38 <ltmp0+0x38>
    // 28: f81f02a0      stur    x0, [x21, #-0x10]
    // 2c: aa1303f5      mov     x21, x19
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x61, 0x8e, 0x5f, 0xf8,
        0x60, 0x82, 0x5f, 0xf8, 0x00, 0x08, 0x40, 0xfd,
        0x21, 0x08, 0x40, 0xfd, 0x00, 0x08, 0x61, 0x1e,
        0x00, 0x00, 0x00, 0x94, 0xa0, 0x00, 0x00, 0xb4,
        0xa0, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x1, state);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e79      ldr     x25, [x19, #-0x8]!
    // 10: f85f8278      ldur    x24, [x19, #-0x8]
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1903e1      mov     x1, x25
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyLong_Multiply
    // 20: aa0003f7      mov     x23, x0
    // 24: f9400328      ldr     x8, [x25]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000328      str     x8, [x25]
    // 34: 54000220      b.eq    0x78 <ltmp0+0x78>
    // 38: f9400308      ldr     x8, [x24]
    // 3c: 37f80368      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000308      str     x8, [x24]
    // 48: 54000301      b.ne    0xa8 <ltmp0+0xa8>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1803e0      mov     x0, x24
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1803e0      mov     x0, x24
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // 74: 1400000d      b       0xa8 <ltmp0+0xa8>
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 80: f952fd28      ldr     x8, [x9, #0x25f8]
    // 84: b40000a8      cbz     x8, 0x98 <ltmp0+0x98>
    // 88: f9530122      ldr     x2, [x9, #0x2600]
    // 8c: aa1903e0      mov     x0, x25
    // 90: 52800021      mov     w1, #0x1                ; =1
    // 94: d63f0100      blr     x8
    // 98: aa1903e0      mov     x0, x25
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // a0: f9400308      ldr     x8, [x24]
    // a4: 36fffce8      tbz     w8, #0x1f, 0x40 <ltmp0+0x40>
    // a8: b40000b7      cbz     x23, 0xbc <ltmp0+0xbc>
    // ac: f81f02b7      stur    x23, [x21, #-0x10]
    // b0: aa1303f5      mov     x21, x19
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x79, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0x08, 0x03, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x03, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0xb7, 0x00, 0x00, 0xb4, 0xb7, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x7, state);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x70, 0x2, state);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x9c, 0x2, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_FLOAT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e61      ldr     x1, [x19, #-0x8]!
    // 10: f85f8260      ldur    x0, [x19, #-0x8]
    // 14: fd400800      ldr     d0, [x0, #0x10]
    // 18: fd400821      ldr     d1, [x1, #0x10]
    // 1c: 1e613800      fsub    d0, d0, d1
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __PyFloat_FromDouble_ConsumeInputs
    // 24: b40000a0      cbz     x0, 0x38 <ltmp0+0x38>
    // 28: f81f02a0      stur    x0, [x21, #-0x10]
    // 2c: aa1303f5      mov     x21, x19
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x61, 0x8e, 0x5f, 0xf8,
        0x60, 0x82, 0x5f, 0xf8, 0x00, 0x08, 0x40, 0xfd,
        0x21, 0x08, 0x40, 0xfd, 0x00, 0x38, 0x61, 0x1e,
        0x00, 0x00, 0x00, 0x94, 0xa0, 0x00, 0x00, 0xb4,
        0xa0, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x1, state);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e79      ldr     x25, [x19, #-0x8]!
    // 10: f85f8278      ldur    x24, [x19, #-0x8]
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1903e1      mov     x1, x25
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyLong_Subtract
    // 20: aa0003f7      mov     x23, x0
    // 24: f9400328      ldr     x8, [x25]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000328      str     x8, [x25]
    // 34: 54000220      b.eq    0x78 <ltmp0+0x78>
    // 38: f9400308      ldr     x8, [x24]
    // 3c: 37f80368      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000308      str     x8, [x24]
    // 48: 54000301      b.ne    0xa8 <ltmp0+0xa8>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1803e0      mov     x0, x24
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1803e0      mov     x0, x24
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // 74: 1400000d      b       0xa8 <ltmp0+0xa8>
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 80: f952fd28      ldr     x8, [x9, #0x25f8]
    // 84: b40000a8      cbz     x8, 0x98 <ltmp0+0x98>
    // 88: f9530122      ldr     x2, [x9, #0x2600]
    // 8c: aa1903e0      mov     x0, x25
    // 90: 52800021      mov     w1, #0x1                ; =1
    // 94: d63f0100      blr     x8
    // 98: aa1903e0      mov     x0, x25
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // a0: f9400308      ldr     x8, [x24]
    // a4: 36fffce8      tbz     w8, #0x1f, 0x40 <ltmp0+0x40>
    // a8: b40000b7      cbz     x23, 0xbc <ltmp0+0xbc>
    // ac: f81f02b7      stur    x23, [x21, #-0x10]
    // b0: aa1303f5      mov     x21, x19
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x79, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0x08, 0x03, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x03, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0xb7, 0x00, 0x00, 0xb4, 0xb7, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x8, state);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x70, 0x2, state);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x9c, 0x2, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SLICE.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // c: f85e82b3      ldur    x19, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __PyBuildSlice_ConsumeRefs
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b40002a0      cbz     x0, 0x74 <ltmp0+0x74>
    // 24: aa0003f8      mov     x24, x0
    // 28: d10042a8      sub     x8, x21, #0x10
    // 2c: f9002288      str     x8, [x20, #0x40]
    // 30: aa1303e0      mov     x0, x19
    // 34: aa1803e1      mov     x1, x24
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PyObject_GetItem
    // 3c: aa0003f7      mov     x23, x0
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400308      ldr     x8, [x24]
    // 4c: 37f800c8      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000308      str     x8, [x24]
    // 58: 54000061      b.ne    0x64 <ltmp0+0x64>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: 910042b5      add     x21, x21, #0x10
    // 68: f9400268      ldr     x8, [x19]
    // 6c: 36f800a8      tbz     w8, #0x1f, 0x80 <ltmp0+0x80>
    // 70: 14000007      b       0x8c <ltmp0+0x8c>
    // 74: d2800017      mov     x23, #0x0               ; =0
    // 78: f9400268      ldr     x8, [x19]
    // 7c: 37f80088      tbnz    w8, #0x1f, 0x8c <ltmp0+0x8c>
    // 80: f1000508      subs    x8, x8, #0x1
    // 84: f9000268      str     x8, [x19]
    // 88: 540000c0      b.eq    0xa0 <ltmp0+0xa0>
    // 8c: b4000117      cbz     x23, 0xac <ltmp0+0xac>
    // 90: f81e82b7      stur    x23, [x21, #-0x18]
    // 94: d10042b5      sub     x21, x21, #0x10
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a0: aa1303e0      mov     x0, x19
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: b5ffff57      cbnz    x23, 0x90 <ltmp0+0x90>
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // b4: 00 00 00 00
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa0, 0x06, 0x7f, 0xa9, 0xb3, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x02, 0x00, 0xb4, 0xf8, 0x03, 0x00, 0xaa,
        0xa8, 0x42, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb5, 0x42, 0x00, 0x91,
        0x68, 0x02, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x36,
        0x07, 0x00, 0x00, 0x14, 0x17, 0x00, 0x80, 0xd2,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0x54, 0x17, 0x01, 0x00, 0xb4,
        0xb7, 0x82, 0x1e, 0xf8, 0xb5, 0x42, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x57, 0xff, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0xa, state);
    patch_aarch64_trampoline(code + 0x38, 0x9, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1803e0      mov     x0, x24
    // 14: aa1303e1      mov     x1, x19
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PyObject_GetItem
    // 1c: aa0003f7      mov     x23, x0
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f9400308      ldr     x8, [x24]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000308      str     x8, [x24]
    // 38: 54000120      b.eq    0x5c <ltmp0+0x5c>
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80168      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 54000101      b.ne    0x6c <ltmp0+0x6c>
    // 50: aa1303e0      mov     x0, x19
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: 14000005      b       0x6c <ltmp0+0x6c>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: f9400268      ldr     x8, [x19]
    // 68: 36fffee8      tbz     w8, #0x1f, 0x44 <ltmp0+0x44>
    // 6c: b40000b7      cbz     x23, 0x80 <ltmp0+0x80>
    // 70: f81f02b7      stur    x23, [x21, #-0x10]
    // 74: d10022b5      sub     x21, x21, #0x8
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb7, 0x00, 0x00, 0xb4,
        0xb7, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x9, state);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x7c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_CHECK_FUNC.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 3942a528      ldrb    w8, [x9, #0xa9]
    // c: 36080208      tbz     w8, #0x1, 0x4c <ltmp0+0x4c>
    // 10: f941c928      ldr     x8, [x9, #0x390]
    // 14: b40001c8      cbz     x8, 0x4c <ltmp0+0x4c>
    // 18: b9439929      ldr     w9, [x9, #0x398]
    // 1c: b940910a      ldr     w10, [x8, #0x90]
    // 20: 6b09015f      cmp     w10, w9
    // 24: 54000141      b.ne    0x4c <ltmp0+0x4c>
    // 28: f9407ac9      ldr     x9, [x22, #0xf0]
    // 2c: b4000109      cbz     x9, 0x4c <ltmp0+0x4c>
    // 30: f9401908      ldr     x8, [x8, #0x30]
    // 34: b9804d08      ldrsw   x8, [x8, #0x4c]
    // 38: f9407eca      ldr     x10, [x22, #0xf8]
    // 3c: cb090149      sub     x9, x10, x9
    // 40: eb890d1f      cmp     x8, x9, asr #3
    // 44: 5400004a      b.ge    0x4c <ltmp0+0x4c>
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[80] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x28, 0xa5, 0x42, 0x39, 0x08, 0x02, 0x08, 0x36,
        0x28, 0xc9, 0x41, 0xf9, 0xc8, 0x01, 0x00, 0xb4,
        0x29, 0x99, 0x43, 0xb9, 0x0a, 0x91, 0x40, 0xb9,
        0x5f, 0x01, 0x09, 0x6b, 0x41, 0x01, 0x00, 0x54,
        0xc9, 0x7a, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xb4,
        0x08, 0x19, 0x40, 0xf9, 0x08, 0x4d, 0x80, 0xb9,
        0xca, 0x7e, 0x40, 0xf9, 0x49, 0x01, 0x09, 0xcb,
        0x1f, 0x0d, 0x89, 0xeb, 0x4a, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x4c, state->instruction_starts[instruction->jump_target]);
}

void
emit__BINARY_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_DICT.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85f02b7      ldur    x23, [x21, #-0x10]
    // 10: f94006e8      ldr     x8, [x23, #0x8]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000080      b.eq    0x30 <ltmp0+0x30>
    // 24: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 28: 910083ff      add     sp, sp, #0x20
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 30: f85f82b3      ldur    x19, [x21, #-0x8]
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 910023e2      add     x2, sp, #0x8
    // 3c: aa1703e0      mov     x0, x23
    // 40: aa1303e1      mov     x1, x19
    // 44: 94000000      bl      0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 _PyDict_GetItemRef
    // 48: aa0003f8      mov     x24, x0
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: 34000080      cbz     w0, 0x64 <ltmp0+0x64>
    // 58: f94002e8      ldr     x8, [x23]
    // 5c: 36f80128      tbz     w8, #0x1f, 0x80 <ltmp0+0x80>
    // 60: 1400000d      b       0x94 <ltmp0+0x94>
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: aa1303e0      mov     x0, x19
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __PyErr_SetKeyError
    // 70: f9402295      ldr     x21, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: f94002e8      ldr     x8, [x23]
    // 7c: 37f800c8      tbnz    w8, #0x1f, 0x94 <ltmp0+0x94>
    // 80: f1000508      subs    x8, x8, #0x1
    // 84: f90002e8      str     x8, [x23]
    // 88: 54000061      b.ne    0x94 <ltmp0+0x94>
    // 8c: aa1703e0      mov     x0, x23
    // 90: 94000000      bl      0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 94: f9400268      ldr     x8, [x19]
    // 98: 37f80088      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 9c: f1000508      subs    x8, x8, #0x1
    // a0: f9000268      str     x8, [x19]
    // a4: 54000120      b.eq    0xc8 <ltmp0+0xc8>
    // a8: 7100031f      cmp     w24, #0x0
    // ac: 5400016d      b.le    0xd8 <ltmp0+0xd8>
    // b0: f94007e8      ldr     x8, [sp, #0x8]
    // b4: f81f02a8      stur    x8, [x21, #-0x10]
    // b8: d10022b5      sub     x21, x21, #0x8
    // bc: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // c0: 910083ff      add     sp, sp, #0x20
    // c4: 14000000      b       0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c8: aa1303e0      mov     x0, x19
    // cc: 94000000      bl      0xcc <ltmp0+0xcc>
    // 00000000000000cc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d0: 7100031f      cmp     w24, #0x0
    // d4: 54fffeec      b.gt    0xb0 <ltmp0+0xb0>
    // d8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // dc: 910083ff      add     sp, sp, #0x20
    // e0: 14000000      b       0xe0 <ltmp0+0xe0>
    // 00000000000000e0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // e4: 00 00 00 00
    const unsigned char code_body[232] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb7, 0x02, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe2, 0x23, 0x00, 0x91, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0x34,
        0xe8, 0x02, 0x40, 0xf9, 0x28, 0x01, 0xf8, 0x36,
        0x0d, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x20, 0x01, 0x00, 0x54,
        0x1f, 0x03, 0x00, 0x71, 0x6d, 0x01, 0x00, 0x54,
        0xe8, 0x07, 0x40, 0xf9, 0xa8, 0x02, 0x1f, 0xf8,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x1f, 0x03, 0x00, 0x71, 0xec, 0xfe, 0xff, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x44, 0xc, state);
    patch_aarch64_trampoline(code + 0x6c, 0xb, state);
    patch_aarch64_trampoline(code + 0x90, 0x0, state);
    patch_aarch64_26r(code + 0xc4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xcc, 0x0, state);
    patch_aarch64_26r(code + 0xe0, state->instruction_starts[instruction->error_target]);
}

void
emit__BINARY_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_INIT_CALL.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 3cdf02a0      ldur    q0, [x21, #-0x10]
    // 4: 9e660008      fmov    x8, d0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f941c90a      ldr     x10, [x8, #0x390]
    // 10: b9400148      ldr     w8, [x10]
    // 14: 37f80068      tbnz    w8, #0x1f, 0x20 <ltmp0+0x20>
    // 18: 11000508      add     w8, w8, #0x1
    // 1c: b9000148      str     w8, [x10]
    // 20: f9401948      ldr     x8, [x10, #0x30]
    // 24: f9407ac9      ldr     x9, [x22, #0xf0]
    // 28: b9804d0b      ldrsw   x11, [x8, #0x4c]
    // 2c: 8b0b0d2b      add     x11, x9, x11, lsl #3
    // 30: f9007acb      str     x11, [x22, #0xf0]
    // 34: a900a934      stp     x20, x10, [x9, #0x8]
    // 38: b940010b      ldr     w11, [x8]
    // 3c: 37f8006b      tbnz    w11, #0x1f, 0x48 <ltmp0+0x48>
    // 40: 1100056b      add     w11, w11, #0x1
    // 44: b900010b      str     w11, [x8]
    // 48: f9000128      str     x8, [x9]
    // 4c: 3dc00541      ldr     q1, [x10, #0x10]
    // 50: 3c818121      stur    q1, [x9, #0x18]
    // 54: b980490a      ldrsw   x10, [x8, #0x48]
    // 58: 8b0a0d2b      add     x11, x9, x10, lsl #3
    // 5c: 9101416b      add     x11, x11, #0x50
    // 60: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 64: 9103410c      add     x12, x8, #0xd0
    // 68: a903ad2c      stp     x12, x11, [x9, #0x38]
    // 6c: b900493f      str     wzr, [x9, #0x48]
    // 70: 71000d5f      cmp     w10, #0x3
    // 74: 5400010b      b.lt    0x94 <ltmp0+0x94>
    // 78: 9101812a      add     x10, x9, #0x60
    // 7c: 5280004b      mov     w11, #0x2               ; =2
    // 80: f800855f      str     xzr, [x10], #0x8
    // 84: 9100056b      add     x11, x11, #0x1
    // 88: b980490c      ldrsw   x12, [x8, #0x48]
    // 8c: eb0c017f      cmp     x11, x12
    // 90: 54ffff8b      b.lt    0x80 <ltmp0+0x80>
    // 94: d10022a8      sub     x8, x21, #0x8
    // 98: 3d801520      str     q0, [x9, #0x50]
    // 9c: 5280004a      mov     w10, #0x2               ; =2
    // a0: 7900928a      strh    w10, [x20, #0x48]
    // a4: f81f02a9      stur    x9, [x21, #-0x10]
    // a8: aa0803f5      mov     x21, x8
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[176] = {
        0xa0, 0x02, 0xdf, 0x3c, 0x08, 0x00, 0x66, 0x9e,
        0x08, 0x05, 0x40, 0xf9, 0x0a, 0xc9, 0x41, 0xf9,
        0x48, 0x01, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x48, 0x01, 0x00, 0xb9,
        0x48, 0x19, 0x40, 0xf9, 0xc9, 0x7a, 0x40, 0xf9,
        0x0b, 0x4d, 0x80, 0xb9, 0x2b, 0x0d, 0x0b, 0x8b,
        0xcb, 0x7a, 0x00, 0xf9, 0x34, 0xa9, 0x00, 0xa9,
        0x0b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x0b, 0x01, 0x00, 0xb9,
        0x28, 0x01, 0x00, 0xf9, 0x41, 0x05, 0xc0, 0x3d,
        0x21, 0x81, 0x81, 0x3c, 0x0a, 0x49, 0x80, 0xb9,
        0x2b, 0x0d, 0x0a, 0x8b, 0x6b, 0x41, 0x01, 0x91,
        0x3f, 0xfd, 0x02, 0xa9, 0x0c, 0x41, 0x03, 0x91,
        0x2c, 0xad, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x5f, 0x0d, 0x00, 0x71, 0x0b, 0x01, 0x00, 0x54,
        0x2a, 0x81, 0x01, 0x91, 0x4b, 0x00, 0x80, 0x52,
        0x5f, 0x85, 0x00, 0xf8, 0x6b, 0x05, 0x00, 0x91,
        0x0c, 0x49, 0x80, 0xb9, 0x7f, 0x01, 0x0c, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0xa8, 0x22, 0x00, 0xd1,
        0x20, 0x15, 0x80, 0x3d, 0x4a, 0x00, 0x80, 0x52,
        0x8a, 0x92, 0x00, 0x79, 0xa9, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
}

void
emit__BINARY_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_LIST_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 8: f9400708      ldr     x8, [x24, #0x8]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 54000601      b.ne    0xd8 <ltmp0+0xd8>
    // 1c: f85f8277      ldur    x23, [x19, #-0x8]
    // 20: f94006e8      ldr     x8, [x23, #0x8]
    // 24: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyList_Type
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyList_Type
    // 2c: eb09011f      cmp     x8, x9
    // 30: 54000541      b.ne    0xd8 <ltmp0+0xd8>
    // 34: f9400b08      ldr     x8, [x24, #0x10]
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 540004e2      b.hs    0xd8 <ltmp0+0xd8>
    // 40: b9401b08      ldr     w8, [x24, #0x18]
    // 44: f9400ae9      ldr     x9, [x23, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400046d      b.le    0xd8 <ltmp0+0xd8>
    // 50: f9400ee9      ldr     x9, [x23, #0x18]
    // 54: f8687939      ldr     x25, [x9, x8, lsl #3]
    // 58: b9400328      ldr     w8, [x25]
    // 5c: 37f80068      tbnz    w8, #0x1f, 0x68 <ltmp0+0x68>
    // 60: 11000508      add     w8, w8, #0x1
    // 64: b9000328      str     w8, [x25]
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: f9400308      ldr     x8, [x24]
    // 74: 37f801c8      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 78: f1000508      subs    x8, x8, #0x1
    // 7c: f9000308      str     x8, [x24]
    // 80: 54000161      b.ne    0xac <ltmp0+0xac>
    // 84: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8c: f952fd28      ldr     x8, [x9, #0x25f8]
    // 90: b40000a8      cbz     x8, 0xa4 <ltmp0+0xa4>
    // 94: f9530122      ldr     x2, [x9, #0x2600]
    // 98: aa1803e0      mov     x0, x24
    // 9c: 52800021      mov     w1, #0x1                ; =1
    // a0: d63f0100      blr     x8
    // a4: aa1803e0      mov     x0, x24
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // ac: f94002e8      ldr     x8, [x23]
    // b0: 37f800c8      tbnz    w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f90002e8      str     x8, [x23]
    // bc: 54000061      b.ne    0xc8 <ltmp0+0xc8>
    // c0: aa1703e0      mov     x0, x23
    // c4: 94000000      bl      0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c8: f81f02b9      stur    x25, [x21, #-0x10]
    // cc: aa1303f5      mov     x21, x19
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // d8: 14000000      b       0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x07, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x01, 0x06, 0x00, 0x54, 0x77, 0x82, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x41, 0x05, 0x00, 0x54, 0x08, 0x0b, 0x40, 0xf9,
        0x1f, 0x25, 0x00, 0xf1, 0xe2, 0x04, 0x00, 0x54,
        0x08, 0x1b, 0x40, 0xb9, 0xe9, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x6d, 0x04, 0x00, 0x54,
        0xe9, 0x0e, 0x40, 0xf9, 0x39, 0x79, 0x68, 0xf8,
        0x28, 0x03, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x03, 0x00, 0xb9,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xb9, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    // 8: &PyList_Type+0x0
    // 10: &PyLong_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa8, 0x2, state);
    patch_aarch64_trampoline(code + 0xc4, 0x0, state);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->jump_target]);
}

void
emit__BINARY_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_STR_INT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 8: f9400708      ldr     x8, [x24, #0x8]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540006a1      b.ne    0xec <ltmp0+0xec>
    // 1c: f85f8277      ldur    x23, [x19, #-0x8]
    // 20: f94006e8      ldr     x8, [x23, #0x8]
    // 24: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyUnicode_Type
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyUnicode_Type
    // 2c: eb09011f      cmp     x8, x9
    // 30: 540005e1      b.ne    0xec <ltmp0+0xec>
    // 34: f9400b08      ldr     x8, [x24, #0x10]
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 54000582      b.hs    0xec <ltmp0+0xec>
    // 40: b9401b08      ldr     w8, [x24, #0x18]
    // 44: f9400ae9      ldr     x9, [x23, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400050d      b.le    0xec <ltmp0+0xec>
    // 50: b94022e9      ldr     w9, [x23, #0x20]
    // 54: 5302112a      ubfx    w10, w9, #2, #3
    // 58: 7100095f      cmp     w10, #0x2
    // 5c: 540000e0      b.eq    0x78 <ltmp0+0x78>
    // 60: 7100055f      cmp     w10, #0x1
    // 64: 54000121      b.ne    0x88 <ltmp0+0x88>
    // 68: 37280169      tbnz    w9, #0x5, 0x94 <ltmp0+0x94>
    // 6c: f9401ee9      ldr     x9, [x23, #0x38]
    // 70: 38686939      ldrb    w25, [x9, x8]
    // 74: 1400001c      b       0xe4 <ltmp0+0xe4>
    // 78: 372801c9      tbnz    w9, #0x5, 0xb0 <ltmp0+0xb0>
    // 7c: f9401ee9      ldr     x9, [x23, #0x38]
    // 80: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // 84: 14000018      b       0xe4 <ltmp0+0xe4>
    // 88: 37280229      tbnz    w9, #0x5, 0xcc <ltmp0+0xcc>
    // 8c: f9401ee9      ldr     x9, [x23, #0x38]
    // 90: 14000014      b       0xe0 <ltmp0+0xe0>
    // 94: 721a013f      tst     w9, #0x40
    // 98: 52800509      mov     w9, #0x28               ; =40
    // 9c: 5280070a      mov     w10, #0x38              ; =56
    // a0: 9a890149      csel    x9, x10, x9, eq
    // a4: 8b0902e9      add     x9, x23, x9
    // a8: 38686939      ldrb    w25, [x9, x8]
    // ac: 1400000e      b       0xe4 <ltmp0+0xe4>
    // b0: 721a013f      tst     w9, #0x40
    // b4: 52800509      mov     w9, #0x28               ; =40
    // b8: 5280070a      mov     w10, #0x38              ; =56
    // bc: 9a890149      csel    x9, x10, x9, eq
    // c0: 8b0902e9      add     x9, x23, x9
    // c4: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // c8: 14000007      b       0xe4 <ltmp0+0xe4>
    // cc: 721a013f      tst     w9, #0x40
    // d0: 52800509      mov     w9, #0x28               ; =40
    // d4: 5280070a      mov     w10, #0x38              ; =56
    // d8: 9a890149      csel    x9, x10, x9, eq
    // dc: 8b0902e9      add     x9, x23, x9
    // e0: b8687939      ldr     w25, [x9, x8, lsl #2]
    // e4: 7102033f      cmp     w25, #0x80
    // e8: 54000043      b.lo    0xf0 <ltmp0+0xf0>
    // ec: 14000000      b       0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // f0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // f4: 910003fd      mov     x29, sp
    // f8: f9400308      ldr     x8, [x24]
    // fc: 9000001a      adrp    x26, 0x0 <ltmp0>
    // 00000000000000fc:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 100: f940035a      ldr     x26, [x26]
    // 0000000000000100:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 104: 37f80188      tbnz    w8, #0x1f, 0x134 <ltmp0+0x134>
    // 108: f1000508      subs    x8, x8, #0x1
    // 10c: f9000308      str     x8, [x24]
    // 110: 54000121      b.ne    0x134 <ltmp0+0x134>
    // 114: f952ff48      ldr     x8, [x26, #0x25f8]
    // 118: b40000a8      cbz     x8, 0x12c <ltmp0+0x12c>
    // 11c: f9530342      ldr     x2, [x26, #0x2600]
    // 120: aa1803e0      mov     x0, x24
    // 124: 52800021      mov     w1, #0x1                ; =1
    // 128: d63f0100      blr     x8
    // 12c: aa1803e0      mov     x0, x24
    // 130: 94000000      bl      0x130 <ltmp0+0x130>
    // 0000000000000130:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // 134: f94002e8      ldr     x8, [x23]
    // 138: 37f800c8      tbnz    w8, #0x1f, 0x150 <ltmp0+0x150>
    // 13c: f1000508      subs    x8, x8, #0x1
    // 140: f90002e8      str     x8, [x23]
    // 144: 54000061      b.ne    0x150 <ltmp0+0x150>
    // 148: aa1703e0      mov     x0, x23
    // 14c: 94000000      bl      0x14c <ltmp0+0x14c>
    // 000000000000014c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 150: 52800608      mov     w8, #0x30               ; =48
    // 154: 9ba86b28      umaddl  x8, w25, w8, x26
    // 158: 91404908      add     x8, x8, #0x12, lsl #12  ; =0x12000
    // 15c: 9102c108      add     x8, x8, #0xb0
    // 160: f81f02a8      stur    x8, [x21, #-0x10]
    // 164: aa1303f5      mov     x21, x19
    // 168: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 16c: 14000000      b       0x16c <ltmp0+0x16c>
    // 000000000000016c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[368] = {
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x07, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa1, 0x06, 0x00, 0x54, 0x77, 0x82, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xe1, 0x05, 0x00, 0x54, 0x08, 0x0b, 0x40, 0xf9,
        0x1f, 0x25, 0x00, 0xf1, 0x82, 0x05, 0x00, 0x54,
        0x08, 0x1b, 0x40, 0xb9, 0xe9, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x0d, 0x05, 0x00, 0x54,
        0xe9, 0x22, 0x40, 0xb9, 0x2a, 0x11, 0x02, 0x53,
        0x5f, 0x09, 0x00, 0x71, 0xe0, 0x00, 0x00, 0x54,
        0x5f, 0x05, 0x00, 0x71, 0x21, 0x01, 0x00, 0x54,
        0x69, 0x01, 0x28, 0x37, 0xe9, 0x1e, 0x40, 0xf9,
        0x39, 0x69, 0x68, 0x38, 0x1c, 0x00, 0x00, 0x14,
        0xc9, 0x01, 0x28, 0x37, 0xe9, 0x1e, 0x40, 0xf9,
        0x39, 0x79, 0x68, 0x78, 0x18, 0x00, 0x00, 0x14,
        0x29, 0x02, 0x28, 0x37, 0xe9, 0x1e, 0x40, 0xf9,
        0x14, 0x00, 0x00, 0x14, 0x3f, 0x01, 0x1a, 0x72,
        0x09, 0x05, 0x80, 0x52, 0x0a, 0x07, 0x80, 0x52,
        0x49, 0x01, 0x89, 0x9a, 0xe9, 0x02, 0x09, 0x8b,
        0x39, 0x69, 0x68, 0x38, 0x0e, 0x00, 0x00, 0x14,
        0x3f, 0x01, 0x1a, 0x72, 0x09, 0x05, 0x80, 0x52,
        0x0a, 0x07, 0x80, 0x52, 0x49, 0x01, 0x89, 0x9a,
        0xe9, 0x02, 0x09, 0x8b, 0x39, 0x79, 0x68, 0x78,
        0x07, 0x00, 0x00, 0x14, 0x3f, 0x01, 0x1a, 0x72,
        0x09, 0x05, 0x80, 0x52, 0x0a, 0x07, 0x80, 0x52,
        0x49, 0x01, 0x89, 0x9a, 0xe9, 0x02, 0x09, 0x8b,
        0x39, 0x79, 0x68, 0xb8, 0x3f, 0x03, 0x02, 0x71,
        0x43, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x03, 0x40, 0xf9, 0x1a, 0x00, 0x00, 0x90,
        0x5a, 0x03, 0x40, 0xf9, 0x88, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x21, 0x01, 0x00, 0x54, 0x48, 0xff, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x42, 0x03, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x06, 0x80, 0x52, 0x28, 0x6b, 0xa8, 0x9b,
        0x08, 0x49, 0x40, 0x91, 0x08, 0xc1, 0x02, 0x91,
        0xa8, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: &PyUnicode_Type+0x0
    // 10: &PyLong_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x10, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0xec, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x130, 0x2, state);
    patch_aarch64_trampoline(code + 0x14c, 0x0, state);
    patch_aarch64_26r(code + 0x16c, (uintptr_t)code + sizeof(code_body));
}

void
emit__BINARY_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_TUPLE_INT.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8e78      ldr     x24, [x19, #-0x8]!
    // 8: f9400708      ldr     x8, [x24, #0x8]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 54000601      b.ne    0xd8 <ltmp0+0xd8>
    // 1c: f85f8277      ldur    x23, [x19, #-0x8]
    // 20: f94006e8      ldr     x8, [x23, #0x8]
    // 24: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTuple_Type
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTuple_Type
    // 2c: eb09011f      cmp     x8, x9
    // 30: 54000541      b.ne    0xd8 <ltmp0+0xd8>
    // 34: f9400b08      ldr     x8, [x24, #0x10]
    // 38: f100251f      cmp     x8, #0x9
    // 3c: 540004e2      b.hs    0xd8 <ltmp0+0xd8>
    // 40: b9401b08      ldr     w8, [x24, #0x18]
    // 44: f9400ae9      ldr     x9, [x23, #0x10]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400046d      b.le    0xd8 <ltmp0+0xd8>
    // 50: 8b080ee8      add     x8, x23, x8, lsl #3
    // 54: f9400d19      ldr     x25, [x8, #0x18]
    // 58: b9400328      ldr     w8, [x25]
    // 5c: 37f80068      tbnz    w8, #0x1f, 0x68 <ltmp0+0x68>
    // 60: 11000508      add     w8, w8, #0x1
    // 64: b9000328      str     w8, [x25]
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: f9400308      ldr     x8, [x24]
    // 74: 37f801c8      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 78: f1000508      subs    x8, x8, #0x1
    // 7c: f9000308      str     x8, [x24]
    // 80: 54000161      b.ne    0xac <ltmp0+0xac>
    // 84: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8c: f952fd28      ldr     x8, [x9, #0x25f8]
    // 90: b40000a8      cbz     x8, 0xa4 <ltmp0+0xa4>
    // 94: f9530122      ldr     x2, [x9, #0x2600]
    // 98: aa1803e0      mov     x0, x24
    // 9c: 52800021      mov     w1, #0x1                ; =1
    // a0: d63f0100      blr     x8
    // a4: aa1803e0      mov     x0, x24
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // ac: f94002e8      ldr     x8, [x23]
    // b0: 37f800c8      tbnz    w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f90002e8      str     x8, [x23]
    // bc: 54000061      b.ne    0xc8 <ltmp0+0xc8>
    // c0: aa1703e0      mov     x0, x23
    // c4: 94000000      bl      0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c8: f81f02b9      stur    x25, [x21, #-0x10]
    // cc: aa1303f5      mov     x21, x19
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // d8: 14000000      b       0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0xf3, 0x03, 0x15, 0xaa, 0x78, 0x8e, 0x5f, 0xf8,
        0x08, 0x07, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x01, 0x06, 0x00, 0x54, 0x77, 0x82, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x41, 0x05, 0x00, 0x54, 0x08, 0x0b, 0x40, 0xf9,
        0x1f, 0x25, 0x00, 0xf1, 0xe2, 0x04, 0x00, 0x54,
        0x08, 0x1b, 0x40, 0xb9, 0xe9, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x6d, 0x04, 0x00, 0x54,
        0xe8, 0x0e, 0x08, 0x8b, 0x19, 0x0d, 0x40, 0xf9,
        0x28, 0x03, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x03, 0x00, 0xb9,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xb9, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    // 8: &PyTuple_Type+0x0
    // 10: &PyLong_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa8, 0x2, state);
    patch_aarch64_trampoline(code + 0xc4, 0x0, state);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->jump_target]);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_LIST.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: cb282eb3      sub     x19, x21, w8, uxth #3
    // 14: 92403d01      and     x1, x8, #0xffff
    // 18: aa1303e0      mov     x0, x19
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyList_FromStackRefSteal
    // 20: b4000120      cbz     x0, 0x44 <ltmp0+0x44>
    // 24: f9000260      str     x0, [x19]
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 30: 52800029      mov     w9, #0x1                ; =1
    // 34: cb282128      sub     x8, x9, w8, uxth
    // 38: 8b080eb5      add     x21, x21, x8, lsl #3
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x2e, 0x28, 0xcb, 0x01, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x20, 0x01, 0x00, 0xb4, 0x60, 0x02, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x52, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x1c, 0xd, state);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_MAP.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f7      mov     x23, x21
    // c: d280001a      mov     x26, #0x0               ; =0
    // 10: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 12003d1b      and     w27, w8, #0xffff
    // 1c: 92403d18      and     x24, x8, #0xffff
    // 20: cb282759      sub     x25, x26, w8, uxth #1
    // 24: cb2832a0      sub     x0, x21, w8, uxth #4
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 91002002      add     x2, x0, #0x8
    // 30: 52800041      mov     w1, #0x2                ; =2
    // 34: 52800043      mov     w3, #0x2                ; =2
    // 38: aa1803e4      mov     x4, x24
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __PyDict_FromItems
    // 40: aa0003f3      mov     x19, x0
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 3400027b      cbz     w27, 0x98 <ltmp0+0x98>
    // 50: 52800028      mov     w8, #0x1                ; =1
    // 54: aa18051a      orr     x26, x8, x24, lsl #1
    // 58: d37cef08      lsl     x8, x24, #4
    // 5c: 8b190d08      add     x8, x8, x25, lsl #3
    // 60: 8b170108      add     x8, x8, x23
    // 64: d1002117      sub     x23, x8, #0x8
    // 68: 14000004      b       0x78 <ltmp0+0x78>
    // 6c: d100075a      sub     x26, x26, #0x1
    // 70: f100075f      cmp     x26, #0x1
    // 74: 54000129      b.ls    0x98 <ltmp0+0x98>
    // 78: f85f86e0      ldr     x0, [x23], #-0x8
    // 7c: f9400008      ldr     x8, [x0]
    // 80: 37ffff68      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 84: f1000508      subs    x8, x8, #0x1
    // 88: f9000008      str     x8, [x0]
    // 8c: 54ffff01      b.ne    0x6c <ltmp0+0x6c>
    // 90: 94000000      bl      0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 94: 17fffff6      b       0x6c <ltmp0+0x6c>
    // 98: b4000133      cbz     x19, 0xbc <ltmp0+0xbc>
    // 9c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000009c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // a4: f8397ab3      str     x19, [x21, x25, lsl #3]
    // a8: 52800029      mov     w9, #0x1                ; =1
    // ac: cb282528      sub     x8, x9, w8, uxth #1
    // b0: 8b080eb5      add     x21, x21, x8, lsl #3
    // b4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf7, 0x03, 0x15, 0xaa, 0x1a, 0x00, 0x80, 0xd2,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1b, 0x3d, 0x00, 0x12, 0x18, 0x3d, 0x40, 0x92,
        0x59, 0x27, 0x28, 0xcb, 0xa0, 0x32, 0x28, 0xcb,
        0x95, 0x22, 0x00, 0xf9, 0x02, 0x20, 0x00, 0x91,
        0x41, 0x00, 0x80, 0x52, 0x43, 0x00, 0x80, 0x52,
        0xe4, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf3, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x7b, 0x02, 0x00, 0x34,
        0x28, 0x00, 0x80, 0x52, 0x1a, 0x05, 0x18, 0xaa,
        0x08, 0xef, 0x7c, 0xd3, 0x08, 0x0d, 0x19, 0x8b,
        0x08, 0x01, 0x17, 0x8b, 0x17, 0x21, 0x00, 0xd1,
        0x04, 0x00, 0x00, 0x14, 0x5a, 0x07, 0x00, 0xd1,
        0x5f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0xe0, 0x86, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x01, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf6, 0xff, 0xff, 0x17,
        0x33, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x7a, 0x39, 0xf8,
        0x29, 0x00, 0x80, 0x52, 0x28, 0x25, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x3c, 0xe, state);
    patch_aarch64_trampoline(code + 0x90, 0x0, state);
    patch_aarch64_33rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SET.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f7      mov     x23, x21
    // c: d2800018      mov     x24, #0x0               ; =0
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: d2800000      mov     x0, #0x0                ; =0
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PySet_New
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000660      cbz     x0, 0xf0 <ltmp0+0xf0>
    // 28: aa0003f3      mov     x19, x0
    // 2c: 90000019      adrp    x25, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 30: f9400339      ldr     x25, [x25]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 34: cb39231a      sub     x26, x24, w25, uxth
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 40: 72003d1f      tst     w8, #0xffff
    // 44: 54000480      b.eq    0xd4 <ltmp0+0xd4>
    // 48: 52800018      mov     w24, #0x0               ; =0
    // 4c: aa1a03fb      mov     x27, x26
    // 50: 14000003      b       0x5c <ltmp0+0x5c>
    // 54: b100077b      adds    x27, x27, #0x1
    // 58: 540002a2      b.hs    0xac <ltmp0+0xac>
    // 5c: 340000b8      cbz     w24, 0x70 <ltmp0+0x70>
    // 60: f87b7ae0      ldr     x0, [x23, x27, lsl #3]
    // 64: f9400008      ldr     x8, [x0]
    // 68: 37ffff68      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 6c: 1400000b      b       0x98 <ltmp0+0x98>
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: f87b7ae1      ldr     x1, [x23, x27, lsl #3]
    // 78: aa1303e0      mov     x0, x19
    // 7c: 94000000      bl      0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 _PySet_Add
    // 80: aa0003f8      mov     x24, x0
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: f87b7ae0      ldr     x0, [x23, x27, lsl #3]
    // 90: f9400008      ldr     x8, [x0]
    // 94: 37fffe08      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 98: f1000508      subs    x8, x8, #0x1
    // 9c: f9000008      str     x8, [x0]
    // a0: 54fffda1      b.ne    0x54 <ltmp0+0x54>
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: 17ffffeb      b       0x54 <ltmp0+0x54>
    // ac: 34000158      cbz     w24, 0xd4 <ltmp0+0xd4>
    // b0: f9400268      ldr     x8, [x19]
    // b4: 37f80448      tbnz    w8, #0x1f, 0x13c <ltmp0+0x13c>
    // b8: f1000508      subs    x8, x8, #0x1
    // bc: f9000268      str     x8, [x19]
    // c0: 540003e1      b.ne    0x13c <ltmp0+0x13c>
    // c4: aa1303e0      mov     x0, x19
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // d4: 12003f28      and     w8, w25, #0xffff
    // d8: f83a7ab3      str     x19, [x21, x26, lsl #3]
    // dc: 52800029      mov     w9, #0x1                ; =1
    // e0: 4b080128      sub     w8, w9, w8
    // e4: 8b28ceb5      add     x21, x21, w8, sxtw #3
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // f0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000f0:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // f8: 72003d1f      tst     w8, #0xffff
    // fc: 54000200      b.eq    0x13c <ltmp0+0x13c>
    // 100: 92403d08      and     x8, x8, #0xffff
    // 104: 91000513      add     x19, x8, #0x1
    // 108: d10022f7      sub     x23, x23, #0x8
    // 10c: 14000004      b       0x11c <ltmp0+0x11c>
    // 110: d1000673      sub     x19, x19, #0x1
    // 114: f100067f      cmp     x19, #0x1
    // 118: 54000129      b.ls    0x13c <ltmp0+0x13c>
    // 11c: f85f86e0      ldr     x0, [x23], #-0x8
    // 120: f9400008      ldr     x8, [x0]
    // 124: 37ffff68      tbnz    w8, #0x1f, 0x110 <ltmp0+0x110>
    // 128: f1000508      subs    x8, x8, #0x1
    // 12c: f9000008      str     x8, [x0]
    // 130: 54ffff01      b.ne    0x110 <ltmp0+0x110>
    // 134: 94000000      bl      0x134 <ltmp0+0x134>
    // 0000000000000134:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 138: 17fffff6      b       0x110 <ltmp0+0x110>
    // 13c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 140: 14000000      b       0x140 <ltmp0+0x140>
    // 0000000000000140:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 144: 00 00 00 00
    const unsigned char code_body[328] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf7, 0x03, 0x15, 0xaa, 0x18, 0x00, 0x80, 0xd2,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x80, 0xd2,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x06, 0x00, 0xb4,
        0xf3, 0x03, 0x00, 0xaa, 0x19, 0x00, 0x00, 0x90,
        0x39, 0x03, 0x40, 0xf9, 0x1a, 0x23, 0x39, 0xcb,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x80, 0x04, 0x00, 0x54,
        0x18, 0x00, 0x80, 0x52, 0xfb, 0x03, 0x1a, 0xaa,
        0x03, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xb1,
        0xa2, 0x02, 0x00, 0x54, 0xb8, 0x00, 0x00, 0x34,
        0xe0, 0x7a, 0x7b, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x68, 0xff, 0xff, 0x37, 0x0b, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x7a, 0x7b, 0xf8,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0x7a, 0x7b, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x08, 0xfe, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa1, 0xfd, 0xff, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xeb, 0xff, 0xff, 0x17, 0x58, 0x01, 0x00, 0x34,
        0x68, 0x02, 0x40, 0xf9, 0x48, 0x04, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xe1, 0x03, 0x00, 0x54, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x28, 0x3f, 0x00, 0x12,
        0xb3, 0x7a, 0x3a, 0xf8, 0x29, 0x00, 0x80, 0x52,
        0x28, 0x01, 0x08, 0x4b, 0xb5, 0xce, 0x28, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x00, 0x02, 0x00, 0x54,
        0x08, 0x3d, 0x40, 0x92, 0x13, 0x05, 0x00, 0x91,
        0xf7, 0x22, 0x00, 0xd1, 0x04, 0x00, 0x00, 0x14,
        0x73, 0x06, 0x00, 0xd1, 0x7f, 0x06, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0xe0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x01, 0xff, 0xff, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xf6, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x10, state);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x7c, 0xf, state);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x134, 0x0, state);
    patch_aarch64_26r(code + 0x140, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SLICE.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 71000d1f      cmp     w8, #0x3
    // 10: 54000081      b.ne    0x20 <ltmp0+0x20>
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 9280005b      mov     x27, #-0x3              ; =-3
    // 1c: 14000003      b       0x28 <ltmp0+0x28>
    // 20: d2800013      mov     x19, #0x0               ; =0
    // 24: 9280003b      mov     x27, #-0x2              ; =-2
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 38: 12003d08      and     w8, w8, #0xffff
    // 3c: 71000d1f      cmp     w8, #0x3
    // 40: 1a9f17e8      cset    w8, eq
    // 44: aa2803e8      mvn     x8, x8
    // 48: 8b080eb7      add     x23, x21, x8, lsl #3
    // 4c: f94002f9      ldr     x25, [x23]
    // 50: f87b7aba      ldr     x26, [x21, x27, lsl #3]
    // 54: aa1a03e0      mov     x0, x26
    // 58: aa1903e1      mov     x1, x25
    // 5c: aa1303e2      mov     x2, x19
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 _PySlice_New
    // 64: aa0003f8      mov     x24, x0
    // 68: f9400348      ldr     x8, [x26]
    // 6c: 37f80088      tbnz    w8, #0x1f, 0x7c <ltmp0+0x7c>
    // 70: f1000508      subs    x8, x8, #0x1
    // 74: f9000348      str     x8, [x26]
    // 78: 54000120      b.eq    0x9c <ltmp0+0x9c>
    // 7c: f9400328      ldr     x8, [x25]
    // 80: 37f80168      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 84: f1000508      subs    x8, x8, #0x1
    // 88: f9000328      str     x8, [x25]
    // 8c: 54000101      b.ne    0xac <ltmp0+0xac>
    // 90: aa1903e0      mov     x0, x25
    // 94: 94000000      bl      0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 98: 14000005      b       0xac <ltmp0+0xac>
    // 9c: aa1a03e0      mov     x0, x26
    // a0: 94000000      bl      0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a4: f9400328      ldr     x8, [x25]
    // a8: 36fffee8      tbz     w8, #0x1f, 0x84 <ltmp0+0x84>
    // ac: b40000d3      cbz     x19, 0xc4 <ltmp0+0xc4>
    // b0: f9400268      ldr     x8, [x19]
    // b4: 37f80088      tbnz    w8, #0x1f, 0xc4 <ltmp0+0xc4>
    // b8: f1000508      subs    x8, x8, #0x1
    // bc: f9000268      str     x8, [x19]
    // c0: 540000c0      b.eq    0xd8 <ltmp0+0xd8>
    // c4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c8: b4000118      cbz     x24, 0xe8 <ltmp0+0xe8>
    // cc: f83b7ab8      str     x24, [x21, x27, lsl #3]
    // d0: aa1703f5      mov     x21, x23
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // d8: aa1303e0      mov     x0, x19
    // dc: 94000000      bl      0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: b5ffff58      cbnz    x24, 0xcc <ltmp0+0xcc>
    // e8: 14000000      b       0xe8 <ltmp0+0xe8>
    // 00000000000000e8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x1f, 0x0d, 0x00, 0x71,
        0x81, 0x00, 0x00, 0x54, 0xb3, 0x82, 0x5f, 0xf8,
        0x5b, 0x00, 0x80, 0x92, 0x03, 0x00, 0x00, 0x14,
        0x13, 0x00, 0x80, 0xd2, 0x3b, 0x00, 0x80, 0x92,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x1f, 0x0d, 0x00, 0x71,
        0xe8, 0x17, 0x9f, 0x1a, 0xe8, 0x03, 0x28, 0xaa,
        0xb7, 0x0e, 0x08, 0x8b, 0xf9, 0x02, 0x40, 0xf9,
        0xba, 0x7a, 0x7b, 0xf8, 0xe0, 0x03, 0x1a, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf8, 0x03, 0x00, 0xaa,
        0x48, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x48, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x28, 0x03, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x1a, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x28, 0x03, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xd3, 0x00, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x18, 0x01, 0x00, 0xb4, 0xb8, 0x7a, 0x3b, 0xf8,
        0xf5, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x58, 0xff, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x60, 0x11, state);
    patch_aarch64_trampoline(code + 0x94, 0x0, state);
    patch_aarch64_trampoline(code + 0xa0, 0x0, state);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xdc, 0x0, state);
    patch_aarch64_26r(code + 0xe8, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_STRING.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d19      and     w25, w8, #0xffff
    // 14: 92403d18      and     x24, x8, #0xffff
    // 18: cb282eb3      sub     x19, x21, w8, uxth #3
    // 1c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 24: 5290f309      mov     w9, #0x8798             ; =34712
    // 28: 8b090100      add     x0, x8, x9
    // 2c: aa1303e1      mov     x1, x19
    // 30: aa1803e2      mov     x2, x24
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __PyUnicode_JoinArray
    // 38: aa0003f7      mov     x23, x0
    // 3c: 340001f9      cbz     w25, 0x78 <ltmp0+0x78>
    // 40: 91000718      add     x24, x24, #0x1
    // 44: d10022b9      sub     x25, x21, #0x8
    // 48: 14000004      b       0x58 <ltmp0+0x58>
    // 4c: d1000718      sub     x24, x24, #0x1
    // 50: f100071f      cmp     x24, #0x1
    // 54: 54000129      b.ls    0x78 <ltmp0+0x78>
    // 58: f85f8720      ldr     x0, [x25], #-0x8
    // 5c: f9400008      ldr     x8, [x0]
    // 60: 37ffff68      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 64: f1000508      subs    x8, x8, #0x1
    // 68: f9000008      str     x8, [x0]
    // 6c: 54ffff01      b.ne    0x4c <ltmp0+0x4c>
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: 17fffff6      b       0x4c <ltmp0+0x4c>
    // 78: b4000137      cbz     x23, 0x9c <ltmp0+0x9c>
    // 7c: f9000277      str     x23, [x19]
    // 80: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 88: 52800029      mov     w9, #0x1                ; =1
    // 8c: cb282128      sub     x8, x9, w8, uxth
    // 90: 8b080eb5      add     x21, x21, x8, lsl #3
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // a4: 00 00 00 00
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x19, 0x3d, 0x00, 0x12, 0x18, 0x3d, 0x40, 0x92,
        0xb3, 0x2e, 0x28, 0xcb, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0xf3, 0x90, 0x52,
        0x00, 0x01, 0x09, 0x8b, 0xe1, 0x03, 0x13, 0xaa,
        0xe2, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0xf9, 0x01, 0x00, 0x34,
        0x18, 0x07, 0x00, 0x91, 0xb9, 0x22, 0x00, 0xd1,
        0x04, 0x00, 0x00, 0x14, 0x18, 0x07, 0x00, 0xd1,
        0x1f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0x20, 0x87, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x01, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf6, 0xff, 0xff, 0x17,
        0x37, 0x01, 0x00, 0xb4, 0x77, 0x02, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x52, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x34, 0x12, state);
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa0, state->instruction_starts[instruction->error_target]);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_TUPLE.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: cb282eb3      sub     x19, x21, w8, uxth #3
    // 14: 92403d01      and     x1, x8, #0xffff
    // 18: aa1303e0      mov     x0, x19
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyTuple_FromStackRefSteal
    // 20: b4000120      cbz     x0, 0x44 <ltmp0+0x44>
    // 24: f9000260      str     x0, [x19]
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 30: 52800029      mov     w9, #0x1                ; =1
    // 34: cb282128      sub     x8, x9, w8, uxth
    // 38: 8b080eb5      add     x21, x21, x8, lsl #3
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x2e, 0x28, 0xcb, 0x01, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x20, 0x01, 0x00, 0xb4, 0x60, 0x02, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x52, 0x28, 0x21, 0x28, 0xcb,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x1c, 0x13, state);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_CLASS.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d09      and     w9, w8, #0xffff
    // 14: 2a2903fa      mvn     w26, w9
    // 18: 1280002a      mov     w10, #-0x2              ; =-2
    // 1c: 4b09015b      sub     w27, w10, w9
    // 20: f87bdaa0      ldr     x0, [x21, w27, sxtw #3]
    // 24: f87adaaa      ldr     x10, [x21, w26, sxtw #3]
    // 28: 928000eb      mov     x11, #-0x8              ; =-8
    // 2c: f100015f      cmp     x10, #0x0
    // 30: 9a9f116a      csel    x10, x11, xzr, ne
    // 34: 1a890538      cinc    w24, w9, ne
    // 38: f9400409      ldr     x9, [x0, #0x8]
    // 3c: 3942ad29      ldrb    w9, [x9, #0xab]
    // 40: 36380489      tbz     w9, #0x7, 0xd0 <ltmp0+0xd0>
    // 44: f940c809      ldr     x9, [x0, #0x190]
    // 48: b4000449      cbz     x9, 0xd0 <ltmp0+0xd0>
    // 4c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 50: 8b0a0119      add     x25, x8, x10
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: aa1903e1      mov     x1, x25
    // 5c: aa1803e2      mov     x2, x24
    // 60: d2800003      mov     x3, #0x0                ; =0
    // 64: d63f0120      blr     x9
    // 68: aa0003f7      mov     x23, x0
    // 6c: f9402293      ldr     x19, [x20, #0x40]
    // 70: f900229f      str     xzr, [x20, #0x40]
    // 74: 350001f8      cbnz    w24, 0xb0 <ltmp0+0xb0>
    // 78: f87bdaa0      ldr     x0, [x21, w27, sxtw #3]
    // 7c: f9400008      ldr     x8, [x0]
    // 80: 37f80088      tbnz    w8, #0x1f, 0x90 <ltmp0+0x90>
    // 84: f1000508      subs    x8, x8, #0x1
    // 88: f9000008      str     x8, [x0]
    // 8c: 54000260      b.eq    0xd8 <ltmp0+0xd8>
    // 90: b4000297      cbz     x23, 0xe0 <ltmp0+0xe0>
    // 94: 93407f48      sxtw    x8, w26
    // 98: f83bda77      str     x23, [x19, w27, sxtw #3]
    // 9c: 8b080e75      add     x21, x19, x8, lsl #3
    // a0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a4: 14000000      b       0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a8: f1000718      subs    x24, x24, #0x1
    // ac: 54fffe60      b.eq    0x78 <ltmp0+0x78>
    // b0: f8408720      ldr     x0, [x25], #0x8
    // b4: f9400008      ldr     x8, [x0]
    // b8: 37ffff88      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // bc: f1000508      subs    x8, x8, #0x1
    // c0: f9000008      str     x8, [x0]
    // c4: 54ffff21      b.ne    0xa8 <ltmp0+0xa8>
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: 17fffff7      b       0xa8 <ltmp0+0xa8>
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // d8: 94000000      bl      0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // dc: b5fffdd7      cbnz    x23, 0x94 <ltmp0+0x94>
    // e0: aa1303f5      mov     x21, x19
    // e4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e8: 14000000      b       0xe8 <ltmp0+0xe8>
    // 00000000000000e8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x29, 0x2a,
        0x2a, 0x00, 0x80, 0x12, 0x5b, 0x01, 0x09, 0x4b,
        0xa0, 0xda, 0x7b, 0xf8, 0xaa, 0xda, 0x7a, 0xf8,
        0xeb, 0x00, 0x80, 0x92, 0x5f, 0x01, 0x00, 0xf1,
        0x6a, 0x11, 0x9f, 0x9a, 0x38, 0x05, 0x89, 0x1a,
        0x09, 0x04, 0x40, 0xf9, 0x29, 0xad, 0x42, 0x39,
        0x89, 0x04, 0x38, 0x36, 0x09, 0xc8, 0x40, 0xf9,
        0x49, 0x04, 0x00, 0xb4, 0xa8, 0x2e, 0x28, 0xcb,
        0x19, 0x01, 0x0a, 0x8b, 0x95, 0x22, 0x00, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x18, 0xaa,
        0x03, 0x00, 0x80, 0xd2, 0x20, 0x01, 0x3f, 0xd6,
        0xf7, 0x03, 0x00, 0xaa, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf8, 0x01, 0x00, 0x35,
        0xa0, 0xda, 0x7b, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x60, 0x02, 0x00, 0x54,
        0x97, 0x02, 0x00, 0xb4, 0x48, 0x7f, 0x40, 0x93,
        0x77, 0xda, 0x3b, 0xf8, 0x75, 0x0e, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x18, 0x07, 0x00, 0xf1, 0x60, 0xfe, 0xff, 0x54,
        0x20, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x21, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0xff, 0xff, 0x17,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x94, 0xd7, 0xfd, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0xa4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_26r(code + 0xd4, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xd8, 0x0, state);
    patch_aarch64_26r(code + 0xe8, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d2b      and     w11, w9, #0xffff
    // 14: 2a2b03fa      mvn     w26, w11
    // 18: 12800028      mov     w8, #-0x2               ; =-2
    // 1c: 4b0b011b      sub     w27, w8, w11
    // 20: f87bdaa8      ldr     x8, [x21, w27, sxtw #3]
    // 24: f87adaaa      ldr     x10, [x21, w26, sxtw #3]
    // 28: 928000ec      mov     x12, #-0x8              ; =-8
    // 2c: f100015f      cmp     x10, #0x0
    // 30: 9a9f118a      csel    x10, x12, xzr, ne
    // 34: 1a8b0573      cinc    w19, w11, ne
    // 38: f940050b      ldr     x11, [x8, #0x8]
    // 3c: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyCFunction_Type
    // 40: f940018c      ldr     x12, [x12]
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyCFunction_Type
    // 44: eb0c017f      cmp     x11, x12
    // 48: 54000501      b.ne    0xe8 <ltmp0+0xe8>
    // 4c: f940090b      ldr     x11, [x8, #0x10]
    // 50: b940116c      ldr     w12, [x11, #0x10]
    // 54: 7102019f      cmp     w12, #0x80
    // 58: 54000481      b.ne    0xe8 <ltmp0+0xe8>
    // 5c: cb292ea9      sub     x9, x21, w9, uxth #3
    // 60: 8b0a0139      add     x25, x9, x10
    // 64: f9400569      ldr     x9, [x11, #0x8]
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: f9400d00      ldr     x0, [x8, #0x18]
    // 70: aa1903e1      mov     x1, x25
    // 74: aa1303e2      mov     x2, x19
    // 78: d63f0120      blr     x9
    // 7c: aa0003f8      mov     x24, x0
    // 80: f9402297      ldr     x23, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: 35000213      cbnz    w19, 0xc8 <ltmp0+0xc8>
    // 8c: f87bdaa0      ldr     x0, [x21, w27, sxtw #3]
    // 90: f9400008      ldr     x8, [x0]
    // 94: 37f800a8      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 98: f1000508      subs    x8, x8, #0x1
    // 9c: f9000008      str     x8, [x0]
    // a0: 54000041      b.ne    0xa8 <ltmp0+0xa8>
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: b4000258      cbz     x24, 0xf0 <ltmp0+0xf0>
    // ac: 93407f48      sxtw    x8, w26
    // b0: f83bdaf8      str     x24, [x23, w27, sxtw #3]
    // b4: 8b080ef5      add     x21, x23, x8, lsl #3
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c0: f1000673      subs    x19, x19, #0x1
    // c4: 54fffe40      b.eq    0x8c <ltmp0+0x8c>
    // c8: f8408720      ldr     x0, [x25], #0x8
    // cc: f9400008      ldr     x8, [x0]
    // d0: 37ffff88      tbnz    w8, #0x1f, 0xc0 <ltmp0+0xc0>
    // d4: f1000508      subs    x8, x8, #0x1
    // d8: f9000008      str     x8, [x0]
    // dc: 54ffff21      b.ne    0xc0 <ltmp0+0xc0>
    // e0: 94000000      bl      0xe0 <ltmp0+0xe0>
    // 00000000000000e0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e4: 17fffff7      b       0xc0 <ltmp0+0xc0>
    // e8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ec: 14000000      b       0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // f0: aa1703f5      mov     x21, x23
    // f4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f8: 14000000      b       0xf8 <ltmp0+0xf8>
    // 00000000000000f8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x2b, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x2b, 0x2a,
        0x28, 0x00, 0x80, 0x12, 0x1b, 0x01, 0x0b, 0x4b,
        0xa8, 0xda, 0x7b, 0xf8, 0xaa, 0xda, 0x7a, 0xf8,
        0xec, 0x00, 0x80, 0x92, 0x5f, 0x01, 0x00, 0xf1,
        0x8a, 0x11, 0x9f, 0x9a, 0x73, 0x05, 0x8b, 0x1a,
        0x0b, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x01, 0x05, 0x00, 0x54, 0x0b, 0x09, 0x40, 0xf9,
        0x6c, 0x11, 0x40, 0xb9, 0x9f, 0x01, 0x02, 0x71,
        0x81, 0x04, 0x00, 0x54, 0xa9, 0x2e, 0x29, 0xcb,
        0x39, 0x01, 0x0a, 0x8b, 0x69, 0x05, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x0d, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0xf8, 0x03, 0x00, 0xaa,
        0x97, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x13, 0x02, 0x00, 0x35, 0xa0, 0xda, 0x7b, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0x58, 0x02, 0x00, 0xb4, 0x48, 0x7f, 0x40, 0x93,
        0xf8, 0xda, 0x3b, 0xf8, 0xf5, 0x0e, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x73, 0x06, 0x00, 0xf1, 0x40, 0xfe, 0xff, 0x54,
        0x20, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x21, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0xff, 0xff, 0x17,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x17, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyCFunction_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xe0, 0x0, state);
    patch_aarch64_26r(code + 0xec, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xf8, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d2b      and     w11, w9, #0xffff
    // 14: 2a2b03fa      mvn     w26, w11
    // 18: 12800028      mov     w8, #-0x2               ; =-2
    // 1c: 4b0b011b      sub     w27, w8, w11
    // 20: f87bdaa8      ldr     x8, [x21, w27, sxtw #3]
    // 24: f87adaaa      ldr     x10, [x21, w26, sxtw #3]
    // 28: 928000ec      mov     x12, #-0x8              ; =-8
    // 2c: f100015f      cmp     x10, #0x0
    // 30: 9a9f118a      csel    x10, x12, xzr, ne
    // 34: 1a8b0573      cinc    w19, w11, ne
    // 38: f940050b      ldr     x11, [x8, #0x8]
    // 3c: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyCFunction_Type
    // 40: f940018c      ldr     x12, [x12]
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyCFunction_Type
    // 44: eb0c017f      cmp     x11, x12
    // 48: 54000521      b.ne    0xec <ltmp0+0xec>
    // 4c: f940090b      ldr     x11, [x8, #0x10]
    // 50: b940116c      ldr     w12, [x11, #0x10]
    // 54: 7102099f      cmp     w12, #0x82
    // 58: 540004a1      b.ne    0xec <ltmp0+0xec>
    // 5c: cb292ea9      sub     x9, x21, w9, uxth #3
    // 60: 8b0a0139      add     x25, x9, x10
    // 64: f9400569      ldr     x9, [x11, #0x8]
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: f9400d00      ldr     x0, [x8, #0x18]
    // 70: aa1903e1      mov     x1, x25
    // 74: aa1303e2      mov     x2, x19
    // 78: d2800003      mov     x3, #0x0                ; =0
    // 7c: d63f0120      blr     x9
    // 80: aa0003f8      mov     x24, x0
    // 84: f9402297      ldr     x23, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: 35000213      cbnz    w19, 0xcc <ltmp0+0xcc>
    // 90: f87bdaa0      ldr     x0, [x21, w27, sxtw #3]
    // 94: f9400008      ldr     x8, [x0]
    // 98: 37f800a8      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 9c: f1000508      subs    x8, x8, #0x1
    // a0: f9000008      str     x8, [x0]
    // a4: 54000041      b.ne    0xac <ltmp0+0xac>
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // ac: b4000258      cbz     x24, 0xf4 <ltmp0+0xf4>
    // b0: 93407f48      sxtw    x8, w26
    // b4: f83bdaf8      str     x24, [x23, w27, sxtw #3]
    // b8: 8b080ef5      add     x21, x23, x8, lsl #3
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c4: f1000673      subs    x19, x19, #0x1
    // c8: 54fffe40      b.eq    0x90 <ltmp0+0x90>
    // cc: f8408720      ldr     x0, [x25], #0x8
    // d0: f9400008      ldr     x8, [x0]
    // d4: 37ffff88      tbnz    w8, #0x1f, 0xc4 <ltmp0+0xc4>
    // d8: f1000508      subs    x8, x8, #0x1
    // dc: f9000008      str     x8, [x0]
    // e0: 54ffff21      b.ne    0xc4 <ltmp0+0xc4>
    // e4: 94000000      bl      0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e8: 17fffff7      b       0xc4 <ltmp0+0xc4>
    // ec: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // f4: aa1703f5      mov     x21, x23
    // f8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // fc: 14000000      b       0xfc <ltmp0+0xfc>
    // 00000000000000fc:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[256] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x2b, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x2b, 0x2a,
        0x28, 0x00, 0x80, 0x12, 0x1b, 0x01, 0x0b, 0x4b,
        0xa8, 0xda, 0x7b, 0xf8, 0xaa, 0xda, 0x7a, 0xf8,
        0xec, 0x00, 0x80, 0x92, 0x5f, 0x01, 0x00, 0xf1,
        0x8a, 0x11, 0x9f, 0x9a, 0x73, 0x05, 0x8b, 0x1a,
        0x0b, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x21, 0x05, 0x00, 0x54, 0x0b, 0x09, 0x40, 0xf9,
        0x6c, 0x11, 0x40, 0xb9, 0x9f, 0x09, 0x02, 0x71,
        0xa1, 0x04, 0x00, 0x54, 0xa9, 0x2e, 0x29, 0xcb,
        0x39, 0x01, 0x0a, 0x8b, 0x69, 0x05, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x0d, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x03, 0x00, 0x80, 0xd2, 0x20, 0x01, 0x3f, 0xd6,
        0xf8, 0x03, 0x00, 0xaa, 0x97, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x13, 0x02, 0x00, 0x35,
        0xa0, 0xda, 0x7b, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x58, 0x02, 0x00, 0xb4,
        0x48, 0x7f, 0x40, 0x93, 0xf8, 0xda, 0x3b, 0xf8,
        0xf5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x73, 0x06, 0x00, 0xf1,
        0x40, 0xfe, 0xff, 0x54, 0x20, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x21, 0xff, 0xff, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x17, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyCFunction_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa8, 0x0, state);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xe4, 0x0, state);
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xfc, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_O.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daa9      ldr     x9, [x21, w25, sxtw #3]
    // 1c: 928000eb      mov     x11, #-0x8              ; =-8
    // 20: f100013f      cmp     x9, #0x0
    // 24: 9a9f1169      csel    x9, x11, xzr, ne
    // 28: 1a8a054a      cinc    w10, w10, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 54000661      b.ne    0xfc <ltmp0+0xfc>
    // 34: 9280002a      mov     x10, #-0x2              ; =-2
    // 38: cb28215a      sub     x26, x10, w8, uxth
    // 3c: f87a7aaa      ldr     x10, [x21, x26, lsl #3]
    // 40: f940054b      ldr     x11, [x10, #0x8]
    // 44: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyCFunction_Type
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyCFunction_Type
    // 4c: eb0c017f      cmp     x11, x12
    // 50: 54000561      b.ne    0xfc <ltmp0+0xfc>
    // 54: f940094b      ldr     x11, [x10, #0x10]
    // 58: b940116c      ldr     w12, [x11, #0x10]
    // 5c: 7100219f      cmp     w12, #0x8
    // 60: 540004e1      b.ne    0xfc <ltmp0+0xfc>
    // 64: b94036cc      ldr     w12, [x22, #0x34]
    // 68: 7100019f      cmp     w12, #0x0
    // 6c: 5400048d      b.le    0xfc <ltmp0+0xfc>
    // 70: cb282ea8      sub     x8, x21, w8, uxth #3
    // 74: f940056b      ldr     x11, [x11, #0x8]
    // 78: f8696918      ldr     x24, [x8, x9]
    // 7c: 51000588      sub     w8, w12, #0x1
    // 80: b90036c8      str     w8, [x22, #0x34]
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: f9400d40      ldr     x0, [x10, #0x18]
    // 8c: aa1803e1      mov     x1, x24
    // 90: d63f0160      blr     x11
    // 94: aa0003f7      mov     x23, x0
    // 98: f9402293      ldr     x19, [x20, #0x40]
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: b94036c8      ldr     w8, [x22, #0x34]
    // a4: 11000508      add     w8, w8, #0x1
    // a8: b90036c8      str     w8, [x22, #0x34]
    // ac: f9400308      ldr     x8, [x24]
    // b0: 37f800c8      tbnz    w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f9000308      str     x8, [x24]
    // bc: 54000061      b.ne    0xc8 <ltmp0+0xc8>
    // c0: aa1803e0      mov     x0, x24
    // c4: 94000000      bl      0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c8: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // cc: f9400008      ldr     x8, [x0]
    // d0: 37f800a8      tbnz    w8, #0x1f, 0xe4 <ltmp0+0xe4>
    // d4: f1000508      subs    x8, x8, #0x1
    // d8: f9000008      str     x8, [x0]
    // dc: 54000041      b.ne    0xe4 <ltmp0+0xe4>
    // e0: 94000000      bl      0xe0 <ltmp0+0xe0>
    // 00000000000000e0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e4: b4000117      cbz     x23, 0x104 <ltmp0+0x104>
    // e8: 93407f28      sxtw    x8, w25
    // ec: f83a7a77      str     x23, [x19, x26, lsl #3]
    // f0: 8b080e75      add     x21, x19, x8, lsl #3
    // f4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f8: 14000000      b       0xf8 <ltmp0+0xf8>
    // 00000000000000f8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <ltmp0+0x100>
    // 0000000000000100:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 104: aa1303f5      mov     x21, x19
    // 108: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 10c: 14000000      b       0x10c <ltmp0+0x10c>
    // 000000000000010c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[272] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x79, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x3f, 0x01, 0x00, 0xf1, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0x05, 0x8a, 0x1a, 0x5f, 0x05, 0x00, 0x71,
        0x61, 0x06, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x5a, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x7a, 0xf8,
        0x4b, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x61, 0x05, 0x00, 0x54, 0x4b, 0x09, 0x40, 0xf9,
        0x6c, 0x11, 0x40, 0xb9, 0x9f, 0x21, 0x00, 0x71,
        0xe1, 0x04, 0x00, 0x54, 0xcc, 0x36, 0x40, 0xb9,
        0x9f, 0x01, 0x00, 0x71, 0x8d, 0x04, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x6b, 0x05, 0x40, 0xf9,
        0x18, 0x69, 0x69, 0xf8, 0x88, 0x05, 0x00, 0x51,
        0xc8, 0x36, 0x00, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0x40, 0x0d, 0x40, 0xf9, 0xe1, 0x03, 0x18, 0xaa,
        0x60, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc8, 0x36, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0x08, 0x03, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xa0, 0x7a, 0x7a, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x17, 0x01, 0x00, 0xb4,
        0x28, 0x7f, 0x40, 0x93, 0x77, 0x7a, 0x3a, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyCFunction_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xc4, 0x0, state);
    patch_aarch64_trampoline(code + 0xe0, 0x0, state);
    patch_aarch64_26r(code + 0xf8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x100, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_1.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: d37ced08      lsl     x8, x8, #4
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyIntrinsics_UnaryFunctions
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyIntrinsics_UnaryFunctions
    // 28: f8686928      ldr     x8, [x9, x8]
    // 2c: aa1603e0      mov     x0, x22
    // 30: aa1303e1      mov     x1, x19
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400268      ldr     x8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000268      str     x8, [x19]
    // 50: 540000a0      b.eq    0x64 <ltmp0+0x64>
    // 54: b4000120      cbz     x0, 0x78 <ltmp0+0x78>
    // 58: f81f82a0      stur    x0, [x21, #-0x8]
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: aa0003f7      mov     x23, x0
    // 68: aa1303e0      mov     x0, x19
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: aa1703e0      mov     x0, x23
    // 74: b5ffff37      cbnz    x23, 0x58 <ltmp0+0x58>
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[128] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x08, 0xed, 0x7c, 0xd3,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x69, 0x68, 0xf8, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x37, 0xff, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyIntrinsics_UnaryFunctions+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_2.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: d37ced08      lsl     x8, x8, #4
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyIntrinsics_BinaryFunctions
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyIntrinsics_BinaryFunctions
    // 28: f8686928      ldr     x8, [x9, x8]
    // 2c: aa1603e0      mov     x0, x22
    // 30: aa1803e1      mov     x1, x24
    // 34: aa1303e2      mov     x2, x19
    // 38: d63f0100      blr     x8
    // 3c: aa0003f7      mov     x23, x0
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400308      ldr     x8, [x24]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000308      str     x8, [x24]
    // 58: 54000120      b.eq    0x7c <ltmp0+0x7c>
    // 5c: f9400268      ldr     x8, [x19]
    // 60: 37f80168      tbnz    w8, #0x1f, 0x8c <ltmp0+0x8c>
    // 64: f1000508      subs    x8, x8, #0x1
    // 68: f9000268      str     x8, [x19]
    // 6c: 54000101      b.ne    0x8c <ltmp0+0x8c>
    // 70: aa1303e0      mov     x0, x19
    // 74: 94000000      bl      0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 78: 14000005      b       0x8c <ltmp0+0x8c>
    // 7c: aa1803e0      mov     x0, x24
    // 80: 94000000      bl      0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 84: f9400268      ldr     x8, [x19]
    // 88: 36fffee8      tbz     w8, #0x1f, 0x64 <ltmp0+0x64>
    // 8c: b40000b7      cbz     x23, 0xa0 <ltmp0+0xa0>
    // 90: f81f02b7      stur    x23, [x21, #-0x10]
    // 94: d10022b5      sub     x21, x21, #0x8
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a4: 14000000      b       0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x08, 0xed, 0x7c, 0xd3,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x69, 0x68, 0xf8, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb7, 0x00, 0x00, 0xb4,
        0xb7, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyIntrinsics_BinaryFunctions+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x74, 0x0, state);
    patch_aarch64_trampoline(code + 0x80, 0x0, state);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa4, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_ISINSTANCE.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03fa      mvn     w26, w10
    // 18: f87adaa9      ldr     x9, [x21, w26, sxtw #3]
    // 1c: 928000eb      mov     x11, #-0x8              ; =-8
    // 20: f100013f      cmp     x9, #0x0
    // 24: 9a9f1169      csel    x9, x11, xzr, ne
    // 28: 1a8a054a      cinc    w10, w10, ne
    // 2c: 7100095f      cmp     w10, #0x2
    // 30: 54000141      b.ne    0x58 <ltmp0+0x58>
    // 34: 9280002a      mov     x10, #-0x2              ; =-2
    // 38: cb282159      sub     x25, x10, w8, uxth
    // 3c: f8797aaa      ldr     x10, [x21, x25, lsl #3]
    // 40: f9400acb      ldr     x11, [x22, #0x10]
    // 44: 528cd90c      mov     w12, #0x66c8            ; =26312
    // 48: 72a0006c      movk    w12, #0x3, lsl #16
    // 4c: f86c696b      ldr     x11, [x11, x12]
    // 50: eb0a017f      cmp     x11, x10
    // 54: 54000060      b.eq    0x60 <ltmp0+0x60>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 60: cb282ea8      sub     x8, x21, w8, uxth #3
    // 64: 8b090108      add     x8, x8, x9
    // 68: a9405d18      ldp     x24, x23, [x8]
    // 6c: f9002295      str     x21, [x20, #0x40]
    // 70: aa1803e0      mov     x0, x24
    // 74: aa1703e1      mov     x1, x23
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 _PyObject_IsInstance
    // 7c: f9402293      ldr     x19, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 37f80500      tbnz    w0, #0x1f, 0x124 <ltmp0+0x124>
    // 88: f9400308      ldr     x8, [x24]
    // 8c: 37f80108      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 90: f1000508      subs    x8, x8, #0x1
    // 94: f9000308      str     x8, [x24]
    // 98: 540000a1      b.ne    0xac <ltmp0+0xac>
    // 9c: aa0003fb      mov     x27, x0
    // a0: aa1803e0      mov     x0, x24
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: aa1b03e0      mov     x0, x27
    // ac: f94002e8      ldr     x8, [x23]
    // b0: 37f80108      tbnz    w8, #0x1f, 0xd0 <ltmp0+0xd0>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f90002e8      str     x8, [x23]
    // bc: 540000a1      b.ne    0xd0 <ltmp0+0xd0>
    // c0: aa0003f8      mov     x24, x0
    // c4: aa1703e0      mov     x0, x23
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: aa1803e0      mov     x0, x24
    // d0: 93407f57      sxtw    x23, w26
    // d4: f8797aa8      ldr     x8, [x21, x25, lsl #3]
    // d8: f9400109      ldr     x9, [x8]
    // dc: 37f80109      tbnz    w9, #0x1f, 0xfc <ltmp0+0xfc>
    // e0: f1000529      subs    x9, x9, #0x1
    // e4: f9000109      str     x9, [x8]
    // e8: 540000a1      b.ne    0xfc <ltmp0+0xfc>
    // ec: aa0003f5      mov     x21, x0
    // f0: aa0803e0      mov     x0, x8
    // f4: 94000000      bl      0xf4 <ltmp0+0xf4>
    // 00000000000000f4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f8: aa1503e0      mov     x0, x21
    // fc: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000fc:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 104: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000104:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 108: f9400129      ldr     x9, [x9]
    // 0000000000000108:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 10c: 7100001f      cmp     w0, #0x0
    // 110: 9a880128      csel    x8, x9, x8, eq
    // 114: f8397a68      str     x8, [x19, x25, lsl #3]
    // 118: 8b170e75      add     x21, x19, x23, lsl #3
    // 11c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 120: 14000000      b       0x120 <ltmp0+0x120>
    // 0000000000000120:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 124: aa1303f5      mov     x21, x19
    // 128: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 12c: 14000000      b       0x12c <ltmp0+0x12c>
    // 000000000000012c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[304] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x7a, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x3f, 0x01, 0x00, 0xf1, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0x05, 0x8a, 0x1a, 0x5f, 0x09, 0x00, 0x71,
        0x41, 0x01, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x59, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x79, 0xf8,
        0xcb, 0x0a, 0x40, 0xf9, 0x0c, 0xd9, 0x8c, 0x52,
        0x6c, 0x00, 0xa0, 0x72, 0x6b, 0x69, 0x6c, 0xf8,
        0x7f, 0x01, 0x0a, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x09, 0x8b,
        0x18, 0x5d, 0x40, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x05, 0xf8, 0x37,
        0x08, 0x03, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xfb, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x1b, 0xaa, 0xe8, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xf8, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x18, 0xaa,
        0x57, 0x7f, 0x40, 0x93, 0xa8, 0x7a, 0x79, 0xf8,
        0x09, 0x01, 0x40, 0xf9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0xf1, 0x09, 0x01, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xf5, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x15, 0xaa, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x00, 0x71,
        0x28, 0x01, 0x88, 0x9a, 0x68, 0x7a, 0x39, 0xf8,
        0x75, 0x0e, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x78, 0x14, state);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_trampoline(code + 0xf4, 0x0, state);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x104, (uintptr_t)data);
    patch_aarch64_26r(code + 0x120, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x12c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_KW_NON_PY.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d09      and     w9, w8, #0xffff
    // 14: f85f82b9      ldur    x25, [x21, #-0x8]
    // 18: 2a2903ea      mvn     w10, w9
    // 1c: 8b2aceaa      add     x10, x21, w10, sxtw #3
    // 20: 92403d08      and     x8, x8, #0xffff
    // 24: 9280002b      mov     x11, #-0x2              ; =-2
    // 28: 9280004c      mov     x12, #-0x3              ; =-3
    // 2c: cb08019a      sub     x26, x12, x8
    // 30: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // 34: cb08017b      sub     x27, x11, x8
    // 38: f87b7aa8      ldr     x8, [x21, x27, lsl #3]
    // 3c: 928000eb      mov     x11, #-0x8              ; =-8
    // 40: f100011f      cmp     x8, #0x0
    // 44: 9a9f1168      csel    x8, x11, xzr, ne
    // 48: 1a89053c      cinc    w28, w9, ne
    // 4c: 8b080158      add     x24, x10, x8
    // 50: b9401328      ldr     w8, [x25, #0x10]
    // 54: 4b080388      sub     w8, w28, w8
    // 58: f9002295      str     x21, [x20, #0x40]
    // 5c: 93407d08      sxtw    x8, w8
    // 60: b2410102      orr     x2, x8, #0x8000000000000000
    // 64: aa1803e1      mov     x1, x24
    // 68: aa1903e3      mov     x3, x25
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 _PyObject_Vectorcall
    // 70: aa0003f7      mov     x23, x0
    // 74: f9402293      ldr     x19, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: f9400328      ldr     x8, [x25]
    // 80: 37f800c8      tbnz    w8, #0x1f, 0x98 <ltmp0+0x98>
    // 84: f1000508      subs    x8, x8, #0x1
    // 88: f9000328      str     x8, [x25]
    // 8c: 54000061      b.ne    0x98 <ltmp0+0x98>
    // 90: aa1903e0      mov     x0, x25
    // 94: 94000000      bl      0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 98: 350001dc      cbnz    w28, 0xd0 <ltmp0+0xd0>
    // 9c: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // a0: f9400008      ldr     x8, [x0]
    // a4: 37f80088      tbnz    w8, #0x1f, 0xb4 <ltmp0+0xb4>
    // a8: f1000508      subs    x8, x8, #0x1
    // ac: f9000008      str     x8, [x0]
    // b0: 54000200      b.eq    0xf0 <ltmp0+0xf0>
    // b4: b4000237      cbz     x23, 0xf8 <ltmp0+0xf8>
    // b8: f83a7a77      str     x23, [x19, x26, lsl #3]
    // bc: 8b1b0e75      add     x21, x19, x27, lsl #3
    // c0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c4: 14000000      b       0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c8: f100079c      subs    x28, x28, #0x1
    // cc: 54fffe80      b.eq    0x9c <ltmp0+0x9c>
    // d0: f8408700      ldr     x0, [x24], #0x8
    // d4: f9400008      ldr     x8, [x0]
    // d8: 37ffff88      tbnz    w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // dc: f1000508      subs    x8, x8, #0x1
    // e0: f9000008      str     x8, [x0]
    // e4: 54ffff21      b.ne    0xc8 <ltmp0+0xc8>
    // e8: 94000000      bl      0xe8 <ltmp0+0xe8>
    // 00000000000000e8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // ec: 17fffff7      b       0xc8 <ltmp0+0xc8>
    // f0: 94000000      bl      0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f4: b5fffe37      cbnz    x23, 0xb8 <ltmp0+0xb8>
    // f8: aa1303f5      mov     x21, x19
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <ltmp0+0x100>
    // 0000000000000100:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x3d, 0x00, 0x12, 0xb9, 0x82, 0x5f, 0xf8,
        0xea, 0x03, 0x29, 0x2a, 0xaa, 0xce, 0x2a, 0x8b,
        0x08, 0x3d, 0x40, 0x92, 0x2b, 0x00, 0x80, 0x92,
        0x4c, 0x00, 0x80, 0x92, 0x9a, 0x01, 0x08, 0xcb,
        0xa0, 0x7a, 0x7a, 0xf8, 0x7b, 0x01, 0x08, 0xcb,
        0xa8, 0x7a, 0x7b, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x1f, 0x01, 0x00, 0xf1, 0x68, 0x11, 0x9f, 0x9a,
        0x3c, 0x05, 0x89, 0x1a, 0x58, 0x01, 0x08, 0x8b,
        0x28, 0x13, 0x40, 0xb9, 0x88, 0x03, 0x08, 0x4b,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x7d, 0x40, 0x93,
        0x02, 0x01, 0x41, 0xb2, 0xe1, 0x03, 0x18, 0xaa,
        0xe3, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x28, 0x03, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xdc, 0x01, 0x00, 0x35, 0xa0, 0x7a, 0x7a, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x00, 0x02, 0x00, 0x54, 0x37, 0x02, 0x00, 0xb4,
        0x77, 0x7a, 0x3a, 0xf8, 0x75, 0x0e, 0x1b, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x9c, 0x07, 0x00, 0xf1, 0x80, 0xfe, 0xff, 0x54,
        0x00, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x21, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x94, 0x37, 0xfe, 0xff, 0xb5,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x6c, 0x15, state);
    patch_aarch64_trampoline(code + 0x94, 0x0, state);
    patch_aarch64_26r(code + 0xc4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xe8, 0x0, state);
    patch_aarch64_trampoline(code + 0xf0, 0x0, state);
    patch_aarch64_26r(code + 0x100, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LEN.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daa9      ldr     x9, [x21, w25, sxtw #3]
    // 1c: 928000eb      mov     x11, #-0x8              ; =-8
    // 20: f100013f      cmp     x9, #0x0
    // 24: 9a9f1169      csel    x9, x11, xzr, ne
    // 28: 1a8a054a      cinc    w10, w10, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 54000141      b.ne    0x58 <ltmp0+0x58>
    // 34: 9280002a      mov     x10, #-0x2              ; =-2
    // 38: cb282158      sub     x24, x10, w8, uxth
    // 3c: f8787aaa      ldr     x10, [x21, x24, lsl #3]
    // 40: f9400acb      ldr     x11, [x22, #0x10]
    // 44: 528cda0c      mov     w12, #0x66d0            ; =26320
    // 48: 72a0006c      movk    w12, #0x3, lsl #16
    // 4c: f86c696b      ldr     x11, [x11, x12]
    // 50: eb0a017f      cmp     x11, x10
    // 54: 54000060      b.eq    0x60 <ltmp0+0x60>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 60: cb282ea8      sub     x8, x21, w8, uxth #3
    // 64: f8696917      ldr     x23, [x8, x9]
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: aa1703e0      mov     x0, x23
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 _PyObject_Size
    // 74: f9402293      ldr     x19, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: b7f80360      tbnz    x0, #0x3f, 0xe8 <ltmp0+0xe8>
    // 80: 94000000      bl      0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 _PyLong_FromSsize_t
    // 84: b4000380      cbz     x0, 0xf4 <ltmp0+0xf4>
    // 88: f8787aa8      ldr     x8, [x21, x24, lsl #3]
    // 8c: f9400109      ldr     x9, [x8]
    // 90: 37f80109      tbnz    w9, #0x1f, 0xb0 <ltmp0+0xb0>
    // 94: f1000529      subs    x9, x9, #0x1
    // 98: f9000109      str     x9, [x8]
    // 9c: 540000a1      b.ne    0xb0 <ltmp0+0xb0>
    // a0: aa0003f5      mov     x21, x0
    // a4: aa0803e0      mov     x0, x8
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // ac: aa1503e0      mov     x0, x21
    // b0: 93407f35      sxtw    x21, w25
    // b4: f94002e8      ldr     x8, [x23]
    // b8: 37f80108      tbnz    w8, #0x1f, 0xd8 <ltmp0+0xd8>
    // bc: f1000508      subs    x8, x8, #0x1
    // c0: f90002e8      str     x8, [x23]
    // c4: 540000a1      b.ne    0xd8 <ltmp0+0xd8>
    // c8: aa0003f9      mov     x25, x0
    // cc: aa1703e0      mov     x0, x23
    // d0: 94000000      bl      0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d4: aa1903e0      mov     x0, x25
    // d8: f8387a60      str     x0, [x19, x24, lsl #3]
    // dc: 8b150e75      add     x21, x19, x21, lsl #3
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e8: aa1303f5      mov     x21, x19
    // ec: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // f4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000f4:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // fc: f9008ac8      str     x8, [x22, #0x110]
    // 100: f9002293      str     x19, [x20, #0x40]
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: d65f03c0      ret
    // 10c: 00 00 00 00
    const unsigned char code_body[272] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x79, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x3f, 0x01, 0x00, 0xf1, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0x05, 0x8a, 0x1a, 0x5f, 0x05, 0x00, 0x71,
        0x41, 0x01, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x58, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x78, 0xf8,
        0xcb, 0x0a, 0x40, 0xf9, 0x0c, 0xda, 0x8c, 0x52,
        0x6c, 0x00, 0xa0, 0x72, 0x6b, 0x69, 0x6c, 0xf8,
        0x7f, 0x01, 0x0a, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xa8, 0x2e, 0x28, 0xcb, 0x17, 0x69, 0x69, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x03, 0xf8, 0xb7,
        0x00, 0x00, 0x00, 0x94, 0x80, 0x03, 0x00, 0xb4,
        0xa8, 0x7a, 0x78, 0xf8, 0x09, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0xf1,
        0x09, 0x01, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x15, 0xaa,
        0x35, 0x7f, 0x40, 0x93, 0xe8, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xf9, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x19, 0xaa,
        0x60, 0x7a, 0x38, 0xf8, 0x75, 0x0e, 0x15, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xc8, 0x8a, 0x00, 0xf9,
        0x93, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x70, 0x17, state);
    patch_aarch64_trampoline(code + 0x80, 0x16, state);
    patch_aarch64_trampoline(code + 0xa8, 0x0, state);
    patch_aarch64_trampoline(code + 0xd0, 0x0, state);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)data);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LIST_APPEND.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85e8e77      ldr     x23, [x19, #-0x18]!
    // 8: f9400ac8      ldr     x8, [x22, #0x10]
    // c: 528cdb09      mov     w9, #0x66d8             ; =26328
    // 10: 72a00069      movk    w9, #0x3, lsl #16
    // 14: f8696908      ldr     x8, [x8, x9]
    // 18: eb17011f      cmp     x8, x23
    // 1c: 540000a1      b.ne    0x30 <ltmp0+0x30>
    // 20: f9400678      ldr     x24, [x19, #0x8]
    // 24: f9400708      ldr     x8, [x24, #0x8]
    // 28: 3942ad08      ldrb    w8, [x8, #0xab]
    // 2c: 37080048      tbnz    w8, #0x1, 0x34 <ltmp0+0x34>
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 910003fd      mov     x29, sp
    // 3c: f9400a61      ldr     x1, [x19, #0x10]
    // 40: f9400b08      ldr     x8, [x24, #0x10]
    // 44: f9401309      ldr     x9, [x24, #0x20]
    // 48: eb08013f      cmp     x9, x8
    // 4c: 5400012d      b.le    0x70 <ltmp0+0x70>
    // 50: f9400f09      ldr     x9, [x24, #0x18]
    // 54: f8287921      str     x1, [x9, x8, lsl #3]
    // 58: 91000508      add     x8, x8, #0x1
    // 5c: f9000b08      str     x8, [x24, #0x10]
    // 60: 52800039      mov     w25, #0x1               ; =1
    // 64: f9400308      ldr     x8, [x24]
    // 68: 36f80108      tbz     w8, #0x1f, 0x88 <ltmp0+0x88>
    // 6c: 1400000c      b       0x9c <ltmp0+0x9c>
    // 70: aa1803e0      mov     x0, x24
    // 74: 94000000      bl      0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __PyList_AppendTakeRefListResize
    // 78: 7100001f      cmp     w0, #0x0
    // 7c: 1a9f17f9      cset    w25, eq
    // 80: f9400308      ldr     x8, [x24]
    // 84: 37f800c8      tbnz    w8, #0x1f, 0x9c <ltmp0+0x9c>
    // 88: f1000508      subs    x8, x8, #0x1
    // 8c: f9000308      str     x8, [x24]
    // 90: 54000061      b.ne    0x9c <ltmp0+0x9c>
    // 94: aa1803e0      mov     x0, x24
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 9c: f94002e8      ldr     x8, [x23]
    // a0: 37f80088      tbnz    w8, #0x1f, 0xb0 <ltmp0+0xb0>
    // a4: f1000508      subs    x8, x8, #0x1
    // a8: f90002e8      str     x8, [x23]
    // ac: 540000a0      b.eq    0xc0 <ltmp0+0xc0>
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 360000f9      tbz     w25, #0x0, 0xd0 <ltmp0+0xd0>
    // b8: aa1303f5      mov     x21, x19
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c0: aa1703e0      mov     x0, x23
    // c4: 94000000      bl      0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // cc: 3707ff79      tbnz    w25, #0x0, 0xb8 <ltmp0+0xb8>
    // d0: 14000000      b       0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5e, 0xf8,
        0xc8, 0x0a, 0x40, 0xf9, 0x09, 0xdb, 0x8c, 0x52,
        0x69, 0x00, 0xa0, 0x72, 0x08, 0x69, 0x69, 0xf8,
        0x1f, 0x01, 0x17, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0x78, 0x06, 0x40, 0xf9, 0x08, 0x07, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x48, 0x00, 0x08, 0x37,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x61, 0x0a, 0x40, 0xf9,
        0x08, 0x0b, 0x40, 0xf9, 0x09, 0x13, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x2d, 0x01, 0x00, 0x54,
        0x09, 0x0f, 0x40, 0xf9, 0x21, 0x79, 0x28, 0xf8,
        0x08, 0x05, 0x00, 0x91, 0x08, 0x0b, 0x00, 0xf9,
        0x39, 0x00, 0x80, 0x52, 0x08, 0x03, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x36, 0x0c, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x1f, 0x00, 0x00, 0x71, 0xf9, 0x17, 0x9f, 0x1a,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0xf9, 0x00, 0x00, 0x36,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x79, 0xff, 0x07, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x74, 0x18, state);
    patch_aarch64_trampoline(code + 0x98, 0x0, state);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xc4, 0x0, state);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f8      mvn     w24, w10
    // 18: 12800029      mov     w9, #-0x2               ; =-2
    // 1c: 4b0a0139      sub     w25, w9, w10
    // 20: f879daa9      ldr     x9, [x21, w25, sxtw #3]
    // 24: f878daab      ldr     x11, [x21, w24, sxtw #3]
    // 28: 928000ec      mov     x12, #-0x8              ; =-8
    // 2c: f100017f      cmp     x11, #0x0
    // 30: 9a9f118b      csel    x11, x12, xzr, ne
    // 34: 1a8a055a      cinc    w26, w10, ne
    // 38: f940052a      ldr     x10, [x9, #0x8]
    // 3c: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethodDescr_Type
    // 40: f940018c      ldr     x12, [x12]
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethodDescr_Type
    // 44: eb0c015f      cmp     x10, x12
    // 48: 54000181      b.ne    0x78 <ltmp0+0x78>
    // 4c: f940152a      ldr     x10, [x9, #0x28]
    // 50: b940114c      ldr     w12, [x10, #0x10]
    // 54: 7102019f      cmp     w12, #0x80
    // 58: 54000101      b.ne    0x78 <ltmp0+0x78>
    // 5c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 60: 8b0b011b      add     x27, x8, x11
    // 64: f9400360      ldr     x0, [x27]
    // 68: f9400928      ldr     x8, [x9, #0x10]
    // 6c: f9400409      ldr     x9, [x0, #0x8]
    // 70: eb08013f      cmp     x9, x8
    // 74: 54000060      b.eq    0x80 <ltmp0+0x80>
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 80: 51000748      sub     w8, w26, #0x1
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: f9400549      ldr     x9, [x10, #0x8]
    // 8c: 93407d02      sxtw    x2, w8
    // 90: 91002361      add     x1, x27, #0x8
    // 94: d63f0120      blr     x9
    // 98: aa0003f7      mov     x23, x0
    // 9c: f9402293      ldr     x19, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: 3500021a      cbnz    w26, 0xe4 <ltmp0+0xe4>
    // a8: f879daa0      ldr     x0, [x21, w25, sxtw #3]
    // ac: f9400008      ldr     x8, [x0]
    // b0: 37f800a8      tbnz    w8, #0x1f, 0xc4 <ltmp0+0xc4>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f9000008      str     x8, [x0]
    // bc: 54000041      b.ne    0xc4 <ltmp0+0xc4>
    // c0: 94000000      bl      0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c4: b4000217      cbz     x23, 0x104 <ltmp0+0x104>
    // c8: 93407f08      sxtw    x8, w24
    // cc: f839da77      str     x23, [x19, w25, sxtw #3]
    // d0: 8b080e75      add     x21, x19, x8, lsl #3
    // d4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d8: 14000000      b       0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // dc: f100075a      subs    x26, x26, #0x1
    // e0: 54fffe40      b.eq    0xa8 <ltmp0+0xa8>
    // e4: f8408760      ldr     x0, [x27], #0x8
    // e8: f9400008      ldr     x8, [x0]
    // ec: 37ffff88      tbnz    w8, #0x1f, 0xdc <ltmp0+0xdc>
    // f0: f1000508      subs    x8, x8, #0x1
    // f4: f9000008      str     x8, [x0]
    // f8: 54ffff21      b.ne    0xdc <ltmp0+0xdc>
    // fc: 94000000      bl      0xfc <ltmp0+0xfc>
    // 00000000000000fc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 100: 17fffff7      b       0xdc <ltmp0+0xdc>
    // 104: aa1303f5      mov     x21, x19
    // 108: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 10c: 14000000      b       0x10c <ltmp0+0x10c>
    // 000000000000010c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[272] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf8, 0x03, 0x2a, 0x2a,
        0x29, 0x00, 0x80, 0x12, 0x39, 0x01, 0x0a, 0x4b,
        0xa9, 0xda, 0x79, 0xf8, 0xab, 0xda, 0x78, 0xf8,
        0xec, 0x00, 0x80, 0x92, 0x7f, 0x01, 0x00, 0xf1,
        0x8b, 0x11, 0x9f, 0x9a, 0x5a, 0x05, 0x8a, 0x1a,
        0x2a, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0c, 0xeb,
        0x81, 0x01, 0x00, 0x54, 0x2a, 0x15, 0x40, 0xf9,
        0x4c, 0x11, 0x40, 0xb9, 0x9f, 0x01, 0x02, 0x71,
        0x01, 0x01, 0x00, 0x54, 0xa8, 0x2e, 0x28, 0xcb,
        0x1b, 0x01, 0x0b, 0x8b, 0x60, 0x03, 0x40, 0xf9,
        0x28, 0x09, 0x40, 0xf9, 0x09, 0x04, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x48, 0x07, 0x00, 0x51, 0x95, 0x22, 0x00, 0xf9,
        0x49, 0x05, 0x40, 0xf9, 0x02, 0x7d, 0x40, 0x93,
        0x61, 0x23, 0x00, 0x91, 0x20, 0x01, 0x3f, 0xd6,
        0xf7, 0x03, 0x00, 0xaa, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x1a, 0x02, 0x00, 0x35,
        0xa0, 0xda, 0x79, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x17, 0x02, 0x00, 0xb4,
        0x08, 0x7f, 0x40, 0x93, 0x77, 0xda, 0x39, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x5a, 0x07, 0x00, 0xf1,
        0x40, 0xfe, 0xff, 0x54, 0x60, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x21, 0xff, 0xff, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0xff, 0xff, 0x17, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethodDescr_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xc0, 0x0, state);
    patch_aarch64_26r(code + 0xd8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xfc, 0x0, state);
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f8      mvn     w24, w10
    // 18: 12800029      mov     w9, #-0x2               ; =-2
    // 1c: 4b0a0139      sub     w25, w9, w10
    // 20: f879daa9      ldr     x9, [x21, w25, sxtw #3]
    // 24: f878daab      ldr     x11, [x21, w24, sxtw #3]
    // 28: 928000ec      mov     x12, #-0x8              ; =-8
    // 2c: f100017f      cmp     x11, #0x0
    // 30: 9a9f118b      csel    x11, x12, xzr, ne
    // 34: 1a8a055a      cinc    w26, w10, ne
    // 38: f940052a      ldr     x10, [x9, #0x8]
    // 3c: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethodDescr_Type
    // 40: f940018c      ldr     x12, [x12]
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethodDescr_Type
    // 44: eb0c015f      cmp     x10, x12
    // 48: 54000181      b.ne    0x78 <ltmp0+0x78>
    // 4c: f940152a      ldr     x10, [x9, #0x28]
    // 50: b940114c      ldr     w12, [x10, #0x10]
    // 54: 7102099f      cmp     w12, #0x82
    // 58: 54000101      b.ne    0x78 <ltmp0+0x78>
    // 5c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 60: 8b0b011b      add     x27, x8, x11
    // 64: f9400928      ldr     x8, [x9, #0x10]
    // 68: f9400360      ldr     x0, [x27]
    // 6c: f9400409      ldr     x9, [x0, #0x8]
    // 70: eb08013f      cmp     x9, x8
    // 74: 54000060      b.eq    0x80 <ltmp0+0x80>
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 80: 51000748      sub     w8, w26, #0x1
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: f9400549      ldr     x9, [x10, #0x8]
    // 8c: 93407d02      sxtw    x2, w8
    // 90: 91002361      add     x1, x27, #0x8
    // 94: d2800003      mov     x3, #0x0                ; =0
    // 98: d63f0120      blr     x9
    // 9c: aa0003f7      mov     x23, x0
    // a0: f9402293      ldr     x19, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: 3500021a      cbnz    w26, 0xe8 <ltmp0+0xe8>
    // ac: f879daa0      ldr     x0, [x21, w25, sxtw #3]
    // b0: f9400008      ldr     x8, [x0]
    // b4: 37f800a8      tbnz    w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // b8: f1000508      subs    x8, x8, #0x1
    // bc: f9000008      str     x8, [x0]
    // c0: 54000041      b.ne    0xc8 <ltmp0+0xc8>
    // c4: 94000000      bl      0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c8: b4000217      cbz     x23, 0x108 <ltmp0+0x108>
    // cc: 93407f08      sxtw    x8, w24
    // d0: f839da77      str     x23, [x19, w25, sxtw #3]
    // d4: 8b080e75      add     x21, x19, x8, lsl #3
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e0: f100075a      subs    x26, x26, #0x1
    // e4: 54fffe40      b.eq    0xac <ltmp0+0xac>
    // e8: f8408760      ldr     x0, [x27], #0x8
    // ec: f9400008      ldr     x8, [x0]
    // f0: 37ffff88      tbnz    w8, #0x1f, 0xe0 <ltmp0+0xe0>
    // f4: f1000508      subs    x8, x8, #0x1
    // f8: f9000008      str     x8, [x0]
    // fc: 54ffff21      b.ne    0xe0 <ltmp0+0xe0>
    // 100: 94000000      bl      0x100 <ltmp0+0x100>
    // 0000000000000100:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 104: 17fffff7      b       0xe0 <ltmp0+0xe0>
    // 108: aa1303f5      mov     x21, x19
    // 10c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 110: 14000000      b       0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 114: 00 00 00 00
    const unsigned char code_body[280] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf8, 0x03, 0x2a, 0x2a,
        0x29, 0x00, 0x80, 0x12, 0x39, 0x01, 0x0a, 0x4b,
        0xa9, 0xda, 0x79, 0xf8, 0xab, 0xda, 0x78, 0xf8,
        0xec, 0x00, 0x80, 0x92, 0x7f, 0x01, 0x00, 0xf1,
        0x8b, 0x11, 0x9f, 0x9a, 0x5a, 0x05, 0x8a, 0x1a,
        0x2a, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0c, 0xeb,
        0x81, 0x01, 0x00, 0x54, 0x2a, 0x15, 0x40, 0xf9,
        0x4c, 0x11, 0x40, 0xb9, 0x9f, 0x09, 0x02, 0x71,
        0x01, 0x01, 0x00, 0x54, 0xa8, 0x2e, 0x28, 0xcb,
        0x1b, 0x01, 0x0b, 0x8b, 0x28, 0x09, 0x40, 0xf9,
        0x60, 0x03, 0x40, 0xf9, 0x09, 0x04, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x48, 0x07, 0x00, 0x51, 0x95, 0x22, 0x00, 0xf9,
        0x49, 0x05, 0x40, 0xf9, 0x02, 0x7d, 0x40, 0x93,
        0x61, 0x23, 0x00, 0x91, 0x03, 0x00, 0x80, 0xd2,
        0x20, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x1a, 0x02, 0x00, 0x35, 0xa0, 0xda, 0x79, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0x17, 0x02, 0x00, 0xb4, 0x08, 0x7f, 0x40, 0x93,
        0x77, 0xda, 0x39, 0xf8, 0x75, 0x0e, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x5a, 0x07, 0x00, 0xf1, 0x40, 0xfe, 0xff, 0x54,
        0x60, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x21, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0xff, 0xff, 0x17,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyMethodDescr_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x7c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xc4, 0x0, state);
    patch_aarch64_26r(code + 0xdc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x100, 0x0, state);
    patch_aarch64_26r(code + 0x110, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daa9      ldr     x9, [x21, w25, sxtw #3]
    // 1c: 928000eb      mov     x11, #-0x8              ; =-8
    // 20: f100013f      cmp     x9, #0x0
    // 24: 9a9f1169      csel    x9, x11, xzr, ne
    // 28: 1a8a054a      cinc    w10, w10, ne
    // 2c: 7100055f      cmp     w10, #0x1
    // 30: 540006e1      b.ne    0x10c <ltmp0+0x10c>
    // 34: 9280002a      mov     x10, #-0x2              ; =-2
    // 38: cb28215a      sub     x26, x10, w8, uxth
    // 3c: f87a7aaa      ldr     x10, [x21, x26, lsl #3]
    // 40: f940054b      ldr     x11, [x10, #0x8]
    // 44: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethodDescr_Type
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethodDescr_Type
    // 4c: eb0c017f      cmp     x11, x12
    // 50: 540005e1      b.ne    0x10c <ltmp0+0x10c>
    // 54: cb282ea8      sub     x8, x21, w8, uxth #3
    // 58: f8696913      ldr     x19, [x8, x9]
    // 5c: f9400948      ldr     x8, [x10, #0x10]
    // 60: f9400669      ldr     x9, [x19, #0x8]
    // 64: eb08013f      cmp     x9, x8
    // 68: 54000521      b.ne    0x10c <ltmp0+0x10c>
    // 6c: f9401548      ldr     x8, [x10, #0x28]
    // 70: b9401109      ldr     w9, [x8, #0x10]
    // 74: 7100113f      cmp     w9, #0x4
    // 78: 540004a1      b.ne    0x10c <ltmp0+0x10c>
    // 7c: b94036c9      ldr     w9, [x22, #0x34]
    // 80: 7100013f      cmp     w9, #0x0
    // 84: 5400044d      b.le    0x10c <ltmp0+0x10c>
    // 88: f9400508      ldr     x8, [x8, #0x8]
    // 8c: 51000529      sub     w9, w9, #0x1
    // 90: b90036c9      str     w9, [x22, #0x34]
    // 94: f9002295      str     x21, [x20, #0x40]
    // 98: aa1303e0      mov     x0, x19
    // 9c: d2800001      mov     x1, #0x0                ; =0
    // a0: d63f0100      blr     x8
    // a4: aa0003f8      mov     x24, x0
    // a8: f9402297      ldr     x23, [x20, #0x40]
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: b94036c8      ldr     w8, [x22, #0x34]
    // b4: 11000508      add     w8, w8, #0x1
    // b8: b90036c8      str     w8, [x22, #0x34]
    // bc: f9400268      ldr     x8, [x19]
    // c0: 37f800c8      tbnz    w8, #0x1f, 0xd8 <ltmp0+0xd8>
    // c4: f1000508      subs    x8, x8, #0x1
    // c8: f9000268      str     x8, [x19]
    // cc: 54000061      b.ne    0xd8 <ltmp0+0xd8>
    // d0: aa1303e0      mov     x0, x19
    // d4: 94000000      bl      0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d8: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // dc: f9400008      ldr     x8, [x0]
    // e0: 37f800a8      tbnz    w8, #0x1f, 0xf4 <ltmp0+0xf4>
    // e4: f1000508      subs    x8, x8, #0x1
    // e8: f9000008      str     x8, [x0]
    // ec: 54000041      b.ne    0xf4 <ltmp0+0xf4>
    // f0: 94000000      bl      0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f4: b4000118      cbz     x24, 0x114 <ltmp0+0x114>
    // f8: 93407f28      sxtw    x8, w25
    // fc: f83a7af8      str     x24, [x23, x26, lsl #3]
    // 100: 8b080ef5      add     x21, x23, x8, lsl #3
    // 104: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 108: 14000000      b       0x108 <ltmp0+0x108>
    // 0000000000000108:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 10c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 110: 14000000      b       0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 114: aa1703f5      mov     x21, x23
    // 118: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 11c: 14000000      b       0x11c <ltmp0+0x11c>
    // 000000000000011c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[288] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x79, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x3f, 0x01, 0x00, 0xf1, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0x05, 0x8a, 0x1a, 0x5f, 0x05, 0x00, 0x71,
        0xe1, 0x06, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x5a, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x7a, 0xf8,
        0x4b, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0xe1, 0x05, 0x00, 0x54, 0xa8, 0x2e, 0x28, 0xcb,
        0x13, 0x69, 0x69, 0xf8, 0x48, 0x09, 0x40, 0xf9,
        0x69, 0x06, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0x21, 0x05, 0x00, 0x54, 0x48, 0x15, 0x40, 0xf9,
        0x09, 0x11, 0x40, 0xb9, 0x3f, 0x11, 0x00, 0x71,
        0xa1, 0x04, 0x00, 0x54, 0xc9, 0x36, 0x40, 0xb9,
        0x3f, 0x01, 0x00, 0x71, 0x4d, 0x04, 0x00, 0x54,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x05, 0x00, 0x51,
        0xc9, 0x36, 0x00, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x01, 0x00, 0x80, 0xd2,
        0x00, 0x01, 0x3f, 0xd6, 0xf8, 0x03, 0x00, 0xaa,
        0x97, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc8, 0x36, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0x68, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xa0, 0x7a, 0x7a, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x18, 0x01, 0x00, 0xb4,
        0x28, 0x7f, 0x40, 0x93, 0xf8, 0x7a, 0x3a, 0xf8,
        0xf5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x17, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethodDescr_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xd4, 0x0, state);
    patch_aarch64_trampoline(code + 0xf0, 0x0, state);
    patch_aarch64_26r(code + 0x108, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x110, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x11c, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_O.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03fa      mvn     w26, w10
    // 18: f87adaa9      ldr     x9, [x21, w26, sxtw #3]
    // 1c: 928000eb      mov     x11, #-0x8              ; =-8
    // 20: f100013f      cmp     x9, #0x0
    // 24: 9a9f1169      csel    x9, x11, xzr, ne
    // 28: 1a8a054a      cinc    w10, w10, ne
    // 2c: 7100095f      cmp     w10, #0x2
    // 30: 540002e1      b.ne    0x8c <ltmp0+0x8c>
    // 34: 9280002a      mov     x10, #-0x2              ; =-2
    // 38: cb28215b      sub     x27, x10, w8, uxth
    // 3c: f87b7aab      ldr     x11, [x21, x27, lsl #3]
    // 40: f940056a      ldr     x10, [x11, #0x8]
    // 44: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethodDescr_Type
    // 48: f940018c      ldr     x12, [x12]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethodDescr_Type
    // 4c: eb0c015f      cmp     x10, x12
    // 50: 540001e1      b.ne    0x8c <ltmp0+0x8c>
    // 54: f940156a      ldr     x10, [x11, #0x28]
    // 58: b940114c      ldr     w12, [x10, #0x10]
    // 5c: 7100219f      cmp     w12, #0x8
    // 60: 54000161      b.ne    0x8c <ltmp0+0x8c>
    // 64: b94036cc      ldr     w12, [x22, #0x34]
    // 68: 7100019f      cmp     w12, #0x0
    // 6c: 5400010d      b.le    0x8c <ltmp0+0x8c>
    // 70: cb282ea8      sub     x8, x21, w8, uxth #3
    // 74: 8b090108      add     x8, x8, x9
    // 78: f9400119      ldr     x25, [x8]
    // 7c: f9400969      ldr     x9, [x11, #0x10]
    // 80: f940072b      ldr     x11, [x25, #0x8]
    // 84: eb09017f      cmp     x11, x9
    // 88: 54000060      b.eq    0x94 <ltmp0+0x94>
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 94: f9400518      ldr     x24, [x8, #0x8]
    // 98: f9400548      ldr     x8, [x10, #0x8]
    // 9c: 51000589      sub     w9, w12, #0x1
    // a0: b90036c9      str     w9, [x22, #0x34]
    // a4: f9002295      str     x21, [x20, #0x40]
    // a8: aa1903e0      mov     x0, x25
    // ac: aa1803e1      mov     x1, x24
    // b0: d63f0100      blr     x8
    // b4: aa0003f7      mov     x23, x0
    // b8: f9402293      ldr     x19, [x20, #0x40]
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: b94036c8      ldr     w8, [x22, #0x34]
    // c4: 11000508      add     w8, w8, #0x1
    // c8: b90036c8      str     w8, [x22, #0x34]
    // cc: f9400328      ldr     x8, [x25]
    // d0: 37f800c8      tbnz    w8, #0x1f, 0xe8 <ltmp0+0xe8>
    // d4: f1000508      subs    x8, x8, #0x1
    // d8: f9000328      str     x8, [x25]
    // dc: 54000061      b.ne    0xe8 <ltmp0+0xe8>
    // e0: aa1903e0      mov     x0, x25
    // e4: 94000000      bl      0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e8: f9400308      ldr     x8, [x24]
    // ec: 37f800c8      tbnz    w8, #0x1f, 0x104 <ltmp0+0x104>
    // f0: f1000508      subs    x8, x8, #0x1
    // f4: f9000308      str     x8, [x24]
    // f8: 54000061      b.ne    0x104 <ltmp0+0x104>
    // fc: aa1803e0      mov     x0, x24
    // 100: 94000000      bl      0x100 <ltmp0+0x100>
    // 0000000000000100:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 104: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // 108: f9400008      ldr     x8, [x0]
    // 10c: 37f800a8      tbnz    w8, #0x1f, 0x120 <ltmp0+0x120>
    // 110: f1000508      subs    x8, x8, #0x1
    // 114: f9000008      str     x8, [x0]
    // 118: 54000041      b.ne    0x120 <ltmp0+0x120>
    // 11c: 94000000      bl      0x11c <ltmp0+0x11c>
    // 000000000000011c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 120: b40000d7      cbz     x23, 0x138 <ltmp0+0x138>
    // 124: 93407f48      sxtw    x8, w26
    // 128: f83b7a77      str     x23, [x19, x27, lsl #3]
    // 12c: 8b080e75      add     x21, x19, x8, lsl #3
    // 130: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 134: 14000000      b       0x134 <ltmp0+0x134>
    // 0000000000000134:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 138: aa1303f5      mov     x21, x19
    // 13c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 140: 14000000      b       0x140 <ltmp0+0x140>
    // 0000000000000140:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 144: 00 00 00 00
    const unsigned char code_body[328] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x7a, 0xf8, 0xeb, 0x00, 0x80, 0x92,
        0x3f, 0x01, 0x00, 0xf1, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0x05, 0x8a, 0x1a, 0x5f, 0x09, 0x00, 0x71,
        0xe1, 0x02, 0x00, 0x54, 0x2a, 0x00, 0x80, 0x92,
        0x5b, 0x21, 0x28, 0xcb, 0xab, 0x7a, 0x7b, 0xf8,
        0x6a, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0c, 0xeb,
        0xe1, 0x01, 0x00, 0x54, 0x6a, 0x15, 0x40, 0xf9,
        0x4c, 0x11, 0x40, 0xb9, 0x9f, 0x21, 0x00, 0x71,
        0x61, 0x01, 0x00, 0x54, 0xcc, 0x36, 0x40, 0xb9,
        0x9f, 0x01, 0x00, 0x71, 0x0d, 0x01, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x09, 0x8b,
        0x19, 0x01, 0x40, 0xf9, 0x69, 0x09, 0x40, 0xf9,
        0x2b, 0x07, 0x40, 0xf9, 0x7f, 0x01, 0x09, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x18, 0x05, 0x40, 0xf9,
        0x48, 0x05, 0x40, 0xf9, 0x89, 0x05, 0x00, 0x51,
        0xc9, 0x36, 0x00, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc8, 0x36, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0x28, 0x03, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xa0, 0x7a, 0x7b, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xd7, 0x00, 0x00, 0xb4, 0x48, 0x7f, 0x40, 0x93,
        0x77, 0x7a, 0x3b, 0xf8, 0x75, 0x0e, 0x08, 0x8b,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyMethodDescr_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xe4, 0x0, state);
    patch_aarch64_trampoline(code + 0x100, 0x0, state);
    patch_aarch64_trampoline(code + 0x11c, 0x0, state);
    patch_aarch64_26r(code + 0x134, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x140, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_NON_PY_GENERAL.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f8      mov     x24, x21
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 12003d09      and     w9, w8, #0xffff
    // 18: cb282eaa      sub     x10, x21, w8, uxth #3
    // 1c: 2a2903f9      mvn     w25, w9
    // 20: 9280002b      mov     x11, #-0x2              ; =-2
    // 24: cb28217a      sub     x26, x11, w8, uxth
    // 28: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // 2c: f879daa8      ldr     x8, [x21, w25, sxtw #3]
    // 30: 928000eb      mov     x11, #-0x8              ; =-8
    // 34: f100011f      cmp     x8, #0x0
    // 38: 9a9f1168      csel    x8, x11, xzr, ne
    // 3c: 1a89053b      cinc    w27, w9, ne
    // 40: 8b080153      add     x19, x10, x8
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: b2410362      orr     x2, x27, #0x8000000000000000
    // 4c: aa1303e1      mov     x1, x19
    // 50: d2800003      mov     x3, #0x0                ; =0
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 _PyObject_Vectorcall
    // 58: aa0003f7      mov     x23, x0
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: f87a7b00      ldr     x0, [x24, x26, lsl #3]
    // 68: f9400008      ldr     x8, [x0]
    // 6c: 37f800a8      tbnz    w8, #0x1f, 0x80 <ltmp0+0x80>
    // 70: f1000508      subs    x8, x8, #0x1
    // 74: f9000008      str     x8, [x0]
    // 78: 54000041      b.ne    0x80 <ltmp0+0x80>
    // 7c: 94000000      bl      0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 80: 3500013b      cbnz    w27, 0xa4 <ltmp0+0xa4>
    // 84: b4000217      cbz     x23, 0xc4 <ltmp0+0xc4>
    // 88: 93407f28      sxtw    x8, w25
    // 8c: f83a7ab7      str     x23, [x21, x26, lsl #3]
    // 90: 8b080eb5      add     x21, x21, x8, lsl #3
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: f100077b      subs    x27, x27, #0x1
    // a0: 54ffff20      b.eq    0x84 <ltmp0+0x84>
    // a4: f8408660      ldr     x0, [x19], #0x8
    // a8: f9400008      ldr     x8, [x0]
    // ac: 37ffff88      tbnz    w8, #0x1f, 0x9c <ltmp0+0x9c>
    // b0: f1000508      subs    x8, x8, #0x1
    // b4: f9000008      str     x8, [x0]
    // b8: 54ffff21      b.ne    0x9c <ltmp0+0x9c>
    // bc: 94000000      bl      0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c0: 17fffff7      b       0x9c <ltmp0+0x9c>
    // c4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c8: 14000000      b       0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // cc: 00 00 00 00
    const unsigned char code_body[208] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf8, 0x03, 0x15, 0xaa, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x3d, 0x00, 0x12,
        0xaa, 0x2e, 0x28, 0xcb, 0xf9, 0x03, 0x29, 0x2a,
        0x2b, 0x00, 0x80, 0x92, 0x7a, 0x21, 0x28, 0xcb,
        0xa0, 0x7a, 0x7a, 0xf8, 0xa8, 0xda, 0x79, 0xf8,
        0xeb, 0x00, 0x80, 0x92, 0x1f, 0x01, 0x00, 0xf1,
        0x68, 0x11, 0x9f, 0x9a, 0x3b, 0x05, 0x89, 0x1a,
        0x53, 0x01, 0x08, 0x8b, 0x95, 0x22, 0x00, 0xf9,
        0x62, 0x03, 0x41, 0xb2, 0xe1, 0x03, 0x13, 0xaa,
        0x03, 0x00, 0x80, 0xd2, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x7b, 0x7a, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0x3b, 0x01, 0x00, 0x35, 0x17, 0x02, 0x00, 0xb4,
        0x28, 0x7f, 0x40, 0x93, 0xb7, 0x7a, 0x3a, 0xf8,
        0xb5, 0x0e, 0x08, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xf1,
        0x20, 0xff, 0xff, 0x54, 0x60, 0x86, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x21, 0xff, 0xff, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0xff, 0xff, 0x17, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x54, 0x15, state);
    patch_aarch64_trampoline(code + 0x7c, 0x0, state);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xbc, 0x0, state);
    patch_aarch64_26r(code + 0xc8, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_STR_1.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f02a8      ldur    x8, [x21, #-0x10]
    // c: b50000c8      cbnz    x8, 0x24 <ltmp0+0x24>
    // 10: f85e82a8      ldur    x8, [x21, #-0x18]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyUnicode_Type
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyUnicode_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000060      b.eq    0x2c <ltmp0+0x2c>
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: aa1303e0      mov     x0, x19
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PyObject_Str
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: f9400268      ldr     x8, [x19]
    // 48: 37f80108      tbnz    w8, #0x1f, 0x68 <ltmp0+0x68>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000268      str     x8, [x19]
    // 54: 540000a1      b.ne    0x68 <ltmp0+0x68>
    // 58: aa0003f7      mov     x23, x0
    // 5c: aa1303e0      mov     x0, x19
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: aa1703e0      mov     x0, x23
    // 68: b40000a0      cbz     x0, 0x7c <ltmp0+0x7c>
    // 6c: f81e82a0      stur    x0, [x21, #-0x18]
    // 70: d10042b5      sub     x21, x21, #0x10
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa8, 0x02, 0x5f, 0xf8, 0xc8, 0x00, 0x00, 0xb5,
        0xa8, 0x82, 0x5e, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0xa0, 0x00, 0x00, 0xb4, 0xa0, 0x82, 0x1e, 0xf8,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x38, 0x19, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TUPLE_1.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f02a8      ldur    x8, [x21, #-0x10]
    // c: b50000c8      cbnz    x8, 0x24 <ltmp0+0x24>
    // 10: f85e82a8      ldur    x8, [x21, #-0x18]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTuple_Type
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTuple_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: 54000060      b.eq    0x2c <ltmp0+0x2c>
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: aa1303e0      mov     x0, x19
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PySequence_Tuple
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: f9400268      ldr     x8, [x19]
    // 48: 37f80108      tbnz    w8, #0x1f, 0x68 <ltmp0+0x68>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000268      str     x8, [x19]
    // 54: 540000a1      b.ne    0x68 <ltmp0+0x68>
    // 58: aa0003f7      mov     x23, x0
    // 5c: aa1303e0      mov     x0, x19
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: aa1703e0      mov     x0, x23
    // 68: b40000a0      cbz     x0, 0x7c <ltmp0+0x7c>
    // 6c: f81e82a0      stur    x0, [x21, #-0x18]
    // 70: d10042b5      sub     x21, x21, #0x10
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa8, 0x02, 0x5f, 0xf8, 0xc8, 0x00, 0x00, 0xb5,
        0xa8, 0x82, 0x5e, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0xa0, 0x00, 0x00, 0xb4, 0xa0, 0x82, 0x1e, 0xf8,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x38, 0x1a, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TYPE_1.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f0e68      ldr     x8, [x19, #-0x10]!
    // 8: b50000c8      cbnz    x8, 0x20 <ltmp0+0x20>
    // c: f85e82a8      ldur    x8, [x21, #-0x18]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyType_Type
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyType_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000040      b.eq    0x24 <ltmp0+0x24>
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: f9400660      ldr     x0, [x19, #0x8]
    // 28: f9400417      ldr     x23, [x0, #0x8]
    // 2c: b94002e8      ldr     w8, [x23]
    // 30: 37f80068      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 11000508      add     w8, w8, #0x1
    // 38: b90002e8      str     w8, [x23]
    // 3c: f9400008      ldr     x8, [x0]
    // 40: 37f80108      tbnz    w8, #0x1f, 0x60 <ltmp0+0x60>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000008      str     x8, [x0]
    // 4c: 540000a1      b.ne    0x60 <ltmp0+0x60>
    // 50: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 54: 910003fd      mov     x29, sp
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: f81e82b7      stur    x23, [x21, #-0x18]
    // 64: aa1303f5      mov     x21, x19
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0xf3, 0x03, 0x15, 0xaa, 0x68, 0x0e, 0x5f, 0xf8,
        0xc8, 0x00, 0x00, 0xb5, 0xa8, 0x82, 0x5e, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x60, 0x06, 0x40, 0xf9,
        0x17, 0x04, 0x40, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb7, 0x82, 0x1e, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyType_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyType_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x58, 0x0, state);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_AND_ALLOCATE_OBJECT.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 2a2803f7      mvn     w23, w8
    // 18: f877daa9      ldr     x9, [x21, w23, sxtw #3]
    // 1c: b5000549      cbnz    x9, 0xc4 <ltmp0+0xc4>
    // 20: 12800029      mov     w9, #-0x2               ; =-2
    // 24: 4b080133      sub     w19, w9, w8
    // 28: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // 2c: f9400408      ldr     x8, [x0, #0x8]
    // 30: 3942ad08      ldrb    w8, [x8, #0xab]
    // 34: 36380488      tbz     w8, #0x7, 0xc4 <ltmp0+0xc4>
    // 38: b9418008      ldr     w8, [x0, #0x180]
    // 3c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 44: 6b09011f      cmp     w8, w9
    // 48: 540003e1      b.ne    0xc4 <ltmp0+0xc4>
    // 4c: f9407ac8      ldr     x8, [x22, #0xf0]
    // 50: b40003a8      cbz     x8, 0xc4 <ltmp0+0xc4>
    // 54: f941d018      ldr     x24, [x0, #0x3a0]
    // 58: f9401b09      ldr     x9, [x24, #0x30]
    // 5c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000005c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_InitCleanup
    // 60: f940014a      ldr     x10, [x10]
    // 0000000000000060:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_InitCleanup
    // 64: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 68: b9804d4a      ldrsw   x10, [x10, #0x4c]
    // 6c: 8b090149      add     x9, x10, x9
    // 70: f9407eca      ldr     x10, [x22, #0xf8]
    // 74: cb080148      sub     x8, x10, x8
    // 78: eb880d3f      cmp     x9, x8, asr #3
    // 7c: 5400024a      b.ge    0xc4 <ltmp0+0xc4>
    // 80: 94000000      bl      0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __PyType_NewManagedObject
    // 84: b4000240      cbz     x0, 0xcc <ltmp0+0xcc>
    // 88: f837daa0      str     x0, [x21, w23, sxtw #3]
    // 8c: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // 90: b9400308      ldr     w8, [x24]
    // 94: 37f80068      tbnz    w8, #0x1f, 0xa0 <ltmp0+0xa0>
    // 98: 11000508      add     w8, w8, #0x1
    // 9c: b9000308      str     w8, [x24]
    // a0: f833dab8      str     x24, [x21, w19, sxtw #3]
    // a4: f9400008      ldr     x8, [x0]
    // a8: 37f800a8      tbnz    w8, #0x1f, 0xbc <ltmp0+0xbc>
    // ac: f1000508      subs    x8, x8, #0x1
    // b0: f9000008      str     x8, [x0]
    // b4: 54000041      b.ne    0xbc <ltmp0+0xbc>
    // b8: 94000000      bl      0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c8: 14000000      b       0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xf7, 0x03, 0x28, 0x2a,
        0xa9, 0xda, 0x77, 0xf8, 0x49, 0x05, 0x00, 0xb5,
        0x29, 0x00, 0x80, 0x12, 0x33, 0x01, 0x08, 0x4b,
        0xa0, 0xda, 0x73, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x88, 0x04, 0x38, 0x36,
        0x08, 0x80, 0x41, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0xe1, 0x03, 0x00, 0x54, 0xc8, 0x7a, 0x40, 0xf9,
        0xa8, 0x03, 0x00, 0xb4, 0x18, 0xd0, 0x41, 0xf9,
        0x09, 0x1b, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x29, 0x4d, 0x80, 0xb9,
        0x4a, 0x4d, 0x80, 0xb9, 0x49, 0x01, 0x09, 0x8b,
        0xca, 0x7e, 0x40, 0xf9, 0x48, 0x01, 0x08, 0xcb,
        0x3f, 0x0d, 0x88, 0xeb, 0x4a, 0x02, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x40, 0x02, 0x00, 0xb4,
        0xa0, 0xda, 0x37, 0xf8, 0xa0, 0xda, 0x73, 0xf8,
        0x08, 0x03, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x08, 0x03, 0x00, 0xb9,
        0xb8, 0xda, 0x33, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_InitCleanup+0x0
    // 8: OPERAND0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x80, 0x1b, state);
    patch_aarch64_trampoline(code + 0xb8, 0x0, state);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xc8, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_CLASS.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 3942ad29      ldrb    w9, [x9, #0xab]
    // c: 363800e9      tbz     w9, #0x7, 0x28 <ltmp0+0x28>
    // 10: b9418108      ldr     w8, [x8, #0x180]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 1c: 6b09011f      cmp     w8, w9
    // 20: 54000041      b.ne    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0xad, 0x42, 0x39, 0xe9, 0x00, 0x38, 0x36,
        0x08, 0x81, 0x41, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: 8b292108      add     x8, x8, w9, uxth
    // 10: f85e8108      ldur    x8, [x8, #-0x18]
    // 14: b4000048      cbz     x8, 0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0x8b,
        0x08, 0x81, 0x5e, 0xf8, 0x48, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_MODULE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9404929      ldr     x9, [x9, #0x90]
    // c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyModule_Type
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyModule_Type
    // 14: f940494a      ldr     x10, [x10, #0x90]
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000121      b.ne    0x40 <ltmp0+0x40>
    // 20: f9400908      ldr     x8, [x8, #0x10]
    // 24: f9401108      ldr     x8, [x8, #0x20]
    // 28: b9400d08      ldr     w8, [x8, #0xc]
    // 2c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000041      b.ne    0x40 <ltmp0+0x40>
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x49, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x4a, 0x49, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x09, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x08, 0x0d, 0x40, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyModule_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyModule_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_WITH_HINT.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8108      ldur    x8, [x8, #-0x18]
    // 8: b4000048      cbz     x8, 0x10 <ltmp0+0x10>
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 14: 00 00 00 00
    const unsigned char code_body[24] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x81, 0x5e, 0xf8,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x10, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 14: b5000129      cbnz    x9, 0x38 <ltmp0+0x38>
    // 18: 12800029      mov     w9, #-0x2               ; =-2
    // 1c: 4b080128      sub     w8, w9, w8
    // 20: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 24: f9400508      ldr     x8, [x8, #0x8]
    // 28: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <ltmp0+0x3c>
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0xa9, 0xda, 0x69, 0xf8, 0x29, 0x01, 0x00, 0xb5,
        0x29, 0x00, 0x80, 0x12, 0x28, 0x01, 0x08, 0x4b,
        0xa8, 0xda, 0x68, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethod_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EG_MATCH.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: aa1603e0      mov     x0, x22
    // 18: aa1303e1      mov     x1, x19
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyEval_CheckExceptStarTypeValid
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: 37f80540      tbnz    w0, #0x1f, 0xd0 <ltmp0+0xd0>
    // 2c: a9007fff      stp     xzr, xzr, [sp]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 910023e2      add     x2, sp, #0x8
    // 38: 910003e3      mov     x3, sp
    // 3c: aa1703e0      mov     x0, x23
    // 40: aa1303e1      mov     x1, x19
    // 44: 94000000      bl      0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __PyEval_ExceptionGroupMatch
    // 48: aa0003f8      mov     x24, x0
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: f94002e8      ldr     x8, [x23]
    // 58: 37f800c8      tbnz    w8, #0x1f, 0x70 <ltmp0+0x70>
    // 5c: f1000508      subs    x8, x8, #0x1
    // 60: f90002e8      str     x8, [x23]
    // 64: 54000061      b.ne    0x70 <ltmp0+0x70>
    // 68: aa1703e0      mov     x0, x23
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: f9400268      ldr     x8, [x19]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <ltmp0+0x84>
    // 78: f1000508      subs    x8, x8, #0x1
    // 7c: f9000268      str     x8, [x19]
    // 80: 54000460      b.eq    0x10c <ltmp0+0x10c>
    // 84: 37f803f8      tbnz    w24, #0x1f, 0x100 <ltmp0+0x100>
    // 88: f94007e0      ldr     x0, [sp, #0x8]
    // 8c: b40003a0      cbz     x0, 0x100 <ltmp0+0x100>
    // 90: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000090:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 98: eb08001f      cmp     x0, x8
    // 9c: 54000100      b.eq    0xbc <ltmp0+0xbc>
    // a0: d10042a8      sub     x8, x21, #0x10
    // a4: f9002288      str     x8, [x20, #0x40]
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 _PyErr_SetHandledException
    // ac: f9402288      ldr     x8, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: 91004115      add     x21, x8, #0x10
    // b8: f94007e8      ldr     x8, [sp, #0x8]
    // bc: f94003e9      ldr     x9, [sp]
    // c0: a93f22a9      stp     x9, x8, [x21, #-0x10]
    // c4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // c8: 910083ff      add     sp, sp, #0x20
    // cc: 14000000      b       0xcc <ltmp0+0xcc>
    // 00000000000000cc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // d0: f94002e8      ldr     x8, [x23]
    // d4: 37f800c8      tbnz    w8, #0x1f, 0xec <ltmp0+0xec>
    // d8: f1000508      subs    x8, x8, #0x1
    // dc: f90002e8      str     x8, [x23]
    // e0: 54000061      b.ne    0xec <ltmp0+0xec>
    // e4: aa1703e0      mov     x0, x23
    // e8: 94000000      bl      0xe8 <ltmp0+0xe8>
    // 00000000000000e8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // ec: f9400268      ldr     x8, [x19]
    // f0: 37f80088      tbnz    w8, #0x1f, 0x100 <ltmp0+0x100>
    // f4: f1000508      subs    x8, x8, #0x1
    // f8: f9000268      str     x8, [x19]
    // fc: 54000100      b.eq    0x11c <ltmp0+0x11c>
    // 100: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 104: 910083ff      add     sp, sp, #0x20
    // 108: 14000000      b       0x108 <ltmp0+0x108>
    // 0000000000000108:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 10c: aa1303e0      mov     x0, x19
    // 110: 94000000      bl      0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 114: 36fffbb8      tbz     w24, #0x1f, 0x88 <ltmp0+0x88>
    // 118: 17fffffa      b       0x100 <ltmp0+0x100>
    // 11c: aa1303e0      mov     x0, x19
    // 120: 94000000      bl      0x120 <ltmp0+0x120>
    // 0000000000000120:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 124: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 128: 910083ff      add     sp, sp, #0x20
    // 12c: 14000000      b       0x12c <ltmp0+0x12c>
    // 000000000000012c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[304] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb7, 0x4e, 0x7f, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x05, 0xf8, 0x37, 0xff, 0x7f, 0x00, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0xe3, 0x03, 0x00, 0x91, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x60, 0x04, 0x00, 0x54, 0xf8, 0x03, 0xf8, 0x37,
        0xe0, 0x07, 0x40, 0xf9, 0xa0, 0x03, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x00, 0x08, 0xeb, 0x00, 0x01, 0x00, 0x54,
        0xa8, 0x42, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x41, 0x00, 0x91,
        0xe8, 0x07, 0x40, 0xf9, 0xe9, 0x03, 0x40, 0xf9,
        0xa9, 0x22, 0x3f, 0xa9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xe8, 0x02, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb8, 0xfb, 0xff, 0x36,
        0xfa, 0xff, 0xff, 0x17, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x1e, state);
    patch_aarch64_trampoline(code + 0x44, 0x1d, state);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa8, 0x1c, state);
    patch_aarch64_26r(code + 0xcc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xe8, 0x0, state);
    patch_aarch64_26r(code + 0x108, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x110, 0x0, state);
    patch_aarch64_trampoline(code + 0x120, 0x0, state);
    patch_aarch64_26r(code + 0x12c, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EXC_MATCH.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: aa1303e1      mov     x1, x19
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __PyEval_CheckExceptTypeValid
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: 37f80320      tbnz    w0, #0x1f, 0x88 <ltmp0+0x88>
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: aa1703e0      mov     x0, x23
    // 30: aa1303e1      mov     x1, x19
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 _PyErr_GivenExceptionMatches
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400268      ldr     x8, [x19]
    // 44: 37f80108      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000268      str     x8, [x19]
    // 50: 540000a1      b.ne    0x64 <ltmp0+0x64>
    // 54: aa0003f7      mov     x23, x0
    // 58: aa1303e0      mov     x0, x19
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 60: aa1703e0      mov     x0, x23
    // 64: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 6c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 70: f9400129      ldr     x9, [x9]
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 74: 7100001f      cmp     w0, #0x0
    // 78: 9a880128      csel    x8, x9, x8, eq
    // 7c: f81f82a8      stur    x8, [x21, #-0x8]
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 88: f9400268      ldr     x8, [x19]
    // 8c: 37f80088      tbnz    w8, #0x1f, 0x9c <ltmp0+0x9c>
    // 90: f1000508      subs    x8, x8, #0x1
    // 94: f9000268      str     x8, [x19]
    // 98: 54000060      b.eq    0xa4 <ltmp0+0xa4>
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // a4: aa1303e0      mov     x0, x19
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // b4: 00 00 00 00
    const unsigned char code_body[184] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb7, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x03, 0xf8, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x00, 0x71,
        0x28, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x20, state);
    patch_aarch64_trampoline(code + 0x34, 0x1f, state);
    patch_aarch64_trampoline(code + 0x5c, 0x0, state);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0xa8, 0x0, state);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400a88      ldr     x8, [x20, #0x10]
    // 4: b9409108      ldr     w8, [x8, #0x90]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 10: 6b09011f      cmp     w8, w9
    // 14: 54000041      b.ne    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0x88, 0x0a, 0x40, 0xf9, 0x08, 0x91, 0x40, 0xb9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_EXACT_ARGS.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: 1280002a      mov     w10, #-0x2              ; =-2
    // 14: 4b08014a      sub     w10, w10, w8
    // 18: f86adaaa      ldr     x10, [x21, w10, sxtw #3]
    // 1c: f940194a      ldr     x10, [x10, #0x30]
    // 20: b940354a      ldr     w10, [x10, #0x34]
    // 24: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 28: f100013f      cmp     x9, #0x0
    // 2c: 1a880508      cinc    w8, w8, ne
    // 30: 6b08015f      cmp     w10, w8
    // 34: 54000041      b.ne    0x3c <ltmp0+0x3c>
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0x2a, 0x00, 0x80, 0x12, 0x4a, 0x01, 0x08, 0x4b,
        0xaa, 0xda, 0x6a, 0xf8, 0x4a, 0x19, 0x40, 0xf9,
        0x4a, 0x35, 0x40, 0xb9, 0xa9, 0xda, 0x69, 0xf8,
        0x3f, 0x01, 0x00, 0xf1, 0x08, 0x05, 0x88, 0x1a,
        0x5f, 0x01, 0x08, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92800029      mov     x9, #-0x2               ; =-2
    // c: cb282128      sub     x8, x9, w8, uxth
    // 10: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 14: f9400509      ldr     x9, [x8, #0x8]
    // 18: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 540000e1      b.ne    0x40 <ltmp0+0x40>
    // 28: b9409108      ldr     w8, [x8, #0x90]
    // 2c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000041      b.ne    0x40 <ltmp0+0x40>
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x92, 0x28, 0x21, 0x28, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0xe1, 0x00, 0x00, 0x54,
        0x08, 0x91, 0x40, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_INLINE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND1
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND1
    // 8: b9409108      ldr     w8, [x8, #0x90]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000041      b.ne    0x20 <ltmp0+0x20>
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x91, 0x40, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPERAND1
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->operand1);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_KW.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92800049      mov     x9, #-0x3               ; =-3
    // c: cb282128      sub     x8, x9, w8, uxth
    // 10: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 14: f9400509      ldr     x9, [x8, #0x8]
    // 18: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 540000e1      b.ne    0x40 <ltmp0+0x40>
    // 28: b9409108      ldr     w8, [x8, #0x90]
    // 2c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000041      b.ne    0x40 <ltmp0+0x40>
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x49, 0x00, 0x80, 0x92, 0x28, 0x21, 0x28, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0xe1, 0x00, 0x00, 0x54,
        0x08, 0x91, 0x40, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92800029      mov     x9, #-0x2               ; =-2
    // c: cb282128      sub     x8, x9, w8, uxth
    // 10: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 14: f9400508      ldr     x8, [x8, #0x8]
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 540000c0      b.eq    0x3c <ltmp0+0x3c>
    // 28: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <ltmp0+0x3c>
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x92, 0x28, 0x21, 0x28, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc0, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethod_Type+0x0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92800049      mov     x9, #-0x3               ; =-3
    // c: cb282128      sub     x8, x9, w8, uxth
    // 10: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 14: f9400508      ldr     x8, [x8, #0x8]
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 540000c0      b.eq    0x3c <ltmp0+0x3c>
    // 28: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000040      b.eq    0x3c <ltmp0+0x3c>
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x49, 0x00, 0x80, 0x92, 0x28, 0x21, 0x28, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc0, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethod_Type+0x0
    // 8: &PyFunction_Type+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000048      cbz     w8, 0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x48, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 12800029      mov     w9, #-0x2               ; =-2
    // 10: 4b080129      sub     w9, w9, w8
    // 14: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 18: f940052a      ldr     x10, [x9, #0x8]
    // 1c: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 540001e1      b.ne    0x64 <ltmp0+0x64>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: f940052a      ldr     x10, [x9, #0x8]
    // 34: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000121      b.ne    0x64 <ltmp0+0x64>
    // 44: b9409129      ldr     w9, [x9, #0x90]
    // 48: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 54000081      b.ne    0x64 <ltmp0+0x64>
    // 58: 2a2803e8      mvn     w8, w8
    // 5c: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 60: b4000048      cbz     x8, 0x68 <ltmp0+0x68>
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x29, 0x00, 0x80, 0x12,
        0x29, 0x01, 0x08, 0x4b, 0xa9, 0xda, 0x69, 0xf8,
        0x2a, 0x05, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0xe1, 0x01, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x2a, 0x05, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x21, 0x01, 0x00, 0x54, 0x29, 0x91, 0x40, 0xb9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0xe8, 0x03, 0x28, 0x2a, 0xa8, 0xda, 0x68, 0xf8,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION_KW.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92403d08      and     x8, x8, #0xffff
    // c: 92800049      mov     x9, #-0x3               ; =-3
    // 10: cb080129      sub     x9, x9, x8
    // 14: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 18: f940052a      ldr     x10, [x9, #0x8]
    // 1c: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 54000201      b.ne    0x68 <ltmp0+0x68>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: f940052a      ldr     x10, [x9, #0x8]
    // 34: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFunction_Type
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000141      b.ne    0x68 <ltmp0+0x68>
    // 44: b9409129      ldr     w9, [x9, #0x90]
    // 48: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 540000a1      b.ne    0x68 <ltmp0+0x68>
    // 58: 92800029      mov     x9, #-0x2               ; =-2
    // 5c: cb080128      sub     x8, x9, x8
    // 60: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 64: b4000048      cbz     x8, 0x6c <ltmp0+0x6c>
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 6c: 14000000      b       0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[112] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x49, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x08, 0xcb, 0xa9, 0x7a, 0x69, 0xf8,
        0x2a, 0x05, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x01, 0x02, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x2a, 0x05, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x41, 0x01, 0x00, 0x54, 0x29, 0x91, 0x40, 0xb9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0xa1, 0x00, 0x00, 0x54,
        0x29, 0x00, 0x80, 0x92, 0x28, 0x01, 0x08, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x48, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x6c, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PEP_523.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400ac8      ldr     x8, [x22, #0x10]
    // 4: f950a508      ldr     x8, [x8, #0x2148]
    // 8: b4000048      cbz     x8, 0x10 <ltmp0+0x10>
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 14: 00 00 00 00
    const unsigned char code_body[24] = {
        0xc8, 0x0a, 0x40, 0xf9, 0x08, 0xa5, 0x50, 0xf9,
        0x48, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f2401d1f      tst     x8, #0xff
    // 8: 54000160      b.eq    0x34 <ltmp0+0x34>
    // c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 10: 910003fd      mov     x29, sp
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: aa1603e0      mov     x0, x22
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __Py_HandlePending
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 2c: 34000040      cbz     w0, 0x34 <ltmp0+0x34>
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0x60, 0x01, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x40, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x21, state);
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 370801c8      tbnz    w8, #0x1, 0x40 <ltmp0+0x40>
    // c: f9400ec8      ldr     x8, [x22, #0x18]
    // 10: f2401d1f      tst     x8, #0xff
    // 14: 54000160      b.eq    0x40 <ltmp0+0x40>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 910003fd      mov     x29, sp
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: aa1603e0      mov     x0, x22
    // 28: 94000000      bl      0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __Py_HandlePending
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 34000040      cbz     w0, 0x40 <ltmp0+0x40>
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xc8, 0x01, 0x08, 0x37, 0xc8, 0x0e, 0x40, 0xf9,
        0x1f, 0x1d, 0x40, 0xf2, 0x60, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x40, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x28, 0x21, state);
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9407ac8      ldr     x8, [x22, #0xf0]
    // 4: b40001e8      cbz     x8, 0x40 <ltmp0+0x40>
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 9280002a      mov     x10, #-0x2              ; =-2
    // 14: cb292149      sub     x9, x10, w9, uxth
    // 18: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 1c: f9401929      ldr     x9, [x9, #0x30]
    // 20: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 24: f9407eca      ldr     x10, [x22, #0xf8]
    // 28: cb080148      sub     x8, x10, x8
    // 2c: eb880d3f      cmp     x9, x8, asr #3
    // 30: 5400008a      b.ge    0x40 <ltmp0+0x40>
    // 34: b9402ec8      ldr     w8, [x22, #0x2c]
    // 38: 7100051f      cmp     w8, #0x1
    // 3c: 5400004c      b.gt    0x44 <ltmp0+0x44>
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xc8, 0x7a, 0x40, 0xf9, 0xe8, 0x01, 0x00, 0xb4,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x2a, 0x00, 0x80, 0x92, 0x49, 0x21, 0x29, 0xcb,
        0xa9, 0x7a, 0x69, 0xf8, 0x29, 0x19, 0x40, 0xf9,
        0x29, 0x4d, 0x80, 0xb9, 0xca, 0x7e, 0x40, 0xf9,
        0x48, 0x01, 0x08, 0xcb, 0x3f, 0x0d, 0x88, 0xeb,
        0x8a, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x4c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE_OPERAND.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9407ac8      ldr     x8, [x22, #0xf0]
    // 4: b4000168      cbz     x8, 0x30 <ltmp0+0x30>
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 10: f9407eca      ldr     x10, [x22, #0xf8]
    // 14: cb080148      sub     x8, x10, x8
    // 18: 9343fd08      asr     x8, x8, #3
    // 1c: eb29c11f      cmp     x8, w9, sxtw
    // 20: 5400008d      b.le    0x30 <ltmp0+0x30>
    // 24: b9402ec8      ldr     w8, [x22, #0x2c]
    // 28: 7100051f      cmp     w8, #0x1
    // 2c: 5400004c      b.gt    0x34 <ltmp0+0x34>
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0xc8, 0x7a, 0x40, 0xf9, 0x68, 0x01, 0x00, 0xb4,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xca, 0x7e, 0x40, 0xf9, 0x48, 0x01, 0x08, 0xcb,
        0x08, 0xfd, 0x43, 0x93, 0x1f, 0xc1, 0x29, 0xeb,
        0x8d, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x4c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000048      tbnz    w8, #0x0, 0x14 <ltmp0+0x14>
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x48, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY_AND_SET_IP.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000048      tbnz    w8, #0x0, 0x14 <ltmp0+0x14>
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 14: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 1c: f9001e88      str     x8, [x20, #0x38]
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x48, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x88, 0x1e, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, (uintptr_t)code + sizeof(code_body));
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000019      adrp    x25, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400339      ldr     x25, [x25]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: a97f5eb8      ldp     x24, x23, [x21, #-0x10]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 53053f22      ubfx    w2, w25, #5, #11
    // 1c: aa1803e0      mov     x0, x24
    // 20: aa1703e1      mov     x1, x23
    // 24: 94000000      bl      0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 _PyObject_RichCompare
    // 28: aa0003f3      mov     x19, x0
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: f9400308      ldr     x8, [x24]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <ltmp0+0x48>
    // 3c: f1000508      subs    x8, x8, #0x1
    // 40: f9000308      str     x8, [x24]
    // 44: 54000120      b.eq    0x68 <ltmp0+0x68>
    // 48: f94002e8      ldr     x8, [x23]
    // 4c: 37f80168      tbnz    w8, #0x1f, 0x78 <ltmp0+0x78>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f90002e8      str     x8, [x23]
    // 58: 54000101      b.ne    0x78 <ltmp0+0x78>
    // 5c: aa1703e0      mov     x0, x23
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: 14000005      b       0x78 <ltmp0+0x78>
    // 68: aa1803e0      mov     x0, x24
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: f94002e8      ldr     x8, [x23]
    // 74: 36fffee8      tbz     w8, #0x1f, 0x50 <ltmp0+0x50>
    // 78: b4000433      cbz     x19, 0xfc <ltmp0+0xfc>
    // 7c: 12003f28      and     w8, w25, #0xffff
    // 80: 372000a8      tbnz    w8, #0x4, 0x94 <ltmp0+0x94>
    // 84: d10042b5      sub     x21, x21, #0x10
    // 88: f80086b3      str     x19, [x21], #0x8
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 94: d10042a8      sub     x8, x21, #0x10
    // 98: f9002288      str     x8, [x20, #0x40]
    // 9c: aa1303e0      mov     x0, x19
    // a0: 94000000      bl      0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 _PyObject_IsTrue
    // a4: f9402295      ldr     x21, [x20, #0x40]
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: f9400268      ldr     x8, [x19]
    // b0: 37f80088      tbnz    w8, #0x1f, 0xc0 <ltmp0+0xc0>
    // b4: f1000508      subs    x8, x8, #0x1
    // b8: f9000268      str     x8, [x19]
    // bc: 54000160      b.eq    0xe8 <ltmp0+0xe8>
    // c0: 37f801e0      tbnz    w0, #0x1f, 0xfc <ltmp0+0xfc>
    // c4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000c4:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // c8: f9400108      ldr     x8, [x8]
    // 00000000000000c8:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // cc: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000cc:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // d0: f9400129      ldr     x9, [x9]
    // 00000000000000d0:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // d4: 7100001f      cmp     w0, #0x0
    // d8: 9a880133      csel    x19, x9, x8, eq
    // dc: f80086b3      str     x19, [x21], #0x8
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e8: aa0003f7      mov     x23, x0
    // ec: aa1303e0      mov     x0, x19
    // f0: 94000000      bl      0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f4: aa1703e0      mov     x0, x23
    // f8: 36fffe60      tbz     w0, #0x1f, 0xc4 <ltmp0+0xc4>
    // fc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 100: 14000000      b       0x100 <ltmp0+0x100>
    // 0000000000000100:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x19, 0x00, 0x00, 0x90, 0x39, 0x03, 0x40, 0xf9,
        0xb8, 0x5e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x22, 0x3f, 0x05, 0x53, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf3, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x08, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x20, 0x01, 0x00, 0x54,
        0xe8, 0x02, 0x40, 0xf9, 0x68, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x01, 0x01, 0x00, 0x54, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x05, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xe8, 0xfe, 0xff, 0x36,
        0x33, 0x04, 0x00, 0xb4, 0x28, 0x3f, 0x00, 0x12,
        0xa8, 0x00, 0x20, 0x37, 0xb5, 0x42, 0x00, 0xd1,
        0xb3, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xa8, 0x42, 0x00, 0xd1,
        0x88, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x60, 0x01, 0x00, 0x54,
        0xe0, 0x01, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x00, 0x71,
        0x33, 0x01, 0x88, 0x9a, 0xb3, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x60, 0xfe, 0xff, 0x36, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_trampoline(code + 0x24, 0x23, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_26r(code + 0x90, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xa0, 0x22, state);
    patch_aarch64_33rx(code + 0xc4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xf0, 0x0, state);
    patch_aarch64_26r(code + 0x100, state->instruction_starts[instruction->error_target]);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_FLOAT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 10: f85f8278      ldur    x24, [x19, #-0x8]
    // 14: fd400b08      ldr     d8, [x24, #0x10]
    // 18: fd400ae9      ldr     d9, [x23, #0x10]
    // 1c: f9400308      ldr     x8, [x24]
    // 20: 37f80088      tbnz    w8, #0x1f, 0x30 <ltmp0+0x30>
    // 24: f1000508      subs    x8, x8, #0x1
    // 28: f9000308      str     x8, [x24]
    // 2c: 54000220      b.eq    0x70 <ltmp0+0x70>
    // 30: f94002e8      ldr     x8, [x23]
    // 34: 37f80368      tbnz    w8, #0x1f, 0xa0 <ltmp0+0xa0>
    // 38: f1000508      subs    x8, x8, #0x1
    // 3c: f90002e8      str     x8, [x23]
    // 40: 54000301      b.ne    0xa0 <ltmp0+0xa0>
    // 44: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 48: f9400129      ldr     x9, [x9]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 4c: f952fd28      ldr     x8, [x9, #0x25f8]
    // 50: b40000a8      cbz     x8, 0x64 <ltmp0+0x64>
    // 54: f9530122      ldr     x2, [x9, #0x2600]
    // 58: aa1703e0      mov     x0, x23
    // 5c: 52800021      mov     w1, #0x1                ; =1
    // 60: d63f0100      blr     x8
    // 64: aa1703e0      mov     x0, x23
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __PyFloat_ExactDealloc
    // 6c: 1400000d      b       0xa0 <ltmp0+0xa0>
    // 70: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 74: f9400129      ldr     x9, [x9]
    // 0000000000000074:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 78: f952fd28      ldr     x8, [x9, #0x25f8]
    // 7c: b40000a8      cbz     x8, 0x90 <ltmp0+0x90>
    // 80: f9530122      ldr     x2, [x9, #0x2600]
    // 84: aa1803e0      mov     x0, x24
    // 88: 52800021      mov     w1, #0x1                ; =1
    // 8c: d63f0100      blr     x8
    // 90: aa1803e0      mov     x0, x24
    // 94: 94000000      bl      0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __PyFloat_ExactDealloc
    // 98: f94002e8      ldr     x8, [x23]
    // 9c: 36fffce8      tbz     w8, #0x1f, 0x38 <ltmp0+0x38>
    // a0: 1e692100      fcmp    d8, d9
    // a4: 1a9fb7e8      cset    w8, ge
    // a8: 1a9f87e9      cset    w9, ls
    // ac: 2a080528      orr     w8, w9, w8, lsl #1
    // b0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000b0:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // b4: f9400129      ldr     x9, [x9]
    // 00000000000000b4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // b8: 12003d29      and     w9, w9, #0xffff
    // bc: 1ac82528      lsr     w8, w9, w8
    // c0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000c0:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // c4: f9400129      ldr     x9, [x9]
    // 00000000000000c4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // c8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 00000000000000c8:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // cc: f940014a      ldr     x10, [x10]
    // 00000000000000cc:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // d0: 7200011f      tst     w8, #0x1
    // d4: 9a890148      csel    x8, x10, x9, eq
    // d8: f81f02a8      stur    x8, [x21, #-0x10]
    // dc: aa1303f5      mov     x21, x19
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0x08, 0x0b, 0x40, 0xfd,
        0xe9, 0x0a, 0x40, 0xfd, 0x08, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0xe8, 0x02, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0x00, 0x21, 0x69, 0x1e, 0xe8, 0xb7, 0x9f, 0x1a,
        0xe9, 0x87, 0x9f, 0x1a, 0x28, 0x05, 0x08, 0x2a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x29, 0x3d, 0x00, 0x12, 0x28, 0x25, 0xc8, 0x1a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0x72, 0x48, 0x01, 0x89, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    // 18: &_PyRuntime+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x68, 0x24, state);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x94, 0x24, state);
    patch_aarch64_33rx(code + 0xb0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 8: f85f8278      ldur    x24, [x19, #-0x8]
    // c: f9400b19      ldr     x25, [x24, #0x10]
    // 10: f100433f      cmp     x25, #0x10
    // 14: 54000082      b.hs    0x24 <ltmp0+0x24>
    // 18: f9400afa      ldr     x26, [x23, #0x10]
    // 1c: f100435f      cmp     x26, #0x10
    // 20: 54000043      b.lo    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: b9401b1c      ldr     w28, [x24, #0x18]
    // 34: b9401afb      ldr     w27, [x23, #0x18]
    // 38: f9400308      ldr     x8, [x24]
    // 3c: 37f801c8      tbnz    w8, #0x1f, 0x74 <ltmp0+0x74>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000308      str     x8, [x24]
    // 48: 54000161      b.ne    0x74 <ltmp0+0x74>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1803e0      mov     x0, x24
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1803e0      mov     x0, x24
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // 74: f94002e8      ldr     x8, [x23]
    // 78: 37f801c8      tbnz    w8, #0x1f, 0xb0 <ltmp0+0xb0>
    // 7c: f1000508      subs    x8, x8, #0x1
    // 80: f90002e8      str     x8, [x23]
    // 84: 54000161      b.ne    0xb0 <ltmp0+0xb0>
    // 88: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 8c: f9400129      ldr     x9, [x9]
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 90: f952fd28      ldr     x8, [x9, #0x25f8]
    // 94: b40000a8      cbz     x8, 0xa8 <ltmp0+0xa8>
    // 98: f9530122      ldr     x2, [x9, #0x2600]
    // 9c: aa1703e0      mov     x0, x23
    // a0: 52800021      mov     w1, #0x1                ; =1
    // a4: d63f0100      blr     x8
    // a8: aa1703e0      mov     x0, x23
    // ac: 94000000      bl      0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // b0: 92400728      and     x8, x25, #0x3
    // b4: 9ba8f388      umsubl  x8, w28, w8, x28
    // b8: 92400749      and     x9, x26, #0x3
    // bc: 9ba9ef69      umsubl  x9, w27, w9, x27
    // c0: eb09011f      cmp     x8, x9
    // c4: 1a9fb7e8      cset    w8, ge
    // c8: 1a9fc7e9      cset    w9, le
    // cc: 2a080528      orr     w8, w9, w8, lsl #1
    // d0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000d0:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // d4: f9400129      ldr     x9, [x9]
    // 00000000000000d4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // d8: 12003d29      and     w9, w9, #0xffff
    // dc: 1ac82528      lsr     w8, w9, w8
    // e0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000e0:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // e4: f9400129      ldr     x9, [x9]
    // 00000000000000e4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // e8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 00000000000000e8:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // ec: f940014a      ldr     x10, [x10]
    // 00000000000000ec:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // f0: 7200011f      tst     w8, #0x1
    // f4: 9a890148      csel    x8, x10, x9, eq
    // f8: f81f02a8      stur    x8, [x21, #-0x10]
    // fc: aa1303f5      mov     x21, x19
    // 100: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 104: 14000000      b       0x104 <ltmp0+0x104>
    // 0000000000000104:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[264] = {
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0x19, 0x0b, 0x40, 0xf9,
        0x3f, 0x43, 0x00, 0xf1, 0x82, 0x00, 0x00, 0x54,
        0xfa, 0x0a, 0x40, 0xf9, 0x5f, 0x43, 0x00, 0xf1,
        0x43, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x1c, 0x1b, 0x40, 0xb9, 0xfb, 0x1a, 0x40, 0xb9,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x28, 0x07, 0x40, 0x92, 0x88, 0xf3, 0xa8, 0x9b,
        0x49, 0x07, 0x40, 0x92, 0x69, 0xef, 0xa9, 0x9b,
        0x1f, 0x01, 0x09, 0xeb, 0xe8, 0xb7, 0x9f, 0x1a,
        0xe9, 0xc7, 0x9f, 0x1a, 0x28, 0x05, 0x08, 0x2a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x29, 0x3d, 0x00, 0x12, 0x28, 0x25, 0xc8, 0x1a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0x72, 0x48, 0x01, 0x89, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    // 18: &_PyRuntime+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x70, 0x2, state);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0xac, 0x2, state);
    patch_aarch64_33rx(code + 0xd0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xe0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x104, (uintptr_t)code + sizeof(code_body));
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_STR.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 10: f85f8279      ldur    x25, [x19, #-0x8]
    // 14: aa1903e0      mov     x0, x25
    // 18: aa1703e1      mov     x1, x23
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __PyUnicode_Equal
    // 20: aa0003f8      mov     x24, x0
    // 24: f9400328      ldr     x8, [x25]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000328      str     x8, [x25]
    // 34: 54000220      b.eq    0x78 <ltmp0+0x78>
    // 38: f94002e8      ldr     x8, [x23]
    // 3c: 37f80368      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f90002e8      str     x8, [x23]
    // 48: 54000301      b.ne    0xa8 <ltmp0+0xa8>
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 54: f952fd28      ldr     x8, [x9, #0x25f8]
    // 58: b40000a8      cbz     x8, 0x6c <ltmp0+0x6c>
    // 5c: f9530122      ldr     x2, [x9, #0x2600]
    // 60: aa1703e0      mov     x0, x23
    // 64: 52800021      mov     w1, #0x1                ; =1
    // 68: d63f0100      blr     x8
    // 6c: aa1703e0      mov     x0, x23
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __PyUnicode_ExactDealloc
    // 74: 1400000d      b       0xa8 <ltmp0+0xa8>
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 80: f952fd28      ldr     x8, [x9, #0x25f8]
    // 84: b40000a8      cbz     x8, 0x98 <ltmp0+0x98>
    // 88: f9530122      ldr     x2, [x9, #0x2600]
    // 8c: aa1903e0      mov     x0, x25
    // 90: 52800021      mov     w1, #0x1                ; =1
    // 94: d63f0100      blr     x8
    // 98: aa1903e0      mov     x0, x25
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __PyUnicode_ExactDealloc
    // a0: f94002e8      ldr     x8, [x23]
    // a4: 36fffce8      tbz     w8, #0x1f, 0x40 <ltmp0+0x40>
    // a8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000a8:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // b0: 11001f09      add     w9, w24, #0x7
    // b4: 0a090108      and     w8, w8, w9
    // b8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000b8:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // bc: f9400129      ldr     x9, [x9]
    // 00000000000000bc:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // c0: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 00000000000000c0:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // c4: f940014a      ldr     x10, [x10]
    // 00000000000000c4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // c8: 72003d1f      tst     w8, #0xffff
    // cc: 9a890148      csel    x8, x10, x9, eq
    // d0: f81f02a8      stur    x8, [x21, #-0x10]
    // d4: aa1303f5      mov     x21, x19
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[224] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x79, 0x82, 0x5f, 0xf8, 0xe0, 0x03, 0x19, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x20, 0x02, 0x00, 0x54,
        0xe8, 0x02, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x01, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0xfd, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x01, 0x53, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xe8, 0xfc, 0xff, 0x36,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x1f, 0x00, 0x11, 0x08, 0x01, 0x09, 0x0a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x48, 0x01, 0x89, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    // 18: &_PyRuntime+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x25, state);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x70, 0x4, state);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x9c, 0x4, state);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xdc, (uintptr_t)code + sizeof(code_body));
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f5eb8      ldp     x24, x23, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1703e0      mov     x0, x23
    // 14: aa1803e1      mov     x1, x24
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PySequence_Contains
    // 1c: aa0003f3      mov     x19, x0
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f9400308      ldr     x8, [x24]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000308      str     x8, [x24]
    // 38: 54000120      b.eq    0x5c <ltmp0+0x5c>
    // 3c: f94002e8      ldr     x8, [x23]
    // 40: 37f80168      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f90002e8      str     x8, [x23]
    // 4c: 54000101      b.ne    0x6c <ltmp0+0x6c>
    // 50: aa1703e0      mov     x0, x23
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: 14000005      b       0x6c <ltmp0+0x6c>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: f94002e8      ldr     x8, [x23]
    // 68: 36fffee8      tbz     w8, #0x1f, 0x44 <ltmp0+0x44>
    // 6c: 37f801b3      tbnz    w19, #0x1f, 0xa0 <ltmp0+0xa0>
    // 70: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 78: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 7c: f9400129      ldr     x9, [x9]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 80: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 84: f940014a      ldr     x10, [x10]
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 88: 6b28227f      cmp     w19, w8, uxth
    // 8c: 9a890148      csel    x8, x10, x9, eq
    // 90: f81f02a8      stur    x8, [x21, #-0x10]
    // 94: d10022b5      sub     x21, x21, #0x8
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a4: 14000000      b       0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x5e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf3, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0xe8, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb3, 0x01, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x7f, 0x22, 0x28, 0x6b, 0x48, 0x01, 0x89, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x26, state);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa4, state->instruction_starts[instruction->error_target]);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_DICT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000060      b.eq    0x28 <ltmp0+0x28>
    // 20: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 28: f85f02b8      ldur    x24, [x21, #-0x10]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: aa1303e0      mov     x0, x19
    // 34: aa1803e1      mov     x1, x24
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PyDict_Contains
    // 3c: aa0003f7      mov     x23, x0
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400308      ldr     x8, [x24]
    // 4c: 37f800c8      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000308      str     x8, [x24]
    // 58: 54000061      b.ne    0x64 <ltmp0+0x64>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: f9400268      ldr     x8, [x19]
    // 68: 37f80088      tbnz    w8, #0x1f, 0x78 <ltmp0+0x78>
    // 6c: f1000508      subs    x8, x8, #0x1
    // 70: f9000268      str     x8, [x19]
    // 74: 540001c0      b.eq    0xac <ltmp0+0xac>
    // 78: 37f80217      tbnz    w23, #0x1f, 0xb8 <ltmp0+0xb8>
    // 7c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 84: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 8c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 90: f940014a      ldr     x10, [x10]
    // 0000000000000090:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 94: 6b2822ff      cmp     w23, w8, uxth
    // 98: 9a890148      csel    x8, x10, x9, eq
    // 9c: f81f02a8      stur    x8, [x21, #-0x10]
    // a0: d10022b5      sub     x21, x21, #0x8
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // ac: aa1303e0      mov     x0, x19
    // b0: 94000000      bl      0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b4: 36fffe57      tbz     w23, #0x1f, 0x7c <ltmp0+0x7c>
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xb8, 0x02, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xc0, 0x01, 0x00, 0x54,
        0x17, 0x02, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0xff, 0x22, 0x28, 0x6b,
        0x48, 0x01, 0x89, 0x9a, 0xa8, 0x02, 0x1f, 0xf8,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x57, 0xfe, 0xff, 0x36,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    // 18: &PyDict_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x38, 0x27, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xb0, 0x0, state);
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_SET.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PySet_Type
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PySet_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFrozenSet_Type
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFrozenSet_Type
    // 24: fa491104      ccmp    x8, x9, #0x4, ne
    // 28: 54000441      b.ne    0xb0 <ltmp0+0xb0>
    // 2c: f85f02b8      ldur    x24, [x21, #-0x10]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: aa1303e0      mov     x0, x19
    // 38: aa1803e1      mov     x1, x24
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __PySet_Contains
    // 40: aa0003f7      mov     x23, x0
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: f9400308      ldr     x8, [x24]
    // 50: 37f800c8      tbnz    w8, #0x1f, 0x68 <ltmp0+0x68>
    // 54: f1000508      subs    x8, x8, #0x1
    // 58: f9000308      str     x8, [x24]
    // 5c: 54000061      b.ne    0x68 <ltmp0+0x68>
    // 60: aa1803e0      mov     x0, x24
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: f9400268      ldr     x8, [x19]
    // 6c: 37f80088      tbnz    w8, #0x1f, 0x7c <ltmp0+0x7c>
    // 70: f1000508      subs    x8, x8, #0x1
    // 74: f9000268      str     x8, [x19]
    // 78: 54000200      b.eq    0xb8 <ltmp0+0xb8>
    // 7c: 37f80257      tbnz    w23, #0x1f, 0xc4 <ltmp0+0xc4>
    // 80: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 88: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 8c: f9400129      ldr     x9, [x9]
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 90: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000090:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 94: f940014a      ldr     x10, [x10]
    // 0000000000000094:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 98: 6b2822ff      cmp     w23, w8, uxth
    // 9c: 9a890148      csel    x8, x10, x9, eq
    // a0: f81f02a8      stur    x8, [x21, #-0x10]
    // a4: d10022b5      sub     x21, x21, #0x8
    // a8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <ltmp0+0xb4>
    // 00000000000000b4:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // b8: aa1303e0      mov     x0, x19
    // bc: 94000000      bl      0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c0: 36fffe17      tbz     w23, #0x1f, 0x80 <ltmp0+0x80>
    // c4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c8: 14000000      b       0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // cc: 00 00 00 00
    const unsigned char code_body[208] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x04, 0x11, 0x49, 0xfa,
        0x41, 0x04, 0x00, 0x54, 0xb8, 0x02, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xf7, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x08, 0x03, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x00, 0x02, 0x00, 0x54, 0x57, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0xff, 0x22, 0x28, 0x6b, 0x48, 0x01, 0x89, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x17, 0xfe, 0xff, 0x36, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    // 18: &PyFrozenSet_Type+0x0
    // 20: &PySet_Type+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x20, (uintptr_t)&PySet_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x18);
    patch_aarch64_trampoline(code + 0x3c, 0x28, state);
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)data);
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xb4, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xbc, 0x0, state);
    patch_aarch64_26r(code + 0xc8, state->instruction_starts[instruction->error_target]);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONVERT_VALUE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 92403d08      and     x8, x8, #0xffff
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyEval_ConversionFuncs
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyEval_ConversionFuncs
    // 20: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1303e0      mov     x0, x19
    // 2c: d63f0100      blr     x8
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f9400268      ldr     x8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000268      str     x8, [x19]
    // 48: 540000a0      b.eq    0x5c <ltmp0+0x5c>
    // 4c: b4000120      cbz     x0, 0x70 <ltmp0+0x70>
    // 50: f81f82a0      stur    x0, [x21, #-0x8]
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 5c: aa0003f7      mov     x23, x0
    // 60: aa1303e0      mov     x0, x19
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: aa1703e0      mov     x0, x23
    // 6c: b5ffff37      cbnz    x23, 0x50 <ltmp0+0x50>
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x79, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x37, 0xff, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyEval_ConversionFuncs+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_26r(code + 0x74, state->instruction_starts[instruction->error_target]);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: cb282ea8      sub     x8, x21, w8, uxth #3
    // c: f9400108      ldr     x8, [x8]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <ltmp0+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY_FREE_VARS.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400129      ldr     x9, [x9]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 72003d3f      tst     w9, #0xffff
    // c: 540002a0      b.eq    0x60 <ltmp0+0x60>
    // 10: f9400288      ldr     x8, [x20]
    // 14: b9404908      ldr     w8, [x8, #0x48]
    // 18: 4b29210a      sub     w10, w8, w9, uxth
    // 1c: f9400a88      ldr     x8, [x20, #0x10]
    // 20: f9402508      ldr     x8, [x8, #0x48]
    // 24: 91006108      add     x8, x8, #0x18
    // 28: 92403d29      and     x9, x9, #0xffff
    // 2c: 8b2ace8a      add     x10, x20, w10, sxtw #3
    // 30: 9101414a      add     x10, x10, #0x50
    // 34: 14000005      b       0x48 <ltmp0+0x48>
    // 38: f800854b      str     x11, [x10], #0x8
    // 3c: 91002108      add     x8, x8, #0x8
    // 40: f1000529      subs    x9, x9, #0x1
    // 44: 540000e0      b.eq    0x60 <ltmp0+0x60>
    // 48: f940010b      ldr     x11, [x8]
    // 4c: b940016c      ldr     w12, [x11]
    // 50: 37ffff4c      tbnz    w12, #0x1f, 0x38 <ltmp0+0x38>
    // 54: 1100058c      add     w12, w12, #0x1
    // 58: b900016c      str     w12, [x11]
    // 5c: 17fffff7      b       0x38 <ltmp0+0x38>
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0xa0, 0x02, 0x00, 0x54,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x49, 0x40, 0xb9,
        0x0a, 0x21, 0x29, 0x4b, 0x88, 0x0a, 0x40, 0xf9,
        0x08, 0x25, 0x40, 0xf9, 0x08, 0x61, 0x00, 0x91,
        0x29, 0x3d, 0x40, 0x92, 0x8a, 0xce, 0x2a, 0x8b,
        0x4a, 0x41, 0x01, 0x91, 0x05, 0x00, 0x00, 0x14,
        0x4b, 0x85, 0x00, 0xf8, 0x08, 0x21, 0x00, 0x91,
        0x29, 0x05, 0x00, 0xf1, 0xe0, 0x00, 0x00, 0x54,
        0x0b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0x4c, 0xff, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf7, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CREATE_INIT_FRAME.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d48      and     w8, w10, #0xffff
    // 14: cb2a2ea9      sub     x9, x21, w10, uxth #3
    // 18: 9280002b      mov     x11, #-0x2              ; =-2
    // 1c: cb2a216a      sub     x10, x11, w10, uxth
    // 20: f9407ad3      ldr     x19, [x22, #0xf0]
    // 24: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_InitCleanup
    // 28: f940016b      ldr     x11, [x11]
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_InitCleanup
    // 2c: 6949316d      ldpsw   x13, x12, [x11, #0x48]
    // 30: 8b0c0e6c      add     x12, x19, x12, lsl #3
    // 34: f9007acc      str     x12, [x22, #0xf0]
    // 38: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 3c: f940018c      ldr     x12, [x12]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: a900b274      stp     x20, x12, [x19, #0x8]
    // 48: 2a2803ec      mvn     w12, w8
    // 4c: f900026b      str     x11, [x19]
    // 50: 8b0d0e6d      add     x13, x19, x13, lsl #3
    // 54: 910161ad      add     x13, x13, #0x58
    // 58: a902fe7f      stp     xzr, xzr, [x19, #0x28]
    // 5c: 9103416b      add     x11, x11, #0xd0
    // 60: a903b66b      stp     x11, x13, [x19, #0x38]
    // 64: b9004a7f      str     wzr, [x19, #0x48]
    // 68: f940228b      ldr     x11, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: f86cdaac      ldr     x12, [x21, w12, sxtw #3]
    // 74: b940018d      ldr     w13, [x12]
    // 78: 37f8006d      tbnz    w13, #0x1f, 0x84 <ltmp0+0x84>
    // 7c: 110005ad      add     w13, w13, #0x1
    // 80: b900018d      str     w13, [x12]
    // 84: f9002a6c      str     x12, [x19, #0x50]
    // 88: f900228b      str     x11, [x20, #0x40]
    // 8c: d1002123      sub     x3, x9, #0x8
    // 90: 11000504      add     w4, w8, #0x1
    // 94: d37df157      lsl     x23, x10, #3
    // 98: f8776aa1      ldr     x1, [x21, x23]
    // 9c: aa1603e0      mov     x0, x22
    // a0: d2800002      mov     x2, #0x0                ; =0
    // a4: d2800005      mov     x5, #0x0                ; =0
    // a8: aa1303e6      mov     x6, x19
    // ac: 94000000      bl      0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __PyEvalFramePushAndInit
    // b0: f9402288      ldr     x8, [x20, #0x40]
    // b4: f900229f      str     xzr, [x20, #0x40]
    // b8: 8b170115      add     x21, x8, x23
    // bc: b4000120      cbz     x0, 0xe0 <ltmp0+0xe0>
    // c0: 52800088      mov     w8, #0x4                ; =4
    // c4: 79009288      strh    w8, [x20, #0x48]
    // c8: b9402ec8      ldr     w8, [x22, #0x2c]
    // cc: 51000508      sub     w8, w8, #0x1
    // d0: b9002ec8      str     w8, [x22, #0x2c]
    // d4: f80086a0      str     x0, [x21], #0x8
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e0: aa1603e0      mov     x0, x22
    // e4: aa1303e1      mov     x1, x19
    // e8: 94000000      bl      0xe8 <ltmp0+0xe8>
    // 00000000000000e8:  ARM64_RELOC_BRANCH26 __PyEval_FrameClearAndPop
    // ec: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // f4: 00 00 00 00
    const unsigned char code_body[248] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x48, 0x3d, 0x00, 0x12, 0xa9, 0x2e, 0x2a, 0xcb,
        0x2b, 0x00, 0x80, 0x92, 0x6a, 0x21, 0x2a, 0xcb,
        0xd3, 0x7a, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x6d, 0x31, 0x49, 0x69,
        0x6c, 0x0e, 0x0c, 0x8b, 0xcc, 0x7a, 0x00, 0xf9,
        0x0c, 0x00, 0x00, 0x90, 0x8c, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x74, 0xb2, 0x00, 0xa9,
        0xec, 0x03, 0x28, 0x2a, 0x6b, 0x02, 0x00, 0xf9,
        0x6d, 0x0e, 0x0d, 0x8b, 0xad, 0x61, 0x01, 0x91,
        0x7f, 0xfe, 0x02, 0xa9, 0x6b, 0x41, 0x03, 0x91,
        0x6b, 0xb6, 0x03, 0xa9, 0x7f, 0x4a, 0x00, 0xb9,
        0x8b, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xac, 0xda, 0x6c, 0xf8, 0x8d, 0x01, 0x40, 0xb9,
        0x6d, 0x00, 0xf8, 0x37, 0xad, 0x05, 0x00, 0x11,
        0x8d, 0x01, 0x00, 0xb9, 0x6c, 0x2a, 0x00, 0xf9,
        0x8b, 0x22, 0x00, 0xf9, 0x23, 0x21, 0x00, 0xd1,
        0x04, 0x05, 0x00, 0x11, 0x57, 0xf1, 0x7d, 0xd3,
        0xa1, 0x6a, 0x77, 0xf8, 0xe0, 0x03, 0x16, 0xaa,
        0x02, 0x00, 0x80, 0xd2, 0x05, 0x00, 0x80, 0xd2,
        0xe6, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x01, 0x17, 0x8b, 0x20, 0x01, 0x00, 0xb4,
        0x88, 0x00, 0x80, 0x52, 0x88, 0x92, 0x00, 0x79,
        0xc8, 0x2e, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x51,
        0xc8, 0x2e, 0x00, 0xb9, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_InitCleanup+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xac, 0x2a, state);
    patch_aarch64_26r(code + 0xdc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xe8, 0x29, state);
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->error_target]);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_ATTR.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1303e0      mov     x0, x19
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 _PyObject_DelAttr
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f9400268      ldr     x8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000268      str     x8, [x19]
    // 48: 54000080      b.eq    0x58 <ltmp0+0x58>
    // 4c: 34000100      cbz     w0, 0x6c <ltmp0+0x6c>
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 58: aa0003f7      mov     x23, x0
    // 5c: aa1303e0      mov     x0, x19
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: aa1703e0      mov     x0, x23
    // 68: 35ffff40      cbnz    w0, 0x50 <ltmp0+0x50>
    // 6c: d10022b5      sub     x21, x21, #0x8
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x40, 0xff, 0xff, 0x35, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0x2b, state);
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_DEREF.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 8b282e88      add     x8, x20, w8, uxth #3
    // 14: f9402908      ldr     x8, [x8, #0x50]
    // 18: f9400900      ldr     x0, [x8, #0x10]
    // 1c: f900091f      str     xzr, [x8, #0x10]
    // 20: b4000100      cbz     x0, 0x40 <ltmp0+0x40>
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 540001c0      b.eq    0x6c <ltmp0+0x6c>
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 40: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: f9400281      ldr     x1, [x20]
    // 50: 12003d02      and     w2, w8, #0xffff
    // 54: aa1603e0      mov     x0, x22
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcUnbound
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x00, 0x09, 0x40, 0xf9, 0x1f, 0x09, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xc0, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x81, 0x02, 0x40, 0xf9,
        0x02, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x58, 0x2c, state);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_FAST.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 91014288      add     x8, x20, #0x50
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 92403d21      and     x1, x9, #0xffff
    // 18: f8617900      ldr     x0, [x8, x1, lsl #3]
    // 1c: b4000120      cbz     x0, 0x40 <ltmp0+0x40>
    // 20: f821791f      str     xzr, [x8, x1, lsl #3]
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 54000280      b.eq    0x84 <ltmp0+0x84>
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_UnboundLocalError
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_UnboundLocalError
    // 4c: f9400113      ldr     x19, [x8]
    // 50: f9400288      ldr     x8, [x20]
    // 54: f9403100      ldr     x0, [x8, #0x60]
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 _PyTuple_GetItem
    // 5c: aa0003e3      mov     x3, x0
    // 60: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000060:  ARM64_RELOC_PAGE21   l_.str
    // 64: 91000042      add     x2, x2, #0x0
    // 0000000000000064:  ARM64_RELOC_PAGEOFF12        l_.str
    // 68: aa1603e0      mov     x0, x22
    // 6c: aa1303e1      mov     x1, x19
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcCheckArg
    // 74: f9402295      ldr     x21, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 84: 94000000      bl      0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <ltmp0+0x8c>
    // 000000000000008c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[144] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x88, 0x42, 0x01, 0x91, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x21, 0x3d, 0x40, 0x92,
        0x00, 0x79, 0x61, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x1f, 0x79, 0x21, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x80, 0x02, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x13, 0x01, 0x40, 0xf9,
        0x88, 0x02, 0x40, 0xf9, 0x00, 0x31, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0xe3, 0x03, 0x00, 0xaa,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: &PyExc_UnboundLocalError+0x0
    // 58: OPARG
    const unsigned char data_body[96] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x58, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x58);
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x50);
    patch_aarch64_trampoline(code + 0x58, 0x2e, state);
    patch_aarch64_21r(code + 0x60, (uintptr_t)data);
    patch_aarch64_12(code + 0x64, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x70, 0x2d, state);
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x84, 0x0, state);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_GLOBAL.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f9400288      ldr     x8, [x20]
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 8b292d08      add     x8, x8, w9, uxth #3
    // 1c: f9400d13      ldr     x19, [x8, #0x18]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: f9400e80      ldr     x0, [x20, #0x18]
    // 28: aa1303e1      mov     x1, x19
    // 2c: d2800002      mov     x2, #0x0                ; =0
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 _PyDict_Pop
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 37f80080      tbnz    w0, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: 340000a0      cbz     w0, 0x54 <ltmp0+0x54>
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 4c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 50: 14000000      b       0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000058:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_NameError
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_NameError
    // 60: f9400101      ldr     x1, [x8]
    // 64: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000064:  ARM64_RELOC_PAGE21   l_.str
    // 68: 91000042      add     x2, x2, #0x0
    // 0000000000000068:  ARM64_RELOC_PAGEOFF12        l_.str
    // 6c: aa1603e0      mov     x0, x22
    // 70: aa1303e3      mov     x3, x19
    // 74: 94000000      bl      0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcCheckArg
    // 78: f9402295      ldr     x21, [x20, #0x40]
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x13, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x0e, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x02, 0x00, 0x80, 0xd2,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0xf8, 0x37,
        0xa0, 0x00, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: &PyExc_NameError+0x0
    // 28: OPARG
    const unsigned char data_body[48] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x28, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x28);
    patch_aarch64_trampoline(code + 0x30, 0x2f, state);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x50, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x20);
    patch_aarch64_21r(code + 0x64, (uintptr_t)data);
    patch_aarch64_12(code + 0x68, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x74, 0x2d, state);
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->error_target]);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_NAME.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d13      ldr     x19, [x8, #0x18]
    // 24: f9401680      ldr     x0, [x20, #0x28]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: b4000280      cbz     x0, 0x7c <ltmp0+0x7c>
    // 30: aa1303e1      mov     x1, x19
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 _PyObject_DelItem
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 34000380      cbz     w0, 0xb0 <ltmp0+0xb0>
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_NameError
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_NameError
    // 50: f9400101      ldr     x1, [x8]
    // 54: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000054:  ARM64_RELOC_PAGE21   l_.str.1
    // 58: 91000042      add     x2, x2, #0x0
    // 0000000000000058:  ARM64_RELOC_PAGEOFF12        l_.str.1
    // 5c: aa1603e0      mov     x0, x22
    // 60: aa1303e3      mov     x3, x19
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcCheckArg
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 74: 910083ff      add     sp, sp, #0x20
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 7c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_SystemError
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_SystemError
    // 84: f9400101      ldr     x1, [x8]
    // 88: f90003f3      str     x19, [sp]
    // 8c: 90000002      adrp    x2, 0x0 <ltmp0>
    // 000000000000008c:  ARM64_RELOC_PAGE21   l_.str
    // 90: 91000042      add     x2, x2, #0x0
    // 0000000000000090:  ARM64_RELOC_PAGEOFF12        l_.str
    // 94: aa1603e0      mov     x0, x22
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // a8: 910083ff      add     sp, sp, #0x20
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // b0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // b4: 910083ff      add     sp, sp, #0x20
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: 00 00 00 00
    const unsigned char code_body[192] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x13, 0x0d, 0x40, 0xf9, 0x80, 0x16, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x02, 0x00, 0xb4,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x03, 0x00, 0x34, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0xf3, 0x03, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: &PyExc_SystemError+0x0
    // 40: &PyExc_NameError+0x0
    // 48: OPARG
    const unsigned char data_body[80] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x48);
    patch_aarch64_trampoline(code + 0x34, 0x31, state);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x40);
    patch_aarch64_21r(code + 0x54, (uintptr_t)data + 0x1b);
    patch_aarch64_12(code + 0x58, (uintptr_t)data + 0x1b);
    patch_aarch64_trampoline(code + 0x64, 0x2d, state);
    patch_aarch64_26r(code + 0x78, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x38);
    patch_aarch64_21r(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12(code + 0x90, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x98, 0x30, state);
    patch_aarch64_26r(code + 0xac, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_SUBSCR.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1803e0      mov     x0, x24
    // 14: aa1303e1      mov     x1, x19
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PyObject_DelItem
    // 1c: aa0003f7      mov     x23, x0
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f9400308      ldr     x8, [x24]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000308      str     x8, [x24]
    // 38: 54000120      b.eq    0x5c <ltmp0+0x5c>
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80168      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 54000101      b.ne    0x6c <ltmp0+0x6c>
    // 50: aa1303e0      mov     x0, x19
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: 14000005      b       0x6c <ltmp0+0x6c>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: f9400268      ldr     x8, [x19]
    // 68: 36fffee8      tbz     w8, #0x1f, 0x44 <ltmp0+0x44>
    // 6c: 34000077      cbz     w23, 0x78 <ltmp0+0x78>
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 78: d10042b5      sub     x21, x21, #0x10
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0x77, 0x00, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x31, state);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x74, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x80, (uintptr_t)code + sizeof(code_body));
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DEOPT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 8: f9008ac8      str     x8, [x22, #0x110]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400288      ldr     x8, [x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_TARGET
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_TARGET
    // 1c: 8b294508      add     x8, x8, w9, uxtw #1
    // 20: 91034100      add     x0, x8, #0xd0
    // 24: d65f03c0      ret
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xc8, 0x8a, 0x00, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x88, 0x02, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x45, 0x29, 0x8b,
        0x00, 0x41, 0x03, 0x91, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: TARGET
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->target);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_MERGE.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 2a2803e9      mvn     w9, w8
    // 18: f869daa0      ldr     x0, [x21, w9, sxtw #3]
    // 1c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 20: 12800069      mov     w9, #-0x4               ; =-4
    // 24: 4b080128      sub     w8, w9, w8
    // 28: f868dab7      ldr     x23, [x21, w8, sxtw #3]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: aa1303e1      mov     x1, x19
    // 34: 52800042      mov     w2, #0x2                ; =2
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __PyDict_MergeEx
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: 37f80120      tbnz    w0, #0x1f, 0x68 <ltmp0+0x68>
    // 48: f9400268      ldr     x8, [x19]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000268      str     x8, [x19]
    // 58: 54000240      b.eq    0xa0 <ltmp0+0xa0>
    // 5c: d10022b5      sub     x21, x21, #0x8
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: aa1603e0      mov     x0, x22
    // 70: aa1703e1      mov     x1, x23
    // 74: aa1303e2      mov     x2, x19
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __PyEval_FormatKwargsError
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: f9400268      ldr     x8, [x19]
    // 88: 37f80088      tbnz    w8, #0x1f, 0x98 <ltmp0+0x98>
    // 8c: f1000508      subs    x8, x8, #0x1
    // 90: f9000268      str     x8, [x19]
    // 94: 54000100      b.eq    0xb4 <ltmp0+0xb4>
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // a0: aa1303e0      mov     x0, x19
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: d10022b5      sub     x21, x21, #0x8
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b4: aa1303e0      mov     x0, x19
    // b8: 94000000      bl      0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0xa0, 0xda, 0x69, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x69, 0x00, 0x80, 0x12, 0x28, 0x01, 0x08, 0x4b,
        0xb7, 0xda, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x42, 0x00, 0x80, 0x52,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x01, 0xf8, 0x37,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x40, 0x02, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x17, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x33, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x78, 0x32, state);
    patch_aarch64_26r(code + 0x9c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_26r(code + 0xb0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xb8, 0x0, state);
    patch_aarch64_26r(code + 0xc0, state->instruction_starts[instruction->error_target]);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_UPDATE.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 2a2803e8      mvn     w8, w8
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: aa1303e1      mov     x1, x19
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 _PyDict_Update
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 37f80140      tbnz    w0, #0x1f, 0x64 <ltmp0+0x64>
    // 40: f9400268      ldr     x8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000268      str     x8, [x19]
    // 50: 54000460      b.eq    0xdc <ltmp0+0xdc>
    // 54: d10022b5      sub     x21, x21, #0x8
    // 58: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 5c: 910083ff      add     sp, sp, #0x20
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_AttributeError
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_AttributeError
    // 70: f9400101      ldr     x1, [x8]
    // 74: aa1603e0      mov     x0, x22
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __PyErr_ExceptionMatches
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 340001c0      cbz     w0, 0xbc <ltmp0+0xbc>
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 94: f9400101      ldr     x1, [x8]
    // 98: f9400668      ldr     x8, [x19, #0x8]
    // 9c: f9400d08      ldr     x8, [x8, #0x18]
    // a0: f90003e8      str     x8, [sp]
    // a4: 90000002      adrp    x2, 0x0 <ltmp0>
    // 00000000000000a4:  ARM64_RELOC_PAGE21   l_.str
    // a8: 91000042      add     x2, x2, #0x0
    // 00000000000000a8:  ARM64_RELOC_PAGEOFF12        l_.str
    // ac: aa1603e0      mov     x0, x22
    // b0: 94000000      bl      0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: f9400268      ldr     x8, [x19]
    // c0: 37f80088      tbnz    w8, #0x1f, 0xd0 <ltmp0+0xd0>
    // c4: f1000508      subs    x8, x8, #0x1
    // c8: f9000268      str     x8, [x19]
    // cc: 54000140      b.eq    0xf4 <ltmp0+0xf4>
    // d0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // d4: 910083ff      add     sp, sp, #0x20
    // d8: 14000000      b       0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // dc: aa1303e0      mov     x0, x19
    // e0: 94000000      bl      0xe0 <ltmp0+0xe0>
    // 00000000000000e0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // e4: d10022b5      sub     x21, x21, #0x8
    // e8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // f4: aa1303e0      mov     x0, x19
    // f8: 94000000      bl      0xf8 <ltmp0+0xf8>
    // 00000000000000f8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // fc: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 100: 910083ff      add     sp, sp, #0x20
    // 104: 14000000      b       0x104 <ltmp0+0x104>
    // 0000000000000104:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[264] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe8, 0x03, 0x28, 0x2a,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x40, 0x01, 0xf8, 0x37,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x60, 0x04, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x01, 0x00, 0x34,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0xe8, 0x03, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x40, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: &PyExc_TypeError+0x0
    // 30: &PyExc_AttributeError+0x0
    // 38: OPARG
    const unsigned char data_body[64] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x30, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x38, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x38);
    patch_aarch64_trampoline(code + 0x30, 0x35, state);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x30);
    patch_aarch64_trampoline(code + 0x78, 0x34, state);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x28);
    patch_aarch64_21r(code + 0xa4, (uintptr_t)data);
    patch_aarch64_12(code + 0xa8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xb0, 0x30, state);
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0xe0, 0x0, state);
    patch_aarch64_26r(code + 0xf0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xf8, 0x0, state);
    patch_aarch64_26r(code + 0x104, state->instruction_starts[instruction->error_target]);
}

void
emit__DYNAMIC_EXIT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DYNAMIC_EXIT.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: 90000017      adrp    x23, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 14: f9008ad7      str     x23, [x22, #0x110]
    // 18: f9401e93      ldr     x19, [x20, #0x38]
    // 1c: 39400268      ldrb    w8, [x19]
    // 20: 7103fd1f      cmp     w8, #0xff
    // 24: 54000300      b.eq    0x84 <ltmp0+0x84>
    // 28: 90000018      adrp    x24, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 2c: f9400318      ldr     x24, [x24]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 30: 79400b08      ldrh    w8, [x24, #0x4]
    // 34: 71003d1f      cmp     w8, #0xf
    // 38: 54000402      b.hs    0xb8 <ltmp0+0xb8>
    // 3c: f9002295      str     x21, [x20, #0x40]
    // 40: 910023e3      add     x3, sp, #0x8
    // 44: aa1403e0      mov     x0, x20
    // 48: aa1303e1      mov     x1, x19
    // 4c: aa1503e2      mov     x2, x21
    // 50: 52800004      mov     w4, #0x0                ; =0
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __PyOptimizer_Optimize
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: 7100001f      cmp     w0, #0x0
    // 64: 5400038d      b.le    0xd4 <ltmp0+0xd4>
    // 68: 529fff88      mov     w8, #0xfffc             ; =65532
    // 6c: 79000b08      strh    w8, [x24, #0x4]
    // 70: f94007e8      ldr     x8, [sp, #0x8]
    // 74: f9403d00      ldr     x0, [x8, #0x78]
    // 78: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 7c: 910083ff      add     sp, sp, #0x20
    // 80: d61f0000      br      x0
    // 84: f9400288      ldr     x8, [x20]
    // 88: f9404d08      ldr     x8, [x8, #0x98]
    // 8c: 39400669      ldrb    w9, [x19, #0x1]
    // 90: 8b090d08      add     x8, x8, x9, lsl #3
    // 94: f9400508      ldr     x8, [x8, #0x8]
    // 98: b9400109      ldr     w9, [x8]
    // 9c: 37fffec9      tbnz    w9, #0x1f, 0x74 <ltmp0+0x74>
    // a0: 11000529      add     w9, w9, #0x1
    // a4: b9000109      str     w9, [x8]
    // a8: f9403d00      ldr     x0, [x8, #0x78]
    // ac: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // b0: 910083ff      add     sp, sp, #0x20
    // b4: d61f0000      br      x0
    // b8: 51004108      sub     w8, w8, #0x10
    // bc: 79000b08      strh    w8, [x24, #0x4]
    // c0: f9002295      str     x21, [x20, #0x40]
    // c4: aa1303e0      mov     x0, x19
    // c8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // cc: 910083ff      add     sp, sp, #0x20
    // d0: d65f03c0      ret
    // d4: 79400b08      ldrh    w8, [x24, #0x4]
    // d8: 92400d08      and     x8, x8, #0xf
    // dc: 11000509      add     w9, w8, #0x1
    // e0: 5280040a      mov     w10, #0x20              ; =32
    // e4: 1ac8214a      lsl     w10, w10, w8
    // e8: 5100414a      sub     w10, w10, #0x10
    // ec: 2a090149      orr     w9, w10, w9
    // f0: 1280006a      mov     w10, #-0x4              ; =-4
    // f4: 7100311f      cmp     w8, #0xc
    // f8: 1a8a3128      csel    w8, w9, w10, lo
    // fc: 79000b08      strh    w8, [x24, #0x4]
    // 100: 36fffe00      tbz     w0, #0x1f, 0xc0 <ltmp0+0xc0>
    // 104: d2800013      mov     x19, #0x0               ; =0
    // 108: f9008ad7      str     x23, [x22, #0x110]
    // 10c: f9002295      str     x21, [x20, #0x40]
    // 110: aa1303e0      mov     x0, x19
    // 114: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 118: 910083ff      add     sp, sp, #0x20
    // 11c: d65f03c0      ret
    const unsigned char code_body[288] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0xd7, 0x8a, 0x00, 0xf9,
        0x93, 0x1e, 0x40, 0xf9, 0x68, 0x02, 0x40, 0x39,
        0x1f, 0xfd, 0x03, 0x71, 0x00, 0x03, 0x00, 0x54,
        0x18, 0x00, 0x00, 0x90, 0x18, 0x03, 0x40, 0xf9,
        0x08, 0x0b, 0x40, 0x79, 0x1f, 0x3d, 0x00, 0x71,
        0x02, 0x04, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0xe3, 0x23, 0x00, 0x91, 0xe0, 0x03, 0x14, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x15, 0xaa,
        0x04, 0x00, 0x80, 0x52, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x1f, 0x00, 0x00, 0x71, 0x8d, 0x03, 0x00, 0x54,
        0x88, 0xff, 0x9f, 0x52, 0x08, 0x0b, 0x00, 0x79,
        0xe8, 0x07, 0x40, 0xf9, 0x00, 0x3d, 0x40, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x1f, 0xd6, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x4d, 0x40, 0xf9, 0x69, 0x06, 0x40, 0x39,
        0x08, 0x0d, 0x09, 0x8b, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0xc9, 0xfe, 0xff, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0x00, 0x3d, 0x40, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x41, 0x00, 0x51, 0x08, 0x0b, 0x00, 0x79,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x08, 0x0b, 0x40, 0x79,
        0x08, 0x0d, 0x40, 0x92, 0x09, 0x05, 0x00, 0x11,
        0x0a, 0x04, 0x80, 0x52, 0x4a, 0x21, 0xc8, 0x1a,
        0x4a, 0x41, 0x00, 0x51, 0x49, 0x01, 0x09, 0x2a,
        0x6a, 0x00, 0x80, 0x12, 0x1f, 0x31, 0x00, 0x71,
        0x28, 0x31, 0x8a, 0x1a, 0x08, 0x0b, 0x00, 0x79,
        0x00, 0xfe, 0xff, 0x36, 0x13, 0x00, 0x80, 0xd2,
        0xd7, 0x8a, 0x00, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x54, 0x36, state);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _END_SEND.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 8: f85f8260      ldur    x0, [x19, #-0x8]
    // c: f9400008      ldr     x8, [x0]
    // 10: 37f80088      tbnz    w8, #0x1f, 0x20 <ltmp0+0x20>
    // 14: f1000508      subs    x8, x8, #0x1
    // 18: f9000008      str     x8, [x0]
    // 1c: 54000080      b.eq    0x2c <ltmp0+0x2c>
    // 20: f81f02b7      stur    x23, [x21, #-0x10]
    // 24: aa1303f5      mov     x21, x19
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 30: 910003fd      mov     x29, sp
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: f81f02b7      stur    x23, [x21, #-0x10]
    // 40: aa1303f5      mov     x21, x19
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x60, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x80, 0x00, 0x00, 0x54,
        0xb7, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb7, 0x02, 0x1f, 0xf8,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x34, 0x0, state);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ERROR_POP_N.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: cb282ea8      sub     x8, x21, w8, uxth #3
    // c: f9400289      ldr     x9, [x20]
    // 10: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 18: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 1c: f940016b      ldr     x11, [x11]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 20: 8b2a4529      add     x9, x9, w10, uxtw #1
    // 24: f9008acb      str     x11, [x22, #0x110]
    // 28: 91034129      add     x9, x9, #0xd0
    // 2c: a903a289      stp     x9, x8, [x20, #0x38]
    // 30: d2800000      mov     x0, #0x0                ; =0
    // 34: d65f03c0      ret
    const unsigned char code_body[56] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x2e, 0x28, 0xcb, 0x89, 0x02, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x29, 0x45, 0x2a, 0x8b, 0xcb, 0x8a, 0x00, 0xf9,
        0x29, 0x41, 0x03, 0x91, 0x89, 0xa2, 0x03, 0xa9,
        0x00, 0x00, 0x80, 0xd2, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_INIT_CHECK.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8d09      ldr     x9, [x8, #-0x8]!
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000260      b.eq    0x60 <ltmp0+0x60>
    // 18: d10083ff      sub     sp, sp, #0x20
    // 1c: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 20: 910043fd      add     x29, sp, #0x10
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 30: f9400100      ldr     x0, [x8]
    // 34: f9400528      ldr     x8, [x9, #0x8]
    // 38: f9400d08      ldr     x8, [x8, #0x18]
    // 3c: f90003e8      str     x8, [sp]
    // 40: 90000001      adrp    x1, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_PAGE21   l_.str
    // 44: 91000021      add     x1, x1, #0x0
    // 0000000000000044:  ARM64_RELOC_PAGEOFF12        l_.str
    // 48: 94000000      bl      0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 _PyErr_Format
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 58: 910083ff      add     sp, sp, #0x20
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 60: aa0803f5      mov     x21, x8
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xe8, 0x03, 0x15, 0xaa, 0x09, 0x8d, 0x5f, 0xf8,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x60, 0x02, 0x00, 0x54,
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x40, 0xf9, 0x28, 0x05, 0x40, 0xf9,
        0x08, 0x0d, 0x40, 0xf9, 0xe8, 0x03, 0x00, 0xf9,
        0x01, 0x00, 0x00, 0x90, 0x21, 0x00, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &PyExc_TypeError+0x0
    // 38: &_Py_NoneStruct+0x0
    const unsigned char data_body[64] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x38, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x30);
    patch_aarch64_21r(code + 0x40, (uintptr_t)data);
    patch_aarch64_12(code + 0x44, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x48, 0x37, state);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_TRACE.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: 90000017      adrp    x23, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: f9400299      ldr     x25, [x20]
    // 18: b94002e8      ldr     w8, [x23]
    // 1c: 8b080728      add     x8, x25, x8, lsl #1
    // 20: 91034113      add     x19, x8, #0xd0
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f94006e0      ldr     x0, [x23, #0x8]
    // 2c: b40001a0      cbz     x0, 0x60 <ltmp0+0x60>
    // 30: 39408808      ldrb    w8, [x0, #0x22]
    // 34: 37000128      tbnz    w8, #0x0, 0x58 <ltmp0+0x58>
    // 38: 529fff98      mov     w24, #0xfffc            ; =65532
    // 3c: 79000af8      strh    w24, [x23, #0x4]
    // 40: f90006ff      str     xzr, [x23, #0x8]
    // 44: f9400008      ldr     x8, [x0]
    // 48: 37f803e8      tbnz    w8, #0x1f, 0xc4 <ltmp0+0xc4>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000008      str     x8, [x0]
    // 54: 54000980      b.eq    0x184 <ltmp0+0x184>
    // 58: f94006e8      ldr     x8, [x23, #0x8]
    // 5c: b50005a8      cbnz    x8, 0x110 <ltmp0+0x110>
    // 60: 79400af8      ldrh    w24, [x23, #0x4]
    // 64: 71003f1f      cmp     w24, #0xf
    // 68: 540002e2      b.hs    0xc4 <ltmp0+0xc4>
    // 6c: 39400268      ldrb    w8, [x19]
    // 70: 7103fd1f      cmp     w8, #0xff
    // 74: 540003c0      b.eq    0xec <ltmp0+0xec>
    // 78: 90000019      adrp    x25, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 7c: f9400339      ldr     x25, [x25]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 80: 39408b28      ldrb    w8, [x25, #0x22]
    // 84: 53027d08      lsr     w8, w8, #2
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: 910023e3      add     x3, sp, #0x8
    // 90: 11000504      add     w4, w8, #0x1
    // 94: aa1403e0      mov     x0, x20
    // 98: aa1303e1      mov     x1, x19
    // 9c: aa1503e2      mov     x2, x21
    // a0: 94000000      bl      0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __PyOptimizer_Optimize
    // a4: f9402295      ldr     x21, [x20, #0x40]
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: 529fff88      mov     w8, #0xfffc             ; =65532
    // b0: 7100001f      cmp     w0, #0x0
    // b4: 5400046d      b.le    0x140 <ltmp0+0x140>
    // b8: 79000ae8      strh    w8, [x23, #0x4]
    // bc: f94007e8      ldr     x8, [sp, #0x8]
    // c0: 14000013      b       0x10c <ltmp0+0x10c>
    // c4: 51004308      sub     w8, w24, #0x10
    // c8: 79000ae8      strh    w8, [x23, #0x4]
    // cc: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000cc:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // d4: f9008ac8      str     x8, [x22, #0x110]
    // d8: f9002295      str     x21, [x20, #0x40]
    // dc: aa1303e0      mov     x0, x19
    // e0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e4: 910083ff      add     sp, sp, #0x20
    // e8: d65f03c0      ret
    // ec: f9404f28      ldr     x8, [x25, #0x98]
    // f0: 39400669      ldrb    w9, [x19, #0x1]
    // f4: 8b090d08      add     x8, x8, x9, lsl #3
    // f8: f9400508      ldr     x8, [x8, #0x8]
    // fc: b9400109      ldr     w9, [x8]
    // 100: 37f80069      tbnz    w9, #0x1f, 0x10c <ltmp0+0x10c>
    // 104: 11000529      add     w9, w9, #0x1
    // 108: b9000109      str     w9, [x8]
    // 10c: f90006e8      str     x8, [x23, #0x8]
    // 110: b9400109      ldr     w9, [x8]
    // 114: 37f80089      tbnz    w9, #0x1f, 0x124 <ltmp0+0x124>
    // 118: 11000529      add     w9, w9, #0x1
    // 11c: b9000109      str     w9, [x8]
    // 120: f94006e8      ldr     x8, [x23, #0x8]
    // 124: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000124:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 128: f9400129      ldr     x9, [x9]
    // 0000000000000128:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 12c: f9008ac9      str     x9, [x22, #0x110]
    // 130: f9403d00      ldr     x0, [x8, #0x78]
    // 134: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 138: 910083ff      add     sp, sp, #0x20
    // 13c: d61f0000      br      x0
    // 140: 52800049      mov     w9, #0x2                ; =2
    // 144: 1ad82129      lsl     w9, w9, w24
    // 148: 1100070a      add     w10, w24, #0x1
    // 14c: 531c6d29      lsl     w9, w9, #4
    // 150: 51004129      sub     w9, w9, #0x10
    // 154: 2a0a0129      orr     w9, w9, w10
    // 158: 71002f1f      cmp     w24, #0xb
    // 15c: 1a898108      csel    w8, w8, w9, hi
    // 160: 79000ae8      strh    w8, [x23, #0x4]
    // 164: 36f80040      tbz     w0, #0x1f, 0x16c <ltmp0+0x16c>
    // 168: d2800013      mov     x19, #0x0               ; =0
    // 16c: f9008ad9      str     x25, [x22, #0x110]
    // 170: f9002295      str     x21, [x20, #0x40]
    // 174: aa1303e0      mov     x0, x19
    // 178: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 17c: 910083ff      add     sp, sp, #0x20
    // 180: d65f03c0      ret
    // 184: 94000000      bl      0x184 <ltmp0+0x184>
    // 0000000000000184:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 188: f94006e8      ldr     x8, [x23, #0x8]
    // 18c: b5fffc28      cbnz    x8, 0x110 <ltmp0+0x110>
    // 190: 17ffffb4      b       0x60 <ltmp0+0x60>
    // 194: 00 00 00 00
    const unsigned char code_body[408] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0x99, 0x02, 0x40, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x28, 0x07, 0x08, 0x8b,
        0x13, 0x41, 0x03, 0x91, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x06, 0x40, 0xf9, 0xa0, 0x01, 0x00, 0xb4,
        0x08, 0x88, 0x40, 0x39, 0x28, 0x01, 0x00, 0x37,
        0x98, 0xff, 0x9f, 0x52, 0xf8, 0x0a, 0x00, 0x79,
        0xff, 0x06, 0x00, 0xf9, 0x08, 0x00, 0x40, 0xf9,
        0xe8, 0x03, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x80, 0x09, 0x00, 0x54,
        0xe8, 0x06, 0x40, 0xf9, 0xa8, 0x05, 0x00, 0xb5,
        0xf8, 0x0a, 0x40, 0x79, 0x1f, 0x3f, 0x00, 0x71,
        0xe2, 0x02, 0x00, 0x54, 0x68, 0x02, 0x40, 0x39,
        0x1f, 0xfd, 0x03, 0x71, 0xc0, 0x03, 0x00, 0x54,
        0x19, 0x00, 0x00, 0x90, 0x39, 0x03, 0x40, 0xf9,
        0x28, 0x8b, 0x40, 0x39, 0x08, 0x7d, 0x02, 0x53,
        0x95, 0x22, 0x00, 0xf9, 0xe3, 0x23, 0x00, 0x91,
        0x04, 0x05, 0x00, 0x11, 0xe0, 0x03, 0x14, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x15, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x88, 0xff, 0x9f, 0x52,
        0x1f, 0x00, 0x00, 0x71, 0x6d, 0x04, 0x00, 0x54,
        0xe8, 0x0a, 0x00, 0x79, 0xe8, 0x07, 0x40, 0xf9,
        0x13, 0x00, 0x00, 0x14, 0x08, 0x43, 0x00, 0x51,
        0xe8, 0x0a, 0x00, 0x79, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xc8, 0x8a, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x28, 0x4f, 0x40, 0xf9,
        0x69, 0x06, 0x40, 0x39, 0x08, 0x0d, 0x09, 0x8b,
        0x08, 0x05, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xe8, 0x06, 0x00, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x89, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xc9, 0x8a, 0x00, 0xf9,
        0x00, 0x3d, 0x40, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x49, 0x00, 0x80, 0x52, 0x29, 0x21, 0xd8, 0x1a,
        0x0a, 0x07, 0x00, 0x11, 0x29, 0x6d, 0x1c, 0x53,
        0x29, 0x41, 0x00, 0x51, 0x29, 0x01, 0x0a, 0x2a,
        0x1f, 0x2f, 0x00, 0x71, 0x08, 0x81, 0x89, 0x1a,
        0xe8, 0x0a, 0x00, 0x79, 0x40, 0x00, 0xf8, 0x36,
        0x13, 0x00, 0x80, 0xd2, 0xd9, 0x8a, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x06, 0x40, 0xf9, 0x28, 0xfc, 0xff, 0xb5,
        0xb4, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa0, 0x36, state);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x124, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x184, 0x0, state);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: 1280002a      mov     w10, #-0x2              ; =-2
    // 14: 4b080148      sub     w8, w10, w8
    // 18: f868daaa      ldr     x10, [x21, w8, sxtw #3]
    // 1c: f9400d4b      ldr     x11, [x10, #0x18]
    // 20: b940016c      ldr     w12, [x11]
    // 24: 37f8006c      tbnz    w12, #0x1f, 0x30 <ltmp0+0x30>
    // 28: 1100058c      add     w12, w12, #0x1
    // 2c: b900016c      str     w12, [x11]
    // 30: f829daab      str     x11, [x21, w9, sxtw #3]
    // 34: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 38: f9400949      ldr     x9, [x10, #0x10]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <ltmp0+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 50: f9400008      ldr     x8, [x0]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 58: f1000508      subs    x8, x8, #0x1
    // 5c: f9000008      str     x8, [x0]
    // 60: 54000040      b.eq    0x68 <ltmp0+0x68>
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0x2a, 0x00, 0x80, 0x12, 0x48, 0x01, 0x08, 0x4b,
        0xaa, 0xda, 0x68, 0xf8, 0x4b, 0x0d, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xab, 0xda, 0x29, 0xf8, 0xa0, 0xda, 0x68, 0xf8,
        0x49, 0x09, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD_KW.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92403d08      and     x8, x8, #0xffff
    // c: 92800029      mov     x9, #-0x2               ; =-2
    // 10: cb080129      sub     x9, x9, x8
    // 14: 9280004a      mov     x10, #-0x3              ; =-3
    // 18: cb080148      sub     x8, x10, x8
    // 1c: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 20: f9400c0a      ldr     x10, [x0, #0x18]
    // 24: b940014b      ldr     w11, [x10]
    // 28: 37f8006b      tbnz    w11, #0x1f, 0x34 <ltmp0+0x34>
    // 2c: 1100056b      add     w11, w11, #0x1
    // 30: b900014b      str     w11, [x10]
    // 34: f8297aaa      str     x10, [x21, x9, lsl #3]
    // 38: f9400809      ldr     x9, [x0, #0x10]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <ltmp0+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 50: f9400008      ldr     x8, [x0]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 58: f1000508      subs    x8, x8, #0x1
    // 5c: f9000008      str     x8, [x0]
    // 60: 54000040      b.eq    0x68 <ltmp0+0x68>
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x29, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x08, 0xcb, 0x4a, 0x00, 0x80, 0x92,
        0x48, 0x01, 0x08, 0xcb, 0xa0, 0x7a, 0x68, 0xf8,
        0x0a, 0x0c, 0x40, 0xf9, 0x4b, 0x01, 0x40, 0xb9,
        0x6b, 0x00, 0xf8, 0x37, 0x6b, 0x05, 0x00, 0x11,
        0x4b, 0x01, 0x00, 0xb9, 0xaa, 0x7a, 0x29, 0xf8,
        0x09, 0x08, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x7a, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FATAL_ERROR.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000000      adrp    x0, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_PAGE21   l___func__._JIT_ENTRY
    // c: 91000000      add     x0, x0, #0x0
    // 000000000000000c:  ARM64_RELOC_PAGEOFF12        l___func__._JIT_ENTRY
    // 10: 90000001      adrp    x1, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_PAGE21   l_.str
    // 14: 91000021      add     x1, x1, #0x0
    // 0000000000000014:  ARM64_RELOC_PAGEOFF12        l_.str
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __Py_FatalErrorFunc
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91,
        0x01, 0x00, 0x00, 0x90, 0x21, 0x00, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '_JIT_ENTRY\x00Fatal error uop executed.\x00'
    // 25: 00 00 00
    const unsigned char data_body[40] = {
        0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54,
        0x52, 0x59, 0x00, 0x46, 0x61, 0x74, 0x61, 0x6c,
        0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x75,
        0x6f, 0x70, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
        0x74, 0x65, 0x64, 0x2e, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21r(code + 0x8, (uintptr_t)data);
    patch_aarch64_12(code + 0xc, (uintptr_t)data);
    patch_aarch64_21r(code + 0x10, (uintptr_t)data + 0xb);
    patch_aarch64_12(code + 0x14, (uintptr_t)data + 0xb);
    patch_aarch64_trampoline(code + 0x18, 0x38, state);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_SIMPLE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyUnicode_Type
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyUnicode_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 540001c0      b.eq    0x54 <ltmp0+0x54>
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: aa1303e0      mov     x0, x19
    // 28: d2800001      mov     x1, #0x0                ; =0
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 _PyObject_Format
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f9400268      ldr     x8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000268      str     x8, [x19]
    // 48: 540000c0      b.eq    0x60 <ltmp0+0x60>
    // 4c: b4000140      cbz     x0, 0x74 <ltmp0+0x74>
    // 50: aa0003f3      mov     x19, x0
    // 54: f81f82b3      stur    x19, [x21, #-0x8]
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: aa0003f7      mov     x23, x0
    // 64: aa1303e0      mov     x0, x19
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 6c: aa1703e0      mov     x0, x23
    // 70: b5ffff17      cbnz    x23, 0x50 <ltmp0+0x50>
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc0, 0x01, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x01, 0x00, 0x80, 0xd2, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0x54, 0x40, 0x01, 0x00, 0xb4,
        0xf3, 0x03, 0x00, 0xaa, 0xb3, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x17, 0xff, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0x39, state);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x68, 0x0, state);
    patch_aarch64_26r(code + 0x78, state->instruction_starts[instruction->error_target]);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_WITH_SPEC.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1803e0      mov     x0, x24
    // 14: aa1303e1      mov     x1, x19
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PyObject_Format
    // 1c: aa0003f7      mov     x23, x0
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f9400308      ldr     x8, [x24]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000308      str     x8, [x24]
    // 38: 54000120      b.eq    0x5c <ltmp0+0x5c>
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80168      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 54000101      b.ne    0x6c <ltmp0+0x6c>
    // 50: aa1303e0      mov     x0, x19
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: 14000005      b       0x6c <ltmp0+0x6c>
    // 5c: aa1803e0      mov     x0, x24
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: f9400268      ldr     x8, [x19]
    // 68: 36fffee8      tbz     w8, #0x1f, 0x44 <ltmp0+0x44>
    // 6c: b40000b7      cbz     x23, 0x80 <ltmp0+0x80>
    // 70: f81f02b7      stur    x23, [x21, #-0x10]
    // 74: d10022b5      sub     x21, x21, #0x8
    // 78: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb7, 0x00, 0x00, 0xb4,
        0xb7, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x39, state);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x7c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->error_target]);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_GEN_FRAME.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyGen_Type
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyGen_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000061      b.ne    0x20 <ltmp0+0x20>
    // 18: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 1c: 37f80049      tbnz    w9, #0x1f, 0x24 <ltmp0+0x24>
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: 91012109      add     x9, x8, #0x48
    // 28: f940450a      ldr     x10, [x8, #0x88]
    // 2c: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 30: f940016b      ldr     x11, [x11]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 34: f900014b      str     x11, [x10]
    // 38: f940450a      ldr     x10, [x8, #0x88]
    // 3c: 9100214a      add     x10, x10, #0x8
    // 40: f900450a      str     x10, [x8, #0x88]
    // 44: 39010d1f      strb    wzr, [x8, #0x43]
    // 48: f9403eca      ldr     x10, [x22, #0x78]
    // 4c: 9100a10b      add     x11, x8, #0x28
    // 50: f900190a      str     x10, [x8, #0x30]
    // 54: f9003ecb      str     x11, [x22, #0x78]
    // 58: f9002914      str     x20, [x8, #0x50]
    // 5c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000005c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 64: 11000908      add     w8, w8, #0x2
    // 68: 79009288      strh    w8, [x20, #0x48]
    // 6c: f80086a9      str     x9, [x21], #0x8
    // 70: 14000000      b       0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x61, 0x00, 0x00, 0x54,
        0x09, 0x0d, 0xc1, 0x39, 0x49, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x21, 0x01, 0x91,
        0x0a, 0x45, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x4b, 0x01, 0x00, 0xf9,
        0x0a, 0x45, 0x40, 0xf9, 0x4a, 0x21, 0x00, 0x91,
        0x0a, 0x45, 0x00, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0xca, 0x3e, 0x40, 0xf9, 0x0b, 0xa1, 0x00, 0x91,
        0x0a, 0x19, 0x00, 0xf9, 0xcb, 0x3e, 0x00, 0xf9,
        0x14, 0x29, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x09, 0x00, 0x11,
        0x88, 0x92, 0x00, 0x79, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_NoneStruct+0x0
    // 10: &PyGen_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, (uintptr_t)&PyGen_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_TIER_TWO.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400408      ldr     x8, [x0, #0x8]
    // 14: f9407108      ldr     x8, [x8, #0xe0]
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000080      cbz     x0, 0x34 <ltmp0+0x34>
    // 28: f80086a0      str     x0, [x21], #0x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 34: f9403ac8      ldr     x8, [x22, #0x70]
    // 38: b40002a8      cbz     x8, 0x8c <ltmp0+0x8c>
    // 3c: f9400508      ldr     x8, [x8, #0x8]
    // 40: b4000268      cbz     x8, 0x8c <ltmp0+0x8c>
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_StopIteration
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_StopIteration
    // 50: f9400101      ldr     x1, [x8]
    // 54: aa1603e0      mov     x0, x22
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __PyErr_ExceptionMatches
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: 34000180      cbz     w0, 0x94 <ltmp0+0x94>
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: f9401e82      ldr     x2, [x20, #0x38]
    // 70: aa1603e0      mov     x0, x22
    // 74: aa1403e1      mov     x1, x20
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __PyEval_MonitorRaise
    // 7c: aa1603e0      mov     x0, x22
    // 80: 94000000      bl      0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __PyErr_Clear
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa0, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x04, 0x40, 0xf9, 0x08, 0x71, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xc8, 0x3a, 0x40, 0xf9,
        0xa8, 0x02, 0x00, 0xb4, 0x08, 0x05, 0x40, 0xf9,
        0x68, 0x02, 0x00, 0xb4, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x01, 0x00, 0x34,
        0x95, 0x22, 0x00, 0xf9, 0x82, 0x1e, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x14, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyExc_StopIteration+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_StopIteration);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x58, 0x34, state);
    patch_aarch64_trampoline(code + 0x78, 0x3b, state);
    patch_aarch64_trampoline(code + 0x80, 0x3a, state);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x98, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AITER.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85f82b7      ldur    x23, [x21, #-0x8]
    // 10: f94006e8      ldr     x8, [x23, #0x8]
    // 14: f9402909      ldr     x9, [x8, #0x50]
    // 18: b4000309      cbz     x9, 0x78 <ltmp0+0x78>
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: b40002c9      cbz     x9, 0x78 <ltmp0+0x78>
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1703e0      mov     x0, x23
    // 2c: d63f0120      blr     x9
    // 30: aa0003f3      mov     x19, x0
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: f94002e8      ldr     x8, [x23]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f90002e8      str     x8, [x23]
    // 4c: 54000760      b.eq    0x138 <ltmp0+0x138>
    // 50: b4000373      cbz     x19, 0xbc <ltmp0+0xbc>
    // 54: f9400668      ldr     x8, [x19, #0x8]
    // 58: f9402909      ldr     x9, [x8, #0x50]
    // 5c: b4000369      cbz     x9, 0xc8 <ltmp0+0xc8>
    // 60: f9400929      ldr     x9, [x9, #0x10]
    // 64: b4000329      cbz     x9, 0xc8 <ltmp0+0xc8>
    // 68: f81f82b3      stur    x19, [x21, #-0x8]
    // 6c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 70: 910083ff      add     sp, sp, #0x20
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 80: f9400129      ldr     x9, [x9]
    // 0000000000000080:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 84: f9400121      ldr     x1, [x9]
    // 88: f9400d08      ldr     x8, [x8, #0x18]
    // 8c: f90003e8      str     x8, [sp]
    // 90: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000090:  ARM64_RELOC_PAGE21   l_.str
    // 94: 91000042      add     x2, x2, #0x0
    // 0000000000000094:  ARM64_RELOC_PAGEOFF12        l_.str
    // 98: aa1603e0      mov     x0, x22
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // a0: f9402295      ldr     x21, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: f94002e8      ldr     x8, [x23]
    // ac: 37f80088      tbnz    w8, #0x1f, 0xbc <ltmp0+0xbc>
    // b0: f1000508      subs    x8, x8, #0x1
    // b4: f90002e8      str     x8, [x23]
    // b8: 54000360      b.eq    0x124 <ltmp0+0x124>
    // bc: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // c0: 910083ff      add     sp, sp, #0x20
    // c4: 14000000      b       0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // c8: d10022a9      sub     x9, x21, #0x8
    // cc: f9002289      str     x9, [x20, #0x40]
    // d0: 90000009      adrp    x9, 0x0 <ltmp0>
    // 00000000000000d0:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // d4: f9400129      ldr     x9, [x9]
    // 00000000000000d4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // d8: f9400121      ldr     x1, [x9]
    // dc: f9400d08      ldr     x8, [x8, #0x18]
    // e0: f90003e8      str     x8, [sp]
    // e4: 90000002      adrp    x2, 0x0 <ltmp0>
    // 00000000000000e4:  ARM64_RELOC_PAGE21   l_.str.1
    // e8: 91000042      add     x2, x2, #0x0
    // 00000000000000e8:  ARM64_RELOC_PAGEOFF12        l_.str.1
    // ec: aa1603e0      mov     x0, x22
    // f0: 94000000      bl      0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // f4: f9402295      ldr     x21, [x20, #0x40]
    // f8: f900229f      str     xzr, [x20, #0x40]
    // fc: f9400268      ldr     x8, [x19]
    // 100: 37fffde8      tbnz    w8, #0x1f, 0xbc <ltmp0+0xbc>
    // 104: f1000508      subs    x8, x8, #0x1
    // 108: f9000268      str     x8, [x19]
    // 10c: 54fffd81      b.ne    0xbc <ltmp0+0xbc>
    // 110: aa1303e0      mov     x0, x19
    // 114: 94000000      bl      0x114 <ltmp0+0x114>
    // 0000000000000114:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 118: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 11c: 910083ff      add     sp, sp, #0x20
    // 120: 14000000      b       0x120 <ltmp0+0x120>
    // 0000000000000120:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 124: aa1703e0      mov     x0, x23
    // 128: 94000000      bl      0x128 <ltmp0+0x128>
    // 0000000000000128:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 12c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 130: 910083ff      add     sp, sp, #0x20
    // 134: 14000000      b       0x134 <ltmp0+0x134>
    // 0000000000000134:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 138: aa1703e0      mov     x0, x23
    // 13c: 94000000      bl      0x13c <ltmp0+0x13c>
    // 000000000000013c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 140: b5fff8b3      cbnz    x19, 0x54 <ltmp0+0x54>
    // 144: 17ffffde      b       0xbc <ltmp0+0xbc>
    const unsigned char code_body[328] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb7, 0x82, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x09, 0x29, 0x40, 0xf9,
        0x09, 0x03, 0x00, 0xb4, 0x29, 0x05, 0x40, 0xf9,
        0xc9, 0x02, 0x00, 0xb4, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0xf3, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x60, 0x07, 0x00, 0x54,
        0x73, 0x03, 0x00, 0xb4, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x29, 0x40, 0xf9, 0x69, 0x03, 0x00, 0xb4,
        0x29, 0x09, 0x40, 0xf9, 0x29, 0x03, 0x00, 0xb4,
        0xb3, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x21, 0x01, 0x40, 0xf9,
        0x08, 0x0d, 0x40, 0xf9, 0xe8, 0x03, 0x00, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x60, 0x03, 0x00, 0x54, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xa9, 0x22, 0x00, 0xd1, 0x89, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x21, 0x01, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0xe8, 0x03, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfd, 0xff, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x81, 0xfd, 0xff, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xb3, 0xf8, 0xff, 0xb5, 0xde, 0xff, 0xff, 0x17,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: &PyExc_TypeError+0x0
    const unsigned char data_body[168] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)&PyExc_TypeError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0xa0);
    patch_aarch64_21r(code + 0x90, (uintptr_t)data);
    patch_aarch64_12(code + 0x94, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x9c, 0x30, state);
    patch_aarch64_26r(code + 0xc4, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xd0, (uintptr_t)data + 0xa0);
    patch_aarch64_21r(code + 0xe4, (uintptr_t)data + 0x41);
    patch_aarch64_12(code + 0xe8, (uintptr_t)data + 0x41);
    patch_aarch64_trampoline(code + 0xf0, 0x30, state);
    patch_aarch64_trampoline(code + 0x114, 0x0, state);
    patch_aarch64_26r(code + 0x120, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x128, 0x0, state);
    patch_aarch64_26r(code + 0x134, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x13c, 0x0, state);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ANEXT.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 94000000      bl      0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __PyEval_GetANext
    // 14: f9402295      ldr     x21, [x20, #0x40]
    // 18: f900229f      str     xzr, [x20, #0x40]
    // 1c: b4000080      cbz     x0, 0x2c <ltmp0+0x2c>
    // 20: f80086a0      str     x0, [x21], #0x8
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa0, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x10, 0x3c, state);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AWAITABLE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 12003d01      and     w1, w8, #0xffff
    // 1c: aa1303e0      mov     x0, x19
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __PyEval_GetAwaitable
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: f9400268      ldr     x8, [x19]
    // 30: 37f80088      tbnz    w8, #0x1f, 0x40 <ltmp0+0x40>
    // 34: f1000508      subs    x8, x8, #0x1
    // 38: f9000268      str     x8, [x19]
    // 3c: 540000a0      b.eq    0x50 <ltmp0+0x50>
    // 40: b4000120      cbz     x0, 0x64 <ltmp0+0x64>
    // 44: f81f82a0      stur    x0, [x21, #-0x8]
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 50: aa0003f7      mov     x23, x0
    // 54: aa1303e0      mov     x0, x19
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 5c: aa1703e0      mov     x0, x23
    // 60: b5ffff37      cbnz    x23, 0x44 <ltmp0+0x44>
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x01, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0x20, 0x01, 0x00, 0xb4, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x37, 0xff, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x20, 0x3d, state);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x58, 0x0, state);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ITER.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1303e0      mov     x0, x19
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 _PyObject_GetIter
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: f9400268      ldr     x8, [x19]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <ltmp0+0x34>
    // 28: f1000508      subs    x8, x8, #0x1
    // 2c: f9000268      str     x8, [x19]
    // 30: 540000a0      b.eq    0x44 <ltmp0+0x44>
    // 34: b4000120      cbz     x0, 0x58 <ltmp0+0x58>
    // 38: f81f82a0      stur    x0, [x21, #-0x8]
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: aa0003f7      mov     x23, x0
    // 48: aa1303e0      mov     x0, x19
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 50: aa1703e0      mov     x0, x23
    // 54: b5ffff37      cbnz    x23, 0x38 <ltmp0+0x38>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[96] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x37, 0xff, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0x3e, state);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x4c, 0x0, state);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_LEN.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 94000000      bl      0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 _PyObject_Size
    // 14: f9402295      ldr     x21, [x20, #0x40]
    // 18: f900229f      str     xzr, [x20, #0x40]
    // 1c: b7f800c0      tbnz    x0, #0x3f, 0x34 <ltmp0+0x34>
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 _PyLong_FromSsize_t
    // 24: b4000080      cbz     x0, 0x34 <ltmp0+0x34>
    // 28: f80086a0      str     x0, [x21], #0x8
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa0, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x00, 0xf8, 0xb7,
        0x00, 0x00, 0x00, 0x94, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x10, 0x17, state);
    patch_aarch64_trampoline(code + 0x20, 0x16, state);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->error_target]);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_YIELD_FROM_ITER.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyCoro_Type
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyCoro_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000260      b.eq    0x68 <ltmp0+0x68>
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyGen_Type
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyGen_Type
    // 28: eb09011f      cmp     x8, x9
    // 2c: 54000260      b.eq    0x78 <ltmp0+0x78>
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: aa1303e0      mov     x0, x19
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PyObject_GetIter
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: b4000340      cbz     x0, 0xac <ltmp0+0xac>
    // 48: f9400268      ldr     x8, [x19]
    // 4c: 37f80348      tbnz    w8, #0x1f, 0xb4 <ltmp0+0xb4>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000268      str     x8, [x19]
    // 58: 54000340      b.eq    0xc0 <ltmp0+0xc0>
    // 5c: f81f82a0      stur    x0, [x21, #-0x8]
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: f9400288      ldr     x8, [x20]
    // 6c: 79406108      ldrh    w8, [x8, #0x30]
    // 70: 7219051f      tst     w8, #0x180
    // 74: 54000080      b.eq    0x84 <ltmp0+0x84>
    // 78: f81f82b3      stur    x19, [x21, #-0x8]
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 90: f9400101      ldr     x1, [x8]
    // 94: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000094:  ARM64_RELOC_PAGE21   l_.str
    // 98: 91000042      add     x2, x2, #0x0
    // 0000000000000098:  ARM64_RELOC_PAGEOFF12        l_.str
    // 9c: aa1603e0      mov     x0, x22
    // a0: 94000000      bl      0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __PyErr_SetString
    // a4: f9402295      ldr     x21, [x20, #0x40]
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // b4: f81f82a0      stur    x0, [x21, #-0x8]
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c0: aa0003f7      mov     x23, x0
    // c4: aa1303e0      mov     x0, x19
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: f81f82b7      stur    x23, [x21, #-0x8]
    // d0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x60, 0x02, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x60, 0x02, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x40, 0x03, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xf9, 0x48, 0x03, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x40, 0x03, 0x00, 0x54, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x61, 0x40, 0x79,
        0x1f, 0x05, 0x19, 0x72, 0x80, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xa0, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb7, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &PyExc_TypeError+0x0
    // 50: &PyGen_Type+0x0
    // 58: &PyCoro_Type+0x0
    const unsigned char data_body[96] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x50, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x58, (uintptr_t)&PyCoro_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x58);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x50);
    patch_aarch64_trampoline(code + 0x38, 0x3e, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x80, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x48);
    patch_aarch64_21r(code + 0x94, (uintptr_t)data);
    patch_aarch64_12(code + 0x98, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xa0, 0x3f, state);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_FLOAT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFloat_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFloat_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <ltmp0+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <ltmp0+0x2c>
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <ltmp0+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <ltmp0+0x2c>
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_UNICODE.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyUnicode_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyUnicode_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <ltmp0+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000040      b.eq    0x2c <ltmp0+0x2c>
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyUnicode_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000121      b.ne    0x38 <ltmp0+0x38>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: b9400d09      ldr     w9, [x8, #0xc]
    // 20: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 54000061      b.ne    0x38 <ltmp0+0x38>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0x88, 0x12, 0x40, 0xf9, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x0d, 0x40, 0xb9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0x61, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_NO_DICT.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8109      ldur    x9, [x8, #-0x18]
    // 8: b4000049      cbz     x9, 0x10 <ltmp0+0x10>
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 10: f9400509      ldr     x9, [x8, #0x8]
    // 14: f9401129      ldr     x9, [x9, #0x20]
    // 18: 8b090108      add     x8, x8, x9
    // 1c: 39400d08      ldrb    w8, [x8, #0x3]
    // 20: 34ffff68      cbz     w8, 0xc <ltmp0+0xc>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x81, 0x5e, 0xf8,
        0x49, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0x09, 0x05, 0x40, 0xf9, 0x29, 0x11, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x08, 0x0d, 0x40, 0x39,
        0x68, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000048      cbz     w8, 0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x48, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000101      b.ne    0x34 <ltmp0+0x34>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: b9400d08      ldr     w8, [x8, #0xc]
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 28: 6b29211f      cmp     w8, w9, uxth
    // 2c: 54000041      b.ne    0x34 <ltmp0+0x34>
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[56] = {
        0x88, 0x0e, 0x40, 0xf9, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x01, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xb9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x21, 0x29, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x34, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000121      b.ne    0x38 <ltmp0+0x38>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: b9400d09      ldr     w9, [x8, #0xc]
    // 20: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 54000061      b.ne    0x38 <ltmp0+0x38>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0x88, 0x0e, 0x40, 0xf9, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x0d, 0x40, 0xb9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0x61, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &PyDict_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_FALSE_POP.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <ltmp0+0x18>
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NONE_POP.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // c: eb08001f      cmp     x0, x8
    // 10: 540000e0      b.eq    0x2c <ltmp0+0x2c>
    // 14: f9400008      ldr     x8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 1c: f1000508      subs    x8, x8, #0x1
    // 20: f9000008      str     x8, [x0]
    // 24: 54000060      b.eq    0x30 <ltmp0+0x30>
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 910003fd      mov     x29, sp
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0xa0, 0x8e, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x08, 0xeb,
        0xe0, 0x00, 0x00, 0x54, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x60, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x38, 0x0, state);
    patch_aarch64_26r(code + 0x40, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NOT_NONE_POP.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 4: f9400268      ldr     x8, [x19]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000268      str     x8, [x19]
    // 14: 540000c0      b.eq    0x2c <ltmp0+0x2c>
    // 18: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 20: eb08027f      cmp     x19, x8
    // 24: 54000160      b.eq    0x50 <ltmp0+0x50>
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 30: 910003fd      mov     x29, sp
    // 34: aa1303e0      mov     x0, x19
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 48: eb08027f      cmp     x19, x8
    // 4c: 54fffee1      b.ne    0x28 <ltmp0+0x28>
    // 50: 14000000      b       0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xb3, 0x8e, 0x5f, 0xf8, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x7f, 0x02, 0x08, 0xeb, 0x60, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x7f, 0x02, 0x08, 0xeb, 0xe1, 0xfe, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x38, 0x0, state);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x50, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_TRUE_POP.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <ltmp0+0x18>
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_KEYS_VERSION.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: f941b908      ldr     x8, [x8, #0x370]
    // c: b9400d08      ldr     w8, [x8, #0xc]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 18: 6b09011f      cmp     w8, w9
    // 1c: 54000041      b.ne    0x24 <ltmp0+0x24>
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x08, 0xb9, 0x41, 0xf9, 0x08, 0x0d, 0x40, 0xb9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x24, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_FLOAT.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFloat_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_INT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_LIST.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b40000c9      cbz     x9, 0x20 <ltmp0+0x20>
    // c: f940090a      ldr     x10, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09015f      cmp     x10, x9
    // 18: 54000062      b.hs    0x24 <ltmp0+0x24>
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: 92800009      mov     x9, #-0x1               ; =-1
    // 28: f9000909      str     x9, [x8, #0x10]
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0xc9, 0x00, 0x00, 0xb4, 0x0a, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x5f, 0x01, 0x09, 0xeb,
        0x62, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x09, 0x00, 0x80, 0x92,
        0x09, 0x09, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_RANGE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9401108      ldr     x8, [x8, #0x20]
    // 8: f100011f      cmp     x8, #0x0
    // c: 5400004d      b.le    0x14 <ltmp0+0x14>
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[24] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x11, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0xf1, 0x4d, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b40000c9      cbz     x9, 0x20 <ltmp0+0x20>
    // c: f9400908      ldr     x8, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09011f      cmp     x8, x9
    // 18: 5400004a      b.ge    0x20 <ltmp0+0x20>
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0xc9, 0x00, 0x00, 0xb4, 0x08, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x4a, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_FLOAT.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyFloat_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyFloat_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_INT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyLong_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TYPE_VERSION.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: b9418108      ldr     w8, [x8, #0x180]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000041      b.ne    0x20 <ltmp0+0x20>
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x08, 0x81, 0x41, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x20, state->instruction_starts[instruction->jump_target]);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_FROM.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82a1      ldur    x1, [x21, #-0x8]
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d02      ldr     x2, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1603e0      mov     x0, x22
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __PyEval_ImportFrom
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: b4000080      cbz     x0, 0x48 <ltmp0+0x48>
    // 3c: f80086a0      str     x0, [x21], #0x8
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa1, 0x82, 0x5f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0x40, state);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x4c, state->instruction_starts[instruction->error_target]);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_NAME.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d02      ldr     x2, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1603e0      mov     x0, x22
    // 2c: aa1403e1      mov     x1, x20
    // 30: aa1303e3      mov     x3, x19
    // 34: aa1803e4      mov     x4, x24
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __PyEval_ImportName
    // 3c: aa0003f7      mov     x23, x0
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400308      ldr     x8, [x24]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000308      str     x8, [x24]
    // 58: 54000120      b.eq    0x7c <ltmp0+0x7c>
    // 5c: f9400268      ldr     x8, [x19]
    // 60: 37f80168      tbnz    w8, #0x1f, 0x8c <ltmp0+0x8c>
    // 64: f1000508      subs    x8, x8, #0x1
    // 68: f9000268      str     x8, [x19]
    // 6c: 54000101      b.ne    0x8c <ltmp0+0x8c>
    // 70: aa1303e0      mov     x0, x19
    // 74: 94000000      bl      0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 78: 14000005      b       0x8c <ltmp0+0x8c>
    // 7c: aa1803e0      mov     x0, x24
    // 80: 94000000      bl      0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 84: f9400268      ldr     x8, [x19]
    // 88: 36fffee8      tbz     w8, #0x1f, 0x64 <ltmp0+0x64>
    // 8c: b40000b7      cbz     x23, 0xa0 <ltmp0+0xa0>
    // 90: f81f02b7      stur    x23, [x21, #-0x10]
    // 94: d10022b5      sub     x21, x21, #0x8
    // 98: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 9c: 14000000      b       0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a4: 14000000      b       0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x14, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0xe4, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xb7, 0x00, 0x00, 0xb4,
        0xb7, 0x02, 0x1f, 0xf8, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x41, state);
    patch_aarch64_trampoline(code + 0x74, 0x0, state);
    patch_aarch64_trampoline(code + 0x80, 0x0, state);
    patch_aarch64_26r(code + 0x9c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa4, state->instruction_starts[instruction->error_target]);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: 1280002a      mov     w10, #-0x2              ; =-2
    // 14: 4b080148      sub     w8, w10, w8
    // 18: f868daaa      ldr     x10, [x21, w8, sxtw #3]
    // 1c: f9400d4b      ldr     x11, [x10, #0x18]
    // 20: b940016c      ldr     w12, [x11]
    // 24: 37f8006c      tbnz    w12, #0x1f, 0x30 <ltmp0+0x30>
    // 28: 1100058c      add     w12, w12, #0x1
    // 2c: b900016c      str     w12, [x11]
    // 30: f829daab      str     x11, [x21, w9, sxtw #3]
    // 34: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 38: f9400949      ldr     x9, [x10, #0x10]
    // 3c: b940012a      ldr     w10, [x9]
    // 40: 37f8006a      tbnz    w10, #0x1f, 0x4c <ltmp0+0x4c>
    // 44: 1100054a      add     w10, w10, #0x1
    // 48: b900012a      str     w10, [x9]
    // 4c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 50: f9400008      ldr     x8, [x0]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 58: f1000508      subs    x8, x8, #0x1
    // 5c: f9000008      str     x8, [x0]
    // 60: 54000040      b.eq    0x68 <ltmp0+0x68>
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0x2a, 0x00, 0x80, 0x12, 0x48, 0x01, 0x08, 0x4b,
        0xaa, 0xda, 0x68, 0xf8, 0x4b, 0x0d, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xab, 0xda, 0x29, 0xf8, 0xa0, 0xda, 0x68, 0xf8,
        0x49, 0x09, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d0a      and     w10, w8, #0xffff
    // c: 2a2a03e8      mvn     w8, w10
    // 10: 8b28cea8      add     x8, x21, w8, sxtw #3
    // 14: 12800029      mov     w9, #-0x2               ; =-2
    // 18: 4b0a0129      sub     w9, w9, w10
    // 1c: f940010c      ldr     x12, [x8]
    // 20: f100019f      cmp     x12, #0x0
    // 24: 1a8a054b      cinc    w11, w10, ne
    // 28: f869daae      ldr     x14, [x21, w9, sxtw #3]
    // 2c: f94019cd      ldr     x13, [x14, #0x30]
    // 30: f9407aca      ldr     x10, [x22, #0xf0]
    // 34: b9804daf      ldrsw   x15, [x13, #0x4c]
    // 38: 8b0f0d4f      add     x15, x10, x15, lsl #3
    // 3c: f9007acf      str     x15, [x22, #0xf0]
    // 40: a900b954      stp     x20, x14, [x10, #0x8]
    // 44: b94001af      ldr     w15, [x13]
    // 48: 37f8006f      tbnz    w15, #0x1f, 0x54 <ltmp0+0x54>
    // 4c: 110005ef      add     w15, w15, #0x1
    // 50: b90001af      str     w15, [x13]
    // 54: f900014d      str     x13, [x10]
    // 58: 3dc005c0      ldr     q0, [x14, #0x10]
    // 5c: 3c818140      stur    q0, [x10, #0x18]
    // 60: 9101414e      add     x14, x10, #0x50
    // 64: b98049af      ldrsw   x15, [x13, #0x48]
    // 68: 8b0f0dd0      add     x16, x14, x15, lsl #3
    // 6c: a902fd5f      stp     xzr, xzr, [x10, #0x28]
    // 70: 910341b1      add     x17, x13, #0xd0
    // 74: a903c151      stp     x17, x16, [x10, #0x38]
    // 78: b900495f      str     wzr, [x10, #0x48]
    // 7c: 6b0b01ff      cmp     w15, w11
    // 80: 540000cd      b.le    0x98 <ltmp0+0x98>
    // 84: f82b79df      str     xzr, [x14, x11, lsl #3]
    // 88: 9100056b      add     x11, x11, #0x1
    // 8c: b98049af      ldrsw   x15, [x13, #0x48]
    // 90: eb0f017f      cmp     x11, x15
    // 94: 54ffff8b      b.lt    0x84 <ltmp0+0x84>
    // 98: f100019f      cmp     x12, #0x0
    // 9c: 1a9f07eb      cset    w11, ne
    // a0: f940010d      ldr     x13, [x8]
    // a4: f90001cd      str     x13, [x14]
    // a8: 9000000e      adrp    x14, 0x0 <ltmp0>
    // 00000000000000a8:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // ac: f94001ce      ldr     x14, [x14]
    // 00000000000000ac:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // b0: 72003ddf      tst     w14, #0xffff
    // b4: 54000300      b.eq    0x114 <ltmp0+0x114>
    // b8: 92403dcd      and     x13, x14, #0xffff
    // bc: 12003dce      and     w14, w14, #0xffff
    // c0: 71002ddf      cmp     w14, #0xb
    // c4: 54000149      b.ls    0xec <ltmp0+0xec>
    // c8: f100019f      cmp     x12, #0x0
    // cc: 1a9f07ec      cset    w12, ne
    // d0: 8b2c4d4c      add     x12, x10, w12, uxtw #3
    // d4: d37df1ae      lsl     x14, x13, #3
    // d8: 8b0e018c      add     x12, x12, x14
    // dc: cb15018c      sub     x12, x12, x21
    // e0: 9101418c      add     x12, x12, #0x50
    // e4: f101019f      cmp     x12, #0x40
    // e8: 540001c2      b.hs    0x120 <ltmp0+0x120>
    // ec: d280000c      mov     x12, #0x0               ; =0
    // f0: cb0d018d      sub     x13, x12, x13
    // f4: d37df18c      lsl     x12, x12, #3
    // f8: 8b0b0d8b      add     x11, x12, x11, lsl #3
    // fc: 8b0a016b      add     x11, x11, x10
    // 100: 9101416b      add     x11, x11, #0x50
    // 104: f86d7aac      ldr     x12, [x21, x13, lsl #3]
    // 108: f800856c      str     x12, [x11], #0x8
    // 10c: b10005ad      adds    x13, x13, #0x1
    // 110: 54ffffa3      b.lo    0x104 <ltmp0+0x104>
    // 114: f829daaa      str     x10, [x21, w9, sxtw #3]
    // 118: aa0803f5      mov     x21, x8
    // 11c: 14000000      b       0x11c <ltmp0+0x11c>
    // 000000000000011c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 120: 927d31ac      and     x12, x13, #0xfff8
    // 124: cb0e02ae      sub     x14, x21, x14
    // 128: 910081ce      add     x14, x14, #0x20
    // 12c: 8b0b0d4f      add     x15, x10, x11, lsl #3
    // 130: 910201ef      add     x15, x15, #0x80
    // 134: aa0c03f0      mov     x16, x12
    // 138: ad7f05c0      ldp     q0, q1, [x14, #-0x20]
    // 13c: acc20dc2      ldp     q2, q3, [x14], #0x40
    // 140: ad3e85e0      stp     q0, q1, [x15, #-0x30]
    // 144: ad3f8de2      stp     q2, q3, [x15, #-0x10]
    // 148: 910101ef      add     x15, x15, #0x40
    // 14c: f1002210      subs    x16, x16, #0x8
    // 150: 54ffff41      b.ne    0x138 <ltmp0+0x138>
    // 154: eb0d019f      cmp     x12, x13
    // 158: 54fffcc1      b.ne    0xf0 <ltmp0+0xf0>
    // 15c: 17ffffee      b       0x114 <ltmp0+0x114>
    const unsigned char code_body[352] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xe8, 0x03, 0x2a, 0x2a,
        0xa8, 0xce, 0x28, 0x8b, 0x29, 0x00, 0x80, 0x12,
        0x29, 0x01, 0x0a, 0x4b, 0x0c, 0x01, 0x40, 0xf9,
        0x9f, 0x01, 0x00, 0xf1, 0x4b, 0x05, 0x8a, 0x1a,
        0xae, 0xda, 0x69, 0xf8, 0xcd, 0x19, 0x40, 0xf9,
        0xca, 0x7a, 0x40, 0xf9, 0xaf, 0x4d, 0x80, 0xb9,
        0x4f, 0x0d, 0x0f, 0x8b, 0xcf, 0x7a, 0x00, 0xf9,
        0x54, 0xb9, 0x00, 0xa9, 0xaf, 0x01, 0x40, 0xb9,
        0x6f, 0x00, 0xf8, 0x37, 0xef, 0x05, 0x00, 0x11,
        0xaf, 0x01, 0x00, 0xb9, 0x4d, 0x01, 0x00, 0xf9,
        0xc0, 0x05, 0xc0, 0x3d, 0x40, 0x81, 0x81, 0x3c,
        0x4e, 0x41, 0x01, 0x91, 0xaf, 0x49, 0x80, 0xb9,
        0xd0, 0x0d, 0x0f, 0x8b, 0x5f, 0xfd, 0x02, 0xa9,
        0xb1, 0x41, 0x03, 0x91, 0x51, 0xc1, 0x03, 0xa9,
        0x5f, 0x49, 0x00, 0xb9, 0xff, 0x01, 0x0b, 0x6b,
        0xcd, 0x00, 0x00, 0x54, 0xdf, 0x79, 0x2b, 0xf8,
        0x6b, 0x05, 0x00, 0x91, 0xaf, 0x49, 0x80, 0xb9,
        0x7f, 0x01, 0x0f, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0x9f, 0x01, 0x00, 0xf1, 0xeb, 0x07, 0x9f, 0x1a,
        0x0d, 0x01, 0x40, 0xf9, 0xcd, 0x01, 0x00, 0xf9,
        0x0e, 0x00, 0x00, 0x90, 0xce, 0x01, 0x40, 0xf9,
        0xdf, 0x3d, 0x00, 0x72, 0x00, 0x03, 0x00, 0x54,
        0xcd, 0x3d, 0x40, 0x92, 0xce, 0x3d, 0x00, 0x12,
        0xdf, 0x2d, 0x00, 0x71, 0x49, 0x01, 0x00, 0x54,
        0x9f, 0x01, 0x00, 0xf1, 0xec, 0x07, 0x9f, 0x1a,
        0x4c, 0x4d, 0x2c, 0x8b, 0xae, 0xf1, 0x7d, 0xd3,
        0x8c, 0x01, 0x0e, 0x8b, 0x8c, 0x01, 0x15, 0xcb,
        0x8c, 0x41, 0x01, 0x91, 0x9f, 0x01, 0x01, 0xf1,
        0xc2, 0x01, 0x00, 0x54, 0x0c, 0x00, 0x80, 0xd2,
        0x8d, 0x01, 0x0d, 0xcb, 0x8c, 0xf1, 0x7d, 0xd3,
        0x8b, 0x0d, 0x0b, 0x8b, 0x6b, 0x01, 0x0a, 0x8b,
        0x6b, 0x41, 0x01, 0x91, 0xac, 0x7a, 0x6d, 0xf8,
        0x6c, 0x85, 0x00, 0xf8, 0xad, 0x05, 0x00, 0xb1,
        0xa3, 0xff, 0xff, 0x54, 0xaa, 0xda, 0x29, 0xf8,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
        0xac, 0x31, 0x7d, 0x92, 0xae, 0x02, 0x0e, 0xcb,
        0xce, 0x81, 0x00, 0x91, 0x4f, 0x0d, 0x0b, 0x8b,
        0xef, 0x01, 0x02, 0x91, 0xf0, 0x03, 0x0c, 0xaa,
        0xc0, 0x05, 0x7f, 0xad, 0xc2, 0x0d, 0xc2, 0xac,
        0xe0, 0x85, 0x3e, 0xad, 0xe2, 0x8d, 0x3f, 0xad,
        0xef, 0x01, 0x01, 0x91, 0x10, 0x22, 0x00, 0xf1,
        0x41, 0xff, 0xff, 0x54, 0x9f, 0x01, 0x0d, 0xeb,
        0xc1, 0xfc, 0xff, 0x54, 0xee, 0xff, 0xff, 0x17,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x11c, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_0.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8d0b      ldr     x11, [x8, #-0x8]!
    // 8: f100017f      cmp     x11, #0x0
    // c: 1a9f07ec      cset    w12, ne
    // 10: f85f810d      ldur    x13, [x8, #-0x8]
    // 14: f94019aa      ldr     x10, [x13, #0x30]
    // 18: f9407ac9      ldr     x9, [x22, #0xf0]
    // 1c: b9804d4e      ldrsw   x14, [x10, #0x4c]
    // 20: 8b0e0d2e      add     x14, x9, x14, lsl #3
    // 24: f9007ace      str     x14, [x22, #0xf0]
    // 28: a900b534      stp     x20, x13, [x9, #0x8]
    // 2c: b940014e      ldr     w14, [x10]
    // 30: 37f8006e      tbnz    w14, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 110005ce      add     w14, w14, #0x1
    // 38: b900014e      str     w14, [x10]
    // 3c: f900012a      str     x10, [x9]
    // 40: 3dc005a0      ldr     q0, [x13, #0x10]
    // 44: 3c818120      stur    q0, [x9, #0x18]
    // 48: 9101412d      add     x13, x9, #0x50
    // 4c: b980494e      ldrsw   x14, [x10, #0x48]
    // 50: 8b0e0daf      add     x15, x13, x14, lsl #3
    // 54: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 58: 91034150      add     x16, x10, #0xd0
    // 5c: a903bd30      stp     x16, x15, [x9, #0x38]
    // 60: b900493f      str     wzr, [x9, #0x48]
    // 64: 6b0c01df      cmp     w14, w12
    // 68: 5400010d      b.le    0x88 <ltmp0+0x88>
    // 6c: f100017f      cmp     x11, #0x0
    // 70: 1a9f07eb      cset    w11, ne
    // 74: f82b79bf      str     xzr, [x13, x11, lsl #3]
    // 78: 9100056b      add     x11, x11, #0x1
    // 7c: b980494c      ldrsw   x12, [x10, #0x48]
    // 80: eb0c017f      cmp     x11, x12
    // 84: 54ffff8b      b.lt    0x74 <ltmp0+0x74>
    // 88: f85f82aa      ldur    x10, [x21, #-0x8]
    // 8c: f900292a      str     x10, [x9, #0x50]
    // 90: f81f02a9      stur    x9, [x21, #-0x10]
    // 94: aa0803f5      mov     x21, x8
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0b, 0x8d, 0x5f, 0xf8,
        0x7f, 0x01, 0x00, 0xf1, 0xec, 0x07, 0x9f, 0x1a,
        0x0d, 0x81, 0x5f, 0xf8, 0xaa, 0x19, 0x40, 0xf9,
        0xc9, 0x7a, 0x40, 0xf9, 0x4e, 0x4d, 0x80, 0xb9,
        0x2e, 0x0d, 0x0e, 0x8b, 0xce, 0x7a, 0x00, 0xf9,
        0x34, 0xb5, 0x00, 0xa9, 0x4e, 0x01, 0x40, 0xb9,
        0x6e, 0x00, 0xf8, 0x37, 0xce, 0x05, 0x00, 0x11,
        0x4e, 0x01, 0x00, 0xb9, 0x2a, 0x01, 0x00, 0xf9,
        0xa0, 0x05, 0xc0, 0x3d, 0x20, 0x81, 0x81, 0x3c,
        0x2d, 0x41, 0x01, 0x91, 0x4e, 0x49, 0x80, 0xb9,
        0xaf, 0x0d, 0x0e, 0x8b, 0x3f, 0xfd, 0x02, 0xa9,
        0x50, 0x41, 0x03, 0x91, 0x30, 0xbd, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xdf, 0x01, 0x0c, 0x6b,
        0x0d, 0x01, 0x00, 0x54, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x07, 0x9f, 0x1a, 0xbf, 0x79, 0x2b, 0xf8,
        0x6b, 0x05, 0x00, 0x91, 0x4c, 0x49, 0x80, 0xb9,
        0x7f, 0x01, 0x0c, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0xaa, 0x82, 0x5f, 0xf8, 0x2a, 0x29, 0x00, 0xf9,
        0xa9, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_1.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f0d09      ldr     x9, [x8, #-0x10]!
    // 8: f100013f      cmp     x9, #0x0
    // c: 5280002a      mov     w10, #0x1               ; =1
    // 10: 1a8a054b      cinc    w11, w10, ne
    // 14: f85f810d      ldur    x13, [x8, #-0x8]
    // 18: f94019ac      ldr     x12, [x13, #0x30]
    // 1c: f9407aca      ldr     x10, [x22, #0xf0]
    // 20: b9804d8e      ldrsw   x14, [x12, #0x4c]
    // 24: 8b0e0d4e      add     x14, x10, x14, lsl #3
    // 28: f9007ace      str     x14, [x22, #0xf0]
    // 2c: a900b554      stp     x20, x13, [x10, #0x8]
    // 30: b940018e      ldr     w14, [x12]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900018e      str     w14, [x12]
    // 40: f900014c      str     x12, [x10]
    // 44: 3dc005a0      ldr     q0, [x13, #0x10]
    // 48: 3c818140      stur    q0, [x10, #0x18]
    // 4c: 9101414d      add     x13, x10, #0x50
    // 50: b980498e      ldrsw   x14, [x12, #0x48]
    // 54: 8b0e0daf      add     x15, x13, x14, lsl #3
    // 58: a902fd5f      stp     xzr, xzr, [x10, #0x28]
    // 5c: 91034190      add     x16, x12, #0xd0
    // 60: a903bd50      stp     x16, x15, [x10, #0x38]
    // 64: b900495f      str     wzr, [x10, #0x48]
    // 68: 6b0b01df      cmp     w14, w11
    // 6c: 540000cd      b.le    0x84 <ltmp0+0x84>
    // 70: f82b79bf      str     xzr, [x13, x11, lsl #3]
    // 74: 9100056b      add     x11, x11, #0x1
    // 78: b980498e      ldrsw   x14, [x12, #0x48]
    // 7c: eb0e017f      cmp     x11, x14
    // 80: 54ffff8b      b.lt    0x70 <ltmp0+0x70>
    // 84: f100013f      cmp     x9, #0x0
    // 88: 1a9f07e9      cset    w9, ne
    // 8c: f85f02ab      ldur    x11, [x21, #-0x10]
    // 90: f900294b      str     x11, [x10, #0x50]
    // 94: f85f82ab      ldur    x11, [x21, #-0x8]
    // 98: f82959ab      str     x11, [x13, w9, uxtw #3]
    // 9c: f81e82aa      stur    x10, [x21, #-0x18]
    // a0: aa0803f5      mov     x21, x8
    // a4: 14000000      b       0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[168] = {
        0xe8, 0x03, 0x15, 0xaa, 0x09, 0x0d, 0x5f, 0xf8,
        0x3f, 0x01, 0x00, 0xf1, 0x2a, 0x00, 0x80, 0x52,
        0x4b, 0x05, 0x8a, 0x1a, 0x0d, 0x81, 0x5f, 0xf8,
        0xac, 0x19, 0x40, 0xf9, 0xca, 0x7a, 0x40, 0xf9,
        0x8e, 0x4d, 0x80, 0xb9, 0x4e, 0x0d, 0x0e, 0x8b,
        0xce, 0x7a, 0x00, 0xf9, 0x54, 0xb5, 0x00, 0xa9,
        0x8e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x8e, 0x01, 0x00, 0xb9,
        0x4c, 0x01, 0x00, 0xf9, 0xa0, 0x05, 0xc0, 0x3d,
        0x40, 0x81, 0x81, 0x3c, 0x4d, 0x41, 0x01, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0xaf, 0x0d, 0x0e, 0x8b,
        0x5f, 0xfd, 0x02, 0xa9, 0x90, 0x41, 0x03, 0x91,
        0x50, 0xbd, 0x03, 0xa9, 0x5f, 0x49, 0x00, 0xb9,
        0xdf, 0x01, 0x0b, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2b, 0xf8, 0x6b, 0x05, 0x00, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0x7f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x3f, 0x01, 0x00, 0xf1,
        0xe9, 0x07, 0x9f, 0x1a, 0xab, 0x02, 0x5f, 0xf8,
        0x4b, 0x29, 0x00, 0xf9, 0xab, 0x82, 0x5f, 0xf8,
        0xab, 0x59, 0x29, 0xf8, 0xaa, 0x82, 0x1e, 0xf8,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xa4, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_2.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e8d0a      ldr     x10, [x8, #-0x18]!
    // 8: f100015f      cmp     x10, #0x0
    // c: 52800049      mov     w9, #0x2                ; =2
    // 10: 1a89052b      cinc    w11, w9, ne
    // 14: f85f810d      ldur    x13, [x8, #-0x8]
    // 18: f94019ac      ldr     x12, [x13, #0x30]
    // 1c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 20: b9804d8e      ldrsw   x14, [x12, #0x4c]
    // 24: 8b0e0d2e      add     x14, x9, x14, lsl #3
    // 28: f9007ace      str     x14, [x22, #0xf0]
    // 2c: a900b534      stp     x20, x13, [x9, #0x8]
    // 30: b940018e      ldr     w14, [x12]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900018e      str     w14, [x12]
    // 40: f900012c      str     x12, [x9]
    // 44: 3dc005a0      ldr     q0, [x13, #0x10]
    // 48: 3c818120      stur    q0, [x9, #0x18]
    // 4c: 9101412d      add     x13, x9, #0x50
    // 50: b980498e      ldrsw   x14, [x12, #0x48]
    // 54: 8b0e0daf      add     x15, x13, x14, lsl #3
    // 58: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 5c: 91034190      add     x16, x12, #0xd0
    // 60: a903bd30      stp     x16, x15, [x9, #0x38]
    // 64: b900493f      str     wzr, [x9, #0x48]
    // 68: 6b0b01df      cmp     w14, w11
    // 6c: 540000cd      b.le    0x84 <ltmp0+0x84>
    // 70: f82b79bf      str     xzr, [x13, x11, lsl #3]
    // 74: 9100056b      add     x11, x11, #0x1
    // 78: b980498e      ldrsw   x14, [x12, #0x48]
    // 7c: eb0e017f      cmp     x11, x14
    // 80: 54ffff8b      b.lt    0x70 <ltmp0+0x70>
    // 84: f100015f      cmp     x10, #0x0
    // 88: 1a9f07ea      cset    w10, ne
    // 8c: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 90: f85e82ab      ldur    x11, [x21, #-0x18]
    // 94: f900292b      str     x11, [x9, #0x50]
    // 98: f85f02ab      ldur    x11, [x21, #-0x10]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85f82ab      ldur    x11, [x21, #-0x8]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f81e02a9      stur    x9, [x21, #-0x20]
    // ac: aa0803f5      mov     x21, x8
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b4: 00 00 00 00
    const unsigned char code_body[184] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x8d, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x49, 0x00, 0x80, 0x52,
        0x2b, 0x05, 0x89, 0x1a, 0x0d, 0x81, 0x5f, 0xf8,
        0xac, 0x19, 0x40, 0xf9, 0xc9, 0x7a, 0x40, 0xf9,
        0x8e, 0x4d, 0x80, 0xb9, 0x2e, 0x0d, 0x0e, 0x8b,
        0xce, 0x7a, 0x00, 0xf9, 0x34, 0xb5, 0x00, 0xa9,
        0x8e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x8e, 0x01, 0x00, 0xb9,
        0x2c, 0x01, 0x00, 0xf9, 0xa0, 0x05, 0xc0, 0x3d,
        0x20, 0x81, 0x81, 0x3c, 0x2d, 0x41, 0x01, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0xaf, 0x0d, 0x0e, 0x8b,
        0x3f, 0xfd, 0x02, 0xa9, 0x90, 0x41, 0x03, 0x91,
        0x30, 0xbd, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0xdf, 0x01, 0x0b, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2b, 0xf8, 0x6b, 0x05, 0x00, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0x7f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x5f, 0x01, 0x00, 0xf1,
        0xea, 0x07, 0x9f, 0x1a, 0xaa, 0x4d, 0x2a, 0x8b,
        0xab, 0x82, 0x5e, 0xf8, 0x2b, 0x29, 0x00, 0xf9,
        0xab, 0x02, 0x5f, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0xab, 0x82, 0x5f, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0xa9, 0x02, 0x1e, 0xf8, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xb0, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_3.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e0d0a      ldr     x10, [x8, #-0x20]!
    // 8: f100015f      cmp     x10, #0x0
    // c: 52800069      mov     w9, #0x3                ; =3
    // 10: 1a89052b      cinc    w11, w9, ne
    // 14: f85f810d      ldur    x13, [x8, #-0x8]
    // 18: f94019ac      ldr     x12, [x13, #0x30]
    // 1c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 20: b9804d8e      ldrsw   x14, [x12, #0x4c]
    // 24: 8b0e0d2e      add     x14, x9, x14, lsl #3
    // 28: f9007ace      str     x14, [x22, #0xf0]
    // 2c: a900b534      stp     x20, x13, [x9, #0x8]
    // 30: b940018e      ldr     w14, [x12]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900018e      str     w14, [x12]
    // 40: f900012c      str     x12, [x9]
    // 44: 3dc005a0      ldr     q0, [x13, #0x10]
    // 48: 3c818120      stur    q0, [x9, #0x18]
    // 4c: 9101412d      add     x13, x9, #0x50
    // 50: b980498e      ldrsw   x14, [x12, #0x48]
    // 54: 8b0e0daf      add     x15, x13, x14, lsl #3
    // 58: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 5c: 91034190      add     x16, x12, #0xd0
    // 60: a903bd30      stp     x16, x15, [x9, #0x38]
    // 64: b900493f      str     wzr, [x9, #0x48]
    // 68: 6b0b01df      cmp     w14, w11
    // 6c: 540000cd      b.le    0x84 <ltmp0+0x84>
    // 70: f82b79bf      str     xzr, [x13, x11, lsl #3]
    // 74: 9100056b      add     x11, x11, #0x1
    // 78: b980498e      ldrsw   x14, [x12, #0x48]
    // 7c: eb0e017f      cmp     x11, x14
    // 80: 54ffff8b      b.lt    0x70 <ltmp0+0x70>
    // 84: f100015f      cmp     x10, #0x0
    // 88: 1a9f07ea      cset    w10, ne
    // 8c: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 90: f85e02ab      ldur    x11, [x21, #-0x20]
    // 94: f900292b      str     x11, [x9, #0x50]
    // 98: f85e82ab      ldur    x11, [x21, #-0x18]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85f02ab      ldur    x11, [x21, #-0x10]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f85f82ab      ldur    x11, [x21, #-0x8]
    // ac: f900094b      str     x11, [x10, #0x10]
    // b0: f81d82a9      stur    x9, [x21, #-0x28]
    // b4: aa0803f5      mov     x21, x8
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: 00 00 00 00
    const unsigned char code_body[192] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x0d, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x69, 0x00, 0x80, 0x52,
        0x2b, 0x05, 0x89, 0x1a, 0x0d, 0x81, 0x5f, 0xf8,
        0xac, 0x19, 0x40, 0xf9, 0xc9, 0x7a, 0x40, 0xf9,
        0x8e, 0x4d, 0x80, 0xb9, 0x2e, 0x0d, 0x0e, 0x8b,
        0xce, 0x7a, 0x00, 0xf9, 0x34, 0xb5, 0x00, 0xa9,
        0x8e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x8e, 0x01, 0x00, 0xb9,
        0x2c, 0x01, 0x00, 0xf9, 0xa0, 0x05, 0xc0, 0x3d,
        0x20, 0x81, 0x81, 0x3c, 0x2d, 0x41, 0x01, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0xaf, 0x0d, 0x0e, 0x8b,
        0x3f, 0xfd, 0x02, 0xa9, 0x90, 0x41, 0x03, 0x91,
        0x30, 0xbd, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0xdf, 0x01, 0x0b, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2b, 0xf8, 0x6b, 0x05, 0x00, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0x7f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x5f, 0x01, 0x00, 0xf1,
        0xea, 0x07, 0x9f, 0x1a, 0xaa, 0x4d, 0x2a, 0x8b,
        0xab, 0x02, 0x5e, 0xf8, 0x2b, 0x29, 0x00, 0xf9,
        0xab, 0x82, 0x5e, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0xab, 0x02, 0x5f, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0xab, 0x82, 0x5f, 0xf8, 0x4b, 0x09, 0x00, 0xf9,
        0xa9, 0x82, 0x1d, 0xf8, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_4.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85d8d0a      ldr     x10, [x8, #-0x28]!
    // 8: f100015f      cmp     x10, #0x0
    // c: 52800089      mov     w9, #0x4                ; =4
    // 10: 1a89052b      cinc    w11, w9, ne
    // 14: f85f810d      ldur    x13, [x8, #-0x8]
    // 18: f94019ac      ldr     x12, [x13, #0x30]
    // 1c: f9407ac9      ldr     x9, [x22, #0xf0]
    // 20: b9804d8e      ldrsw   x14, [x12, #0x4c]
    // 24: 8b0e0d2e      add     x14, x9, x14, lsl #3
    // 28: f9007ace      str     x14, [x22, #0xf0]
    // 2c: a900b534      stp     x20, x13, [x9, #0x8]
    // 30: b940018e      ldr     w14, [x12]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900018e      str     w14, [x12]
    // 40: f900012c      str     x12, [x9]
    // 44: 3dc005a0      ldr     q0, [x13, #0x10]
    // 48: 3c818120      stur    q0, [x9, #0x18]
    // 4c: 9101412d      add     x13, x9, #0x50
    // 50: b980498e      ldrsw   x14, [x12, #0x48]
    // 54: 8b0e0daf      add     x15, x13, x14, lsl #3
    // 58: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 5c: 91034190      add     x16, x12, #0xd0
    // 60: a903bd30      stp     x16, x15, [x9, #0x38]
    // 64: b900493f      str     wzr, [x9, #0x48]
    // 68: 6b0b01df      cmp     w14, w11
    // 6c: 540000cd      b.le    0x84 <ltmp0+0x84>
    // 70: f82b79bf      str     xzr, [x13, x11, lsl #3]
    // 74: 9100056b      add     x11, x11, #0x1
    // 78: b980498e      ldrsw   x14, [x12, #0x48]
    // 7c: eb0e017f      cmp     x11, x14
    // 80: 54ffff8b      b.lt    0x70 <ltmp0+0x70>
    // 84: f100015f      cmp     x10, #0x0
    // 88: 1a9f07ea      cset    w10, ne
    // 8c: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // 90: f85d82ab      ldur    x11, [x21, #-0x28]
    // 94: f900292b      str     x11, [x9, #0x50]
    // 98: f85e02ab      ldur    x11, [x21, #-0x20]
    // 9c: f900014b      str     x11, [x10]
    // a0: f85e82ab      ldur    x11, [x21, #-0x18]
    // a4: f900054b      str     x11, [x10, #0x8]
    // a8: f85f02ab      ldur    x11, [x21, #-0x10]
    // ac: f900094b      str     x11, [x10, #0x10]
    // b0: f85f82ab      ldur    x11, [x21, #-0x8]
    // b4: f9000d4b      str     x11, [x10, #0x18]
    // b8: f81d02a9      stur    x9, [x21, #-0x30]
    // bc: aa0803f5      mov     x21, x8
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xe8, 0x03, 0x15, 0xaa, 0x0a, 0x8d, 0x5d, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x89, 0x00, 0x80, 0x52,
        0x2b, 0x05, 0x89, 0x1a, 0x0d, 0x81, 0x5f, 0xf8,
        0xac, 0x19, 0x40, 0xf9, 0xc9, 0x7a, 0x40, 0xf9,
        0x8e, 0x4d, 0x80, 0xb9, 0x2e, 0x0d, 0x0e, 0x8b,
        0xce, 0x7a, 0x00, 0xf9, 0x34, 0xb5, 0x00, 0xa9,
        0x8e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x8e, 0x01, 0x00, 0xb9,
        0x2c, 0x01, 0x00, 0xf9, 0xa0, 0x05, 0xc0, 0x3d,
        0x20, 0x81, 0x81, 0x3c, 0x2d, 0x41, 0x01, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0xaf, 0x0d, 0x0e, 0x8b,
        0x3f, 0xfd, 0x02, 0xa9, 0x90, 0x41, 0x03, 0x91,
        0x30, 0xbd, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0xdf, 0x01, 0x0b, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2b, 0xf8, 0x6b, 0x05, 0x00, 0x91,
        0x8e, 0x49, 0x80, 0xb9, 0x7f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x5f, 0x01, 0x00, 0xf1,
        0xea, 0x07, 0x9f, 0x1a, 0xaa, 0x4d, 0x2a, 0x8b,
        0xab, 0x82, 0x5d, 0xf8, 0x2b, 0x29, 0x00, 0xf9,
        0xab, 0x02, 0x5e, 0xf8, 0x4b, 0x01, 0x00, 0xf9,
        0xab, 0x82, 0x5e, 0xf8, 0x4b, 0x05, 0x00, 0xf9,
        0xab, 0x02, 0x5f, 0xf8, 0x4b, 0x09, 0x00, 0xf9,
        0xab, 0x82, 0x5f, 0xf8, 0x4b, 0x0d, 0x00, 0xf9,
        0xa9, 0x02, 0x1d, 0xf8, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
}

void
emit__INTERNAL_INCREMENT_OPT_COUNTER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INTERNAL_INCREMENT_OPT_COUNTER.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: 91000529      add     x9, x9, #0x1
    // c: f9000d09      str     x9, [x8, #0x18]
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 14: 00 00 00 00
    const unsigned char code_body[24] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0x29, 0x05, 0x00, 0x91, 0x09, 0x0d, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_NONE.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // c: eb08001f      cmp     x0, x8
    // 10: 54000140      b.eq    0x38 <ltmp0+0x38>
    // 14: f9400008      ldr     x8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 1c: f1000508      subs    x8, x8, #0x1
    // 20: f9000008      str     x8, [x0]
    // 24: 54000120      b.eq    0x48 <ltmp0+0x48>
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 30: f81f82a8      stur    x8, [x21, #-0x8]
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 910003fd      mov     x29, sp
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 54: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000054:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: f81f82a8      stur    x8, [x21, #-0x8]
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x20, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_NoneStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x50, 0x0, state);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_OP.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: f85f8e77      ldr     x23, [x19, #-0x8]!
    // 10: f85f8278      ldur    x24, [x19, #-0x8]
    // 14: f9400308      ldr     x8, [x24]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 1c: f1000508      subs    x8, x8, #0x1
    // 20: f9000308      str     x8, [x24]
    // 24: 54000120      b.eq    0x48 <ltmp0+0x48>
    // 28: f94002e8      ldr     x8, [x23]
    // 2c: 37f80168      tbnz    w8, #0x1f, 0x58 <ltmp0+0x58>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f90002e8      str     x8, [x23]
    // 38: 54000101      b.ne    0x58 <ltmp0+0x58>
    // 3c: aa1703e0      mov     x0, x23
    // 40: 94000000      bl      0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 44: 14000005      b       0x58 <ltmp0+0x58>
    // 48: aa1803e0      mov     x0, x24
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 50: f94002e8      ldr     x8, [x23]
    // 54: 36fffee8      tbz     w8, #0x1f, 0x30 <ltmp0+0x30>
    // 58: eb17031f      cmp     x24, x23
    // 5c: 1a9f17e8      cset    w8, eq
    // 60: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000060:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 64: f9400129      ldr     x9, [x9]
    // 0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 68: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 6c: f940014a      ldr     x10, [x10]
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 70: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 74: f940016b      ldr     x11, [x11]
    // 0000000000000074:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 78: 6b29211f      cmp     w8, w9, uxth
    // 7c: 9a8a0168      csel    x8, x11, x10, eq
    // 80: f81f02a8      stur    x8, [x21, #-0x10]
    // 84: aa1303f5      mov     x21, x19
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <ltmp0+0x8c>
    // 000000000000008c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[144] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x77, 0x8e, 0x5f, 0xf8,
        0x78, 0x82, 0x5f, 0xf8, 0x08, 0x03, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x20, 0x01, 0x00, 0x54,
        0xe8, 0x02, 0x40, 0xf9, 0x68, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x01, 0x01, 0x00, 0x54, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x05, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xe8, 0xfe, 0xff, 0x36,
        0x1f, 0x03, 0x17, 0xeb, 0xe8, 0x17, 0x9f, 0x1a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x1f, 0x21, 0x29, 0x6b, 0x68, 0x01, 0x8a, 0x9a,
        0xa8, 0x02, 0x1f, 0xf8, 0xf5, 0x03, 0x13, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x40, 0x0, state);
    patch_aarch64_trampoline(code + 0x4c, 0x0, state);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data);
    patch_aarch64_26r(code + 0x8c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_LIST.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyListIter_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyListIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyListIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_RANGE.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyRangeIter_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyRangeIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyRangeIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_TUPLE.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTupleIter_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTupleIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyTupleIter_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_LIST.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: a941250a      ldp     x10, x9, [x8, #0x10]
    // 8: f9400d29      ldr     x9, [x9, #0x18]
    // c: 9100054b      add     x11, x10, #0x1
    // 10: f900090b      str     x11, [x8, #0x10]
    // 14: f86a7928      ldr     x8, [x9, x10, lsl #3]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x25, 0x41, 0xa9,
        0x29, 0x0d, 0x40, 0xf9, 0x4b, 0x05, 0x00, 0x91,
        0x0b, 0x09, 0x00, 0xf9, 0x28, 0x79, 0x6a, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_RANGE.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82a8      ldur    x8, [x21, #-0x8]
    // c: a9412500      ldp     x0, x9, [x8, #0x10]
    // 10: 8b000129      add     x9, x9, x0
    // 14: f9000909      str     x9, [x8, #0x10]
    // 18: f9401109      ldr     x9, [x8, #0x20]
    // 1c: d1000529      sub     x9, x9, #0x1
    // 20: f9001109      str     x9, [x8, #0x20]
    // 24: 94000000      bl      0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 _PyLong_FromLong
    // 28: b4000080      cbz     x0, 0x38 <ltmp0+0x38>
    // 2c: f80086a0      str     x0, [x21], #0x8
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[64] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa8, 0x82, 0x5f, 0xf8, 0x00, 0x25, 0x41, 0xa9,
        0x29, 0x01, 0x00, 0x8b, 0x09, 0x09, 0x00, 0xf9,
        0x09, 0x11, 0x40, 0xf9, 0x29, 0x05, 0x00, 0xd1,
        0x09, 0x11, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x94,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x24, 0x42, state);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, state->instruction_starts[instruction->error_target]);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_TUPLE.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: a941250a      ldp     x10, x9, [x8, #0x10]
    // 8: 8b0a0d29      add     x9, x9, x10, lsl #3
    // c: 9100054a      add     x10, x10, #0x1
    // 10: f900090a      str     x10, [x8, #0x10]
    // 14: f9400d28      ldr     x8, [x9, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x25, 0x41, 0xa9,
        0x29, 0x0d, 0x0a, 0x8b, 0x4a, 0x05, 0x00, 0x91,
        0x0a, 0x09, 0x00, 0xf9, 0x28, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _JUMP_TO_TOP.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 14000000      b       0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 4: 00 00 00 00
    const unsigned char code_body[8] = {
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x0, state->instruction_starts[instruction->jump_target]);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_APPEND.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503f3      mov     x19, x21
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: 2a2803e8      mvn     w8, w8
    // 10: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // 14: 531d7108      lsl     w8, w8, #3
    // 18: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 1c: f8686a60      ldr     x0, [x19, x8]
    // 20: f9400808      ldr     x8, [x0, #0x10]
    // 24: f9401009      ldr     x9, [x0, #0x20]
    // 28: eb08013f      cmp     x9, x8
    // 2c: 540000cd      b.le    0x44 <ltmp0+0x44>
    // 30: f9400c09      ldr     x9, [x0, #0x18]
    // 34: f8287921      str     x1, [x9, x8, lsl #3]
    // 38: 91000508      add     x8, x8, #0x1
    // 3c: f9000808      str     x8, [x0, #0x10]
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 48: 910003fd      mov     x29, sp
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __PyList_AppendTakeRefListResize
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 37f80040      tbnz    w0, #0x1f, 0x5c <ltmp0+0x5c>
    // 58: 14000000      b       0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 5c: aa1303f5      mov     x21, x19
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xf3, 0x03, 0x15, 0xaa, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe8, 0x03, 0x28, 0x2a,
        0xa1, 0x8e, 0x5f, 0xf8, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0x60, 0x6a, 0x68, 0xf8,
        0x08, 0x08, 0x40, 0xf9, 0x09, 0x10, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xcd, 0x00, 0x00, 0x54,
        0x09, 0x0c, 0x40, 0xf9, 0x21, 0x79, 0x28, 0xf8,
        0x08, 0x05, 0x00, 0x91, 0x08, 0x08, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x40, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x14, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x4c, 0x18, state);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_EXTEND.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 2a2803e8      mvn     w8, w8
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 531d7108      lsl     w8, w8, #3
    // 20: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 24: f8686aa0      ldr     x0, [x21, x8]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: aa1303e1      mov     x1, x19
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __PyList_Extend
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b4000140      cbz     x0, 0x64 <ltmp0+0x64>
    // 40: f9400268      ldr     x8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000268      str     x8, [x19]
    // 50: 54000520      b.eq    0xf4 <ltmp0+0xf4>
    // 54: d10022b5      sub     x21, x21, #0x8
    // 58: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 5c: 910083ff      add     sp, sp, #0x20
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: 90000017      adrp    x23, 0x0 <ltmp0>
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 6c: f94002f7      ldr     x23, [x23]
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 70: f94002e1      ldr     x1, [x23]
    // 74: aa1603e0      mov     x0, x22
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __PyErr_ExceptionMatches
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 34000280      cbz     w0, 0xd4 <ltmp0+0xd4>
    // 88: f9400668      ldr     x8, [x19, #0x8]
    // 8c: f9406d08      ldr     x8, [x8, #0xd8]
    // 90: b5000228      cbnz    x8, 0xd4 <ltmp0+0xd4>
    // 94: aa1303e0      mov     x0, x19
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 _PySequence_Check
    // 9c: 350001c0      cbnz    w0, 0xd4 <ltmp0+0xd4>
    // a0: f9002295      str     x21, [x20, #0x40]
    // a4: aa1603e0      mov     x0, x22
    // a8: 94000000      bl      0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __PyErr_Clear
    // ac: f94002e1      ldr     x1, [x23]
    // b0: f9400668      ldr     x8, [x19, #0x8]
    // b4: f9400d08      ldr     x8, [x8, #0x18]
    // b8: f90003e8      str     x8, [sp]
    // bc: 90000002      adrp    x2, 0x0 <ltmp0>
    // 00000000000000bc:  ARM64_RELOC_PAGE21   l_.str
    // c0: 91000042      add     x2, x2, #0x0
    // 00000000000000c0:  ARM64_RELOC_PAGEOFF12        l_.str
    // c4: aa1603e0      mov     x0, x22
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // cc: f9402295      ldr     x21, [x20, #0x40]
    // d0: f900229f      str     xzr, [x20, #0x40]
    // d4: f9400268      ldr     x8, [x19]
    // d8: 37f80088      tbnz    w8, #0x1f, 0xe8 <ltmp0+0xe8>
    // dc: f1000508      subs    x8, x8, #0x1
    // e0: f9000268      str     x8, [x19]
    // e4: 54000140      b.eq    0x10c <ltmp0+0x10c>
    // e8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // f4: aa1303e0      mov     x0, x19
    // f8: 94000000      bl      0xf8 <ltmp0+0xf8>
    // 00000000000000f8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // fc: d10022b5      sub     x21, x21, #0x8
    // 100: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 104: 910083ff      add     sp, sp, #0x20
    // 108: 14000000      b       0x108 <ltmp0+0x108>
    // 0000000000000108:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 10c: aa1303e0      mov     x0, x19
    // 110: 94000000      bl      0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 114: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 118: 910083ff      add     sp, sp, #0x20
    // 11c: 14000000      b       0x11c <ltmp0+0x11c>
    // 000000000000011c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[288] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe8, 0x03, 0x28, 0x2a,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x71, 0x1d, 0x53,
        0x08, 0xb1, 0x6d, 0xb2, 0xa0, 0x6a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x40, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x20, 0x05, 0x00, 0x54, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x17, 0x00, 0x00, 0x90, 0xf7, 0x02, 0x40, 0xf9,
        0xe1, 0x02, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x02, 0x00, 0x34,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x6d, 0x40, 0xf9,
        0x28, 0x02, 0x00, 0xb5, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xc0, 0x01, 0x00, 0x35,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe1, 0x02, 0x40, 0xf9,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0xe8, 0x03, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x40, 0x01, 0x00, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: &PyExc_TypeError+0x0
    // 38: OPARG
    const unsigned char data_body[64] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x38, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x38);
    patch_aarch64_trampoline(code + 0x30, 0x44, state);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x30);
    patch_aarch64_trampoline(code + 0x78, 0x34, state);
    patch_aarch64_trampoline(code + 0x98, 0x43, state);
    patch_aarch64_trampoline(code + 0xa8, 0x3a, state);
    patch_aarch64_21r(code + 0xbc, (uintptr_t)data);
    patch_aarch64_12(code + 0xc0, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xc8, 0x30, state);
    patch_aarch64_26r(code + 0xf0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0xf8, 0x0, state);
    patch_aarch64_26r(code + 0x108, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x110, 0x0, state);
    patch_aarch64_26r(code + 0x11c, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: 90000017      adrp    x23, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: f9400288      ldr     x8, [x20]
    // 1c: f9401108      ldr     x8, [x8, #0x20]
    // 20: 53013ee9      ubfx    w9, w23, #1, #15
    // 24: 8b294d08      add     x8, x8, w9, uxtw #3
    // 28: f9400d01      ldr     x1, [x8, #0x18]
    // 2c: 37000257      tbnz    w23, #0x0, 0x74 <ltmp0+0x74>
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: aa1303e0      mov     x0, x19
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 _PyObject_GetAttr
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: f9400268      ldr     x8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <ltmp0+0x58>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000268      str     x8, [x19]
    // 54: 540004e0      b.eq    0xf0 <ltmp0+0xf0>
    // 58: b4000560      cbz     x0, 0x104 <ltmp0+0x104>
    // 5c: f81f82a0      stur    x0, [x21, #-0x8]
    // 60: 120002e8      and     w8, w23, #0x1
    // 64: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 68: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 6c: 910083ff      add     sp, sp, #0x20
    // 70: 14000000      b       0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 74: f90007ff      str     xzr, [sp, #0x8]
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: 910023e2      add     x2, sp, #0x8
    // 80: aa1303e0      mov     x0, x19
    // 84: 94000000      bl      0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __PyObject_GetMethod
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 34000100      cbz     w0, 0xb0 <ltmp0+0xb0>
    // 94: f94007e8      ldr     x8, [sp, #0x8]
    // 98: a93fcea8      stp     x8, x19, [x21, #-0x8]
    // 9c: 120002e8      and     w8, w23, #0x1
    // a0: 8b284eb5      add     x21, x21, w8, uxtw #3
    // a4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // a8: 910083ff      add     sp, sp, #0x20
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b0: f9400268      ldr     x8, [x19]
    // b4: 37f800c8      tbnz    w8, #0x1f, 0xcc <ltmp0+0xcc>
    // b8: f1000508      subs    x8, x8, #0x1
    // bc: f9000268      str     x8, [x19]
    // c0: 54000061      b.ne    0xcc <ltmp0+0xcc>
    // c4: aa1303e0      mov     x0, x19
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: f94007e8      ldr     x8, [sp, #0x8]
    // d0: b40001a8      cbz     x8, 0x104 <ltmp0+0x104>
    // d4: d2800013      mov     x19, #0x0               ; =0
    // d8: a93fcea8      stp     x8, x19, [x21, #-0x8]
    // dc: 120002e8      and     w8, w23, #0x1
    // e0: 8b284eb5      add     x21, x21, w8, uxtw #3
    // e4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e8: 910083ff      add     sp, sp, #0x20
    // ec: 14000000      b       0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // f0: aa0003f8      mov     x24, x0
    // f4: aa1303e0      mov     x0, x19
    // f8: 94000000      bl      0xf8 <ltmp0+0xf8>
    // 00000000000000f8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // fc: aa1803e0      mov     x0, x24
    // 100: b5fffaf8      cbnz    x24, 0x5c <ltmp0+0x5c>
    // 104: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 108: 910083ff      add     sp, sp, #0x20
    // 10c: 14000000      b       0x10c <ltmp0+0x10c>
    // 000000000000010c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[272] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0xe9, 0x3e, 0x01, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x57, 0x02, 0x00, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xe0, 0x04, 0x00, 0x54,
        0x60, 0x05, 0x00, 0xb4, 0xa0, 0x82, 0x1f, 0xf8,
        0xe8, 0x02, 0x00, 0x12, 0xb5, 0x4e, 0x28, 0x8b,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xff, 0x07, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0x34, 0xe8, 0x07, 0x40, 0xf9,
        0xa8, 0xce, 0x3f, 0xa9, 0xe8, 0x02, 0x00, 0x12,
        0xb5, 0x4e, 0x28, 0x8b, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x68, 0x02, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x07, 0x40, 0xf9,
        0xa8, 0x01, 0x00, 0xb4, 0x13, 0x00, 0x80, 0xd2,
        0xa8, 0xce, 0x3f, 0xa9, 0xe8, 0x02, 0x00, 0x12,
        0xb5, 0x4e, 0x28, 0x8b, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xf8, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x18, 0xaa,
        0xf8, 0xfa, 0xff, 0xb5, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x46, state);
    patch_aarch64_26r(code + 0x70, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x84, 0x45, state);
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_26r(code + 0xec, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xf8, 0x0, state);
    patch_aarch64_26r(code + 0x10c, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_ATTR_CLASS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_0.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000013      adrp    x19, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400273      ldr     x19, [x19]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: b9400268      ldr     w8, [x19]
    // 10: 37f80068      tbnz    w8, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 11000508      add     w8, w8, #0x1
    // 18: b9000268      str     w8, [x19]
    // 1c: f9400008      ldr     x8, [x0]
    // 20: 37f80088      tbnz    w8, #0x1f, 0x30 <ltmp0+0x30>
    // 24: f1000508      subs    x8, x8, #0x1
    // 28: f9000008      str     x8, [x0]
    // 2c: 54000060      b.eq    0x38 <ltmp0+0x38>
    // 30: f81f82b3      stur    x19, [x21, #-0x8]
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 3c: 910003fd      mov     x29, sp
    // 40: 94000000      bl      0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 44: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 48: f81f82b3      stur    x19, [x21, #-0x8]
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[80] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x13, 0x00, 0x00, 0x90,
        0x73, 0x02, 0x40, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x60, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x40, 0x0, state);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_CLASS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_1.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000013      adrp    x19, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400273      ldr     x19, [x19]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: b9400268      ldr     w8, [x19]
    // 10: 37f80068      tbnz    w8, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 11000508      add     w8, w8, #0x1
    // 18: b9000268      str     w8, [x19]
    // 1c: f9400008      ldr     x8, [x0]
    // 20: 37f80088      tbnz    w8, #0x1f, 0x30 <ltmp0+0x30>
    // 24: f1000508      subs    x8, x8, #0x1
    // 28: f9000008      str     x8, [x0]
    // 2c: 54000080      b.eq    0x3c <ltmp0+0x3c>
    // 30: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 34: 910022b5      add     x21, x21, #0x8
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 40: 910003fd      mov     x29, sp
    // 44: 94000000      bl      0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 50: 910022b5      add     x21, x21, #0x8
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x13, 0x00, 0x00, 0x90,
        0x73, 0x02, 0x40, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x80, 0x00, 0x00, 0x54,
        0xb3, 0xfe, 0x3f, 0xa9, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb3, 0xfe, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x44, 0x0, state);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_0.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686813      ldr     x19, [x0, x8]
    // 14: b4000193      cbz     x19, 0x44 <ltmp0+0x44>
    // 18: b9400268      ldr     w8, [x19]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000268      str     w8, [x19]
    // 28: f9400008      ldr     x8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000008      str     x8, [x0]
    // 38: 54000080      b.eq    0x48 <ltmp0+0x48>
    // 3c: f81f82b3      stur    x19, [x21, #-0x8]
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 910003fd      mov     x29, sp
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: f81f82b3      stur    x19, [x21, #-0x8]
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[96] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0x93, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0x54, 0xb3, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x50, 0x0, state);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_1.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686813      ldr     x19, [x0, x8]
    // 14: b40001b3      cbz     x19, 0x48 <ltmp0+0x48>
    // 18: b9400268      ldr     w8, [x19]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000268      str     w8, [x19]
    // 28: f9400008      ldr     x8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000008      str     x8, [x0]
    // 38: 540000a0      b.eq    0x4c <ltmp0+0x4c>
    // 3c: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 40: 910022b5      add     x21, x21, #0x8
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 4c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 50: 910003fd      mov     x29, sp
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 60: 910022b5      add     x21, x21, #0x8
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0xb3, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0xb3, 0xfe, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb3, 0xfe, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_LAZY_DICT.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: b940012a      ldr     w10, [x9]
    // 10: 37f8006a      tbnz    w10, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 1100054a      add     w10, w10, #0x1
    // 18: b900012a      str     w10, [x9]
    // 1c: a93fa2a9      stp     x9, x8, [x21, #-0x8]
    // 20: 910022b5      add     x21, x21, #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xa2, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_NO_DICT.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: b940012a      ldr     w10, [x9]
    // 10: 37f8006a      tbnz    w10, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 1100054a      add     w10, w10, #0x1
    // 18: b900012a      str     w10, [x9]
    // 1c: a93fa2a9      stp     x9, x8, [x21, #-0x8]
    // 20: 910022b5      add     x21, x21, #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xa2, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: b940012a      ldr     w10, [x9]
    // 10: 37f8006a      tbnz    w10, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 1100054a      add     w10, w10, #0x1
    // 18: b900012a      str     w10, [x9]
    // 1c: a93fa2a9      stp     x9, x8, [x21, #-0x8]
    // 20: 910022b5      add     x21, x21, #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xa2, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_MODULE.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400808      ldr     x8, [x0, #0x10]
    // 8: f9401108      ldr     x8, [x8, #0x20]
    // c: 39402509      ldrb    w9, [x8, #0x9]
    // 10: 5280002a      mov     w10, #0x1               ; =1
    // 14: 9ac92149      lsl     x9, x10, x9
    // 18: 8b090108      add     x8, x8, x9
    // 1c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 24: 8b293108      add     x8, x8, w9, uxth #4
    // 28: f9401513      ldr     x19, [x8, #0x28]
    // 2c: b40002d3      cbz     x19, 0x84 <ltmp0+0x84>
    // 30: b9400268      ldr     w8, [x19]
    // 34: 37f80068      tbnz    w8, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 11000508      add     w8, w8, #0x1
    // 3c: b9000268      str     w8, [x19]
    // 40: f9400008      ldr     x8, [x0]
    // 44: 37f80108      tbnz    w8, #0x1f, 0x64 <ltmp0+0x64>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000008      str     x8, [x0]
    // 50: 540000a1      b.ne    0x64 <ltmp0+0x64>
    // 54: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 58: 910003fd      mov     x29, sp
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: f81f82b3      stur    x19, [x21, #-0x8]
    // 68: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 6c: f9400129      ldr     x9, [x9]
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 70: 12000128      and     w8, w9, #0x1
    // 74: 36000049      tbz     w9, #0x0, 0x7c <ltmp0+0x7c>
    // 78: f90002bf      str     xzr, [x21]
    // 7c: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[136] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x08, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x2a, 0x00, 0x80, 0x52, 0x49, 0x21, 0xc9, 0x9a,
        0x08, 0x01, 0x09, 0x8b, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x31, 0x29, 0x8b,
        0x13, 0x15, 0x40, 0xf9, 0xd3, 0x02, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb3, 0x82, 0x1f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x02, 0x00, 0xf9, 0xb5, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x5c, 0x0, state);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_26r(code + 0x80, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80108      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 540000a1      b.ne    0x28 <ltmp0+0x28>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 910003fd      mov     x29, sp
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 30: b9400109      ldr     w9, [x8]
    // 34: 37f80069      tbnz    w9, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 11000529      add     w9, w9, #0x1
    // 3c: b9000109      str     w9, [x8]
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x0, state);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80108      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 540000a1      b.ne    0x28 <ltmp0+0x28>
    // 18: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 1c: 910003fd      mov     x29, sp
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 24: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 28: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 30: b9400109      ldr     w9, [x8]
    // 34: 37f80069      tbnz    w9, #0x1f, 0x40 <ltmp0+0x40>
    // 38: 11000529      add     w9, w9, #0x1
    // 3c: b9000109      str     w9, [x8]
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x0, state);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_PROPERTY_FRAME.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f940016b      ldr     x11, [x11]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: f9401968      ldr     x8, [x11, #0x30]
    // c: b9403109      ldr     w9, [x8, #0x30]
    // 10: 528001aa      mov     w10, #0xd               ; =13
    // 14: 0a0a0129      and     w9, w9, w10
    // 18: 7100053f      cmp     w9, #0x1
    // 1c: 540005e1      b.ne    0xd8 <ltmp0+0xd8>
    // 20: b9403d09      ldr     w9, [x8, #0x3c]
    // 24: 350005a9      cbnz    w9, 0xd8 <ltmp0+0xd8>
    // 28: b9403509      ldr     w9, [x8, #0x34]
    // 2c: 7100053f      cmp     w9, #0x1
    // 30: 54000541      b.ne    0xd8 <ltmp0+0xd8>
    // 34: f9407ac9      ldr     x9, [x22, #0xf0]
    // 38: b4000509      cbz     x9, 0xd8 <ltmp0+0xd8>
    // 3c: b9804d0c      ldrsw   x12, [x8, #0x4c]
    // 40: f9407eca      ldr     x10, [x22, #0xf8]
    // 44: cb09014a      sub     x10, x10, x9
    // 48: eb8a0d9f      cmp     x12, x10, asr #3
    // 4c: 5400046a      b.ge    0xd8 <ltmp0+0xd8>
    // 50: f85f82aa      ldur    x10, [x21, #-0x8]
    // 54: b940016d      ldr     w13, [x11]
    // 58: 37f8006d      tbnz    w13, #0x1f, 0x64 <ltmp0+0x64>
    // 5c: 110005ad      add     w13, w13, #0x1
    // 60: b900016d      str     w13, [x11]
    // 64: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 68: f9007acc      str     x12, [x22, #0xf0]
    // 6c: a900ad34      stp     x20, x11, [x9, #0x8]
    // 70: b940010c      ldr     w12, [x8]
    // 74: 37f8006c      tbnz    w12, #0x1f, 0x80 <ltmp0+0x80>
    // 78: 1100058c      add     w12, w12, #0x1
    // 7c: b900010c      str     w12, [x8]
    // 80: f9000128      str     x8, [x9]
    // 84: 3dc00560      ldr     q0, [x11, #0x10]
    // 88: 3c818120      stur    q0, [x9, #0x18]
    // 8c: b980490b      ldrsw   x11, [x8, #0x48]
    // 90: 8b0b0d2c      add     x12, x9, x11, lsl #3
    // 94: 9101418c      add     x12, x12, #0x50
    // 98: a902fd3f      stp     xzr, xzr, [x9, #0x28]
    // 9c: 9103410d      add     x13, x8, #0xd0
    // a0: a903b12d      stp     x13, x12, [x9, #0x38]
    // a4: b900493f      str     wzr, [x9, #0x48]
    // a8: 7100097f      cmp     w11, #0x2
    // ac: 5400010b      b.lt    0xcc <ltmp0+0xcc>
    // b0: 9101612b      add     x11, x9, #0x58
    // b4: 5280002c      mov     w12, #0x1               ; =1
    // b8: f800857f      str     xzr, [x11], #0x8
    // bc: 9100058c      add     x12, x12, #0x1
    // c0: b980490d      ldrsw   x13, [x8, #0x48]
    // c4: eb0d019f      cmp     x12, x13
    // c8: 54ffff8b      b.lt    0xb8 <ltmp0+0xb8>
    // cc: f900292a      str     x10, [x9, #0x50]
    // d0: f81f82a9      stur    x9, [x21, #-0x8]
    // d4: 14000000      b       0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // d8: 14000000      b       0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x68, 0x19, 0x40, 0xf9, 0x09, 0x31, 0x40, 0xb9,
        0xaa, 0x01, 0x80, 0x52, 0x29, 0x01, 0x0a, 0x0a,
        0x3f, 0x05, 0x00, 0x71, 0xe1, 0x05, 0x00, 0x54,
        0x09, 0x3d, 0x40, 0xb9, 0xa9, 0x05, 0x00, 0x35,
        0x09, 0x35, 0x40, 0xb9, 0x3f, 0x05, 0x00, 0x71,
        0x41, 0x05, 0x00, 0x54, 0xc9, 0x7a, 0x40, 0xf9,
        0x09, 0x05, 0x00, 0xb4, 0x0c, 0x4d, 0x80, 0xb9,
        0xca, 0x7e, 0x40, 0xf9, 0x4a, 0x01, 0x09, 0xcb,
        0x9f, 0x0d, 0x8a, 0xeb, 0x6a, 0x04, 0x00, 0x54,
        0xaa, 0x82, 0x5f, 0xf8, 0x6d, 0x01, 0x40, 0xb9,
        0x6d, 0x00, 0xf8, 0x37, 0xad, 0x05, 0x00, 0x11,
        0x6d, 0x01, 0x00, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x7a, 0x00, 0xf9, 0x34, 0xad, 0x00, 0xa9,
        0x0c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x0c, 0x01, 0x00, 0xb9,
        0x28, 0x01, 0x00, 0xf9, 0x60, 0x05, 0xc0, 0x3d,
        0x20, 0x81, 0x81, 0x3c, 0x0b, 0x49, 0x80, 0xb9,
        0x2c, 0x0d, 0x0b, 0x8b, 0x8c, 0x41, 0x01, 0x91,
        0x3f, 0xfd, 0x02, 0xa9, 0x0d, 0x41, 0x03, 0x91,
        0x2d, 0xb1, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x7f, 0x09, 0x00, 0x71, 0x0b, 0x01, 0x00, 0x54,
        0x2b, 0x61, 0x01, 0x91, 0x2c, 0x00, 0x80, 0x52,
        0x7f, 0x85, 0x00, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x0d, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0d, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x2a, 0x29, 0x00, 0xf9,
        0xa9, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xd4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd8, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_ATTR_SLOT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_0.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686813      ldr     x19, [x0, x8]
    // 14: b4000193      cbz     x19, 0x44 <ltmp0+0x44>
    // 18: b9400268      ldr     w8, [x19]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000268      str     w8, [x19]
    // 28: f9400008      ldr     x8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000008      str     x8, [x0]
    // 38: 54000080      b.eq    0x48 <ltmp0+0x48>
    // 3c: f81f82b3      stur    x19, [x21, #-0x8]
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 910003fd      mov     x29, sp
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: f81f82b3      stur    x19, [x21, #-0x8]
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[96] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0x93, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0x54, 0xb3, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x44, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x50, 0x0, state);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_SLOT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_1.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // c: 92403d08      and     x8, x8, #0xffff
    // 10: f8686813      ldr     x19, [x0, x8]
    // 14: b40001b3      cbz     x19, 0x48 <ltmp0+0x48>
    // 18: b9400268      ldr     w8, [x19]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000268      str     w8, [x19]
    // 28: f9400008      ldr     x8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000008      str     x8, [x0]
    // 38: 540000a0      b.eq    0x4c <ltmp0+0x4c>
    // 3c: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 40: 910022b5      add     x21, x21, #0x8
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 4c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 50: 910003fd      mov     x29, sp
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: a93ffeb3      stp     x19, xzr, [x21, #-0x8]
    // 60: 910022b5      add     x21, x21, #0x8
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x13, 0x68, 0x68, 0xf8, 0xb3, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0xb3, 0xfe, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb3, 0xfe, 0x3f, 0xa9,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x48, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_WITH_HINT.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f85e8009      ldur    x9, [x0, #-0x18]
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f9401129      ldr     x9, [x9, #0x20]
    // 18: f9400d2a      ldr     x10, [x9, #0x18]
    // 1c: eb08015f      cmp     x10, x8
    // 20: 54000269      b.ls    0x6c <ltmp0+0x6c>
    // 24: 3940292a      ldrb    w10, [x9, #0xa]
    // 28: 3400022a      cbz     w10, 0x6c <ltmp0+0x6c>
    // 2c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 30: f940014a      ldr     x10, [x10]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 34: 12003d53      and     w19, w10, #0xffff
    // 38: f940028a      ldr     x10, [x20]
    // 3c: f940114a      ldr     x10, [x10, #0x20]
    // 40: 53017e6b      lsr     w11, w19, #1
    // 44: 8b2b4d4a      add     x10, x10, w11, uxtw #3
    // 48: f9400d4a      ldr     x10, [x10, #0x18]
    // 4c: 3940252b      ldrb    w11, [x9, #0x9]
    // 50: 5280002c      mov     w12, #0x1               ; =1
    // 54: 9acb218b      lsl     x11, x12, x11
    // 58: 8b0b0129      add     x9, x9, x11
    // 5c: 8b081128      add     x8, x9, x8, lsl #4
    // 60: f8420d09      ldr     x9, [x8, #0x20]!
    // 64: eb0a013f      cmp     x9, x10
    // 68: 54000040      b.eq    0x70 <ltmp0+0x70>
    // 6c: 14000000      b       0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 70: f9400517      ldr     x23, [x8, #0x8]
    // 74: b4ffffd7      cbz     x23, 0x6c <ltmp0+0x6c>
    // 78: b94002e8      ldr     w8, [x23]
    // 7c: 37f80068      tbnz    w8, #0x1f, 0x88 <ltmp0+0x88>
    // 80: 11000508      add     w8, w8, #0x1
    // 84: b90002e8      str     w8, [x23]
    // 88: f9400008      ldr     x8, [x0]
    // 8c: 37f80108      tbnz    w8, #0x1f, 0xac <ltmp0+0xac>
    // 90: f1000508      subs    x8, x8, #0x1
    // 94: f9000008      str     x8, [x0]
    // 98: 540000a1      b.ne    0xac <ltmp0+0xac>
    // 9c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // a0: 910003fd      mov     x29, sp
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ac: f81f82b7      stur    x23, [x21, #-0x8]
    // b0: 12000268      and     w8, w19, #0x1
    // b4: 36000053      tbz     w19, #0x0, 0xbc <ltmp0+0xbc>
    // b8: f90002bf      str     xzr, [x21]
    // bc: 8b284eb5      add     x21, x21, w8, uxtw #3
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x09, 0x80, 0x5e, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x29, 0x11, 0x40, 0xf9,
        0x2a, 0x0d, 0x40, 0xf9, 0x5f, 0x01, 0x08, 0xeb,
        0x69, 0x02, 0x00, 0x54, 0x2a, 0x29, 0x40, 0x39,
        0x2a, 0x02, 0x00, 0x34, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x53, 0x3d, 0x00, 0x12,
        0x8a, 0x02, 0x40, 0xf9, 0x4a, 0x11, 0x40, 0xf9,
        0x6b, 0x7e, 0x01, 0x53, 0x4a, 0x4d, 0x2b, 0x8b,
        0x4a, 0x0d, 0x40, 0xf9, 0x2b, 0x25, 0x40, 0x39,
        0x2c, 0x00, 0x80, 0x52, 0x8b, 0x21, 0xcb, 0x9a,
        0x29, 0x01, 0x0b, 0x8b, 0x28, 0x11, 0x08, 0x8b,
        0x09, 0x0d, 0x42, 0xf8, 0x3f, 0x01, 0x0a, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x17, 0x05, 0x40, 0xf9, 0xd7, 0xff, 0xff, 0xb4,
        0xe8, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0xe8, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb7, 0x82, 0x1f, 0xf8,
        0x68, 0x02, 0x00, 0x12, 0x53, 0x00, 0x00, 0x36,
        0xbf, 0x02, 0x00, 0xf9, 0xb5, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x6c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_BUILD_CLASS.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9401280      ldr     x0, [x20, #0x20]
    // 14: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 1c: 5291ed09      mov     w9, #0x8f68             ; =36712
    // 20: 8b090101      add     x1, x8, x9
    // 24: 910023e2      add     x2, sp, #0x8
    // 28: 94000000      bl      0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 _PyMapping_GetOptionalItem
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: 37f80220      tbnz    w0, #0x1f, 0x78 <ltmp0+0x78>
    // 38: f94007e8      ldr     x8, [sp, #0x8]
    // 3c: b40000a8      cbz     x8, 0x50 <ltmp0+0x50>
    // 40: f80086a8      str     x8, [x21], #0x8
    // 44: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 48: 910083ff      add     sp, sp, #0x20
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000054:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_NameError
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_NameError
    // 5c: f9400101      ldr     x1, [x8]
    // 60: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000060:  ARM64_RELOC_PAGE21   l_.str
    // 64: 91000042      add     x2, x2, #0x0
    // 0000000000000064:  ARM64_RELOC_PAGEOFF12        l_.str
    // 68: aa1603e0      mov     x0, x22
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __PyErr_SetString
    // 70: f9402295      ldr     x21, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 7c: 910083ff      add     sp, sp, #0x20
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x80, 0x12, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0xed, 0x91, 0x52,
        0x01, 0x01, 0x09, 0x8b, 0xe2, 0x23, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x02, 0xf8, 0x37,
        0xe8, 0x07, 0x40, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0xa8, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &PyExc_NameError+0x0
    // 28: &_PyRuntime+0x0
    const unsigned char data_body[48] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x28, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x28);
    patch_aarch64_trampoline(code + 0x28, 0x47, state);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x20);
    patch_aarch64_21r(code + 0x60, (uintptr_t)data);
    patch_aarch64_12(code + 0x64, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x6c, 0x3f, state);
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_COMMON_CONSTANT.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_AssertionError
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_AssertionError
    // 10: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_NotImplementedError
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_NotImplementedError
    // 18: 72003d1f      tst     w8, #0xffff
    // 1c: 9a8a0128      csel    x8, x9, x10, eq
    // 20: f9400108      ldr     x8, [x8]
    // 24: f80086a8      str     x8, [x21], #0x8
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x28, 0x01, 0x8a, 0x9a,
        0x08, 0x01, 0x40, 0xf9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyExc_NotImplementedError+0x0
    // 8: &PyExc_AssertionError+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_NotImplementedError);
    patch_64(data + 0x8, (uintptr_t)&PyExc_AssertionError);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: f9400d08      ldr     x8, [x8, #0x18]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 8b292d08      add     x8, x8, w9, uxth #3
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_IMMORTAL.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: f9400d08      ldr     x8, [x8, #0x18]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 8b292d08      add     x8, x8, w9, uxth #3
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x08, 0x0d, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <ltmp0+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: f80086a8      str     x8, [x21], #0x8
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE_BORROW_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW_WITH_NULL.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: a8817ea8      stp     x8, xzr, [x21], #0x10
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x7e, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_CONST_INLINE_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_WITH_NULL.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <ltmp0+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: a8817ea8      stp     x8, xzr, [x21], #0x10
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x7e, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_DEREF.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402908      ldr     x8, [x8, #0x50]
    // 10: f9400908      ldr     x8, [x8, #0x10]
    // 14: b40000e8      cbz     x8, 0x30 <ltmp0+0x30>
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <ltmp0+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 910003fd      mov     x29, sp
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: f9400281      ldr     x1, [x20]
    // 48: 12003d02      and     w2, w8, #0xffff
    // 4c: aa1603e0      mov     x0, x22
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcUnbound
    // 54: f9402295      ldr     x21, [x20, #0x40]
    // 58: f900229f      str     xzr, [x20, #0x40]
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x08, 0x09, 0x40, 0xf9, 0xe8, 0x00, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x81, 0x02, 0x40, 0xf9,
        0x02, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x50, 0x2c, state);
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402908      ldr     x8, [x8, #0x50]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <ltmp0+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_0.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9402a88      ldr     x8, [x20, #0x50]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x2a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_1.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9402e88      ldr     x8, [x20, #0x58]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x2e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_2.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9403288      ldr     x8, [x20, #0x60]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x32, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_3.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9403688      ldr     x8, [x20, #0x68]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x36, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_4.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9403a88      ldr     x8, [x20, #0x70]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x3a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_5.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9403e88      ldr     x8, [x20, #0x78]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x3e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_6.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9404288      ldr     x8, [x20, #0x80]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x42, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_7.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9404688      ldr     x8, [x20, #0x88]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <ltmp0+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x88, 0x46, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_AND_CLEAR.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402909      ldr     x9, [x8, #0x50]
    // 10: f900291f      str     xzr, [x8, #0x50]
    // 14: f80086a9      str     x9, [x21], #0x8
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x09, 0x29, 0x40, 0xf9,
        0x1f, 0x29, 0x00, 0xf9, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_CHECK.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 8b282e89      add     x9, x20, w8, uxth #3
    // c: f9402929      ldr     x9, [x9, #0x50]
    // 10: b40000e9      cbz     x9, 0x2c <ltmp0+0x2c>
    // 14: b9400128      ldr     w8, [x9]
    // 18: 37f80068      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 1c: 11000508      add     w8, w8, #0x1
    // 20: b9000128      str     w8, [x9]
    // 24: f80086a9      str     x9, [x21], #0x8
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 30: 910003fd      mov     x29, sp
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_UnboundLocalError
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_UnboundLocalError
    // 40: f9400133      ldr     x19, [x9]
    // 44: f9400289      ldr     x9, [x20]
    // 48: f9403120      ldr     x0, [x9, #0x60]
    // 4c: 92403d01      and     x1, x8, #0xffff
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 _PyTuple_GetItem
    // 54: aa0003e3      mov     x3, x0
    // 58: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000058:  ARM64_RELOC_PAGE21   l_.str
    // 5c: 91000042      add     x2, x2, #0x0
    // 000000000000005c:  ARM64_RELOC_PAGEOFF12        l_.str
    // 60: aa1603e0      mov     x0, x22
    // 64: aa1303e1      mov     x1, x19
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcCheckArg
    // 6c: f9402295      ldr     x21, [x20, #0x40]
    // 70: f900229f      str     xzr, [x20, #0x40]
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x89, 0x2e, 0x28, 0x8b, 0x29, 0x29, 0x40, 0xf9,
        0xe9, 0x00, 0x00, 0xb4, 0x28, 0x01, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x01, 0x00, 0xb9, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x33, 0x01, 0x40, 0xf9, 0x89, 0x02, 0x40, 0xf9,
        0x20, 0x31, 0x40, 0xf9, 0x01, 0x3d, 0x40, 0x92,
        0x00, 0x00, 0x00, 0x94, 0xe3, 0x03, 0x00, 0xaa,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: &PyExc_UnboundLocalError+0x0
    // 58: OPARG
    const unsigned char data_body[96] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x58, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x58);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x50);
    patch_aarch64_trampoline(code + 0x50, 0x2e, state);
    patch_aarch64_21r(code + 0x58, (uintptr_t)data);
    patch_aarch64_12(code + 0x5c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x68, 0x2d, state);
    patch_aarch64_26r(code + 0x78, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FROM_DICT_OR_DEREF.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9403108      ldr     x8, [x8, #0x60]
    // 18: 90000017      adrp    x23, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 1c: f94002f7      ldr     x23, [x23]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 20: 8b372d08      add     x8, x8, w23, uxth #3
    // 24: f9400d01      ldr     x1, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 910023e2      add     x2, sp, #0x8
    // 30: aa1303e0      mov     x0, x19
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 _PyMapping_GetOptionalItem
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 37f80520      tbnz    w0, #0x1f, 0xe4 <ltmp0+0xe4>
    // 44: f94007e8      ldr     x8, [sp, #0x8]
    // 48: b40000e8      cbz     x8, 0x64 <ltmp0+0x64>
    // 4c: f9400269      ldr     x9, [x19]
    // 50: 36f80229      tbz     w9, #0x1f, 0x94 <ltmp0+0x94>
    // 54: f81f82a8      stur    x8, [x21, #-0x8]
    // 58: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 5c: 910083ff      add     sp, sp, #0x20
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: 92403ee8      and     x8, x23, #0xffff
    // 68: 8b080e88      add     x8, x20, x8, lsl #3
    // 6c: f9402908      ldr     x8, [x8, #0x50]
    // 70: f9400908      ldr     x8, [x8, #0x10]
    // 74: b4000248      cbz     x8, 0xbc <ltmp0+0xbc>
    // 78: b9400109      ldr     w9, [x8]
    // 7c: 37f80069      tbnz    w9, #0x1f, 0x88 <ltmp0+0x88>
    // 80: 11000529      add     w9, w9, #0x1
    // 84: b9000109      str     w9, [x8]
    // 88: f90007e8      str     x8, [sp, #0x8]
    // 8c: f9400269      ldr     x9, [x19]
    // 90: 37fffe29      tbnz    w9, #0x1f, 0x54 <ltmp0+0x54>
    // 94: f1000529      subs    x9, x9, #0x1
    // 98: f9000269      str     x9, [x19]
    // 9c: 54fffdc1      b.ne    0x54 <ltmp0+0x54>
    // a0: aa1303e0      mov     x0, x19
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: f94007e8      ldr     x8, [sp, #0x8]
    // ac: f81f82a8      stur    x8, [x21, #-0x8]
    // b0: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // b4: 910083ff      add     sp, sp, #0x20
    // b8: 14000000      b       0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // bc: f90007ff      str     xzr, [sp, #0x8]
    // c0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 00000000000000c0:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c8: f9002295      str     x21, [x20, #0x40]
    // cc: f9400281      ldr     x1, [x20]
    // d0: 12003d02      and     w2, w8, #0xffff
    // d4: aa1603e0      mov     x0, x22
    // d8: 94000000      bl      0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __PyEval_FormatExcUnbound
    // dc: f9402295      ldr     x21, [x20, #0x40]
    // e0: f900229f      str     xzr, [x20, #0x40]
    // e4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e8: 910083ff      add     sp, sp, #0x20
    // ec: 14000000      b       0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[240] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb3, 0x82, 0x5f, 0xf8,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x31, 0x40, 0xf9,
        0x17, 0x00, 0x00, 0x90, 0xf7, 0x02, 0x40, 0xf9,
        0x08, 0x2d, 0x37, 0x8b, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x05, 0xf8, 0x37, 0xe8, 0x07, 0x40, 0xf9,
        0xe8, 0x00, 0x00, 0xb4, 0x69, 0x02, 0x40, 0xf9,
        0x29, 0x02, 0xf8, 0x36, 0xa8, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xe8, 0x3e, 0x40, 0x92,
        0x88, 0x0e, 0x08, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x08, 0x09, 0x40, 0xf9, 0x48, 0x02, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xe8, 0x07, 0x00, 0xf9, 0x69, 0x02, 0x40, 0xf9,
        0x29, 0xfe, 0xff, 0x37, 0x29, 0x05, 0x00, 0xf1,
        0x69, 0x02, 0x00, 0xf9, 0xc1, 0xfd, 0xff, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x07, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xff, 0x07, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x81, 0x02, 0x40, 0xf9,
        0x02, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x34, 0x47, state);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_26r(code + 0xb8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xd8, 0x2c, state);
    patch_aarch64_26r(code + 0xec, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1503f3      mov     x19, x21
    // c: 90000017      adrp    x23, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: f9400288      ldr     x8, [x20]
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 53013ee9      ubfx    w9, w23, #1, #15
    // 20: 8b294d08      add     x8, x8, w9, uxtw #3
    // 24: f9400d02      ldr     x2, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: a9418680      ldp     x0, x1, [x20, #0x18]
    // 30: aa1503e3      mov     x3, x21
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __PyEval_LoadGlobalStackRef
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400268      ldr     x8, [x19]
    // 44: b4000128      cbz     x8, 0x68 <ltmp0+0x68>
    // 48: 12003ee9      and     w9, w23, #0xffff
    // 4c: 12000128      and     w8, w9, #0x1
    // 50: 36000049      tbz     w9, #0x0, 0x58 <ltmp0+0x58>
    // 54: f90006bf      str     xzr, [x21, #0x8]
    // 58: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 5c: 91002115      add     x21, x8, #0x8
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 6c: 14000000      b       0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[112] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xf3, 0x03, 0x15, 0xaa, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0xe9, 0x3e, 0x01, 0x53,
        0x08, 0x4d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x86, 0x41, 0xa9,
        0xe3, 0x03, 0x15, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x28, 0x01, 0x00, 0xb4,
        0xe9, 0x3e, 0x00, 0x12, 0x28, 0x01, 0x00, 0x12,
        0x49, 0x00, 0x00, 0x36, 0xbf, 0x06, 0x00, 0xf9,
        0xa8, 0x4e, 0x28, 0x8b, 0x15, 0x21, 0x00, 0x91,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x34, 0x48, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x6c, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: f9401108      ldr     x8, [x8, #0x20]
    // 8: 39402509      ldrb    w9, [x8, #0x9]
    // c: 5280002a      mov     w10, #0x1               ; =1
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 8b090108      add     x8, x8, x9
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 20: 8b293108      add     x8, x8, w9, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b40001c8      cbz     x8, 0x60 <ltmp0+0x60>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: f90002a8      str     x8, [x21]
    // 40: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: 12000128      and     w8, w9, #0x1
    // 4c: 36000049      tbz     w9, #0x0, 0x54 <ltmp0+0x54>
    // 50: f90006bf      str     xzr, [x21, #0x8]
    // 54: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 58: 91002115      add     x21, x8, #0x8
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0x88, 0x12, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x25, 0x40, 0x39, 0x2a, 0x00, 0x80, 0x52,
        0x49, 0x21, 0xc9, 0x9a, 0x08, 0x01, 0x09, 0x8b,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x31, 0x29, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0xc8, 0x01, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x02, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x06, 0x00, 0xf9, 0xa8, 0x4e, 0x28, 0x8b,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 8: 3940252a      ldrb    w10, [x9, #0x9]
    // c: 5280002b      mov     w11, #0x1               ; =1
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 8b0a0129      add     x9, x9, x10
    // 18: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 20: 8b2a3129      add     x9, x9, w10, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b40001c9      cbz     x9, 0x60 <ltmp0+0x60>
    // 2c: b940012a      ldr     w10, [x9]
    // 30: 37f8006a      tbnz    w10, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 1100054a      add     w10, w10, #0x1
    // 38: b900012a      str     w10, [x9]
    // 3c: f90002a9      str     x9, [x21]
    // 40: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f940014a      ldr     x10, [x10]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: 12000149      and     w9, w10, #0x1
    // 4c: 3600004a      tbz     w10, #0x0, 0x54 <ltmp0+0x54>
    // 50: f900011f      str     xzr, [x8]
    // 54: 8b294ea8      add     x8, x21, w9, uxtw #3
    // 58: 91002115      add     x21, x8, #0x8
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5f, 0xf8,
        0x2a, 0x25, 0x40, 0x39, 0x2b, 0x00, 0x80, 0x52,
        0x6a, 0x21, 0xca, 0x9a, 0x29, 0x01, 0x0a, 0x8b,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0x31, 0x2a, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0xc9, 0x01, 0x00, 0xb4, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x02, 0x00, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x49, 0x01, 0x00, 0x12, 0x4a, 0x00, 0x00, 0x36,
        0x1f, 0x01, 0x00, 0xf9, 0xa8, 0x4e, 0x29, 0x8b,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: f9401108      ldr     x8, [x8, #0x20]
    // 8: 39402509      ldrb    w9, [x8, #0x9]
    // c: 5280002a      mov     w10, #0x1               ; =1
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 8b090108      add     x8, x8, x9
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 20: 8b293108      add     x8, x8, w9, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b40001c8      cbz     x8, 0x60 <ltmp0+0x60>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: f90002a8      str     x8, [x21]
    // 40: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: 12000128      and     w8, w9, #0x1
    // 4c: 36000049      tbz     w9, #0x0, 0x54 <ltmp0+0x54>
    // 50: f90006bf      str     xzr, [x21, #0x8]
    // 54: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 58: 91002115      add     x21, x8, #0x8
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0x88, 0x0e, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x25, 0x40, 0x39, 0x2a, 0x00, 0x80, 0x52,
        0x49, 0x21, 0xc9, 0x9a, 0x08, 0x01, 0x09, 0x8b,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x31, 0x29, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0xc8, 0x01, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x02, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x06, 0x00, 0xf9, 0xa8, 0x4e, 0x28, 0x8b,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 8: 3940252a      ldrb    w10, [x9, #0x9]
    // c: 5280002b      mov     w11, #0x1               ; =1
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 8b0a0129      add     x9, x9, x10
    // 18: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 20: 8b2a3129      add     x9, x9, w10, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b40001c9      cbz     x9, 0x60 <ltmp0+0x60>
    // 2c: b940012a      ldr     w10, [x9]
    // 30: 37f8006a      tbnz    w10, #0x1f, 0x3c <ltmp0+0x3c>
    // 34: 1100054a      add     w10, w10, #0x1
    // 38: b900012a      str     w10, [x9]
    // 3c: f90002a9      str     x9, [x21]
    // 40: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f940014a      ldr     x10, [x10]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: 12000149      and     w9, w10, #0x1
    // 4c: 3600004a      tbz     w10, #0x0, 0x54 <ltmp0+0x54>
    // 50: f900011f      str     xzr, [x8]
    // 54: 8b294ea8      add     x8, x21, w9, uxtw #3
    // 58: 91002115      add     x21, x8, #0x8
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5f, 0xf8,
        0x2a, 0x25, 0x40, 0x39, 0x2b, 0x00, 0x80, 0x52,
        0x6a, 0x21, 0xca, 0x9a, 0x29, 0x01, 0x0a, 0x8b,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0x31, 0x2a, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0xc9, 0x01, 0x00, 0xb4, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x02, 0x00, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x49, 0x01, 0x00, 0x12, 0x4a, 0x00, 0x00, 0x36,
        0x1f, 0x01, 0x00, 0xf9, 0xa8, 0x4e, 0x29, 0x8b,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x60, state->instruction_starts[instruction->jump_target]);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_LOCALS.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9401688      ldr     x8, [x20, #0x28]
    // 4: b40000e8      cbz     x8, 0x20 <ltmp0+0x20>
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <ltmp0+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 24: 910003fd      mov     x29, sp
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_SystemError
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_SystemError
    // 34: f9400101      ldr     x1, [x8]
    // 38: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_PAGE21   l_.str
    // 3c: 91000042      add     x2, x2, #0x0
    // 000000000000003c:  ARM64_RELOC_PAGEOFF12        l_.str
    // 40: aa1603e0      mov     x0, x22
    // 44: 94000000      bl      0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __PyErr_SetString
    // 48: f9402295      ldr     x21, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[88] = {
        0x88, 0x16, 0x40, 0xf9, 0xe8, 0x00, 0x00, 0xb4,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: 'no locals found\x00'
    // 10: &PyExc_SystemError+0x0
    const unsigned char data_body[24] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)&PyExc_SystemError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x10);
    patch_aarch64_21r(code + 0x38, (uintptr_t)data);
    patch_aarch64_12(code + 0x3c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x44, 0x3f, state);
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_NAME.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f9400288      ldr     x8, [x20]
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 8b292d08      add     x8, x8, w9, uxth #3
    // 1c: f9400d02      ldr     x2, [x8, #0x18]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: aa1603e0      mov     x0, x22
    // 28: aa1403e1      mov     x1, x20
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __PyEval_LoadName
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: b4000080      cbz     x0, 0x48 <ltmp0+0x48>
    // 3c: f80086a0      str     x0, [x21], #0x8
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[80] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0x49, state);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x4c, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 92403d08      and     x8, x8, #0xffff
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 14: 8b081528      add     x8, x9, x8, lsl #5
    // 18: 52868c09      mov     w9, #0x3460             ; =13408
    // 1c: 8b090108      add     x8, x8, x9
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x15, 0x08, 0x8b,
        0x09, 0x8c, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_0.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8: 52868c09      mov     w9, #0x3460             ; =13408
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x8c, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_1.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8: 52869009      mov     w9, #0x3480             ; =13440
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x90, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_2.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8: 52869409      mov     w9, #0x34a0             ; =13472
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x94, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_3.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 8: 52869809      mov     w9, #0x34c0             ; =13504
    // c: 8b090108      add     x8, x8, x9
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x98, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SPECIAL.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 10: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_SpecialMethods
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_SpecialMethods
    // 20: 8b283137      add     x23, x9, w8, uxth #4
    // 24: f94002e1      ldr     x1, [x23]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 910023e2      add     x2, sp, #0x8
    // 30: aa1303e0      mov     x0, x19
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __PyObject_LookupSpecialMethod
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b40000c0      cbz     x0, 0x58 <ltmp0+0x58>
    // 44: f94007e8      ldr     x8, [sp, #0x8]
    // 48: a88122a0      stp     x0, x8, [x21], #0x10
    // 4c: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 50: 910083ff      add     sp, sp, #0x20
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 58: f9403ac8      ldr     x8, [x22, #0x70]
    // 5c: b40000c8      cbz     x8, 0x74 <ltmp0+0x74>
    // 60: f9400508      ldr     x8, [x8, #0x8]
    // 64: b4000088      cbz     x8, 0x74 <ltmp0+0x74>
    // 68: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 6c: 910083ff      add     sp, sp, #0x20
    // 70: 14000000      b       0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_TypeError
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_TypeError
    // 80: f9400101      ldr     x1, [x8]
    // 84: f94006e2      ldr     x2, [x23, #0x8]
    // 88: f9400668      ldr     x8, [x19, #0x8]
    // 8c: f9400d08      ldr     x8, [x8, #0x18]
    // 90: f90003e8      str     x8, [sp]
    // 94: aa1603e0      mov     x0, x22
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // a8: 910083ff      add     sp, sp, #0x20
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[176] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb3, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x37, 0x31, 0x28, 0x8b, 0xe1, 0x02, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0xe8, 0x07, 0x40, 0xf9,
        0xa0, 0x22, 0x81, 0xa8, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xc8, 0x3a, 0x40, 0xf9, 0xc8, 0x00, 0x00, 0xb4,
        0x08, 0x05, 0x40, 0xf9, 0x88, 0x00, 0x00, 0xb4,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0xe2, 0x06, 0x40, 0xf9,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x0d, 0x40, 0xf9,
        0xe8, 0x03, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyExc_TypeError+0x0
    // 8: &_Py_SpecialMethods+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x8, (uintptr_t)&_Py_SpecialMethods);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x34, 0x4a, state);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x70, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x98, 0x30, state);
    patch_aarch64_26r(code + 0xac, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_ATTR.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85e82a8      ldur    x8, [x21, #-0x18]
    // c: 90000019      adrp    x25, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PySuper_Type
    // 10: f9400339      ldr     x25, [x25]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PySuper_Type
    // 14: eb19011f      cmp     x8, x25
    // 18: 540000a1      b.ne    0x2c <ltmp0+0x2c>
    // 1c: f85f02b7      ldur    x23, [x21, #-0x10]
    // 20: f94006e8      ldr     x8, [x23, #0x8]
    // 24: 3942ad08      ldrb    w8, [x8, #0xab]
    // 28: 37380068      tbnz    w8, #0x7, 0x34 <ltmp0+0x34>
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 34: f85f82b3      ldur    x19, [x21, #-0x8]
    // 38: f9400288      ldr     x8, [x20]
    // 3c: f9401108      ldr     x8, [x8, #0x20]
    // 40: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 48: 53023d29      ubfx    w9, w9, #2, #14
    // 4c: 8b294d08      add     x8, x8, w9, uxtw #3
    // 50: f9400d02      ldr     x2, [x8, #0x18]
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: aa1703e0      mov     x0, x23
    // 5c: aa1303e1      mov     x1, x19
    // 60: d2800003      mov     x3, #0x0                ; =0
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __PySuper_Lookup
    // 68: aa0003f8      mov     x24, x0
    // 6c: f9402295      ldr     x21, [x20, #0x40]
    // 70: f900229f      str     xzr, [x20, #0x40]
    // 74: f9400328      ldr     x8, [x25]
    // 78: 37f800e8      tbnz    w8, #0x1f, 0x94 <ltmp0+0x94>
    // 7c: f1000508      subs    x8, x8, #0x1
    // 80: f9000328      str     x8, [x25]
    // 84: 54000081      b.ne    0x94 <ltmp0+0x94>
    // 88: 90000000      adrp    x0, 0x0 <ltmp0>
    // 0000000000000088:  ARM64_RELOC_GOT_LOAD_PAGE21  _PySuper_Type
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PySuper_Type
    // 90: 94000000      bl      0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 94: f94002e8      ldr     x8, [x23]
    // 98: 37f800c8      tbnz    w8, #0x1f, 0xb0 <ltmp0+0xb0>
    // 9c: f1000508      subs    x8, x8, #0x1
    // a0: f90002e8      str     x8, [x23]
    // a4: 54000061      b.ne    0xb0 <ltmp0+0xb0>
    // a8: aa1703e0      mov     x0, x23
    // ac: 94000000      bl      0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b0: f9400268      ldr     x8, [x19]
    // b4: 37f800c8      tbnz    w8, #0x1f, 0xcc <ltmp0+0xcc>
    // b8: f1000508      subs    x8, x8, #0x1
    // bc: f9000268      str     x8, [x19]
    // c0: 54000061      b.ne    0xcc <ltmp0+0xcc>
    // c4: aa1303e0      mov     x0, x19
    // c8: 94000000      bl      0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // cc: b40000b8      cbz     x24, 0xe0 <ltmp0+0xe0>
    // d0: f81e82b8      stur    x24, [x21, #-0x18]
    // d4: d10042b5      sub     x21, x21, #0x10
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa8, 0x82, 0x5e, 0xf8, 0x19, 0x00, 0x00, 0x90,
        0x39, 0x03, 0x40, 0xf9, 0x1f, 0x01, 0x19, 0xeb,
        0xa1, 0x00, 0x00, 0x54, 0xb7, 0x02, 0x5f, 0xf8,
        0xe8, 0x06, 0x40, 0xf9, 0x08, 0xad, 0x42, 0x39,
        0x68, 0x00, 0x38, 0x37, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x29, 0x3d, 0x02, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x03, 0x00, 0x80, 0xd2, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x28, 0x03, 0x40, 0xf9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x28, 0x03, 0x00, 0xf9, 0x81, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x68, 0x02, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb8, 0x00, 0x00, 0xb4,
        0xb8, 0x82, 0x1e, 0xf8, 0xb5, 0x42, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PySuper_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x64, 0x4b, state);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x90, 0x0, state);
    patch_aarch64_trampoline(code + 0xac, 0x0, state);
    patch_aarch64_trampoline(code + 0xc8, 0x0, state);
    patch_aarch64_26r(code + 0xdc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_METHOD.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85e82a8      ldur    x8, [x21, #-0x18]
    // 10: 90000019      adrp    x25, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PySuper_Type
    // 14: f9400339      ldr     x25, [x25]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PySuper_Type
    // 18: eb19011f      cmp     x8, x25
    // 1c: 540000a1      b.ne    0x30 <ltmp0+0x30>
    // 20: f85f02b8      ldur    x24, [x21, #-0x10]
    // 24: f9400708      ldr     x8, [x24, #0x8]
    // 28: 3942ad08      ldrb    w8, [x8, #0xab]
    // 2c: 37380088      tbnz    w8, #0x7, 0x3c <ltmp0+0x3c>
    // 30: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 34: 910083ff      add     sp, sp, #0x20
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 3c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 40: f9400288      ldr     x8, [x20]
    // 44: f9401108      ldr     x8, [x8, #0x20]
    // 48: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4c: f9400129      ldr     x9, [x9]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 50: 53023d29      ubfx    w9, w9, #2, #14
    // 54: 8b294d08      add     x8, x8, w9, uxtw #3
    // 58: f9400d02      ldr     x2, [x8, #0x18]
    // 5c: b81fc3bf      stur    wzr, [x29, #-0x4]
    // 60: f9002295      str     x21, [x20, #0x40]
    // 64: f9400668      ldr     x8, [x19, #0x8]
    // 68: f9404908      ldr     x8, [x8, #0x90]
    // 6c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyObject_GenericGetAttr
    // 70: f9400129      ldr     x9, [x9]
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyObject_GenericGetAttr
    // 74: d10013aa      sub     x10, x29, #0x4
    // 78: eb09011f      cmp     x8, x9
    // 7c: 9a9f0143      csel    x3, x10, xzr, eq
    // 80: aa1803e0      mov     x0, x24
    // 84: aa1303e1      mov     x1, x19
    // 88: 94000000      bl      0x88 <ltmp0+0x88>
    // 0000000000000088:  ARM64_RELOC_BRANCH26 __PySuper_Lookup
    // 8c: aa0003f7      mov     x23, x0
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f900229f      str     xzr, [x20, #0x40]
    // 98: f9400328      ldr     x8, [x25]
    // 9c: 37f800e8      tbnz    w8, #0x1f, 0xb8 <ltmp0+0xb8>
    // a0: f1000508      subs    x8, x8, #0x1
    // a4: f9000328      str     x8, [x25]
    // a8: 54000081      b.ne    0xb8 <ltmp0+0xb8>
    // ac: 90000000      adrp    x0, 0x0 <ltmp0>
    // 00000000000000ac:  ARM64_RELOC_GOT_LOAD_PAGE21  _PySuper_Type
    // b0: f9400000      ldr     x0, [x0]
    // 00000000000000b0:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PySuper_Type
    // b4: 94000000      bl      0xb4 <ltmp0+0xb4>
    // 00000000000000b4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b8: f9400308      ldr     x8, [x24]
    // bc: 37f800c8      tbnz    w8, #0x1f, 0xd4 <ltmp0+0xd4>
    // c0: f1000508      subs    x8, x8, #0x1
    // c4: f9000308      str     x8, [x24]
    // c8: 54000061      b.ne    0xd4 <ltmp0+0xd4>
    // cc: aa1803e0      mov     x0, x24
    // d0: 94000000      bl      0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d4: b4000117      cbz     x23, 0xf4 <ltmp0+0xf4>
    // d8: b85fc3a8      ldur    w8, [x29, #-0x4]
    // dc: 34000208      cbz     w8, 0x11c <ltmp0+0x11c>
    // e0: a93eceb7      stp     x23, x19, [x21, #-0x18]
    // e4: d10022b5      sub     x21, x21, #0x8
    // e8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: 14000000      b       0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // f4: f9400268      ldr     x8, [x19]
    // f8: 37f800c8      tbnz    w8, #0x1f, 0x110 <ltmp0+0x110>
    // fc: f1000508      subs    x8, x8, #0x1
    // 100: f9000268      str     x8, [x19]
    // 104: 54000061      b.ne    0x110 <ltmp0+0x110>
    // 108: aa1303e0      mov     x0, x19
    // 10c: 94000000      bl      0x10c <ltmp0+0x10c>
    // 000000000000010c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 110: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 114: 910083ff      add     sp, sp, #0x20
    // 118: 14000000      b       0x118 <ltmp0+0x118>
    // 0000000000000118:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 11c: f9400268      ldr     x8, [x19]
    // 120: 37f800c8      tbnz    w8, #0x1f, 0x138 <ltmp0+0x138>
    // 124: f1000508      subs    x8, x8, #0x1
    // 128: f9000268      str     x8, [x19]
    // 12c: 54000061      b.ne    0x138 <ltmp0+0x138>
    // 130: aa1303e0      mov     x0, x19
    // 134: 94000000      bl      0x134 <ltmp0+0x134>
    // 0000000000000134:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 138: d2800013      mov     x19, #0x0               ; =0
    // 13c: a93eceb7      stp     x23, x19, [x21, #-0x18]
    // 140: d10022b5      sub     x21, x21, #0x8
    // 144: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 148: 910083ff      add     sp, sp, #0x20
    // 14c: 14000000      b       0x14c <ltmp0+0x14c>
    // 000000000000014c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[336] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xa8, 0x82, 0x5e, 0xf8,
        0x19, 0x00, 0x00, 0x90, 0x39, 0x03, 0x40, 0xf9,
        0x1f, 0x01, 0x19, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xb8, 0x02, 0x5f, 0xf8, 0x08, 0x07, 0x40, 0xf9,
        0x08, 0xad, 0x42, 0x39, 0x88, 0x00, 0x38, 0x37,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xb3, 0x82, 0x5f, 0xf8,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x29, 0x3d, 0x02, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0xbf, 0xc3, 0x1f, 0xb8,
        0x95, 0x22, 0x00, 0xf9, 0x68, 0x06, 0x40, 0xf9,
        0x08, 0x49, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xaa, 0x13, 0x00, 0xd1,
        0x1f, 0x01, 0x09, 0xeb, 0x43, 0x01, 0x9f, 0x9a,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x03, 0x40, 0xf9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x28, 0x03, 0x00, 0xf9,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x94,
        0x08, 0x03, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x17, 0x01, 0x00, 0xb4,
        0xa8, 0xc3, 0x5f, 0xb8, 0x08, 0x02, 0x00, 0x34,
        0xb7, 0xce, 0x3e, 0xa9, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x68, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x68, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x13, 0x00, 0x80, 0xd2, 0xb7, 0xce, 0x3e, 0xa9,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PySuper_Type+0x0
    // 8: &PyObject_GenericGetAttr+0x0
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x88, 0x4b, state);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xb4, 0x0, state);
    patch_aarch64_trampoline(code + 0xd0, 0x0, state);
    patch_aarch64_26r(code + 0xf0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x10c, 0x0, state);
    patch_aarch64_26r(code + 0x118, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x134, 0x0, state);
    patch_aarch64_26r(code + 0x14c, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CALLARGS_A_TUPLE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 12000117      and     w23, w8, #0x1
    // 14: 37000068      tbnz    w8, #0x0, 0x20 <ltmp0+0x20>
    // 18: d2800018      mov     x24, #0x0               ; =0
    // 1c: 14000002      b       0x24 <ltmp0+0x24>
    // 20: f85f82b8      ldur    x24, [x21, #-0x8]
    // 24: 2a3703f9      mvn     w25, w23
    // 28: f879dab3      ldr     x19, [x21, w25, sxtw #3]
    // 2c: f9400668      ldr     x8, [x19, #0x8]
    // 30: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTuple_Type
    // 34: f9400129      ldr     x9, [x9]
    // 0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTuple_Type
    // 38: eb09011f      cmp     x8, x9
    // 3c: 54000340      b.eq    0xa4 <ltmp0+0xa4>
    // 40: 521e7ae8      eor     w8, w23, #0xfffffffd
    // 44: f868daa1      ldr     x1, [x21, w8, sxtw #3]
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: aa1603e0      mov     x0, x22
    // 50: aa1303e2      mov     x2, x19
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Check_ArgsIterable
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: 37f802c0      tbnz    w0, #0x1f, 0xb8 <ltmp0+0xb8>
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: aa1303e0      mov     x0, x19
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 _PySequence_Tuple
    // 70: f9402295      ldr     x21, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: b4000200      cbz     x0, 0xb8 <ltmp0+0xb8>
    // 7c: f9400268      ldr     x8, [x19]
    // 80: 37f80108      tbnz    w8, #0x1f, 0xa0 <ltmp0+0xa0>
    // 84: f1000508      subs    x8, x8, #0x1
    // 88: f9000268      str     x8, [x19]
    // 8c: 540000a1      b.ne    0xa0 <ltmp0+0xa0>
    // 90: aa0003fa      mov     x26, x0
    // 94: aa1303e0      mov     x0, x19
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 9c: aa1a03e0      mov     x0, x26
    // a0: aa0003f3      mov     x19, x0
    // a4: f839dab3      str     x19, [x21, w25, sxtw #3]
    // a8: 34000057      cbz     w23, 0xb0 <ltmp0+0xb0>
    // ac: f81f82b8      stur    x24, [x21, #-0x8]
    // b0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // b4: 14000000      b       0xb4 <ltmp0+0xb4>
    // 00000000000000b4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[192] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x17, 0x01, 0x00, 0x12, 0x68, 0x00, 0x00, 0x37,
        0x18, 0x00, 0x80, 0xd2, 0x02, 0x00, 0x00, 0x14,
        0xb8, 0x82, 0x5f, 0xf8, 0xf9, 0x03, 0x37, 0x2a,
        0xb3, 0xda, 0x79, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x03, 0x00, 0x54,
        0xe8, 0x7a, 0x1e, 0x52, 0xa1, 0xda, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe2, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc0, 0x02, 0xf8, 0x37, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x02, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xa1, 0x00, 0x00, 0x54,
        0xfa, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x1a, 0xaa,
        0xf3, 0x03, 0x00, 0xaa, 0xb3, 0xda, 0x39, 0xf8,
        0x57, 0x00, 0x00, 0x34, 0xb8, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyTuple_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x54, 0x4c, state);
    patch_aarch64_trampoline(code + 0x6c, 0x1a, state);
    patch_aarch64_trampoline(code + 0x98, 0x0, state);
    patch_aarch64_26r(code + 0xb4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xbc, state->instruction_starts[instruction->error_target]);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CELL.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 91014293      add     x19, x20, #0x50
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 92403d17      and     x23, x8, #0xffff
    // 18: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 _PyCell_New
    // 20: b4000180      cbz     x0, 0x50 <ltmp0+0x50>
    // 24: aa0003e8      mov     x8, x0
    // 28: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 2c: f8377a68      str     x8, [x19, x23, lsl #3]
    // 30: b40000c0      cbz     x0, 0x48 <ltmp0+0x48>
    // 34: f9400008      ldr     x8, [x0]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <ltmp0+0x48>
    // 3c: f1000508      subs    x8, x8, #0x1
    // 40: f9000008      str     x8, [x0]
    // 44: 540000a0      b.eq    0x58 <ltmp0+0x58>
    // 48: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 4c: 14000000      b       0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 58: 94000000      bl      0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 5c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x93, 0x42, 0x01, 0x91, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x17, 0x3d, 0x40, 0x92,
        0x60, 0x7a, 0x77, 0xf8, 0x00, 0x00, 0x00, 0x94,
        0x80, 0x01, 0x00, 0xb4, 0xe8, 0x03, 0x00, 0xaa,
        0x60, 0x7a, 0x77, 0xf8, 0x68, 0x7a, 0x37, 0xf8,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x1c, 0x4d, state);
    patch_aarch64_26r(code + 0x4c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x58, 0x0, state);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_FUNCTION.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400e81      ldr     x1, [x20, #0x18]
    // 14: aa1303e0      mov     x0, x19
    // 18: 94000000      bl      0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 _PyFunction_New
    // 1c: aa0003f7      mov     x23, x0
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: f9400268      ldr     x8, [x19]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000268      str     x8, [x19]
    // 38: 54000100      b.eq    0x58 <ltmp0+0x58>
    // 3c: b4000157      cbz     x23, 0x64 <ltmp0+0x64>
    // 40: b9405e61      ldr     w1, [x19, #0x5c]
    // 44: aa1703e0      mov     x0, x23
    // 48: 94000000      bl      0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __PyFunction_SetVersion
    // 4c: f81f82b7      stur    x23, [x21, #-0x8]
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 58: aa1303e0      mov     x0, x19
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 60: b5ffff17      cbnz    x23, 0x40 <ltmp0+0x40>
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x0e, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0x54, 0x57, 0x01, 0x00, 0xb4,
        0x61, 0x5e, 0x40, 0xb9, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb7, 0x82, 0x1f, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x17, 0xff, 0xff, 0xb5, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x18, 0x4f, state);
    patch_aarch64_trampoline(code + 0x48, 0x4e, state);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x5c, 0x0, state);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->error_target]);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_WARM.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_EXECUTOR
    // 8: 52800029      mov     w9, #0x1                ; =1
    // c: 39008d09      strb    w9, [x8, #0x23]
    // 10: f9400ac8      ldr     x8, [x22, #0x10]
    // 14: 528cdf09      mov     w9, #0x66f8             ; =26360
    // 18: 72a00069      movk    w9, #0x3, lsl #16
    // 1c: f869690a      ldr     x10, [x8, x9]
    // 20: f100054a      subs    x10, x10, #0x1
    // 24: f829690a      str     x10, [x8, x9]
    // 28: 54000040      b.eq    0x30 <ltmp0+0x30>
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 30: 910062c8      add     x8, x22, #0x18
    // 34: 52801009      mov     w9, #0x80               ; =128
    // 38: f8e93108      ldsetal x9, x8, [x8]
    // 3c: 14000000      b       0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x00, 0x80, 0x52, 0x09, 0x8d, 0x00, 0x39,
        0xc8, 0x0a, 0x40, 0xf9, 0x09, 0xdf, 0x8c, 0x52,
        0x69, 0x00, 0xa0, 0x72, 0x0a, 0x69, 0x69, 0xf8,
        0x4a, 0x05, 0x00, 0xf1, 0x0a, 0x69, 0x29, 0xf8,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xc8, 0x62, 0x00, 0x91, 0x09, 0x10, 0x80, 0x52,
        0x08, 0x31, 0xe9, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: EXECUTOR
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x3c, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAP_ADD.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // 14: 92800029      mov     x9, #-0x2               ; =-2
    // 18: cb282128      sub     x8, x9, w8, uxth
    // 1c: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 94000000      bl      0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __PyDict_SetItem_Take2
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 34000060      cbz     w0, 0x3c <ltmp0+0x3c>
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 3c: d10042b5      sub     x21, x21, #0x10
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa1, 0x0a, 0x7f, 0xa9, 0x29, 0x00, 0x80, 0x92,
        0x28, 0x21, 0x28, 0xcb, 0xa0, 0x7a, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x60, 0x00, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xb5, 0x42, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x24, 0x50, state);
    patch_aarch64_26r(code + 0x38, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_CLASS.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f5eb8      ldp     x24, x23, [x21, #-0x10]
    // c: f85e82b9      ldur    x25, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 92403d03      and     x3, x8, #0xffff
    // 20: aa1603e0      mov     x0, x22
    // 24: aa1903e1      mov     x1, x25
    // 28: aa1803e2      mov     x2, x24
    // 2c: aa1703e4      mov     x4, x23
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __PyEval_MatchClass
    // 34: aa0003f3      mov     x19, x0
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400328      ldr     x8, [x25]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000328      str     x8, [x25]
    // 50: 54000120      b.eq    0x74 <ltmp0+0x74>
    // 54: f9400308      ldr     x8, [x24]
    // 58: 37f80168      tbnz    w8, #0x1f, 0x84 <ltmp0+0x84>
    // 5c: f1000508      subs    x8, x8, #0x1
    // 60: f9000308      str     x8, [x24]
    // 64: 54000101      b.ne    0x84 <ltmp0+0x84>
    // 68: aa1803e0      mov     x0, x24
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: 14000005      b       0x84 <ltmp0+0x84>
    // 74: aa1903e0      mov     x0, x25
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 7c: f9400308      ldr     x8, [x24]
    // 80: 36fffee8      tbz     w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 84: f94002e8      ldr     x8, [x23]
    // 88: 37f80088      tbnz    w8, #0x1f, 0x98 <ltmp0+0x98>
    // 8c: f1000508      subs    x8, x8, #0x1
    // 90: f90002e8      str     x8, [x23]
    // 94: 540000c0      b.eq    0xac <ltmp0+0xac>
    // 98: b4000113      cbz     x19, 0xb8 <ltmp0+0xb8>
    // 9c: f81e82b3      stur    x19, [x21, #-0x18]
    // a0: d10042b5      sub     x21, x21, #0x10
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // ac: aa1703e0      mov     x0, x23
    // b0: 94000000      bl      0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b4: b5ffff53      cbnz    x19, 0x9c <ltmp0+0x9c>
    // b8: f9403ac8      ldr     x8, [x22, #0x70]
    // bc: b40000a8      cbz     x8, 0xd0 <ltmp0+0xd0>
    // c0: f9400508      ldr     x8, [x8, #0x8]
    // c4: b4000068      cbz     x8, 0xd0 <ltmp0+0xd0>
    // c8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // cc: 14000000      b       0xcc <ltmp0+0xcc>
    // 00000000000000cc:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // d0: 90000013      adrp    x19, 0x0 <ltmp0>
    // 00000000000000d0:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // d4: f9400273      ldr     x19, [x19]
    // 00000000000000d4:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // d8: f81e82b3      stur    x19, [x21, #-0x18]
    // dc: d10042b5      sub     x21, x21, #0x10
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[232] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x5e, 0x7f, 0xa9, 0xb9, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x03, 0x3d, 0x40, 0x92,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x19, 0xaa,
        0xe2, 0x03, 0x18, 0xaa, 0xe4, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf3, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x28, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x08, 0x03, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x19, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x08, 0x03, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0xe8, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0x54,
        0x13, 0x01, 0x00, 0xb4, 0xb3, 0x82, 0x1e, 0xf8,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x53, 0xff, 0xff, 0xb5,
        0xc8, 0x3a, 0x40, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x08, 0x05, 0x40, 0xf9, 0x68, 0x00, 0x00, 0xb4,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x13, 0x00, 0x00, 0x90, 0x73, 0x02, 0x40, 0xf9,
        0xb3, 0x82, 0x1e, 0xf8, 0xb5, 0x42, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x30, 0x51, state);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_trampoline(code + 0x78, 0x0, state);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xb0, 0x0, state);
    patch_aarch64_26r(code + 0xcc, state->instruction_starts[instruction->error_target]);
    patch_aarch64_33rx(code + 0xd0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_KEYS.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __PyEval_MatchKeys
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b4000080      cbz     x0, 0x30 <ltmp0+0x30>
    // 24: f80086a0      str     x0, [x21], #0x8
    // 28: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 30: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[56] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa1, 0x0a, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0x52, state);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x34, state->instruction_starts[instruction->error_target]);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_MAPPING.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: f9405508      ldr     x8, [x8, #0xa8]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 14: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 1c: f27a011f      tst     x8, #0x40
    // 20: 9a890148      csel    x8, x10, x9, eq
    // 24: f80086a8      str     x8, [x21], #0x8
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x08, 0x55, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x7a, 0xf2,
        0x48, 0x01, 0x89, 0x9a, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_SEQUENCE.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: f9405508      ldr     x8, [x8, #0xa8]
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 14: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 1c: f27b011f      tst     x8, #0x20
    // 20: 9a890148      csel    x8, x10, x9, eq
    // 24: f80086a8      str     x8, [x21], #0x8
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x08, 0x55, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x7b, 0xf2,
        0x48, 0x01, 0x89, 0x9a, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 12003d0a      and     w10, w8, #0xffff
    // c: 12800028      mov     w8, #-0x2               ; =-2
    // 10: 4b0a0108      sub     w8, w8, w10
    // 14: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 18: f940052b      ldr     x11, [x9, #0x8]
    // 1c: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 20: f940018c      ldr     x12, [x12]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 24: eb0c017f      cmp     x11, x12
    // 28: 54000040      b.eq    0x30 <ltmp0+0x30>
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 30: 2a2a03ea      mvn     w10, w10
    // 34: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 38: b5ffffab      cbnz    x11, 0x2c <ltmp0+0x2c>
    // 3c: f9400d2b      ldr     x11, [x9, #0x18]
    // 40: b940016c      ldr     w12, [x11]
    // 44: 37f8006c      tbnz    w12, #0x1f, 0x50 <ltmp0+0x50>
    // 48: 1100058c      add     w12, w12, #0x1
    // 4c: b900016c      str     w12, [x11]
    // 50: f82adaab      str     x11, [x21, w10, sxtw #3]
    // 54: f9400929      ldr     x9, [x9, #0x10]
    // 58: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 5c: b940012a      ldr     w10, [x9]
    // 60: 37f8006a      tbnz    w10, #0x1f, 0x6c <ltmp0+0x6c>
    // 64: 1100054a      add     w10, w10, #0x1
    // 68: b900012a      str     w10, [x9]
    // 6c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 70: f9400008      ldr     x8, [x0]
    // 74: 37fffdc8      tbnz    w8, #0x1f, 0x2c <ltmp0+0x2c>
    // 78: f1000508      subs    x8, x8, #0x1
    // 7c: f9000008      str     x8, [x0]
    // 80: 54fffd61      b.ne    0x2c <ltmp0+0x2c>
    // 84: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 88: 910003fd      mov     x29, sp
    // 8c: 94000000      bl      0x8c <ltmp0+0x8c>
    // 000000000000008c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 90: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 94: 14000000      b       0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[152] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0x28, 0x00, 0x80, 0x12,
        0x08, 0x01, 0x0a, 0x4b, 0xa9, 0xda, 0x68, 0xf8,
        0x2b, 0x05, 0x40, 0xf9, 0x0c, 0x00, 0x00, 0x90,
        0x8c, 0x01, 0x40, 0xf9, 0x7f, 0x01, 0x0c, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xea, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6a, 0xf8,
        0xab, 0xff, 0xff, 0xb5, 0x2b, 0x0d, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xab, 0xda, 0x2a, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0xa0, 0xda, 0x68, 0xf8, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xc8, 0xfd, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x61, 0xfd, 0xff, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyMethod_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x8c, 0x0, state);
    patch_aarch64_26r(code + 0x94, (uintptr_t)code + sizeof(code_body));
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD_KW.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82b3      ldur    x19, [x21, #-0x8]
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: 92403d0a      and     x10, x8, #0xffff
    // 10: 92800048      mov     x8, #-0x3               ; =-3
    // 14: cb0a0108      sub     x8, x8, x10
    // 18: f8687aa9      ldr     x9, [x21, x8, lsl #3]
    // 1c: f940052b      ldr     x11, [x9, #0x8]
    // 20: 9000000c      adrp    x12, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyMethod_Type
    // 24: f940018c      ldr     x12, [x12]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyMethod_Type
    // 28: eb0c017f      cmp     x11, x12
    // 2c: 54000060      b.eq    0x38 <ltmp0+0x38>
    // 30: f81f82b3      stur    x19, [x21, #-0x8]
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 38: 9280002b      mov     x11, #-0x2              ; =-2
    // 3c: cb0a016a      sub     x10, x11, x10
    // 40: f86a7aab      ldr     x11, [x21, x10, lsl #3]
    // 44: b5ffff6b      cbnz    x11, 0x30 <ltmp0+0x30>
    // 48: f9400d2b      ldr     x11, [x9, #0x18]
    // 4c: b940016c      ldr     w12, [x11]
    // 50: aa0903e0      mov     x0, x9
    // 54: 37f8008c      tbnz    w12, #0x1f, 0x64 <ltmp0+0x64>
    // 58: 1100058c      add     w12, w12, #0x1
    // 5c: b900016c      str     w12, [x11]
    // 60: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 64: f82a7aab      str     x11, [x21, x10, lsl #3]
    // 68: f9400929      ldr     x9, [x9, #0x10]
    // 6c: b940012a      ldr     w10, [x9]
    // 70: 37f8006a      tbnz    w10, #0x1f, 0x7c <ltmp0+0x7c>
    // 74: 1100054a      add     w10, w10, #0x1
    // 78: b900012a      str     w10, [x9]
    // 7c: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 80: f9400008      ldr     x8, [x0]
    // 84: 37fffd68      tbnz    w8, #0x1f, 0x30 <ltmp0+0x30>
    // 88: f1000508      subs    x8, x8, #0x1
    // 8c: f9000008      str     x8, [x0]
    // 90: 54fffd01      b.ne    0x30 <ltmp0+0x30>
    // 94: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 98: 910003fd      mov     x29, sp
    // 9c: 94000000      bl      0x9c <ltmp0+0x9c>
    // 000000000000009c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a4: f81f82b3      stur    x19, [x21, #-0x8]
    // a8: 14000000      b       0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x40, 0x92,
        0x48, 0x00, 0x80, 0x92, 0x08, 0x01, 0x0a, 0xcb,
        0xa9, 0x7a, 0x68, 0xf8, 0x2b, 0x05, 0x40, 0xf9,
        0x0c, 0x00, 0x00, 0x90, 0x8c, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x0c, 0xeb, 0x60, 0x00, 0x00, 0x54,
        0xb3, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x2b, 0x00, 0x80, 0x92, 0x6a, 0x01, 0x0a, 0xcb,
        0xab, 0x7a, 0x6a, 0xf8, 0x6b, 0xff, 0xff, 0xb5,
        0x2b, 0x0d, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0xe0, 0x03, 0x09, 0xaa, 0x8c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xa0, 0x7a, 0x68, 0xf8, 0xab, 0x7a, 0x2a, 0xf8,
        0x29, 0x09, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x7a, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0x68, 0xfd, 0xff, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x01, 0xfd, 0xff, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0xb3, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyMethod_Type+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x9c, 0x0, state);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _NOP.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 14000000      b       0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 4: 00 00 00 00
    const unsigned char code_body[8] = {
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x0, (uintptr_t)code + sizeof(code_body));
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_EXCEPT.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9403ec9      ldr     x9, [x22, #0x78]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9400120      ldr     x0, [x9]
    // 10: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 18: eb0a011f      cmp     x8, x10
    // 1c: 9a8803e8      csel    x8, xzr, x8, eq
    // 20: f9000128      str     x8, [x9]
    // 24: b40000c0      cbz     x0, 0x3c <ltmp0+0x3c>
    // 28: f9400008      ldr     x8, [x0]
    // 2c: 37f80088      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 30: f1000508      subs    x8, x8, #0x1
    // 34: f9000008      str     x8, [x0]
    // 38: 540000a0      b.eq    0x4c <ltmp0+0x4c>
    // 3c: f9402288      ldr     x8, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: d1002115      sub     x21, x8, #0x8
    // 48: 14000000      b       0x48 <ltmp0+0x48>
    // 0000000000000048:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 4c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 50: 910003fd      mov     x29, sp
    // 54: 94000000      bl      0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: f9402288      ldr     x8, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: d1002115      sub     x21, x8, #0x8
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0xa8, 0x82, 0x5f, 0xf8, 0xc9, 0x3e, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x20, 0x01, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x0a, 0xeb, 0xe8, 0x03, 0x88, 0x9a,
        0x28, 0x01, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_26r(code + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x54, 0x0, state);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 1c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 20: 910003fd      mov     x29, sp
    // 24: 94000000      bl      0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 28: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[48] = {
        0xa0, 0x8e, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x24, 0x0, state);
    patch_aarch64_26r(code + 0x2c, (uintptr_t)code + sizeof(code_body));
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 540000a0      b.eq    0x28 <ltmp0+0x28>
    // 18: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 20: f81f82a8      stur    x8, [x21, #-0x8]
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_EXC_INFO.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9403ec9      ldr     x9, [x22, #0x78]
    // 8: f940012a      ldr     x10, [x9]
    // c: b940010b      ldr     w11, [x8]
    // 10: 37f8006b      tbnz    w11, #0x1f, 0x1c <ltmp0+0x1c>
    // 14: 1100056b      add     w11, w11, #0x1
    // 18: b900010b      str     w11, [x8]
    // 1c: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 24: f100015f      cmp     x10, #0x0
    // 28: 9a8a016a      csel    x10, x11, x10, eq
    // 2c: f9000128      str     x8, [x9]
    // 30: a93fa2aa      stp     x10, x8, [x21, #-0x8]
    // 34: 910022b5      add     x21, x21, #0x8
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x82, 0x5f, 0xf8, 0xc9, 0x3e, 0x40, 0xf9,
        0x2a, 0x01, 0x40, 0xf9, 0x0b, 0x01, 0x40, 0xb9,
        0x6b, 0x00, 0xf8, 0x37, 0x6b, 0x05, 0x00, 0x11,
        0x0b, 0x01, 0x00, 0xb9, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x00, 0xf1,
        0x6a, 0x01, 0x8a, 0x9a, 0x28, 0x01, 0x00, 0xf9,
        0xaa, 0xa2, 0x3f, 0xa9, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_FRAME.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: f90026c8      str     x8, [x22, #0x48]
    // c: b9402ec9      ldr     w9, [x22, #0x2c]
    // 10: 51000529      sub     w9, w9, #0x1
    // 14: b9002ec9      str     w9, [x22, #0x2c]
    // 18: f9402115      ldr     x21, [x8, #0x40]
    // 1c: f900211f      str     xzr, [x8, #0x40]
    // 20: aa0803f4      mov     x20, x8
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xc8, 0x26, 0x00, 0xf9, 0xc9, 0x2e, 0x40, 0xb9,
        0x29, 0x05, 0x00, 0x51, 0xc9, 0x2e, 0x00, 0xb9,
        0x15, 0x21, 0x40, 0xf9, 0x1f, 0x21, 0x00, 0xf9,
        0xf4, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_NULL.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f80086bf      str     xzr, [x21], #0x8
    // 4: 14000000      b       0x4 <ltmp0+0x4>
    // 0000000000000004:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[8] = {
        0xbf, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x4, (uintptr_t)code + sizeof(code_body));
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_GENERAL.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: d2800002      mov     x2, #0x0                ; =0
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 14: 12003d2c      and     w12, w9, #0xffff
    // 18: cb292ea8      sub     x8, x21, w9, uxth #3
    // 1c: 2a2c03ea      mvn     w10, w12
    // 20: 9280002b      mov     x11, #-0x2              ; =-2
    // 24: cb292169      sub     x9, x11, w9, uxth
    // 28: f8697aab      ldr     x11, [x21, x9, lsl #3]
    // 2c: f86adaaa      ldr     x10, [x21, w10, sxtw #3]
    // 30: 928000ed      mov     x13, #-0x8              ; =-8
    // 34: f100015f      cmp     x10, #0x0
    // 38: 9a9f11aa      csel    x10, x13, xzr, ne
    // 3c: 1a8c0584      cinc    w4, w12, ne
    // 40: f940196c      ldr     x12, [x11, #0x30]
    // 44: 3940c18c      ldrb    w12, [x12, #0x30]
    // 48: 370000cc      tbnz    w12, #0x0, 0x60 <ltmp0+0x60>
    // 4c: f9400962      ldr     x2, [x11, #0x10]
    // 50: b940004b      ldr     w11, [x2]
    // 54: 37f8006b      tbnz    w11, #0x1f, 0x60 <ltmp0+0x60>
    // 58: 1100056b      add     w11, w11, #0x1
    // 5c: b900004b      str     w11, [x2]
    // 60: f9002295      str     x21, [x20, #0x40]
    // 64: d37df133      lsl     x19, x9, #3
    // 68: f8736aa1      ldr     x1, [x21, x19]
    // 6c: 8b0a0103      add     x3, x8, x10
    // 70: aa1603e0      mov     x0, x22
    // 74: d2800005      mov     x5, #0x0                ; =0
    // 78: aa1403e6      mov     x6, x20
    // 7c: 94000000      bl      0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __PyEvalFramePushAndInit
    // 80: f9402288      ldr     x8, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: 8b130115      add     x21, x8, x19
    // 8c: b4000080      cbz     x0, 0x9c <ltmp0+0x9c>
    // 90: f80086a0      str     x0, [x21], #0x8
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a0: 14000000      b       0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // a4: 00 00 00 00
    const unsigned char code_body[168] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x02, 0x00, 0x80, 0xd2, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2c, 0x3d, 0x00, 0x12,
        0xa8, 0x2e, 0x29, 0xcb, 0xea, 0x03, 0x2c, 0x2a,
        0x2b, 0x00, 0x80, 0x92, 0x69, 0x21, 0x29, 0xcb,
        0xab, 0x7a, 0x69, 0xf8, 0xaa, 0xda, 0x6a, 0xf8,
        0xed, 0x00, 0x80, 0x92, 0x5f, 0x01, 0x00, 0xf1,
        0xaa, 0x11, 0x9f, 0x9a, 0x84, 0x05, 0x8c, 0x1a,
        0x6c, 0x19, 0x40, 0xf9, 0x8c, 0xc1, 0x40, 0x39,
        0xcc, 0x00, 0x00, 0x37, 0x62, 0x09, 0x40, 0xf9,
        0x4b, 0x00, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x00, 0x00, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0x33, 0xf1, 0x7d, 0xd3,
        0xa1, 0x6a, 0x73, 0xf8, 0x03, 0x01, 0x0a, 0x8b,
        0xe0, 0x03, 0x16, 0xaa, 0x05, 0x00, 0x80, 0xd2,
        0xe6, 0x03, 0x14, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x01, 0x13, 0x8b, 0x80, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x7c, 0x2a, state);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xa0, state->instruction_starts[instruction->error_target]);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_KW.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d2800002      mov     x2, #0x0                ; =0
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: 12003d2a      and     w10, w9, #0xffff
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: 2a2a03e8      mvn     w8, w10
    // 18: 8b28cea8      add     x8, x21, w8, sxtw #3
    // 1c: 92403d29      and     x9, x9, #0xffff
    // 20: 9280002b      mov     x11, #-0x2              ; =-2
    // 24: cb090177      sub     x23, x11, x9
    // 28: 9280004b      mov     x11, #-0x3              ; =-3
    // 2c: cb090178      sub     x24, x11, x9
    // 30: f8787aab      ldr     x11, [x21, x24, lsl #3]
    // 34: f8777aa9      ldr     x9, [x21, x23, lsl #3]
    // 38: 928000ec      mov     x12, #-0x8              ; =-8
    // 3c: f100013f      cmp     x9, #0x0
    // 40: 9a9f1189      csel    x9, x12, xzr, ne
    // 44: 1a8a054a      cinc    w10, w10, ne
    // 48: b940126c      ldr     w12, [x19, #0x10]
    // 4c: 4b0c014a      sub     w10, w10, w12
    // 50: f940196c      ldr     x12, [x11, #0x30]
    // 54: 3940c18c      ldrb    w12, [x12, #0x30]
    // 58: 370000cc      tbnz    w12, #0x0, 0x70 <ltmp0+0x70>
    // 5c: f9400962      ldr     x2, [x11, #0x10]
    // 60: b940004b      ldr     w11, [x2]
    // 64: 37f8006b      tbnz    w11, #0x1f, 0x70 <ltmp0+0x70>
    // 68: 1100056b      add     w11, w11, #0x1
    // 6c: b900004b      str     w11, [x2]
    // 70: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 74: 910003fd      mov     x29, sp
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: 93407d44      sxtw    x4, w10
    // 80: f8787aa1      ldr     x1, [x21, x24, lsl #3]
    // 84: 8b090103      add     x3, x8, x9
    // 88: aa1603e0      mov     x0, x22
    // 8c: aa1303e5      mov     x5, x19
    // 90: aa1403e6      mov     x6, x20
    // 94: 94000000      bl      0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __PyEvalFramePushAndInit
    // 98: f9402295      ldr     x21, [x20, #0x40]
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: f9400268      ldr     x8, [x19]
    // a4: 37f80088      tbnz    w8, #0x1f, 0xb4 <ltmp0+0xb4>
    // a8: f1000508      subs    x8, x8, #0x1
    // ac: f9000268      str     x8, [x19]
    // b0: 540000c0      b.eq    0xc8 <ltmp0+0xc8>
    // b4: f8387aa0      str     x0, [x21, x24, lsl #3]
    // b8: 8b170eb5      add     x21, x21, x23, lsl #3
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: b4000120      cbz     x0, 0xe4 <ltmp0+0xe4>
    // c4: 14000000      b       0xc4 <ltmp0+0xc4>
    // 00000000000000c4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c8: aa0003f9      mov     x25, x0
    // cc: aa1303e0      mov     x0, x19
    // d0: 94000000      bl      0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d4: f8387ab9      str     x25, [x21, x24, lsl #3]
    // d8: 8b170eb5      add     x21, x21, x23, lsl #3
    // dc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e0: b5ffff39      cbnz    x25, 0xc4 <ltmp0+0xc4>
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[232] = {
        0x02, 0x00, 0x80, 0xd2, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x3d, 0x00, 0x12,
        0xb3, 0x82, 0x5f, 0xf8, 0xe8, 0x03, 0x2a, 0x2a,
        0xa8, 0xce, 0x28, 0x8b, 0x29, 0x3d, 0x40, 0x92,
        0x2b, 0x00, 0x80, 0x92, 0x77, 0x01, 0x09, 0xcb,
        0x4b, 0x00, 0x80, 0x92, 0x78, 0x01, 0x09, 0xcb,
        0xab, 0x7a, 0x78, 0xf8, 0xa9, 0x7a, 0x77, 0xf8,
        0xec, 0x00, 0x80, 0x92, 0x3f, 0x01, 0x00, 0xf1,
        0x89, 0x11, 0x9f, 0x9a, 0x4a, 0x05, 0x8a, 0x1a,
        0x6c, 0x12, 0x40, 0xb9, 0x4a, 0x01, 0x0c, 0x4b,
        0x6c, 0x19, 0x40, 0xf9, 0x8c, 0xc1, 0x40, 0x39,
        0xcc, 0x00, 0x00, 0x37, 0x62, 0x09, 0x40, 0xf9,
        0x4b, 0x00, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x00, 0x00, 0xb9,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x95, 0x22, 0x00, 0xf9, 0x44, 0x7d, 0x40, 0x93,
        0xa1, 0x7a, 0x78, 0xf8, 0x03, 0x01, 0x09, 0x8b,
        0xe0, 0x03, 0x16, 0xaa, 0xe5, 0x03, 0x13, 0xaa,
        0xe6, 0x03, 0x14, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0x54, 0xa0, 0x7a, 0x38, 0xf8,
        0xb5, 0x0e, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x20, 0x01, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x14,
        0xf9, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb9, 0x7a, 0x38, 0xf8,
        0xb5, 0x0e, 0x17, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x39, 0xff, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x94, 0x2a, state);
    patch_aarch64_26r(code + 0xc4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xd0, 0x0, state);
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->error_target]);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _REPLACE_WITH_TRUE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 540000a0      b.eq    0x28 <ltmp0+0x28>
    // 18: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 20: f81f82a8      stur    x8, [x21, #-0x8]
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 40: f81f82a8      stur    x8, [x21, #-0x8]
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_TrueStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RESUME_CHECK.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f9400289      ldr     x9, [x20]
    // 8: f9405529      ldr     x9, [x9, #0xa8]
    // c: eb09011f      cmp     x8, x9
    // 10: 54000041      b.ne    0x18 <ltmp0+0x18>
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x89, 0x02, 0x40, 0xf9,
        0x29, 0x55, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x14, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_GENERATOR.o:       file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f9400a80      ldr     x0, [x20, #0x10]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: 94000000      bl      0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __Py_MakeCoro
    // 14: f9402295      ldr     x21, [x20, #0x40]
    // 18: f900229f      str     xzr, [x20, #0x40]
    // 1c: b40007c0      cbz     x0, 0x114 <ltmp0+0x114>
    // 20: f9401e88      ldr     x8, [x20, #0x38]
    // 24: 91000908      add     x8, x8, #0x2
    // 28: a903d688      stp     x8, x21, [x20, #0x38]
    // 2c: ad400680      ldp     q0, q1, [x20]
    // 30: 3c858001      stur    q1, [x0, #0x58]
    // 34: 3c848000      stur    q0, [x0, #0x48]
    // 38: ad418281      ldp     q1, q0, [x20, #0x30]
    // 3c: aa1403e8      mov     x8, x20
    // 40: f8450d09      ldr     x9, [x8, #0x50]!
    // 44: 3dc00a82      ldr     q2, [x20, #0x20]
    // 48: 3c868002      stur    q2, [x0, #0x68]
    // 4c: f9004c09      str     x9, [x0, #0x98]
    // 50: 3c888000      stur    q0, [x0, #0x88]
    // 54: 3c878001      stur    q1, [x0, #0x78]
    // 58: f9402289      ldr     x9, [x20, #0x40]
    // 5c: cb080128      sub     x8, x9, x8
    // 60: d343fd09      lsr     x9, x8, #3
    // 64: 8b29cc0a      add     x10, x0, w9, sxtw #3
    // 68: 9102614a      add     x10, x10, #0x98
    // 6c: f900440a      str     x10, [x0, #0x88]
    // 70: 7100093f      cmp     w9, #0x2
    // 74: 5400028b      b.lt    0xc4 <ltmp0+0xc4>
    // 78: d3438508      ubfx    x8, x8, #3, #31
    // 7c: d100050a      sub     x10, x8, #0x1
    // 80: f100215f      cmp     x10, #0x8
    // 84: 540000a3      b.lo    0x98 <ltmp0+0x98>
    // 88: cb140009      sub     x9, x0, x20
    // 8c: 91012129      add     x9, x9, #0x48
    // 90: f101013f      cmp     x9, #0x40
    // 94: 54000442      b.hs    0x11c <ltmp0+0x11c>
    // 98: 52800029      mov     w9, #0x1                ; =1
    // 9c: cb080128      sub     x8, x9, x8
    // a0: d37df12a      lsl     x10, x9, #3
    // a4: 8b140149      add     x9, x10, x20
    // a8: 91014129      add     x9, x9, #0x50
    // ac: 8b00014a      add     x10, x10, x0
    // b0: 9102614a      add     x10, x10, #0x98
    // b4: f840852b      ldr     x11, [x9], #0x8
    // b8: f800854b      str     x11, [x10], #0x8
    // bc: b1000508      adds    x8, x8, #0x1
    // c0: 54ffffa3      b.lo    0xb4 <ltmp0+0xb4>
    // c4: f900281f      str     xzr, [x0, #0x50]
    // c8: 52801fa8      mov     w8, #0xfd               ; =253
    // cc: 39010c08      strb    w8, [x0, #0x43]
    // d0: 52800028      mov     w8, #0x1                ; =1
    // d4: 39024808      strb    w8, [x0, #0x92]
    // d8: b9402ec8      ldr     w8, [x22, #0x2c]
    // dc: 11000508      add     w8, w8, #0x1
    // e0: b9002ec8      str     w8, [x22, #0x2c]
    // e4: f9400693      ldr     x19, [x20, #0x8]
    // e8: aa0003f7      mov     x23, x0
    // ec: aa1603e0      mov     x0, x22
    // f0: aa1403e1      mov     x1, x20
    // f4: 94000000      bl      0xf4 <ltmp0+0xf4>
    // 00000000000000f4:  ARM64_RELOC_BRANCH26 __PyThreadState_PopFrame
    // f8: f90026d3      str     x19, [x22, #0x48]
    // fc: f9402275      ldr     x21, [x19, #0x40]
    // 100: f900227f      str     xzr, [x19, #0x40]
    // 104: f80086b7      str     x23, [x21], #0x8
    // 108: aa1303f4      mov     x20, x19
    // 10c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 110: 14000000      b       0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 114: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 118: 14000000      b       0x118 <ltmp0+0x118>
    // 0000000000000118:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 11c: 927df14b      and     x11, x10, #0xfffffffffffffff8
    // 120: b2400169      orr     x9, x11, #0x1
    // 124: 9102228c      add     x12, x20, #0x88
    // 128: 9103400d      add     x13, x0, #0xd0
    // 12c: aa0b03ee      mov     x14, x11
    // 130: ad7e8580      ldp     q0, q1, [x12, #-0x30]
    // 134: ad7f8d82      ldp     q2, q3, [x12, #-0x10]
    // 138: ad3e85a0      stp     q0, q1, [x13, #-0x30]
    // 13c: ad3f8da2      stp     q2, q3, [x13, #-0x10]
    // 140: 9101018c      add     x12, x12, #0x40
    // 144: 910101ad      add     x13, x13, #0x40
    // 148: f10021ce      subs    x14, x14, #0x8
    // 14c: 54ffff21      b.ne    0x130 <ltmp0+0x130>
    // 150: eb0b015f      cmp     x10, x11
    // 154: 54fffb80      b.eq    0xc4 <ltmp0+0xc4>
    // 158: 17ffffd1      b       0x9c <ltmp0+0x9c>
    // 15c: 00 00 00 00
    const unsigned char code_body[352] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x80, 0x0a, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x07, 0x00, 0xb4,
        0x88, 0x1e, 0x40, 0xf9, 0x08, 0x09, 0x00, 0x91,
        0x88, 0xd6, 0x03, 0xa9, 0x80, 0x06, 0x40, 0xad,
        0x01, 0x80, 0x85, 0x3c, 0x00, 0x80, 0x84, 0x3c,
        0x81, 0x82, 0x41, 0xad, 0xe8, 0x03, 0x14, 0xaa,
        0x09, 0x0d, 0x45, 0xf8, 0x82, 0x0a, 0xc0, 0x3d,
        0x02, 0x80, 0x86, 0x3c, 0x09, 0x4c, 0x00, 0xf9,
        0x00, 0x80, 0x88, 0x3c, 0x01, 0x80, 0x87, 0x3c,
        0x89, 0x22, 0x40, 0xf9, 0x28, 0x01, 0x08, 0xcb,
        0x09, 0xfd, 0x43, 0xd3, 0x0a, 0xcc, 0x29, 0x8b,
        0x4a, 0x61, 0x02, 0x91, 0x0a, 0x44, 0x00, 0xf9,
        0x3f, 0x09, 0x00, 0x71, 0x8b, 0x02, 0x00, 0x54,
        0x08, 0x85, 0x43, 0xd3, 0x0a, 0x05, 0x00, 0xd1,
        0x5f, 0x21, 0x00, 0xf1, 0xa3, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x14, 0xcb, 0x29, 0x21, 0x01, 0x91,
        0x3f, 0x01, 0x01, 0xf1, 0x42, 0x04, 0x00, 0x54,
        0x29, 0x00, 0x80, 0x52, 0x28, 0x01, 0x08, 0xcb,
        0x2a, 0xf1, 0x7d, 0xd3, 0x49, 0x01, 0x14, 0x8b,
        0x29, 0x41, 0x01, 0x91, 0x4a, 0x01, 0x00, 0x8b,
        0x4a, 0x61, 0x02, 0x91, 0x2b, 0x85, 0x40, 0xf8,
        0x4b, 0x85, 0x00, 0xf8, 0x08, 0x05, 0x00, 0xb1,
        0xa3, 0xff, 0xff, 0x54, 0x1f, 0x28, 0x00, 0xf9,
        0xa8, 0x1f, 0x80, 0x52, 0x08, 0x0c, 0x01, 0x39,
        0x28, 0x00, 0x80, 0x52, 0x08, 0x48, 0x02, 0x39,
        0xc8, 0x2e, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x2e, 0x00, 0xb9, 0x93, 0x06, 0x40, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xd3, 0x26, 0x00, 0xf9, 0x75, 0x22, 0x40, 0xf9,
        0x7f, 0x22, 0x00, 0xf9, 0xb7, 0x86, 0x00, 0xf8,
        0xf4, 0x03, 0x13, 0xaa, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x4b, 0xf1, 0x7d, 0x92,
        0x69, 0x01, 0x40, 0xb2, 0x8c, 0x22, 0x02, 0x91,
        0x0d, 0x40, 0x03, 0x91, 0xee, 0x03, 0x0b, 0xaa,
        0x80, 0x85, 0x7e, 0xad, 0x82, 0x8d, 0x7f, 0xad,
        0xa0, 0x85, 0x3e, 0xad, 0xa2, 0x8d, 0x3f, 0xad,
        0x8c, 0x01, 0x01, 0x91, 0xad, 0x01, 0x01, 0x91,
        0xce, 0x21, 0x00, 0xf1, 0x21, 0xff, 0xff, 0x54,
        0x5f, 0x01, 0x0b, 0xeb, 0x80, 0xfb, 0xff, 0x54,
        0xd1, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x10, 0x54, state);
    patch_aarch64_trampoline(code + 0xf4, 0x53, state);
    patch_aarch64_26r(code + 0x110, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x118, state->instruction_starts[instruction->error_target]);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_VALUE.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: aa1403e1      mov     x1, x20
    // c: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: b9402ec8      ldr     w8, [x22, #0x2c]
    // 18: 11000508      add     w8, w8, #0x1
    // 1c: b9002ec8      str     w8, [x22, #0x2c]
    // 20: f9400694      ldr     x20, [x20, #0x8]
    // 24: f90026d4      str     x20, [x22, #0x48]
    // 28: aa1603e0      mov     x0, x22
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __PyEval_FrameClearAndPop
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f80086b3      str     x19, [x21], #0x8
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xe1, 0x03, 0x14, 0xaa, 0xb3, 0x8e, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xc8, 0x2e, 0x40, 0xb9,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x2e, 0x00, 0xb9,
        0x94, 0x06, 0x40, 0xf9, 0xd4, 0x26, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xb3, 0x86, 0x00, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x2c, 0x29, state);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SAVE_RETURN_OFFSET.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: 79009288      strh    w8, [x20, #0x48]
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x92, 0x00, 0x79, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SEND_GEN_FRAME.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyGen_Type
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyGen_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyCoro_Type
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyCoro_Type
    // 1c: fa4a1124      ccmp    x9, x10, #0x4, ne
    // 20: 54000061      b.ne    0x2c <ltmp0+0x2c>
    // 24: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 28: 37f80049      tbnz    w9, #0x1f, 0x30 <ltmp0+0x30>
    // 2c: 14000000      b       0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 30: f85f82a9      ldur    x9, [x21, #-0x8]
    // 34: 9101210a      add     x10, x8, #0x48
    // 38: f940450b      ldr     x11, [x8, #0x88]
    // 3c: f9000169      str     x9, [x11]
    // 40: f9404509      ldr     x9, [x8, #0x88]
    // 44: 91002129      add     x9, x9, #0x8
    // 48: f9004509      str     x9, [x8, #0x88]
    // 4c: 39010d1f      strb    wzr, [x8, #0x43]
    // 50: f9403ec9      ldr     x9, [x22, #0x78]
    // 54: 9100a10b      add     x11, x8, #0x28
    // 58: f9001909      str     x9, [x8, #0x30]
    // 5c: f9003ecb      str     x11, [x22, #0x78]
    // 60: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000060:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 64: f9400129      ldr     x9, [x9]
    // 0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 68: 11000929      add     w9, w9, #0x2
    // 6c: 79009289      strh    w9, [x20, #0x48]
    // 70: f9002914      str     x20, [x8, #0x50]
    // 74: f81f82aa      stur    x10, [x21, #-0x8]
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x24, 0x11, 0x4a, 0xfa,
        0x61, 0x00, 0x00, 0x54, 0x09, 0x0d, 0xc1, 0x39,
        0x49, 0x00, 0xf8, 0x37, 0x00, 0x00, 0x00, 0x14,
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x21, 0x01, 0x91,
        0x0b, 0x45, 0x40, 0xf9, 0x69, 0x01, 0x00, 0xf9,
        0x09, 0x45, 0x40, 0xf9, 0x29, 0x21, 0x00, 0x91,
        0x09, 0x45, 0x00, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0xc9, 0x3e, 0x40, 0xf9, 0x0b, 0xa1, 0x00, 0x91,
        0x09, 0x19, 0x00, 0xf9, 0xcb, 0x3e, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x29, 0x09, 0x00, 0x11, 0x89, 0x92, 0x00, 0x79,
        0x14, 0x29, 0x00, 0xf9, 0xaa, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCoro_Type+0x0
    // 10: &PyGen_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x10, (uintptr_t)&PyGen_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x2c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SETUP_ANNOTATIONS.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f9401680      ldr     x0, [x20, #0x28]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: b4000280      cbz     x0, 0x64 <ltmp0+0x64>
    // 18: 90000013      adrp    x19, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 1c: f9400273      ldr     x19, [x19]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 20: 5291c308      mov     w8, #0x8e18             ; =36376
    // 24: 8b080261      add     x1, x19, x8
    // 28: 910023e2      add     x2, sp, #0x8
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 _PyMapping_GetOptionalItem
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: 37f80280      tbnz    w0, #0x1f, 0x88 <ltmp0+0x88>
    // 3c: f94007e0      ldr     x0, [sp, #0x8]
    // 40: b40002a0      cbz     x0, 0x94 <ltmp0+0x94>
    // 44: f9400008      ldr     x8, [x0]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <ltmp0+0x58>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000008      str     x8, [x0]
    // 54: 54000540      b.eq    0xfc <ltmp0+0xfc>
    // 58: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 5c: 910083ff      add     sp, sp, #0x20
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000064:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_SystemError
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_SystemError
    // 6c: f9400101      ldr     x1, [x8]
    // 70: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000070:  ARM64_RELOC_PAGE21   l_.str
    // 74: 91000042      add     x2, x2, #0x0
    // 0000000000000074:  ARM64_RELOC_PAGEOFF12        l_.str
    // 78: aa1603e0      mov     x0, x22
    // 7c: 94000000      bl      0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // 80: f9402295      ldr     x21, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 8c: 910083ff      add     sp, sp, #0x20
    // 90: 14000000      b       0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 94: f9002295      str     x21, [x20, #0x40]
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 _PyDict_New
    // 9c: f90007e0      str     x0, [sp, #0x8]
    // a0: f9402295      ldr     x21, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: b4ffff00      cbz     x0, 0x88 <ltmp0+0x88>
    // ac: aa0003e2      mov     x2, x0
    // b0: f9002295      str     x21, [x20, #0x40]
    // b4: f9401680      ldr     x0, [x20, #0x28]
    // b8: 5291c308      mov     w8, #0x8e18             ; =36376
    // bc: 8b080261      add     x1, x19, x8
    // c0: 94000000      bl      0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 _PyObject_SetItem
    // c4: f9402295      ldr     x21, [x20, #0x40]
    // c8: f900229f      str     xzr, [x20, #0x40]
    // cc: f94007e8      ldr     x8, [sp, #0x8]
    // d0: f9400109      ldr     x9, [x8]
    // d4: 37f80109      tbnz    w9, #0x1f, 0xf4 <ltmp0+0xf4>
    // d8: f1000529      subs    x9, x9, #0x1
    // dc: f9000109      str     x9, [x8]
    // e0: 540000a1      b.ne    0xf4 <ltmp0+0xf4>
    // e4: aa0003f3      mov     x19, x0
    // e8: aa0803e0      mov     x0, x8
    // ec: 94000000      bl      0xec <ltmp0+0xec>
    // 00000000000000ec:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f0: aa1303e0      mov     x0, x19
    // f4: 35fffca0      cbnz    w0, 0x88 <ltmp0+0x88>
    // f8: 17ffffd8      b       0x58 <ltmp0+0x58>
    // fc: 94000000      bl      0xfc <ltmp0+0xfc>
    // 00000000000000fc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 100: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 104: 910083ff      add     sp, sp, #0x20
    // 108: 14000000      b       0x108 <ltmp0+0x108>
    // 0000000000000108:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 10c: 00 00 00 00
    const unsigned char code_body[272] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0x80, 0x16, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x02, 0x00, 0xb4,
        0x13, 0x00, 0x00, 0x90, 0x73, 0x02, 0x40, 0xf9,
        0x08, 0xc3, 0x91, 0x52, 0x61, 0x02, 0x08, 0x8b,
        0xe2, 0x23, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x80, 0x02, 0xf8, 0x37, 0xe0, 0x07, 0x40, 0xf9,
        0xa0, 0x02, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x40, 0x05, 0x00, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x01, 0x40, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x07, 0x00, 0xf9,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0xff, 0xff, 0xb4, 0xe2, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x00, 0xf9, 0x80, 0x16, 0x40, 0xf9,
        0x08, 0xc3, 0x91, 0x52, 0x61, 0x02, 0x08, 0x8b,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x07, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xf9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0xf1, 0x09, 0x01, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xf3, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x13, 0xaa, 0xa0, 0xfc, 0xff, 0x35,
        0xd8, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &PyExc_SystemError+0x0
    // 38: &_PyRuntime+0x0
    const unsigned char data_body[64] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x38, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x38);
    patch_aarch64_trampoline(code + 0x2c, 0x47, state);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x30);
    patch_aarch64_21r(code + 0x70, (uintptr_t)data);
    patch_aarch64_12(code + 0x74, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x7c, 0x30, state);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x98, 0x56, state);
    patch_aarch64_trampoline(code + 0xc0, 0x55, state);
    patch_aarch64_trampoline(code + 0xec, 0x0, state);
    patch_aarch64_trampoline(code + 0xfc, 0x0, state);
    patch_aarch64_26r(code + 0x108, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_ADD.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 2a2803e8      mvn     w8, w8
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1303e1      mov     x1, x19
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 _PySet_Add
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f9400268      ldr     x8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000268      str     x8, [x19]
    // 48: 54000080      b.eq    0x58 <ltmp0+0x58>
    // 4c: 34000100      cbz     w0, 0x6c <ltmp0+0x6c>
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 58: aa0003f7      mov     x23, x0
    // 5c: aa1303e0      mov     x0, x19
    // 60: 94000000      bl      0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 64: aa1703e0      mov     x0, x23
    // 68: 35ffff40      cbnz    w0, 0x50 <ltmp0+0x50>
    // 6c: d10022b5      sub     x21, x21, #0x8
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe8, 0x03, 0x28, 0x2a, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x01, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x40, 0xff, 0xff, 0x35, 0xb5, 0x22, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0xf, state);
    patch_aarch64_26r(code + 0x54, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x60, 0x0, state);
    patch_aarch64_26r(code + 0x74, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_FUNCTION_ATTRIBUTE.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: f85f82aa      ldur    x10, [x21, #-0x8]
    // 10: 92403d29      and     x9, x9, #0xffff
    // 14: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FunctionAttributeOffsets
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FunctionAttributeOffsets
    // 1c: f8697969      ldr     x9, [x11, x9, lsl #3]
    // 20: f829690a      str     x10, [x8, x9]
    // 24: f81f82a8      stur    x8, [x21, #-0x8]
    // 28: 14000000      b       0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xaa, 0x82, 0x5f, 0xf8,
        0x29, 0x3d, 0x40, 0x92, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x69, 0x79, 0x69, 0xf8,
        0x0a, 0x69, 0x29, 0xf8, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FunctionAttributeOffsets+0x0
    // 8: OPARG
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FunctionAttributeOffsets);
    patch_64(data + 0x8, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_26r(code + 0x28, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_IP.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 8: f9001e88      str     x8, [x20, #0x38]
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[16] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x1e, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0xc, (uintptr_t)code + sizeof(code_body));
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_UPDATE.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: 2a2803e8      mvn     w8, w8
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1303e1      mov     x1, x19
    // 2c: 94000000      bl      0x2c <ltmp0+0x2c>
    // 000000000000002c:  ARM64_RELOC_BRANCH26 __PySet_Update
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: f9400268      ldr     x8, [x19]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 40: f1000508      subs    x8, x8, #0x1
    // 44: f9000268      str     x8, [x19]
    // 48: 540000a0      b.eq    0x5c <ltmp0+0x5c>
    // 4c: 37f80120      tbnz    w0, #0x1f, 0x70 <ltmp0+0x70>
    // 50: d10022b5      sub     x21, x21, #0x8
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 5c: aa0003f7      mov     x23, x0
    // 60: aa1303e0      mov     x0, x19
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: aa1703e0      mov     x0, x23
    // 6c: 36ffff20      tbz     w0, #0x1f, 0x50 <ltmp0+0x50>
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe8, 0x03, 0x28, 0x2a, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0xf8, 0x37,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x20, 0xff, 0xff, 0x36,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x2c, 0x57, state);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_26r(code + 0x74, state->instruction_starts[instruction->error_target]);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _START_EXECUTOR.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9408ac0      ldr     x0, [x22, #0x110]
    // 4: f9400008      ldr     x8, [x0]
    // 8: 37f80088      tbnz    w8, #0x1f, 0x18 <ltmp0+0x18>
    // c: f1000508      subs    x8, x8, #0x1
    // 10: f9000008      str     x8, [x0]
    // 14: 54000060      b.eq    0x20 <ltmp0+0x20>
    // 18: f9008adf      str     xzr, [x22, #0x110]
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 20: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 24: 910003fd      mov     x29, sp
    // 28: 94000000      bl      0x28 <ltmp0+0x28>
    // 0000000000000028:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 2c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 30: f9008adf      str     xzr, [x22, #0x110]
    // 34: 14000000      b       0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[56] = {
        0xc0, 0x8a, 0x40, 0xf9, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x60, 0x00, 0x00, 0x54,
        0xdf, 0x8a, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xdf, 0x8a, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x28, 0x0, state);
    patch_aarch64_26r(code + 0x34, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1303e0      mov     x0, x19
    // 2c: aa1803e2      mov     x2, x24
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 _PyObject_SetAttr
    // 34: aa0003f7      mov     x23, x0
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400308      ldr     x8, [x24]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000308      str     x8, [x24]
    // 50: 54000120      b.eq    0x74 <ltmp0+0x74>
    // 54: f9400268      ldr     x8, [x19]
    // 58: 37f80168      tbnz    w8, #0x1f, 0x84 <ltmp0+0x84>
    // 5c: f1000508      subs    x8, x8, #0x1
    // 60: f9000268      str     x8, [x19]
    // 64: 54000101      b.ne    0x84 <ltmp0+0x84>
    // 68: aa1303e0      mov     x0, x19
    // 6c: 94000000      bl      0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 70: 14000005      b       0x84 <ltmp0+0x84>
    // 74: aa1803e0      mov     x0, x24
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 7c: f9400268      ldr     x8, [x19]
    // 80: 36fffee8      tbz     w8, #0x1f, 0x5c <ltmp0+0x5c>
    // 84: 34000077      cbz     w23, 0x90 <ltmp0+0x90>
    // 88: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 8c: 14000000      b       0x8c <ltmp0+0x8c>
    // 000000000000008c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 90: d10042b5      sub     x21, x21, #0x10
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0x77, 0x00, 0x00, 0x34,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xb5, 0x42, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x30, 0x58, state);
    patch_aarch64_trampoline(code + 0x6c, 0x0, state);
    patch_aarch64_trampoline(code + 0x78, 0x0, state);
    patch_aarch64_26r(code + 0x8c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_INSTANCE_VALUE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a9ff4ea9      ldp     x9, x19, [x21, #-0x10]!
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: 8b282268      add     x8, x19, w8, uxth
    // 18: f9400100      ldr     x0, [x8]
    // 1c: f9000109      str     x9, [x8]
    // 20: b4000100      cbz     x0, 0x40 <ltmp0+0x40>
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f80248      tbnz    w8, #0x1f, 0x70 <ltmp0+0x70>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 540001e1      b.ne    0x70 <ltmp0+0x70>
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 3c: 1400000d      b       0x70 <ltmp0+0x70>
    // 40: f9400669      ldr     x9, [x19, #0x8]
    // 44: f9401129      ldr     x9, [x9, #0x20]
    // 48: 8b090269      add     x9, x19, x9
    // 4c: 9100212a      add     x10, x9, #0x8
    // 50: 4b0a0108      sub     w8, w8, w10
    // 54: 53037d08      lsr     w8, w8, #3
    // 58: 3940052b      ldrb    w11, [x9, #0x1]
    // 5c: 3940012c      ldrb    w12, [x9]
    // 60: 8b0c0d4a      add     x10, x10, x12, lsl #3
    // 64: 382b6948      strb    w8, [x10, x11]
    // 68: 11000568      add     w8, w11, #0x1
    // 6c: 39000528      strb    w8, [x9, #0x1]
    // 70: f9400268      ldr     x8, [x19]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <ltmp0+0x84>
    // 78: f1000508      subs    x8, x8, #0x1
    // 7c: f9000268      str     x8, [x19]
    // 80: 54000060      b.eq    0x8c <ltmp0+0x8c>
    // 84: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 88: 14000000      b       0x88 <ltmp0+0x88>
    // 0000000000000088:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 8c: aa1303e0      mov     x0, x19
    // 90: 94000000      bl      0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 94: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 98: 14000000      b       0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa9, 0x4e, 0xff, 0xa9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x68, 0x22, 0x28, 0x8b,
        0x00, 0x01, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x48, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xe1, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x0d, 0x00, 0x00, 0x14,
        0x69, 0x06, 0x40, 0xf9, 0x29, 0x11, 0x40, 0xf9,
        0x69, 0x02, 0x09, 0x8b, 0x2a, 0x21, 0x00, 0x91,
        0x08, 0x01, 0x0a, 0x4b, 0x08, 0x7d, 0x03, 0x53,
        0x2b, 0x05, 0x40, 0x39, 0x2c, 0x01, 0x40, 0x39,
        0x4a, 0x0d, 0x0c, 0x8b, 0x48, 0x69, 0x2b, 0x38,
        0x68, 0x05, 0x00, 0x11, 0x28, 0x05, 0x00, 0x39,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x60, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x0, state);
    patch_aarch64_26r(code + 0x88, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x90, 0x0, state);
    patch_aarch64_26r(code + 0x98, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_SLOT.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a9ff4ea8      ldp     x8, x19, [x21, #-0x10]!
    // c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: 92403d29      and     x9, x9, #0xffff
    // 18: f8696a60      ldr     x0, [x19, x9]
    // 1c: f8296a68      str     x8, [x19, x9]
    // 20: b40000e0      cbz     x0, 0x3c <ltmp0+0x3c>
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f800a8      tbnz    w8, #0x1f, 0x3c <ltmp0+0x3c>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 54000041      b.ne    0x3c <ltmp0+0x3c>
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 54000060      b.eq    0x58 <ltmp0+0x58>
    // 50: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 58: aa1303e0      mov     x0, x19
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa8, 0x4e, 0xff, 0xa9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x29, 0x3d, 0x40, 0x92,
        0x60, 0x6a, 0x69, 0xf8, 0x68, 0x6a, 0x29, 0xf8,
        0xe0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0xa8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x41, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x60, 0x00, 0x00, 0x54,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x0, state);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x5c, 0x0, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_WITH_HINT.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82b3      ldur    x19, [x21, #-0x8]
    // 4: f85e8262      ldur    x2, [x19, #-0x18]
    // 8: b4000302      cbz     x2, 0x68 <ltmp0+0x68>
    // c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPERAND0
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPERAND0
    // 14: 92403d08      and     x8, x8, #0xffff
    // 18: f9401049      ldr     x9, [x2, #0x20]
    // 1c: f9400d2a      ldr     x10, [x9, #0x18]
    // 20: eb08015f      cmp     x10, x8
    // 24: 54000229      b.ls    0x68 <ltmp0+0x68>
    // 28: 3940292a      ldrb    w10, [x9, #0xa]
    // 2c: 340001ea      cbz     w10, 0x68 <ltmp0+0x68>
    // 30: f940028a      ldr     x10, [x20]
    // 34: f940114a      ldr     x10, [x10, #0x20]
    // 38: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 3c: f940016b      ldr     x11, [x11]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 40: 8b2b2d4a      add     x10, x10, w11, uxth #3
    // 44: f9400d43      ldr     x3, [x10, #0x18]
    // 48: 3940252a      ldrb    w10, [x9, #0x9]
    // 4c: 5280002b      mov     w11, #0x1               ; =1
    // 50: 9aca216a      lsl     x10, x11, x10
    // 54: 8b0a0129      add     x9, x9, x10
    // 58: 8b081139      add     x25, x9, x8, lsl #4
    // 5c: f8420f28      ldr     x8, [x25, #0x20]!
    // 60: eb03011f      cmp     x8, x3
    // 64: 54000040      b.eq    0x6c <ltmp0+0x6c>
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 6c: f9400737      ldr     x23, [x25, #0x8]
    // 70: b4ffffd7      cbz     x23, 0x68 <ltmp0+0x68>
    // 74: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 78: 910003fd      mov     x29, sp
    // 7c: f85f02b8      ldur    x24, [x21, #-0x10]
    // 80: f9002295      str     x21, [x20, #0x40]
    // 84: 39406040      ldrb    w0, [x2, #0x18]
    // 88: 340000a0      cbz     w0, 0x9c <ltmp0+0x9c>
    // 8c: 52800021      mov     w1, #0x1                ; =1
    // 90: aa1803e4      mov     x4, x24
    // 94: 94000000      bl      0x94 <ltmp0+0x94>
    // 0000000000000094:  ARM64_RELOC_BRANCH26 __PyDict_SendEvent
    // 98: f9402295      ldr     x21, [x20, #0x40]
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: f9000738      str     x24, [x25, #0x8]
    // a4: f94002e8      ldr     x8, [x23]
    // a8: 37f800c8      tbnz    w8, #0x1f, 0xc0 <ltmp0+0xc0>
    // ac: f1000508      subs    x8, x8, #0x1
    // b0: f90002e8      str     x8, [x23]
    // b4: 54000061      b.ne    0xc0 <ltmp0+0xc0>
    // b8: aa1703e0      mov     x0, x23
    // bc: 94000000      bl      0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // c0: f9400268      ldr     x8, [x19]
    // c4: 37f800c8      tbnz    w8, #0x1f, 0xdc <ltmp0+0xdc>
    // c8: f1000508      subs    x8, x8, #0x1
    // cc: f9000268      str     x8, [x19]
    // d0: 54000061      b.ne    0xdc <ltmp0+0xdc>
    // d4: aa1303e0      mov     x0, x19
    // d8: 94000000      bl      0xd8 <ltmp0+0xd8>
    // 00000000000000d8:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // dc: d10042b5      sub     x21, x21, #0x10
    // e0: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[232] = {
        0xb3, 0x82, 0x5f, 0xf8, 0x62, 0x82, 0x5e, 0xf8,
        0x02, 0x03, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x49, 0x10, 0x40, 0xf9, 0x2a, 0x0d, 0x40, 0xf9,
        0x5f, 0x01, 0x08, 0xeb, 0x29, 0x02, 0x00, 0x54,
        0x2a, 0x29, 0x40, 0x39, 0xea, 0x01, 0x00, 0x34,
        0x8a, 0x02, 0x40, 0xf9, 0x4a, 0x11, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x4a, 0x2d, 0x2b, 0x8b, 0x43, 0x0d, 0x40, 0xf9,
        0x2a, 0x25, 0x40, 0x39, 0x2b, 0x00, 0x80, 0x52,
        0x6a, 0x21, 0xca, 0x9a, 0x29, 0x01, 0x0a, 0x8b,
        0x39, 0x11, 0x08, 0x8b, 0x28, 0x0f, 0x42, 0xf8,
        0x1f, 0x01, 0x03, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x37, 0x07, 0x40, 0xf9,
        0xd7, 0xff, 0xff, 0xb4, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0xb8, 0x02, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x40, 0x60, 0x40, 0x39,
        0xa0, 0x00, 0x00, 0x34, 0x21, 0x00, 0x80, 0x52,
        0xe4, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x38, 0x07, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x68, 0x02, 0x40, 0xf9, 0xc8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x61, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xb5, 0x42, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_26r(code + 0x68, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x94, 0x59, state);
    patch_aarch64_trampoline(code + 0xbc, 0x0, state);
    patch_aarch64_trampoline(code + 0xd8, 0x0, state);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_DEREF.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: f85f82a9      ldur    x9, [x21, #-0x8]
    // c: 8b282e88      add     x8, x20, w8, uxth #3
    // 10: f9402908      ldr     x8, [x8, #0x50]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400900      ldr     x0, [x8, #0x10]
    // 1c: f9000909      str     x9, [x8, #0x10]
    // 20: b40000c0      cbz     x0, 0x38 <ltmp0+0x38>
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 540000a0      b.eq    0x48 <ltmp0+0x48>
    // 38: f9402288      ldr     x8, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: d1002115      sub     x21, x8, #0x8
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 48: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4c: 910003fd      mov     x29, sp
    // 50: 94000000      bl      0x50 <ltmp0+0x50>
    // 0000000000000050:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: f9402288      ldr     x8, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: d1002115      sub     x21, x8, #0x8
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[104] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x82, 0x5f, 0xf8, 0x88, 0x2e, 0x28, 0x8b,
        0x08, 0x29, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x09, 0x40, 0xf9, 0x09, 0x09, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x50, 0x0, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: 8b292e89      add     x9, x20, w9, uxth #3
    // 10: f9402920      ldr     x0, [x9, #0x50]
    // 14: f9002928      str     x8, [x9, #0x50]
    // 18: b40000c0      cbz     x0, 0x30 <ltmp0+0x30>
    // 1c: f9400008      ldr     x8, [x0]
    // 20: 37f80088      tbnz    w8, #0x1f, 0x30 <ltmp0+0x30>
    // 24: f1000508      subs    x8, x8, #0x1
    // 28: f9000008      str     x8, [x0]
    // 2c: 54000040      b.eq    0x34 <ltmp0+0x34>
    // 30: 14000000      b       0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 910003fd      mov     x29, sp
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 14000000      b       0x44 <ltmp0+0x44>
    // 0000000000000044:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[72] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x89, 0x2e, 0x29, 0x8b,
        0x20, 0x29, 0x40, 0xf9, 0x28, 0x29, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x3c, 0x0, state);
    patch_aarch64_26r(code + 0x44, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_0.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9402a80      ldr     x0, [x20, #0x50]
    // 8: f9002a88      str     x8, [x20, #0x50]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x2a, 0x40, 0xf9,
        0x88, 0x2a, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_1.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9402e80      ldr     x0, [x20, #0x58]
    // 8: f9002e88      str     x8, [x20, #0x58]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x2e, 0x40, 0xf9,
        0x88, 0x2e, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_2.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403280      ldr     x0, [x20, #0x60]
    // 8: f9003288      str     x8, [x20, #0x60]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x32, 0x40, 0xf9,
        0x88, 0x32, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_3.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403680      ldr     x0, [x20, #0x68]
    // 8: f9003688      str     x8, [x20, #0x68]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x36, 0x40, 0xf9,
        0x88, 0x36, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_4.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403a80      ldr     x0, [x20, #0x70]
    // 8: f9003a88      str     x8, [x20, #0x70]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x3a, 0x40, 0xf9,
        0x88, 0x3a, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_5.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9403e80      ldr     x0, [x20, #0x78]
    // 8: f9003e88      str     x8, [x20, #0x78]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x3e, 0x40, 0xf9,
        0x88, 0x3e, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_6.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9404280      ldr     x0, [x20, #0x80]
    // 8: f9004288      str     x8, [x20, #0x80]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x42, 0x40, 0xf9,
        0x88, 0x42, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_7.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9404680      ldr     x0, [x20, #0x88]
    // 8: f9004688      str     x8, [x20, #0x88]
    // c: b40000c0      cbz     x0, 0x24 <ltmp0+0x24>
    // 10: f9400008      ldr     x8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <ltmp0+0x24>
    // 18: f1000508      subs    x8, x8, #0x1
    // 1c: f9000008      str     x8, [x0]
    // 20: 54000040      b.eq    0x28 <ltmp0+0x28>
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 28: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 2c: 910003fd      mov     x29, sp
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 34: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x80, 0x46, 0x40, 0xf9,
        0x88, 0x46, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x30, 0x0, state);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_GLOBAL.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9400288      ldr     x8, [x20]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: f9400e80      ldr     x0, [x20, #0x18]
    // 2c: aa1303e2      mov     x2, x19
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 _PyDict_SetItem
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 54000080      b.eq    0x5c <ltmp0+0x5c>
    // 50: 34000100      cbz     w0, 0x70 <ltmp0+0x70>
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 5c: aa0003f7      mov     x23, x0
    // 60: aa1303e0      mov     x0, x19
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: aa1703e0      mov     x0, x23
    // 6c: 35ffff40      cbnz    w0, 0x54 <ltmp0+0x54>
    // 70: d10022b5      sub     x21, x21, #0x8
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: 14000000      b       0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x80, 0x0e, 0x40, 0xf9, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x01, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x40, 0xff, 0xff, 0x35,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x30, 0x5a, state);
    patch_aarch64_26r(code + 0x58, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_26r(code + 0x78, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_NAME.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a9017bfd      stp     x29, x30, [sp, #0x10]
    // 8: 910043fd      add     x29, sp, #0x10
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d01      ldr     x1, [x8, #0x18]
    // 28: f9401680      ldr     x0, [x20, #0x28]
    // 2c: b40001c0      cbz     x0, 0x64 <ltmp0+0x64>
    // 30: f9400408      ldr     x8, [x0, #0x8]
    // 34: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000034:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // 38: f9400129      ldr     x9, [x9]
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 3c: f9002295      str     x21, [x20, #0x40]
    // 40: aa1303e2      mov     x2, x19
    // 44: eb09011f      cmp     x8, x9
    // 48: 54000360      b.eq    0xb4 <ltmp0+0xb4>
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 _PyObject_SetItem
    // 50: f9402295      ldr     x21, [x20, #0x40]
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: f9400268      ldr     x8, [x19]
    // 5c: 36f80368      tbz     w8, #0x1f, 0xc8 <ltmp0+0xc8>
    // 60: 1400001d      b       0xd4 <ltmp0+0xd4>
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000068:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyExc_SystemError
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyExc_SystemError
    // 70: f9400108      ldr     x8, [x8]
    // 74: f90003e1      str     x1, [sp]
    // 78: 90000002      adrp    x2, 0x0 <ltmp0>
    // 0000000000000078:  ARM64_RELOC_PAGE21   l_.str
    // 7c: 91000042      add     x2, x2, #0x0
    // 000000000000007c:  ARM64_RELOC_PAGEOFF12        l_.str
    // 80: aa1603e0      mov     x0, x22
    // 84: aa0803e1      mov     x1, x8
    // 88: 94000000      bl      0x88 <ltmp0+0x88>
    // 0000000000000088:  ARM64_RELOC_BRANCH26 __PyErr_Format
    // 8c: f9402295      ldr     x21, [x20, #0x40]
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: f9400268      ldr     x8, [x19]
    // 98: 37f80088      tbnz    w8, #0x1f, 0xa8 <ltmp0+0xa8>
    // 9c: f1000508      subs    x8, x8, #0x1
    // a0: f9000268      str     x8, [x19]
    // a4: 540002e0      b.eq    0x100 <ltmp0+0x100>
    // a8: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // ac: 910083ff      add     sp, sp, #0x20
    // b0: 14000000      b       0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // b4: 94000000      bl      0xb4 <ltmp0+0xb4>
    // 00000000000000b4:  ARM64_RELOC_BRANCH26 _PyDict_SetItem
    // b8: f9402295      ldr     x21, [x20, #0x40]
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: f9400268      ldr     x8, [x19]
    // c4: 37f80088      tbnz    w8, #0x1f, 0xd4 <ltmp0+0xd4>
    // c8: f1000508      subs    x8, x8, #0x1
    // cc: f9000268      str     x8, [x19]
    // d0: 540000c0      b.eq    0xe8 <ltmp0+0xe8>
    // d4: 35fffea0      cbnz    w0, 0xa8 <ltmp0+0xa8>
    // d8: d10022b5      sub     x21, x21, #0x8
    // dc: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // e0: 910083ff      add     sp, sp, #0x20
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e8: aa0003f7      mov     x23, x0
    // ec: aa1303e0      mov     x0, x19
    // f0: 94000000      bl      0xf0 <ltmp0+0xf0>
    // 00000000000000f0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // f4: aa1703e0      mov     x0, x23
    // f8: 35fffd80      cbnz    w0, 0xa8 <ltmp0+0xa8>
    // fc: 17fffff7      b       0xd8 <ltmp0+0xd8>
    // 100: aa1303e0      mov     x0, x19
    // 104: 94000000      bl      0x104 <ltmp0+0x104>
    // 0000000000000104:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 108: a9417bfd      ldp     x29, x30, [sp, #0x10]
    // 10c: 910083ff      add     sp, sp, #0x20
    // 110: 14000000      b       0x110 <ltmp0+0x110>
    // 0000000000000110:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 114: 00 00 00 00
    const unsigned char code_body[280] = {
        0xff, 0x83, 0x00, 0xd1, 0xfd, 0x7b, 0x01, 0xa9,
        0xfd, 0x43, 0x00, 0x91, 0xb3, 0x82, 0x5f, 0xf8,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x11, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x01, 0x0d, 0x40, 0xf9,
        0x80, 0x16, 0x40, 0xf9, 0xc0, 0x01, 0x00, 0xb4,
        0x08, 0x04, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe2, 0x03, 0x13, 0xaa, 0x1f, 0x01, 0x09, 0xeb,
        0x60, 0x03, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x68, 0x03, 0xf8, 0x36,
        0x1d, 0x00, 0x00, 0x14, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x00, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xe0, 0x02, 0x00, 0x54,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0x54, 0xa0, 0xfe, 0xff, 0x35,
        0xb5, 0x22, 0x00, 0xd1, 0xfd, 0x7b, 0x41, 0xa9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0x80, 0xfd, 0xff, 0x35, 0xf7, 0xff, 0xff, 0x17,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0x41, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: &PyExc_SystemError+0x0
    // 28: &PyDict_Type+0x0
    // 30: OPARG
    const unsigned char data_body[56] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x28);
    patch_aarch64_trampoline(code + 0x4c, 0x55, state);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x20);
    patch_aarch64_21r(code + 0x78, (uintptr_t)data);
    patch_aarch64_12(code + 0x7c, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x88, 0x30, state);
    patch_aarch64_26r(code + 0xb0, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0xb4, 0x5a, state);
    patch_aarch64_26r(code + 0xe4, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xf0, 0x0, state);
    patch_aarch64_trampoline(code + 0x104, 0x0, state);
    patch_aarch64_26r(code + 0x110, state->instruction_starts[instruction->error_target]);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SLICE.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // c: a97e4eb7      ldp     x23, x19, [x21, #-0x20]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __PyBuildSlice_ConsumeRefs
    // 18: aa0003f8      mov     x24, x0
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b40002a0      cbz     x0, 0x78 <ltmp0+0x78>
    // 28: d10042a8      sub     x8, x21, #0x10
    // 2c: f9002288      str     x8, [x20, #0x40]
    // 30: aa1303e0      mov     x0, x19
    // 34: aa1803e1      mov     x1, x24
    // 38: aa1703e2      mov     x2, x23
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 _PyObject_SetItem
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: f9400308      ldr     x8, [x24]
    // 4c: 37f80108      tbnz    w8, #0x1f, 0x6c <ltmp0+0x6c>
    // 50: f1000508      subs    x8, x8, #0x1
    // 54: f9000308      str     x8, [x24]
    // 58: 540000a1      b.ne    0x6c <ltmp0+0x6c>
    // 5c: aa0003f9      mov     x25, x0
    // 60: aa1803e0      mov     x0, x24
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: aa1903e0      mov     x0, x25
    // 6c: 910042b5      add     x21, x21, #0x10
    // 70: 7100001f      cmp     w0, #0x0
    // 74: 1a9f17f8      cset    w24, eq
    // 78: f94002e8      ldr     x8, [x23]
    // 7c: 37f80088      tbnz    w8, #0x1f, 0x8c <ltmp0+0x8c>
    // 80: f1000508      subs    x8, x8, #0x1
    // 84: f90002e8      str     x8, [x23]
    // 88: 54000120      b.eq    0xac <ltmp0+0xac>
    // 8c: f9400268      ldr     x8, [x19]
    // 90: 37f80168      tbnz    w8, #0x1f, 0xbc <ltmp0+0xbc>
    // 94: f1000508      subs    x8, x8, #0x1
    // 98: f9000268      str     x8, [x19]
    // 9c: 54000101      b.ne    0xbc <ltmp0+0xbc>
    // a0: aa1303e0      mov     x0, x19
    // a4: 94000000      bl      0xa4 <ltmp0+0xa4>
    // 00000000000000a4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // a8: 14000005      b       0xbc <ltmp0+0xbc>
    // ac: aa1703e0      mov     x0, x23
    // b0: 94000000      bl      0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b4: f9400268      ldr     x8, [x19]
    // b8: 36fffee8      tbz     w8, #0x1f, 0x94 <ltmp0+0x94>
    // bc: 36000098      tbz     w24, #0x0, 0xcc <ltmp0+0xcc>
    // c0: d10082b5      sub     x21, x21, #0x20
    // c4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c8: 14000000      b       0xc8 <ltmp0+0xc8>
    // 00000000000000c8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // cc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // d0: 14000000      b       0xd0 <ltmp0+0xd0>
    // 00000000000000d0:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xa0, 0x06, 0x7f, 0xa9, 0xb7, 0x4e, 0x7e, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x94,
        0xf8, 0x03, 0x00, 0xaa, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x02, 0x00, 0xb4,
        0xa8, 0x42, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0xe2, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x08, 0x03, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x03, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xf9, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x19, 0xaa, 0xb5, 0x42, 0x00, 0x91,
        0x1f, 0x00, 0x00, 0x71, 0xf8, 0x17, 0x9f, 0x1a,
        0xe8, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0x98, 0x00, 0x00, 0x36,
        0xb5, 0x82, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0xa, state);
    patch_aarch64_trampoline(code + 0x3c, 0x55, state);
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_trampoline(code + 0xa4, 0x0, state);
    patch_aarch64_trampoline(code + 0xb0, 0x0, state);
    patch_aarch64_26r(code + 0xc8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xd0, state->instruction_starts[instruction->error_target]);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // c: f85e82b9      ldur    x25, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1303e1      mov     x1, x19
    // 1c: aa1903e2      mov     x2, x25
    // 20: 94000000      bl      0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 _PyObject_SetItem
    // 24: aa0003f7      mov     x23, x0
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: f9400328      ldr     x8, [x25]
    // 34: 37f80088      tbnz    w8, #0x1f, 0x44 <ltmp0+0x44>
    // 38: f1000508      subs    x8, x8, #0x1
    // 3c: f9000328      str     x8, [x25]
    // 40: 54000120      b.eq    0x64 <ltmp0+0x64>
    // 44: f9400308      ldr     x8, [x24]
    // 48: 37f80168      tbnz    w8, #0x1f, 0x74 <ltmp0+0x74>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f9000308      str     x8, [x24]
    // 54: 54000101      b.ne    0x74 <ltmp0+0x74>
    // 58: aa1803e0      mov     x0, x24
    // 5c: 94000000      bl      0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 60: 14000005      b       0x74 <ltmp0+0x74>
    // 64: aa1903e0      mov     x0, x25
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 6c: f9400308      ldr     x8, [x24]
    // 70: 36fffee8      tbz     w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 74: f9400268      ldr     x8, [x19]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <ltmp0+0x88>
    // 7c: f1000508      subs    x8, x8, #0x1
    // 80: f9000268      str     x8, [x19]
    // 84: 54000080      b.eq    0x94 <ltmp0+0x94>
    // 88: 340000d7      cbz     w23, 0xa0 <ltmp0+0xa0>
    // 8c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 90: 14000000      b       0x90 <ltmp0+0x90>
    // 0000000000000090:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 94: aa1303e0      mov     x0, x19
    // 98: 94000000      bl      0x98 <ltmp0+0x98>
    // 0000000000000098:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 9c: 35ffff97      cbnz    w23, 0x8c <ltmp0+0x8c>
    // a0: d10062b5      sub     x21, x21, #0x18
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb8, 0x4e, 0x7f, 0xa9, 0xb9, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x19, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xf7, 0x03, 0x00, 0xaa,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x03, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x28, 0x03, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0x54, 0x08, 0x03, 0x40, 0xf9,
        0x68, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x03, 0x00, 0xf9, 0x01, 0x01, 0x00, 0x54,
        0xe0, 0x03, 0x18, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x05, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x19, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x08, 0x03, 0x40, 0xf9,
        0xe8, 0xfe, 0xff, 0x36, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x80, 0x00, 0x00, 0x54,
        0xd7, 0x00, 0x00, 0x34, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x97, 0xff, 0xff, 0x35,
        0xb5, 0x62, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x20, 0x55, state);
    patch_aarch64_trampoline(code + 0x5c, 0x0, state);
    patch_aarch64_trampoline(code + 0x68, 0x0, state);
    patch_aarch64_26r(code + 0x90, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x98, 0x0, state);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_DICT.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f02b3      ldur    x19, [x21, #-0x10]
    // 4: f9400668      ldr     x8, [x19, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyDict_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyDict_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 20: 910003fd      mov     x29, sp
    // 24: f85e82a2      ldur    x2, [x21, #-0x18]
    // 28: f85f82a1      ldur    x1, [x21, #-0x8]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: aa1303e0      mov     x0, x19
    // 34: 94000000      bl      0x34 <ltmp0+0x34>
    // 0000000000000034:  ARM64_RELOC_BRANCH26 __PyDict_SetItem_Take2
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: f9400268      ldr     x8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <ltmp0+0x54>
    // 48: f1000508      subs    x8, x8, #0x1
    // 4c: f9000268      str     x8, [x19]
    // 50: 54000080      b.eq    0x60 <ltmp0+0x60>
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 34000100      cbz     w0, 0x78 <ltmp0+0x78>
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 60: aa0003f7      mov     x23, x0
    // 64: aa1303e0      mov     x0, x19
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 6c: aa1703e0      mov     x0, x23
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 35ffff40      cbnz    w0, 0x5c <ltmp0+0x5c>
    // 78: d10062b5      sub     x21, x21, #0x18
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[128] = {
        0xb3, 0x02, 0x5f, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0xa2, 0x82, 0x5e, 0xf8,
        0xa1, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x80, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x01, 0x00, 0x34, 0x00, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x17, 0xaa,
        0xfd, 0x7b, 0xc1, 0xa8, 0x40, 0xff, 0xff, 0x35,
        0xb5, 0x62, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyDict_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x34, 0x50, state);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
    patch_aarch64_trampoline(code + 0x68, 0x0, state);
    patch_aarch64_26r(code + 0x7c, (uintptr_t)code + sizeof(code_body));
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_LIST_INT.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e8ea9      ldr     x9, [x21, #-0x18]!
    // 8: f9400ab7      ldr     x23, [x21, #0x10]
    // c: f94006ea      ldr     x10, [x23, #0x8]
    // 10: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // 14: f940016b      ldr     x11, [x11]
    // 0000000000000014:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 18: eb0b015f      cmp     x10, x11
    // 1c: 54000621      b.ne    0xe0 <ltmp0+0xe0>
    // 20: f94006b3      ldr     x19, [x21, #0x8]
    // 24: f940066a      ldr     x10, [x19, #0x8]
    // 28: 9000000b      adrp    x11, 0x0 <ltmp0>
    // 0000000000000028:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyList_Type
    // 2c: f940016b      ldr     x11, [x11]
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyList_Type
    // 30: eb0b015f      cmp     x10, x11
    // 34: 54000561      b.ne    0xe0 <ltmp0+0xe0>
    // 38: f9400aea      ldr     x10, [x23, #0x10]
    // 3c: f100255f      cmp     x10, #0x9
    // 40: 54000502      b.hs    0xe0 <ltmp0+0xe0>
    // 44: b9401aea      ldr     w10, [x23, #0x18]
    // 48: f9400a6b      ldr     x11, [x19, #0x10]
    // 4c: eb0a017f      cmp     x11, x10
    // 50: 5400048d      b.le    0xe0 <ltmp0+0xe0>
    // 54: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 58: 910003fd      mov     x29, sp
    // 5c: f9400e68      ldr     x8, [x19, #0x18]
    // 60: f86a7900      ldr     x0, [x8, x10, lsl #3]
    // 64: f82a7909      str     x9, [x8, x10, lsl #3]
    // 68: f9400008      ldr     x8, [x0]
    // 6c: 37f800a8      tbnz    w8, #0x1f, 0x80 <ltmp0+0x80>
    // 70: f1000508      subs    x8, x8, #0x1
    // 74: f9000008      str     x8, [x0]
    // 78: 54000041      b.ne    0x80 <ltmp0+0x80>
    // 7c: 94000000      bl      0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 80: f94002e8      ldr     x8, [x23]
    // 84: 37f801c8      tbnz    w8, #0x1f, 0xbc <ltmp0+0xbc>
    // 88: f1000508      subs    x8, x8, #0x1
    // 8c: f90002e8      str     x8, [x23]
    // 90: 54000161      b.ne    0xbc <ltmp0+0xbc>
    // 94: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000094:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 98: f9400129      ldr     x9, [x9]
    // 0000000000000098:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 9c: f952fd28      ldr     x8, [x9, #0x25f8]
    // a0: b40000a8      cbz     x8, 0xb4 <ltmp0+0xb4>
    // a4: f9530122      ldr     x2, [x9, #0x2600]
    // a8: aa1703e0      mov     x0, x23
    // ac: 52800021      mov     w1, #0x1                ; =1
    // b0: d63f0100      blr     x8
    // b4: aa1703e0      mov     x0, x23
    // b8: 94000000      bl      0xb8 <ltmp0+0xb8>
    // 00000000000000b8:  ARM64_RELOC_BRANCH26 _PyObject_Free
    // bc: f9400268      ldr     x8, [x19]
    // c0: 37f800c8      tbnz    w8, #0x1f, 0xd8 <ltmp0+0xd8>
    // c4: f1000508      subs    x8, x8, #0x1
    // c8: f9000268      str     x8, [x19]
    // cc: 54000061      b.ne    0xd8 <ltmp0+0xd8>
    // d0: aa1303e0      mov     x0, x19
    // d4: 94000000      bl      0xd4 <ltmp0+0xd4>
    // 00000000000000d4:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // d8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // dc: 14000000      b       0xdc <ltmp0+0xdc>
    // 00000000000000dc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // e0: aa0803f5      mov     x21, x8
    // e4: 14000000      b       0xe4 <ltmp0+0xe4>
    // 00000000000000e4:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    const unsigned char code_body[232] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5e, 0xf8,
        0xb7, 0x0a, 0x40, 0xf9, 0xea, 0x06, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x5f, 0x01, 0x0b, 0xeb, 0x21, 0x06, 0x00, 0x54,
        0xb3, 0x06, 0x40, 0xf9, 0x6a, 0x06, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6b, 0x01, 0x40, 0xf9,
        0x5f, 0x01, 0x0b, 0xeb, 0x61, 0x05, 0x00, 0x54,
        0xea, 0x0a, 0x40, 0xf9, 0x5f, 0x25, 0x00, 0xf1,
        0x02, 0x05, 0x00, 0x54, 0xea, 0x1a, 0x40, 0xb9,
        0x6b, 0x0a, 0x40, 0xf9, 0x7f, 0x01, 0x0a, 0xeb,
        0x8d, 0x04, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x68, 0x0e, 0x40, 0xf9,
        0x00, 0x79, 0x6a, 0xf8, 0x09, 0x79, 0x2a, 0xf8,
        0x08, 0x00, 0x40, 0xf9, 0xa8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0x41, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94,
        0xe8, 0x02, 0x40, 0xf9, 0xc8, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0xe8, 0x02, 0x00, 0xf9,
        0x61, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0xfd, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x01, 0x53, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x68, 0x02, 0x40, 0xf9,
        0xc8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0x61, 0x00, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_PyRuntime+0x0
    // 8: &PyList_Type+0x0
    // 10: &PyLong_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_trampoline(code + 0x7c, 0x0, state);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0xb8, 0x2, state);
    patch_aarch64_trampoline(code + 0xd4, 0x0, state);
    patch_aarch64_26r(code + 0xdc, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xe4, state->instruction_starts[instruction->jump_target]);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SWAP.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000000:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 8: f85f82a9      ldur    x9, [x21, #-0x8]
    // c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 10: f940010a      ldr     x10, [x8]
    // 14: f9000109      str     x9, [x8]
    // 18: f81f82aa      stur    x10, [x21, #-0x8]
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x82, 0x5f, 0xf8, 0xa8, 0x2e, 0x28, 0xcb,
        0x0a, 0x01, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xf9,
        0xaa, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TIER2_RESUME_CHECK.o:     file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f2401d1f      tst     x8, #0xff
    // 8: 54000040      b.eq    0x10 <ltmp0+0x10>
    // c: 14000000      b       0xc <ltmp0+0xc>
    // 000000000000000c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 10: 14000000      b       0x10 <ltmp0+0x10>
    // 0000000000000010:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 14: 00 00 00 00
    const unsigned char code_body[24] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_26r(code + 0xc, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x10, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1303e0      mov     x0, x19
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 _PyObject_IsTrue
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: f9400268      ldr     x8, [x19]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <ltmp0+0x34>
    // 28: f1000508      subs    x8, x8, #0x1
    // 2c: f9000268      str     x8, [x19]
    // 30: 54000160      b.eq    0x5c <ltmp0+0x5c>
    // 34: 37f801e0      tbnz    w0, #0x1f, 0x70 <ltmp0+0x70>
    // 38: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 40: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000040:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 48: 7100001f      cmp     w0, #0x0
    // 4c: 9a880128      csel    x8, x9, x8, eq
    // 50: f81f82a8      stur    x8, [x21, #-0x8]
    // 54: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 58: 14000000      b       0x58 <ltmp0+0x58>
    // 0000000000000058:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 5c: aa0003f7      mov     x23, x0
    // 60: aa1303e0      mov     x0, x19
    // 64: 94000000      bl      0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 68: aa1703e0      mov     x0, x23
    // 6c: 36fffe60      tbz     w0, #0x1f, 0x38 <ltmp0+0x38>
    // 70: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 74: 14000000      b       0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[120] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0x60, 0x01, 0x00, 0x54, 0xe0, 0x01, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x00, 0x00, 0x71, 0x28, 0x01, 0x88, 0x9a,
        0xa8, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x60, 0xfe, 0xff, 0x36,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0x22, state);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_26r(code + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x64, 0x0, state);
    patch_aarch64_26r(code + 0x74, state->instruction_starts[instruction->error_target]);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_BOOL.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400508      ldr     x8, [x8, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyBool_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyBool_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 14000000      b       0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[32] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &PyBool_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0x1c, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_INT.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400408      ldr     x8, [x0, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyLong_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: f9400808      ldr     x8, [x0, #0x10]
    // 20: 92400508      and     x8, x8, #0x3
    // 24: f100051f      cmp     x8, #0x1
    // 28: 540000a1      b.ne    0x3c <ltmp0+0x3c>
    // 2c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000002c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 34: f81f82a8      stur    x8, [x21, #-0x8]
    // 38: 14000000      b       0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 3c: f9400008      ldr     x8, [x0]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000008      str     x8, [x0]
    // 4c: 540000a0      b.eq    0x60 <ltmp0+0x60>
    // 50: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 58: f81f82a8      stur    x8, [x21, #-0x8]
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 60: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 64: 910003fd      mov     x29, sp
    // 68: 94000000      bl      0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 6c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000006c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 74: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 78: f81f82a8      stur    x8, [x21, #-0x8]
    // 7c: 14000000      b       0x7c <ltmp0+0x7c>
    // 000000000000007c:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[128] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x08, 0x40, 0xf9,
        0x08, 0x05, 0x40, 0x92, 0x1f, 0x05, 0x00, 0xf1,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &PyLong_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&PyLong_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data);
    patch_aarch64_26r(code + 0x5c, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x68, 0x0, state);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x7c, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_LIST.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400408      ldr     x8, [x0, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyList_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyList_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: f9400813      ldr     x19, [x0, #0x10]
    // 20: f9400008      ldr     x8, [x0]
    // 24: 37f80108      tbnz    w8, #0x1f, 0x44 <ltmp0+0x44>
    // 28: f1000508      subs    x8, x8, #0x1
    // 2c: f9000008      str     x8, [x0]
    // 30: 540000a1      b.ne    0x44 <ltmp0+0x44>
    // 34: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 38: 910003fd      mov     x29, sp
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 40: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 44: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000044:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 4c: 90000009      adrp    x9, 0x0 <ltmp0>
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 54: f100027f      cmp     x19, #0x0
    // 58: 9a880128      csel    x8, x9, x8, eq
    // 5c: f81f82a8      stur    x8, [x21, #-0x8]
    // 60: 14000000      b       0x60 <ltmp0+0x60>
    // 0000000000000060:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x13, 0x08, 0x40, 0xf9,
        0x08, 0x00, 0x40, 0xf9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa1, 0x00, 0x00, 0x54, 0xfd, 0x7b, 0xbf, 0xa9,
        0xfd, 0x03, 0x00, 0x91, 0x00, 0x00, 0x00, 0x94,
        0xfd, 0x7b, 0xc1, 0xa8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x7f, 0x02, 0x00, 0xf1,
        0x28, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: &PyList_Type+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&PyList_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x3c, 0x0, state);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_26r(code + 0x60, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_NONE.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000040      b.eq    0x18 <ltmp0+0x18>
    // 14: 14000000      b       0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 18: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000018:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 20: f81f82a8      stur    x8, [x21, #-0x8]
    // 24: 14000000      b       0x24 <ltmp0+0x24>
    // 0000000000000024:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x40, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_NoneStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x14, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_26r(code + 0x24, (uintptr_t)code + sizeof(code_body));
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_STR.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400408      ldr     x8, [x0, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyUnicode_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyUnicode_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000040      b.eq    0x1c <ltmp0+0x1c>
    // 18: 14000000      b       0x18 <ltmp0+0x18>
    // 0000000000000018:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 1c: 90000008      adrp    x8, 0x0 <ltmp0>
    // 000000000000001c:  ARM64_RELOC_GOT_LOAD_PAGE21  __PyRuntime
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __PyRuntime
    // 24: 5290f309      mov     w9, #0x8798             ; =34712
    // 28: 8b090108      add     x8, x8, x9
    // 2c: eb08001f      cmp     x0, x8
    // 30: 54000140      b.eq    0x58 <ltmp0+0x58>
    // 34: f9400008      ldr     x8, [x0]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <ltmp0+0x48>
    // 3c: f1000508      subs    x8, x8, #0x1
    // 40: f9000008      str     x8, [x0]
    // 44: 54000120      b.eq    0x68 <ltmp0+0x68>
    // 48: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 50: f81f82a8      stur    x8, [x21, #-0x8]
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 58: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000058:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // 60: f81f82a8      stur    x8, [x21, #-0x8]
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 6c: 910003fd      mov     x29, sp
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000074:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: f81f82a8      stur    x8, [x21, #-0x8]
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[136] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x40, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0xf3, 0x90, 0x52,
        0x08, 0x01, 0x09, 0x8b, 0x1f, 0x00, 0x08, 0xeb,
        0x40, 0x01, 0x00, 0x54, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0x20, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xfd, 0x7b, 0xc1, 0xa8,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyUnicode_Type+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyUnicode_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data + 0x18);
    patch_aarch64_26r(code + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data);
    patch_aarch64_26r(code + 0x84, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_INVERT.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1303e0      mov     x0, x19
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 _PyNumber_Invert
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: f9400268      ldr     x8, [x19]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <ltmp0+0x34>
    // 28: f1000508      subs    x8, x8, #0x1
    // 2c: f9000268      str     x8, [x19]
    // 30: 540000a0      b.eq    0x44 <ltmp0+0x44>
    // 34: b4000120      cbz     x0, 0x58 <ltmp0+0x58>
    // 38: f81f82a0      stur    x0, [x21, #-0x8]
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: aa0003f7      mov     x23, x0
    // 48: aa1303e0      mov     x0, x19
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 50: aa1703e0      mov     x0, x23
    // 54: b5ffff37      cbnz    x23, 0x38 <ltmp0+0x38>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[96] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x37, 0xff, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0x5b, state);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x4c, 0x0, state);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NEGATIVE.o: file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: f85f82b3      ldur    x19, [x21, #-0x8]
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1303e0      mov     x0, x19
    // 14: 94000000      bl      0x14 <ltmp0+0x14>
    // 0000000000000014:  ARM64_RELOC_BRANCH26 _PyNumber_Negative
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: f9400268      ldr     x8, [x19]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <ltmp0+0x34>
    // 28: f1000508      subs    x8, x8, #0x1
    // 2c: f9000268      str     x8, [x19]
    // 30: 540000a0      b.eq    0x44 <ltmp0+0x44>
    // 34: b4000120      cbz     x0, 0x58 <ltmp0+0x58>
    // 38: f81f82a0      stur    x0, [x21, #-0x8]
    // 3c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 40: 14000000      b       0x40 <ltmp0+0x40>
    // 0000000000000040:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 44: aa0003f7      mov     x23, x0
    // 48: aa1303e0      mov     x0, x19
    // 4c: 94000000      bl      0x4c <ltmp0+0x4c>
    // 000000000000004c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 50: aa1703e0      mov     x0, x23
    // 54: b5ffff37      cbnz    x23, 0x38 <ltmp0+0x38>
    // 58: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 5c: 14000000      b       0x5c <ltmp0+0x5c>
    // 000000000000005c:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[96] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x68, 0x02, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0x20, 0x01, 0x00, 0xb4,
        0xa0, 0x82, 0x1f, 0xf8, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x17, 0xaa, 0x37, 0xff, 0xff, 0xb5,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x14, 0x5c, state);
    patch_aarch64_26r(code + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x4c, 0x0, state);
    patch_aarch64_26r(code + 0x5c, state->instruction_starts[instruction->error_target]);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NOT.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_FalseStruct
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_FalseStruct
    // c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_TrueStruct
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_TrueStruct
    // 14: eb09011f      cmp     x8, x9
    // 18: 9a890148      csel    x8, x10, x9, eq
    // 1c: f81f82a8      stur    x8, [x21, #-0x8]
    // 20: 14000000      b       0x20 <ltmp0+0x20>
    // 0000000000000020:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x48, 0x01, 0x89, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_26r(code + 0x20, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_EX.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: f85f82b7      ldur    x23, [x21, #-0x8]
    // 14: 12001d13      and     w19, w8, #0xff
    // 18: 8b334ea9      add     x9, x21, w19, uxtw #3
    // 1c: 53083d18      ubfx    w24, w8, #8, #8
    // 20: 8b384d24      add     x4, x9, w24, uxtw #3
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: aa1603e0      mov     x0, x22
    // 2c: aa1703e1      mov     x1, x23
    // 30: aa1303e2      mov     x2, x19
    // 34: aa1803e3      mov     x3, x24
    // 38: 94000000      bl      0x38 <ltmp0+0x38>
    // 0000000000000038:  ARM64_RELOC_BRANCH26 __PyEval_UnpackIterableStackRef
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: f94002e8      ldr     x8, [x23]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <ltmp0+0x58>
    // 4c: f1000508      subs    x8, x8, #0x1
    // 50: f90002e8      str     x8, [x23]
    // 54: 540000c0      b.eq    0x6c <ltmp0+0x6c>
    // 58: 34000140      cbz     w0, 0x80 <ltmp0+0x80>
    // 5c: 0b180268      add     w8, w19, w24
    // 60: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 64: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 6c: aa0003f9      mov     x25, x0
    // 70: aa1703e0      mov     x0, x23
    // 74: 94000000      bl      0x74 <ltmp0+0x74>
    // 0000000000000074:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 78: aa1903e0      mov     x0, x25
    // 7c: 35ffff00      cbnz    w0, 0x5c <ltmp0+0x5c>
    // 80: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb7, 0x82, 0x5f, 0xf8, 0x13, 0x1d, 0x00, 0x12,
        0xa9, 0x4e, 0x33, 0x8b, 0x18, 0x3d, 0x08, 0x53,
        0x24, 0x4d, 0x38, 0x8b, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x17, 0xaa,
        0xe2, 0x03, 0x13, 0xaa, 0xe3, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0xe8, 0x02, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0x54,
        0x40, 0x01, 0x00, 0x34, 0x68, 0x02, 0x18, 0x0b,
        0xb5, 0x4e, 0x28, 0x8b, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0xf9, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x19, 0xaa, 0x00, 0xff, 0xff, 0x35,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x38, 0x5d, state);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x74, 0x0, state);
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->error_target]);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE.o:        file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: 910003fd      mov     x29, sp
    // 8: 90000017      adrp    x23, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // c: f94002f7      ldr     x23, [x23]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 10: aa1503e8      mov     x8, x21
    // 14: f85f8d13      ldr     x19, [x8, #-0x8]!
    // 18: 8b372d04      add     x4, x8, w23, uxth #3
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 12003ee2      and     w2, w23, #0xffff
    // 24: aa1603e0      mov     x0, x22
    // 28: aa1303e1      mov     x1, x19
    // 2c: 12800003      mov     w3, #-0x1               ; =-1
    // 30: 94000000      bl      0x30 <ltmp0+0x30>
    // 0000000000000030:  ARM64_RELOC_BRANCH26 __PyEval_UnpackIterableStackRef
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: f9400268      ldr     x8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 44: f1000508      subs    x8, x8, #0x1
    // 48: f9000268      str     x8, [x19]
    // 4c: 540000e0      b.eq    0x68 <ltmp0+0x68>
    // 50: 34000160      cbz     w0, 0x7c <ltmp0+0x7c>
    // 54: 92403ee8      and     x8, x23, #0xffff
    // 58: 8b080ea8      add     x8, x21, x8, lsl #3
    // 5c: d1002115      sub     x21, x8, #0x8
    // 60: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 64: 14000000      b       0x64 <ltmp0+0x64>
    // 0000000000000064:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 68: aa0003f8      mov     x24, x0
    // 6c: aa1303e0      mov     x0, x19
    // 70: 94000000      bl      0x70 <ltmp0+0x70>
    // 0000000000000070:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 74: aa1803e0      mov     x0, x24
    // 78: 35fffee0      cbnz    w0, 0x54 <ltmp0+0x54>
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: 14000000      b       0x80 <ltmp0+0x80>
    // 0000000000000080:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x17, 0x00, 0x00, 0x90, 0xf7, 0x02, 0x40, 0xf9,
        0xe8, 0x03, 0x15, 0xaa, 0x13, 0x8d, 0x5f, 0xf8,
        0x04, 0x2d, 0x37, 0x8b, 0x95, 0x22, 0x00, 0xf9,
        0xe2, 0x3e, 0x00, 0x12, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x03, 0x00, 0x80, 0x12,
        0x00, 0x00, 0x00, 0x94, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x68, 0x02, 0x00, 0xf9, 0xe0, 0x00, 0x00, 0x54,
        0x60, 0x01, 0x00, 0x34, 0xe8, 0x3e, 0x40, 0x92,
        0xa8, 0x0e, 0x08, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0xf8, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x18, 0xaa,
        0xe0, 0xfe, 0xff, 0x35, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x30, 0x5d, state);
    patch_aarch64_26r(code + 0x64, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0x70, 0x0, state);
    patch_aarch64_26r(code + 0x80, state->instruction_starts[instruction->error_target]);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_LIST.o:   file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8d00      ldr     x0, [x8, #-0x8]!
    // 8: f9400409      ldr     x9, [x0, #0x8]
    // c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyList_Type
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyList_Type
    // 14: eb0a013f      cmp     x9, x10
    // 18: 54000381      b.ne    0x88 <ltmp0+0x88>
    // 1c: f9400813      ldr     x19, [x0, #0x10]
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 28: eb29227f      cmp     x19, w9, uxth
    // 2c: 540002e1      b.ne    0x88 <ltmp0+0x88>
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 910003fd      mov     x29, sp
    // 38: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 40: 72003d3f      tst     w9, #0xffff
    // 44: 54000240      b.eq    0x8c <ltmp0+0x8c>
    // 48: f9400c0a      ldr     x10, [x0, #0x18]
    // 4c: 91000669      add     x9, x19, #0x1
    // 50: 8b130d4a      add     x10, x10, x19, lsl #3
    // 54: d100214a      sub     x10, x10, #0x8
    // 58: 14000006      b       0x70 <ltmp0+0x70>
    // 5c: f800850b      str     x11, [x8], #0x8
    // 60: d1000529      sub     x9, x9, #0x1
    // 64: d100214a      sub     x10, x10, #0x8
    // 68: f100053f      cmp     x9, #0x1
    // 6c: 54000109      b.ls    0x8c <ltmp0+0x8c>
    // 70: f940014b      ldr     x11, [x10]
    // 74: b940016c      ldr     w12, [x11]
    // 78: 37ffff2c      tbnz    w12, #0x1f, 0x5c <ltmp0+0x5c>
    // 7c: 1100058c      add     w12, w12, #0x1
    // 80: b900016c      str     w12, [x11]
    // 84: 17fffff6      b       0x5c <ltmp0+0x5c>
    // 88: 14000000      b       0x88 <ltmp0+0x88>
    // 0000000000000088:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 8c: f9400008      ldr     x8, [x0]
    // 90: 37f80088      tbnz    w8, #0x1f, 0xa0 <ltmp0+0xa0>
    // 94: f1000508      subs    x8, x8, #0x1
    // 98: f9000008      str     x8, [x0]
    // 9c: 540000a0      b.eq    0xb0 <ltmp0+0xb0>
    // a0: 8b130ea8      add     x8, x21, x19, lsl #3
    // a4: d1002115      sub     x21, x8, #0x8
    // a8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // b0: 94000000      bl      0xb0 <ltmp0+0xb0>
    // 00000000000000b0:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b4: 8b130ea8      add     x8, x21, x19, lsl #3
    // b8: d1002115      sub     x21, x8, #0x8
    // bc: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // c0: 14000000      b       0xc0 <ltmp0+0xc0>
    // 00000000000000c0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xe8, 0x03, 0x15, 0xaa, 0x00, 0x8d, 0x5f, 0xf8,
        0x09, 0x04, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0x81, 0x03, 0x00, 0x54, 0x13, 0x08, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x7f, 0x22, 0x29, 0xeb, 0xe1, 0x02, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x0a, 0x0c, 0x40, 0xf9, 0x69, 0x06, 0x00, 0x91,
        0x4a, 0x0d, 0x13, 0x8b, 0x4a, 0x21, 0x00, 0xd1,
        0x06, 0x00, 0x00, 0x14, 0x0b, 0x85, 0x00, 0xf8,
        0x29, 0x05, 0x00, 0xd1, 0x4a, 0x21, 0x00, 0xd1,
        0x3f, 0x05, 0x00, 0xf1, 0x09, 0x01, 0x00, 0x54,
        0x4b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0x2c, 0xff, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf6, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0xa8, 0x0e, 0x13, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x94, 0xa8, 0x0e, 0x13, 0x8b,
        0x15, 0x21, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyList_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_26r(code + 0x88, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xac, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xb0, 0x0, state);
    patch_aarch64_26r(code + 0xc0, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TUPLE.o:  file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8d00      ldr     x0, [x8, #-0x8]!
    // 8: f9400409      ldr     x9, [x0, #0x8]
    // c: 9000000a      adrp    x10, 0x0 <ltmp0>
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTuple_Type
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTuple_Type
    // 14: eb0a013f      cmp     x9, x10
    // 18: 54000361      b.ne    0x84 <ltmp0+0x84>
    // 1c: f9400813      ldr     x19, [x0, #0x10]
    // 20: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000020:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 28: eb29227f      cmp     x19, w9, uxth
    // 2c: 540002c1      b.ne    0x84 <ltmp0+0x84>
    // 30: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 34: 910003fd      mov     x29, sp
    // 38: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000038:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // 40: 72003d3f      tst     w9, #0xffff
    // 44: 54000220      b.eq    0x88 <ltmp0+0x88>
    // 48: 91000669      add     x9, x19, #0x1
    // 4c: 8b130c0a      add     x10, x0, x19, lsl #3
    // 50: 9100414a      add     x10, x10, #0x10
    // 54: 14000006      b       0x6c <ltmp0+0x6c>
    // 58: f800850b      str     x11, [x8], #0x8
    // 5c: d1000529      sub     x9, x9, #0x1
    // 60: d100214a      sub     x10, x10, #0x8
    // 64: f100053f      cmp     x9, #0x1
    // 68: 54000109      b.ls    0x88 <ltmp0+0x88>
    // 6c: f940014b      ldr     x11, [x10]
    // 70: b940016c      ldr     w12, [x11]
    // 74: 37ffff2c      tbnz    w12, #0x1f, 0x58 <ltmp0+0x58>
    // 78: 1100058c      add     w12, w12, #0x1
    // 7c: b900016c      str     w12, [x11]
    // 80: 17fffff6      b       0x58 <ltmp0+0x58>
    // 84: 14000000      b       0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 88: f9400008      ldr     x8, [x0]
    // 8c: 37f80088      tbnz    w8, #0x1f, 0x9c <ltmp0+0x9c>
    // 90: f1000508      subs    x8, x8, #0x1
    // 94: f9000008      str     x8, [x0]
    // 98: 540000a0      b.eq    0xac <ltmp0+0xac>
    // 9c: 8b130ea8      add     x8, x21, x19, lsl #3
    // a0: d1002115      sub     x21, x8, #0x8
    // a4: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // a8: 14000000      b       0xa8 <ltmp0+0xa8>
    // 00000000000000a8:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // ac: 94000000      bl      0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // b0: 8b130ea8      add     x8, x21, x19, lsl #3
    // b4: d1002115      sub     x21, x8, #0x8
    // b8: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // bc: 14000000      b       0xbc <ltmp0+0xbc>
    // 00000000000000bc:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[192] = {
        0xe8, 0x03, 0x15, 0xaa, 0x00, 0x8d, 0x5f, 0xf8,
        0x09, 0x04, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0x61, 0x03, 0x00, 0x54, 0x13, 0x08, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x7f, 0x22, 0x29, 0xeb, 0xc1, 0x02, 0x00, 0x54,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0x20, 0x02, 0x00, 0x54,
        0x69, 0x06, 0x00, 0x91, 0x0a, 0x0c, 0x13, 0x8b,
        0x4a, 0x41, 0x00, 0x91, 0x06, 0x00, 0x00, 0x14,
        0x0b, 0x85, 0x00, 0xf8, 0x29, 0x05, 0x00, 0xd1,
        0x4a, 0x21, 0x00, 0xd1, 0x3f, 0x05, 0x00, 0xf1,
        0x09, 0x01, 0x00, 0x54, 0x4b, 0x01, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x2c, 0xff, 0xff, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xf6, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x40, 0xf9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0xf1, 0x08, 0x00, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x54, 0xa8, 0x0e, 0x13, 0x8b,
        0x15, 0x21, 0x00, 0xd1, 0xfd, 0x7b, 0xc1, 0xa8,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x94,
        0xa8, 0x0e, 0x13, 0x8b, 0x15, 0x21, 0x00, 0xd1,
        0xfd, 0x7b, 0xc1, 0xa8, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    // 8: &PyTuple_Type+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_26r(code + 0x84, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_26r(code + 0xa8, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_trampoline(code + 0xac, 0x0, state);
    patch_aarch64_26r(code + 0xbc, (uintptr_t)code + sizeof(code_body));
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f82a0      ldur    x0, [x21, #-0x8]
    // 4: f9400408      ldr     x8, [x0, #0x8]
    // 8: 90000009      adrp    x9, 0x0 <ltmp0>
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGE21  _PyTuple_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       _PyTuple_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 540002c1      b.ne    0x6c <ltmp0+0x6c>
    // 18: f9400808      ldr     x8, [x0, #0x10]
    // 1c: f100091f      cmp     x8, #0x2
    // 20: 54000261      b.ne    0x6c <ltmp0+0x6c>
    // 24: f9400c13      ldr     x19, [x0, #0x18]
    // 28: b9400268      ldr     w8, [x19]
    // 2c: 37f80068      tbnz    w8, #0x1f, 0x38 <ltmp0+0x38>
    // 30: 11000508      add     w8, w8, #0x1
    // 34: b9000268      str     w8, [x19]
    // 38: f9401017      ldr     x23, [x0, #0x20]
    // 3c: b94002e8      ldr     w8, [x23]
    // 40: 37f80068      tbnz    w8, #0x1f, 0x4c <ltmp0+0x4c>
    // 44: 11000508      add     w8, w8, #0x1
    // 48: b90002e8      str     w8, [x23]
    // 4c: f9400008      ldr     x8, [x0]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <ltmp0+0x60>
    // 54: f1000508      subs    x8, x8, #0x1
    // 58: f9000008      str     x8, [x0]
    // 5c: 540000a0      b.eq    0x70 <ltmp0+0x70>
    // 60: a93fceb7      stp     x23, x19, [x21, #-0x8]
    // 64: 910022b5      add     x21, x21, #0x8
    // 68: 14000000      b       0x68 <ltmp0+0x68>
    // 0000000000000068:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 6c: 14000000      b       0x6c <ltmp0+0x6c>
    // 000000000000006c:  ARM64_RELOC_BRANCH26 __JIT_JUMP_TARGET
    // 70: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 74: 910003fd      mov     x29, sp
    // 78: 94000000      bl      0x78 <ltmp0+0x78>
    // 0000000000000078:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 7c: a8c17bfd      ldp     x29, x30, [sp], #0x10
    // 80: a93fceb7      stp     x23, x19, [x21, #-0x8]
    // 84: 910022b5      add     x21, x21, #0x8
    // 88: 14000000      b       0x88 <ltmp0+0x88>
    // 0000000000000088:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x04, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xc1, 0x02, 0x00, 0x54,
        0x08, 0x08, 0x40, 0xf9, 0x1f, 0x09, 0x00, 0xf1,
        0x61, 0x02, 0x00, 0x54, 0x13, 0x0c, 0x40, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x17, 0x10, 0x40, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xf9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x54,
        0xb7, 0xce, 0x3f, 0xa9, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
        0xfd, 0x7b, 0xbf, 0xa9, 0xfd, 0x03, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x94, 0xfd, 0x7b, 0xc1, 0xa8,
        0xb7, 0xce, 0x3f, 0xa9, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_26r(code + 0x68, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0x6c, state->instruction_starts[instruction->jump_target]);
    patch_aarch64_trampoline(code + 0x78, 0x0, state);
    patch_aarch64_26r(code + 0x88, (uintptr_t)code + sizeof(code_body));
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _WITH_EXCEPT_START.o:      file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: d10103ff      sub     sp, sp, #0x40
    // 4: a9037bfd      stp     x29, x30, [sp, #0x30]
    // 8: 9100c3fd      add     x29, sp, #0x30
    // c: f85f82b7      ldur    x23, [x21, #-0x8]
    // 10: a97de6b3      ldp     x19, x25, [x21, #-0x28]
    // 14: f94006fa      ldr     x26, [x23, #0x8]
    // 18: aa1703e0      mov     x0, x23
    // 1c: 94000000      bl      0x1c <ltmp0+0x1c>
    // 000000000000001c:  ARM64_RELOC_BRANCH26 _PyException_GetTraceback
    // 20: b4000140      cbz     x0, 0x48 <ltmp0+0x48>
    // 24: f9400008      ldr     x8, [x0]
    // 28: 37f80148      tbnz    w8, #0x1f, 0x50 <ltmp0+0x50>
    // 2c: f1000508      subs    x8, x8, #0x1
    // 30: f9000008      str     x8, [x0]
    // 34: 540000e1      b.ne    0x50 <ltmp0+0x50>
    // 38: aa0003f8      mov     x24, x0
    // 3c: 94000000      bl      0x3c <ltmp0+0x3c>
    // 000000000000003c:  ARM64_RELOC_BRANCH26 __Py_Dealloc
    // 40: aa1803e0      mov     x0, x24
    // 44: 14000003      b       0x50 <ltmp0+0x50>
    // 48: 90000000      adrp    x0, 0x0 <ltmp0>
    // 0000000000000048:  ARM64_RELOC_GOT_LOAD_PAGE21  __Py_NoneStruct
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __Py_NoneStruct
    // 50: a900e7ff      stp     xzr, x25, [sp, #0x8]
    // 54: 910023e8      add     x8, sp, #0x8
    // 58: 91004108      add     x8, x8, #0x10
    // 5c: a901dffa      stp     x26, x23, [sp, #0x18]
    // 60: f90017e0      str     x0, [sp, #0x28]
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: f100033f      cmp     x25, #0x0
    // 6c: da9f03e9      csetm   x9, ne
    // 70: 8b090d01      add     x1, x8, x9, lsl #3
    // 74: b2410be8      mov     x8, #-0x7ffffffffffffffd ; =-9223372036854775805
    // 78: 9a880502      cinc    x2, x8, ne
    // 7c: aa1303e0      mov     x0, x19
    // 80: d2800003      mov     x3, #0x0                ; =0
    // 84: 94000000      bl      0x84 <ltmp0+0x84>
    // 0000000000000084:  ARM64_RELOC_BRANCH26 _PyObject_Vectorcall
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: b40000a0      cbz     x0, 0xa4 <ltmp0+0xa4>
    // 94: f80086a0      str     x0, [x21], #0x8
    // 98: a9437bfd      ldp     x29, x30, [sp, #0x30]
    // 9c: 910103ff      add     sp, sp, #0x40
    // a0: 14000000      b       0xa0 <ltmp0+0xa0>
    // 00000000000000a0:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    // a4: a9437bfd      ldp     x29, x30, [sp, #0x30]
    // a8: 910103ff      add     sp, sp, #0x40
    // ac: 14000000      b       0xac <ltmp0+0xac>
    // 00000000000000ac:  ARM64_RELOC_BRANCH26 __JIT_ERROR_TARGET
    const unsigned char code_body[176] = {
        0xff, 0x03, 0x01, 0xd1, 0xfd, 0x7b, 0x03, 0xa9,
        0xfd, 0xc3, 0x00, 0x91, 0xb7, 0x82, 0x5f, 0xf8,
        0xb3, 0xe6, 0x7d, 0xa9, 0xfa, 0x06, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0x40, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xf9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0xf1,
        0x08, 0x00, 0x00, 0xf9, 0xe1, 0x00, 0x00, 0x54,
        0xf8, 0x03, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x94,
        0xe0, 0x03, 0x18, 0xaa, 0x03, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xff, 0xe7, 0x00, 0xa9, 0xe8, 0x23, 0x00, 0x91,
        0x08, 0x41, 0x00, 0x91, 0xfa, 0xdf, 0x01, 0xa9,
        0xe0, 0x17, 0x00, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x3f, 0x03, 0x00, 0xf1, 0xe9, 0x03, 0x9f, 0xda,
        0x01, 0x0d, 0x09, 0x8b, 0xe8, 0x0b, 0x41, 0xb2,
        0x02, 0x05, 0x88, 0x9a, 0xe0, 0x03, 0x13, 0xaa,
        0x03, 0x00, 0x80, 0xd2, 0x00, 0x00, 0x00, 0x94,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0xfd, 0x7b, 0x43, 0xa9, 0xff, 0x03, 0x01, 0x91,
        0x00, 0x00, 0x00, 0x14, 0xfd, 0x7b, 0x43, 0xa9,
        0xff, 0x03, 0x01, 0x91, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_trampoline(code + 0x1c, 0x5e, state);
    patch_aarch64_trampoline(code + 0x3c, 0x0, state);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_trampoline(code + 0x84, 0x15, state);
    patch_aarch64_26r(code + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_aarch64_26r(code + 0xac, state->instruction_starts[instruction->error_target]);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _YIELD_VALUE.o:    file format mach-o arm64
    // 
    // Disassembly of section __TEXT,__text:
    // 
    // 0000000000000000 <ltmp0>:
    // 0: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 4: 90000008      adrp    x8, 0x0 <ltmp0>
    // 0000000000000004:  ARM64_RELOC_GOT_LOAD_PAGE21  __JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  ARM64_RELOC_GOT_LOAD_PAGEOFF12       __JIT_OPARG
    // c: 51000908      sub     w8, w8, #0x2
    // 10: 381fb288      sturb   w8, [x20, #-0x5]
    // 14: f9401e88      ldr     x8, [x20, #0x38]
    // 18: 91000908      add     x8, x8, #0x2
    // 1c: a903d688      stp     x8, x21, [x20, #0x38]
    // 20: f85e8288      ldur    x8, [x20, #-0x18]
    // 24: f9003ec8      str     x8, [x22, #0x78]
    // 28: f81e829f      stur    xzr, [x20, #-0x18]
    // 2c: b9402ec8      ldr     w8, [x22, #0x2c]
    // 30: 11000508      add     w8, w8, #0x1
    // 34: b9002ec8      str     w8, [x22, #0x2c]
    // 38: f9400688      ldr     x8, [x20, #0x8]
    // 3c: f90026c8      str     x8, [x22, #0x48]
    // 40: f900069f      str     xzr, [x20, #0x8]
    // 44: f9402115      ldr     x21, [x8, #0x40]
    // 48: f900211f      str     xzr, [x8, #0x40]
    // 4c: f80086a9      str     x9, [x21], #0x8
    // 50: aa0803f4      mov     x20, x8
    // 54: 14000000      b       0x54 <ltmp0+0x54>
    // 0000000000000054:  ARM64_RELOC_BRANCH26 __JIT_CONTINUE
    const unsigned char code_body[88] = {
        0xa9, 0x8e, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x09, 0x00, 0x51,
        0x88, 0xb2, 0x1f, 0x38, 0x88, 0x1e, 0x40, 0xf9,
        0x08, 0x09, 0x00, 0x91, 0x88, 0xd6, 0x03, 0xa9,
        0x88, 0x82, 0x5e, 0xf8, 0xc8, 0x3e, 0x00, 0xf9,
        0x9f, 0x82, 0x1e, 0xf8, 0xc8, 0x2e, 0x40, 0xb9,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x2e, 0x00, 0xb9,
        0x88, 0x06, 0x40, 0xf9, 0xc8, 0x26, 0x00, 0xf9,
        0x9f, 0x06, 0x00, 0xf9, 0x15, 0x21, 0x40, 0xf9,
        0x1f, 0x21, 0x00, 0xf9, 0xa9, 0x86, 0x00, 0xf8,
        0xf4, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x00, 0x14,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_26r(code + 0x54, (uintptr_t)code + sizeof(code_body));
}

static_assert(SYMBOL_MASK_WORDS >= 3, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 200, 8, {0x01}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 160, 16, {0x01}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 64, 0, {0x02}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 200, 8, {0x0c}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 200, 8, {0x30}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 192, 16, {0x51}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 64, 0, {0x02}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 200, 8, {0x84}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 64, 0, {0x02}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 200, 8, {0x104}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 184, 0, {0x601}},
    [_BINARY_SUBSCR] = {emit__BINARY_SUBSCR, 136, 0, {0x201}},
    [_BINARY_SUBSCR_CHECK_FUNC] = {emit__BINARY_SUBSCR_CHECK_FUNC, 80, 0, {0}},
    [_BINARY_SUBSCR_DICT] = {emit__BINARY_SUBSCR_DICT, 232, 8, {0x1801}},
    [_BINARY_SUBSCR_INIT_CALL] = {emit__BINARY_SUBSCR_INIT_CALL, 176, 0, {0}},
    [_BINARY_SUBSCR_LIST_INT] = {emit__BINARY_SUBSCR_LIST_INT, 224, 24, {0x05}},
    [_BINARY_SUBSCR_STR_INT] = {emit__BINARY_SUBSCR_STR_INT, 368, 24, {0x05}},
    [_BINARY_SUBSCR_TUPLE_INT] = {emit__BINARY_SUBSCR_TUPLE_INT, 224, 24, {0x05}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 80, 8, {0x2000}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 200, 8, {0x4001}},
    [_BUILD_SET] = {emit__BUILD_SET, 328, 8, {0x18001}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 240, 8, {0x20001}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 168, 16, {0x40001}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 80, 8, {0x80000}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 240, 8, {0x01}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 256, 16, {0x01}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 256, 16, {0x01}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 272, 16, {0x01}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 128, 16, {0x01}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 168, 16, {0x01}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 304, 24, {0x100001}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 264, 8, {0x200001}},
    [_CALL_LEN] = {emit__CALL_LEN, 272, 16, {0xc00001}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 216, 0, {0x1000001}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 272, 16, {0x01}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 280, 16, {0x01}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 288, 16, {0x01}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 328, 16, {0x01}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 208, 8, {0x200001}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 136, 8, {0x2000001}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 136, 8, {0x4000001}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 112, 8, {0x01}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 216, 24, {0x8000001}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 48, 8, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 32, 8, {0}},
    [_CHECK_ATTR_MODULE] = {emit__CHECK_ATTR_MODULE, 72, 16, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 24, 0, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 64, 16, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 304, 8, {0x70000001}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 184, 16, {0x80000001, 0x01}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 32, 8, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 64, 8, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 72, 24, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 40, 16, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 72, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 64, 24, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 64, 24, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 32, 0, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 112, 32, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 112, 32, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 24, 0, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 56, 0, {0x00, 0x02}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 72, 8, {0x00, 0x02}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 72, 8, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 56, 8, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 24, 8, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 40, 16, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 264, 24, {0x01, 0x0c}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 232, 32, {0x00, 0x10}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 264, 32, {0x04}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 224, 32, {0x10, 0x20}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 168, 24, {0x01, 0x40}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 192, 32, {0x01, 0x80}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 208, 40, {0x01, 0x100}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 120, 16, {0x01}},
    [_COPY] = {emit__COPY, 40, 8, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 104, 8, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 248, 24, {0x00, 0x600}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 120, 8, {0x01, 0x800}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 120, 8, {0x01, 0x1000}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 144, 96, {0x01, 0x6000}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 136, 48, {0x00, 0xa000}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 192, 80, {0x00, 0x32000}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 136, 0, {0x01, 0x20000}},
    [_DEOPT] = {emit__DEOPT, 40, 16, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 200, 8, {0x01, 0xc0000}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 264, 64, {0x01, 0x310000}},
    [_DYNAMIC_EXIT] = {emit__DYNAMIC_EXIT, 288, 16, {0x00, 0x400000}},
    [_END_SEND] = {emit__END_SEND, 72, 0, {0x01}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 56, 24, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 104, 64, {0x00, 0x800000}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 408, 16, {0x01, 0x400000}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 128, 8, {0x01}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 128, 8, {0x01}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 32, 40, {0x00, 0x1000000}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 128, 8, {0x01, 0x2000000}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 136, 0, {0x01, 0x2000000}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 120, 24, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 160, 8, {0x00, 0xc100000}},
    [_GET_AITER] = {emit__GET_AITER, 328, 168, {0x01, 0x10000}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 56, 0, {0x00, 0x10000000}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 112, 8, {0x01, 0x20000000}},
    [_GET_ITER] = {emit__GET_ITER, 96, 0, {0x01, 0x40000000}},
    [_GET_LEN] = {emit__GET_LEN, 64, 0, {0xc00000}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 216, 96, {0x01, 0xc0000000}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 48, 8, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 48, 8, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 48, 8, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 64, 16, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 40, 0, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 32, 0, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 56, 16, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 64, 16, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 32, 8, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 72, 8, {0x01}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 88, 8, {0x01}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 32, 8, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 40, 8, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 32, 8, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 32, 8, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 48, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 24, 0, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 40, 0, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 32, 8, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 32, 8, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 40, 8, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 80, 8, {0x00, 0x00, 0x01}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 168, 8, {0x01, 0x00, 0x02}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 128, 8, {0x01}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 352, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 160, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 168, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 184, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 192, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 200, 0, {0}},
    [_INTERNAL_INCREMENT_OPT_COUNTER] = {emit__INTERNAL_INCREMENT_OPT_COUNTER, 24, 0, {0}},
    [_IS_NONE] = {emit__IS_NONE, 104, 24, {0x01}},
    [_IS_OP] = {emit__IS_OP, 144, 24, {0x01}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 32, 8, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 32, 8, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 32, 8, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 48, 0, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 64, 0, {0x00, 0x00, 0x04}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 48, 0, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 8, 0, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 104, 8, {0x1000000}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 288, 64, {0x01, 0x4110000, 0x18}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 272, 8, {0x01, 0x00, 0x60}},
    [_LOAD_ATTR_CLASS_0] = {emit__LOAD_ATTR_CLASS_0, 80, 8, {0x01}},
    [_LOAD_ATTR_CLASS_1] = {emit__LOAD_ATTR_CLASS_1, 88, 8, {0x01}},
    [_LOAD_ATTR_INSTANCE_VALUE_0] = {emit__LOAD_ATTR_INSTANCE_VALUE_0, 96, 8, {0x01}},
    [_LOAD_ATTR_INSTANCE_VALUE_1] = {emit__LOAD_ATTR_INSTANCE_VALUE_1, 104, 8, {0x01}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 40, 8, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 40, 8, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 40, 8, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 136, 16, {0x01}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 72, 8, {0x01}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 72, 8, {0x01}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 224, 8, {0}},
    [_LOAD_ATTR_SLOT_0] = {emit__LOAD_ATTR_SLOT_0, 96, 8, {0x01}},
    [_LOAD_ATTR_SLOT_1] = {emit__LOAD_ATTR_SLOT_1, 104, 8, {0x01}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 200, 16, {0x01}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 136, 48, {0x00, 0x80000000, 0x80}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 48, 24, {0}},
    [_LOAD_CONST] = {emit__LOAD_CONST, 48, 8, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 32, 8, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 32, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 16, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = {emit__LOAD_CONST_INLINE_BORROW_WITH_NULL, 16, 8, {0}},
    [_LOAD_CONST_INLINE_WITH_NULL] = {emit__LOAD_CONST_INLINE_WITH_NULL, 32, 8, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 104, 8, {0x00, 0x1000}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 40, 8, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 32, 0, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 32, 0, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 32, 0, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 32, 0, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 32, 0, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 32, 0, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 32, 0, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 32, 0, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 32, 8, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 128, 96, {0x00, 0x6000}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 240, 8, {0x01, 0x1000, 0x80}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 112, 8, {0x00, 0x00, 0x100}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 104, 16, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 104, 16, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 104, 16, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 104, 16, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 88, 24, {0x00, 0x80000000}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 80, 8, {0x00, 0x00, 0x200}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 40, 16, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 24, 8, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 24, 8, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 24, 8, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 24, 8, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 176, 24, {0x00, 0x10000, 0x400}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 232, 16, {0x01, 0x00, 0x800}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 336, 24, {0x01, 0x00, 0x800}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 192, 16, {0x4000001, 0x00, 0x1000}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 104, 8, {0x01, 0x00, 0x2000}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 112, 0, {0x01, 0x00, 0xc000}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 64, 8, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 72, 8, {0x00, 0x00, 0x10000}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 232, 16, {0x01, 0x00, 0x20000}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 56, 0, {0x00, 0x00, 0x40000}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 48, 16, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 48, 16, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 152, 16, {0x01}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 176, 16, {0x01}},
    [_NOP] = {emit__NOP, 8, 0, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 112, 8, {0x01}},
    [_POP_TOP] = {emit__POP_TOP, 48, 0, {0x01}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 72, 8, {0x01}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 64, 8, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 40, 0, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 8, 0, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 168, 8, {0x00, 0x400}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 232, 8, {0x01, 0x400}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 72, 8, {0x01}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 32, 0, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 352, 0, {0x00, 0x00, 0x180000}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 72, 0, {0x00, 0x200}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 16, 8, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 128, 24, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 272, 64, {0x01, 0x10000, 0x600080}},
    [_SET_ADD] = {emit__SET_ADD, 120, 8, {0x8001}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 48, 16, {0}},
    [_SET_IP] = {emit__SET_IP, 16, 8, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 120, 8, {0x01, 0x00, 0x800000}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 56, 0, {0x01}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 160, 8, {0x01, 0x00, 0x1000000}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 160, 8, {0x01}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 104, 8, {0x01}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 232, 16, {0x01, 0x00, 0x2000000}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 104, 8, {0x01}},
    [_STORE_FAST] = {emit__STORE_FAST, 72, 8, {0x01}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 64, 0, {0x01}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 64, 0, {0x01}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 64, 0, {0x01}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 64, 0, {0x01}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 64, 0, {0x01}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 64, 0, {0x01}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 64, 0, {0x01}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 64, 0, {0x01}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 128, 8, {0x01, 0x00, 0x4000000}},
    [_STORE_NAME] = {emit__STORE_NAME, 280, 56, {0x01, 0x10000, 0x4200000}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 216, 0, {0x401, 0x00, 0x200000}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 176, 0, {0x01, 0x00, 0x200000}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 128, 8, {0x01, 0x00, 0x10000}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 232, 24, {0x05}},
    [_SWAP] = {emit__SWAP, 32, 8, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 24, 0, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 120, 16, {0x01, 0x04}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 32, 8, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 128, 24, {0x01}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 104, 24, {0x01}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 40, 16, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 136, 32, {0x01}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 96, 0, {0x01, 0x00, 0x8000000}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 96, 0, {0x01, 0x00, 0x10000000}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 40, 16, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 136, 8, {0x01, 0x00, 0x20000000}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 136, 8, {0x01, 0x00, 0x20000000}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 200, 16, {0x01}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 192, 16, {0x01}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 144, 8, {0x01}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 176, 8, {0x200001, 0x00, 0x40000000}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 88, 8, {0}},
};

static const void * const symbols_map[95] = {
    [0] = &_Py_Dealloc,
    [1] = &_PyFloat_FromDouble_ConsumeInputs,
    [2] = &PyObject_Free,
    [3] = &_PyLong_Add,
    [4] = &_PyUnicode_ExactDealloc,
    [5] = &PyUnicode_Concat,
    [6] = &PyUnicode_Append,
    [7] = &_PyLong_Multiply,
    [8] = &_PyLong_Subtract,
    [9] = &PyObject_GetItem,
    [10] = &_PyBuildSlice_ConsumeRefs,
    [11] = &_PyErr_SetKeyError,
    [12] = &PyDict_GetItemRef,
    [13] = &_PyList_FromStackRefSteal,
    [14] = &_PyDict_FromItems,
    [15] = &PySet_Add,
    [16] = &PySet_New,
    [17] = &PySlice_New,
    [18] = &_PyUnicode_JoinArray,
    [19] = &_PyTuple_FromStackRefSteal,
    [20] = &PyObject_IsInstance,
    [21] = &PyObject_Vectorcall,
    [22] = &PyLong_FromSsize_t,
    [23] = &PyObject_Size,
    [24] = &_PyList_AppendTakeRefListResize,
    [25] = &PyObject_Str,
    [26] = &PySequence_Tuple,
    [27] = &_PyType_NewManagedObject,
    [28] = &PyErr_SetHandledException,
    [29] = &_PyEval_ExceptionGroupMatch,
    [30] = &_PyEval_CheckExceptStarTypeValid,
    [31] = &PyErr_GivenExceptionMatches,
    [32] = &_PyEval_CheckExceptTypeValid,
    [33] = &_Py_HandlePending,
    [34] = &PyObject_IsTrue,
    [35] = &PyObject_RichCompare,
    [36] = &_PyFloat_ExactDealloc,
    [37] = &_PyUnicode_Equal,
    [38] = &PySequence_Contains,
    [39] = &PyDict_Contains,
    [40] = &_PySet_Contains,
    [41] = &_PyEval_FrameClearAndPop,
    [42] = &_PyEvalFramePushAndInit,
    [43] = &PyObject_DelAttr,
    [44] = &_PyEval_FormatExcUnbound,
    [45] = &_PyEval_FormatExcCheckArg,
    [46] = &PyTuple_GetItem,
    [47] = &PyDict_Pop,
    [48] = &_PyErr_Format,
    [49] = &PyObject_DelItem,
    [50] = &_PyEval_FormatKwargsError,
    [51] = &_PyDict_MergeEx,
    [52] = &_PyErr_ExceptionMatches,
    [53] = &PyDict_Update,
    [54] = &_PyOptimizer_Optimize,
    [55] = &PyErr_Format,
    [56] = &_Py_FatalErrorFunc,
    [57] = &PyObject_Format,
    [58] = &_PyErr_Clear,
    [59] = &_PyEval_MonitorRaise,
    [60] = &_PyEval_GetANext,
    [61] = &_PyEval_GetAwaitable,
    [62] = &PyObject_GetIter,
    [63] = &_PyErr_SetString,
    [64] = &_PyEval_ImportFrom,
    [65] = &_PyEval_ImportName,
    [66] = &PyLong_FromLong,
    [67] = &PySequence_Check,
    [68] = &_PyList_Extend,
    [69] = &_PyObject_GetMethod,
    [70] = &PyObject_GetAttr,
    [71] = &PyMapping_GetOptionalItem,
    [72] = &_PyEval_LoadGlobalStackRef,
    [73] = &_PyEval_LoadName,
    [74] = &_PyObject_LookupSpecialMethod,
    [75] = &_PySuper_Lookup,
    [76] = &_Py_Check_ArgsIterable,
    [77] = &PyCell_New,
    [78] = &_PyFunction_SetVersion,
    [79] = &PyFunction_New,
    [80] = &_PyDict_SetItem_Take2,
    [81] = &_PyEval_MatchClass,
    [82] = &_PyEval_MatchKeys,
    [83] = &_PyThreadState_PopFrame,
    [84] = &_Py_MakeCoro,
    [85] = &PyObject_SetItem,
    [86] = &PyDict_New,
    [87] = &_PySet_Update,
    [88] = &PyObject_SetAttr,
    [89] = &_PyDict_SendEvent,
    [90] = &PyDict_SetItem,
    [91] = &PyNumber_Invert,
    [92] = &PyNumber_Negative,
    [93] = &_PyEval_UnpackIterableStackRef,
    [94] = &PyException_GetTraceback,
};
