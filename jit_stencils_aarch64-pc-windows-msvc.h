// 74e2386ec0c080c5099bf277854ef88c9a9dc7964eb5c1317d8f97aa9f9f21c3
// $ python.exe 'D:\a\jit_stencils\jit_stencils\Tools\jit\build.py' aarch64-pc-windows-msvc

void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // shim.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 6db63bef      stp     d15, d14, [sp, #-0xa0]!
    // 4: 6d0133ed      stp     d13, d12, [sp, #0x10]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // c: 6d022beb      stp     d11, d10, [sp, #0x20]
    // 10: 6d0323e9      stp     d9, d8, [sp, #0x30]
    // 14: a90477fe      stp     x30, x29, [sp, #0x40]
    // 18: aa0203fd      mov     x29, x2
    // 1c: a9056ffc      stp     x28, x27, [sp, #0x50]
    // 20: a90667fa      stp     x26, x25, [sp, #0x60]
    // 24: a9075ff8      stp     x24, x23, [sp, #0x70]
    // 28: a90857f6      stp     x22, x21, [sp, #0x80]
    // 2c: a9094ff4      stp     x20, x19, [sp, #0x90]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 34: b9400128      ldr     w8, [x9]
    // 38: 37f80068      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 3c: 11000508      add     w8, w8, #0x1
    // 40: b9000128      str     w8, [x9]
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: aa0003f4      mov     x20, x0
    // 4c: aa0103f5      mov     x21, x1
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: aa1d03f6      mov     x22, x29
    // 58: d63f0100      blr     x8
    // 5c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 60: f94087a8      ldr     x8, [x29, #0x108]
    // 64: f9400129      ldr     x9, [x9]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 68: f90087a9      str     x9, [x29, #0x108]
    // 6c: b9400109      ldr     w9, [x8]
    // 70: 37f80149      tbnz    w9, #0x1f, 0x98 <_JIT_ENTRY+0x98>
    // 74: 71000529      subs    w9, w9, #0x1
    // 78: b9000109      str     w9, [x8]
    // 7c: 540000e1      b.ne    0x98 <_JIT_ENTRY+0x98>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 84: aa0003f3      mov     x19, x0
    // 88: aa0803e0      mov     x0, x8
    // 8c: f9400129      ldr     x9, [x9]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 90: d63f0120      blr     x9
    // 94: aa1303e0      mov     x0, x19
    // 98: a9494ff4      ldp     x20, x19, [sp, #0x90]
    // 9c: a94857f6      ldp     x22, x21, [sp, #0x80]
    // a0: a9475ff8      ldp     x24, x23, [sp, #0x70]
    // a4: a94667fa      ldp     x26, x25, [sp, #0x60]
    // a8: a9456ffc      ldp     x28, x27, [sp, #0x50]
    // ac: a94477fe      ldp     x30, x29, [sp, #0x40]
    // b0: 6d4323e9      ldp     d9, d8, [sp, #0x30]
    // b4: 6d422beb      ldp     d11, d10, [sp, #0x20]
    // b8: 6d4133ed      ldp     d13, d12, [sp, #0x10]
    // bc: 6cca3bef      ldp     d15, d14, [sp], #0xa0
    // c0: d65f03c0      ret
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xef, 0x3b, 0xb6, 0x6d, 0xed, 0x33, 0x01, 0x6d,
        0x09, 0x00, 0x00, 0x90, 0xeb, 0x2b, 0x02, 0x6d,
        0xe9, 0x23, 0x03, 0x6d, 0xfe, 0x77, 0x04, 0xa9,
        0xfd, 0x03, 0x02, 0xaa, 0xfc, 0x6f, 0x05, 0xa9,
        0xfa, 0x67, 0x06, 0xa9, 0xf8, 0x5f, 0x07, 0xa9,
        0xf6, 0x57, 0x08, 0xa9, 0xf4, 0x4f, 0x09, 0xa9,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x01, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x01, 0x00, 0xb9, 0x08, 0x00, 0x00, 0x90,
        0xf4, 0x03, 0x00, 0xaa, 0xf5, 0x03, 0x01, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xf6, 0x03, 0x1d, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x09, 0x00, 0x00, 0x90,
        0xa8, 0x87, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xa9, 0x87, 0x00, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x49, 0x01, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x71,
        0x09, 0x01, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0xf3, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x08, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x13, 0xaa,
        0xf4, 0x4f, 0x49, 0xa9, 0xf6, 0x57, 0x48, 0xa9,
        0xf8, 0x5f, 0x47, 0xa9, 0xfa, 0x67, 0x46, 0xa9,
        0xfc, 0x6f, 0x45, 0xa9, 0xfe, 0x77, 0x44, 0xa9,
        0xe9, 0x23, 0x43, 0x6d, 0xeb, 0x2b, 0x42, 0x6d,
        0xed, 0x33, 0x41, 0x6d, 0xef, 0x3b, 0xca, 0x6c,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)&_Py_Dealloc);
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyEval_BinaryOps
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyEval_BinaryOps
    // 14: a97f66b8      ldp     x24, x25, [x21, #-0x10]
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 92403d08      and     x8, x8, #0xffff
    // 20: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 24: aa1803e0      mov     x0, x24
    // 28: aa1903e1      mov     x1, x25
    // 2c: d63f0100      blr     x8
    // 30: f9402293      ldr     x19, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: aa0003f7      mov     x23, x0
    // 3c: b9400308      ldr     w8, [x24]
    // 40: 37f80108      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000308      str     w8, [x24]
    // 4c: 540000a1      b.ne    0x60 <_JIT_ENTRY+0x60>
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: aa1803e0      mov     x0, x24
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 5c: d63f0100      blr     x8
    // 60: b9400328      ldr     w8, [x25]
    // 64: 37f80088      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 68: 71000508      subs    w8, w8, #0x1
    // 6c: b9000328      str     w8, [x25]
    // 70: 54000100      b.eq    0x90 <_JIT_ENTRY+0x90>
    // 74: b4000197      cbz     x23, 0xa4 <_JIT_ENTRY+0xa4>
    // 78: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 7c: d1002275      sub     x21, x19, #0x8
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 84: f81f0277      stur    x23, [x19, #-0x10]
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 94: aa1903e0      mov     x0, x25
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: b5fffed7      cbnz    x23, 0x78 <_JIT_ENTRY+0x78>
    // a4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // a8: aa1303f5      mov     x21, x19
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb8, 0x66, 0x7f, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x3d, 0x40, 0x92,
        0x28, 0x79, 0x68, 0xf8, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &_PyEval_BinaryOps+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x18);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_FLOAT.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400821      ldr     d1, [x1, #0x10]
    // 18: fd400800      ldr     d0, [x0, #0x10]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFloat_FromDouble_ConsumeInputs
    // 20: 1e612800      fadd    d0, d0, d1
    // 24: d63f0100      blr     x8
    // 28: b40000c0      cbz     x0, 0x40 <_JIT_ENTRY+0x40>
    // 2c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400021      ldr     x1, [x1]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f81f0260      stur    x0, [x19, #-0x10]
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0020      br      x1
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 44: aa1303f5      mov     x21, x19
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xa1, 0x8e, 0x5f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x08, 0x40, 0xfd,
        0x00, 0x08, 0x40, 0xfd, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x28, 0x61, 0x1e, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_INT.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_Add
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_Add
    // 18: aa1903e1      mov     x1, x25
    // 1c: aa1803e0      mov     x0, x24
    // 20: d63f0100      blr     x8
    // 24: b9400328      ldr     w8, [x25]
    // 28: aa0003f7      mov     x23, x0
    // 2c: 37f80208      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000328      str     w8, [x25]
    // 38: 540001a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 44: f9528d28      ldr     x8, [x9, #0x2518]
    // 48: b40000a8      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: f9529122      ldr     x2, [x9, #0x2520]
    // 50: aa1903e0      mov     x0, x25
    // 54: 52800021      mov     w1, #0x1                // =1
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // 60: aa1903e0      mov     x0, x25
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540000e0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 80: b4000277      cbz     x23, 0xcc <_JIT_ENTRY+0xcc>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81f0277      stur    x23, [x19, #-0x10]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a0: f9528d28      ldr     x8, [x9, #0x2518]
    // a4: b40000a8      cbz     x8, 0xb8 <_JIT_ENTRY+0xb8>
    // a8: f9529122      ldr     x2, [x9, #0x2520]
    // ac: aa1803e0      mov     x0, x24
    // b0: 52800021      mov     w1, #0x1                // =1
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // bc: aa1803e0      mov     x0, x24
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // c4: d63f0100      blr     x8
    // c8: b5fffdf7      cbnz    x23, 0x84 <_JIT_ENTRY+0x84>
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb9, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x77, 0x02, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfd, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)&_PyLong_Add);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0x64, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_UNICODE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb8      ldr     x24, [x21, #-0x8]!
    // c: f85f82b9      ldur    x25, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyUnicode_Concat
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyUnicode_Concat
    // 18: aa1803e1      mov     x1, x24
    // 1c: aa1903e0      mov     x0, x25
    // 20: d63f0100      blr     x8
    // 24: b9400328      ldr     w8, [x25]
    // 28: aa0003f7      mov     x23, x0
    // 2c: 37f80208      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000328      str     w8, [x25]
    // 38: 540001a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 44: f9528d28      ldr     x8, [x9, #0x2518]
    // 48: b40000a8      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: f9529122      ldr     x2, [x9, #0x2520]
    // 50: aa1903e0      mov     x0, x25
    // 54: 52800021      mov     w1, #0x1                // =1
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_ExactDealloc
    // 60: aa1903e0      mov     x0, x25
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_ExactDealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540000e0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 80: b4000277      cbz     x23, 0xcc <_JIT_ENTRY+0xcc>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81f0277      stur    x23, [x19, #-0x10]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a0: f9528d28      ldr     x8, [x9, #0x2518]
    // a4: b40000a8      cbz     x8, 0xb8 <_JIT_ENTRY+0xb8>
    // a8: f9529122      ldr     x2, [x9, #0x2520]
    // ac: aa1803e0      mov     x0, x24
    // b0: 52800021      mov     w1, #0x1                // =1
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_ExactDealloc
    // bc: aa1803e0      mov     x0, x24
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_ExactDealloc
    // c4: d63f0100      blr     x8
    // c8: b5fffdf7      cbnz    x23, 0x84 <_JIT_ENTRY+0x84>
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb8, 0x8e, 0x5f, 0xf8, 0xb9, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x18, 0xaa, 0xe0, 0x03, 0x19, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x77, 0x02, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfd, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)&PyUnicode_Concat);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_12x(code + 0x64, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000018      adrp    x24, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: aa1503f3      mov     x19, x21
    // c: 91014299      add     x25, x20, #0x50
    // 10: f9400318      ldr     x24, [x24]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 14: f85f0e60      ldr     x0, [x19, #-0x10]!
    // 18: f878db28      ldr     x8, [x25, w24, sxtw #3]
    // 1c: eb00011f      cmp     x8, x0
    // 20: 540000a0      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 2c: f84107fe      ldr     x30, [sp], #0x10
    // 30: d61f0000      br      x0
    // 34: b9400008      ldr     w8, [x0]
    // 38: f85f82b7      ldur    x23, [x21, #-0x8]
    // 3c: 37f800e8      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b9000008      str     w8, [x0]
    // 48: 54000081      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 54: d63f0100      blr     x8
    // 58: f878db28      ldr     x8, [x25, w24, sxtw #3]
    // 5c: 910023e0      add     x0, sp, #0x8
    // 60: aa1703e1      mov     x1, x23
    // 64: f90007e8      str     x8, [sp, #0x8]
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyUnicode_Append
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyUnicode_Append
    // 70: d63f0100      blr     x8
    // 74: f94007e8      ldr     x8, [sp, #0x8]
    // 78: f838db28      str     x8, [x25, w24, sxtw #3]
    // 7c: b94002e9      ldr     w9, [x23]
    // 80: 37f80229      tbnz    w9, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // 84: 71000528      subs    w8, w9, #0x1
    // 88: b90002e8      str     w8, [x23]
    // 8c: 540001a1      b.ne    0xc0 <_JIT_ENTRY+0xc0>
    // 90: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 94: f9400129      ldr     x9, [x9]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 98: f9528d28      ldr     x8, [x9, #0x2518]
    // 9c: b40000a8      cbz     x8, 0xb0 <_JIT_ENTRY+0xb0>
    // a0: f9529122      ldr     x2, [x9, #0x2520]
    // a4: aa1703e0      mov     x0, x23
    // a8: 52800021      mov     w1, #0x1                // =1
    // ac: d63f0100      blr     x8
    // b0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_ExactDealloc
    // b4: aa1703e0      mov     x0, x23
    // b8: f9400108      ldr     x8, [x8]
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_ExactDealloc
    // bc: d63f0100      blr     x8
    // c0: f878db28      ldr     x8, [x25, w24, sxtw #3]
    // c4: b40000c8      cbz     x8, 0xdc <_JIT_ENTRY+0xdc>
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: aa1303f5      mov     x21, x19
    // d0: f9400000      ldr     x0, [x0]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d4: f84107fe      ldr     x30, [sp], #0x10
    // d8: d61f0000      br      x0
    // dc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // e0: f9400000      ldr     x0, [x0]
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // e4: f84107fe      ldr     x30, [sp], #0x10
    // e8: d61f0000      br      x0
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x18, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x15, 0xaa, 0x99, 0x42, 0x01, 0x91,
        0x18, 0x03, 0x40, 0xf9, 0x60, 0x0e, 0x5f, 0xf8,
        0x28, 0xdb, 0x78, 0xf8, 0x1f, 0x01, 0x00, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x40, 0xb9,
        0xb7, 0x82, 0x5f, 0xf8, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0xdb, 0x78, 0xf8, 0xe0, 0x23, 0x00, 0x91,
        0xe1, 0x03, 0x17, 0xaa, 0xe8, 0x07, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x07, 0x40, 0xf9,
        0x28, 0xdb, 0x38, 0xf8, 0xe9, 0x02, 0x40, 0xb9,
        0x29, 0x02, 0xf8, 0x37, 0x28, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0xdb, 0x78, 0xf8, 0xc8, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    // 10: &_PyRuntime+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)&PyUnicode_Append);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xdc, (uintptr_t)data + 0x20);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_FLOAT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400821      ldr     d1, [x1, #0x10]
    // 18: fd400800      ldr     d0, [x0, #0x10]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFloat_FromDouble_ConsumeInputs
    // 20: 1e610800      fmul    d0, d0, d1
    // 24: d63f0100      blr     x8
    // 28: b40000c0      cbz     x0, 0x40 <_JIT_ENTRY+0x40>
    // 2c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400021      ldr     x1, [x1]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f81f0260      stur    x0, [x19, #-0x10]
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0020      br      x1
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 44: aa1303f5      mov     x21, x19
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xa1, 0x8e, 0x5f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x08, 0x40, 0xfd,
        0x00, 0x08, 0x40, 0xfd, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x08, 0x61, 0x1e, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_Multiply
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_Multiply
    // 18: aa1903e1      mov     x1, x25
    // 1c: aa1803e0      mov     x0, x24
    // 20: d63f0100      blr     x8
    // 24: b9400328      ldr     w8, [x25]
    // 28: aa0003f7      mov     x23, x0
    // 2c: 37f80208      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000328      str     w8, [x25]
    // 38: 540001a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 44: f9528d28      ldr     x8, [x9, #0x2518]
    // 48: b40000a8      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: f9529122      ldr     x2, [x9, #0x2520]
    // 50: aa1903e0      mov     x0, x25
    // 54: 52800021      mov     w1, #0x1                // =1
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // 60: aa1903e0      mov     x0, x25
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540000e0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 80: b4000277      cbz     x23, 0xcc <_JIT_ENTRY+0xcc>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81f0277      stur    x23, [x19, #-0x10]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a0: f9528d28      ldr     x8, [x9, #0x2518]
    // a4: b40000a8      cbz     x8, 0xb8 <_JIT_ENTRY+0xb8>
    // a8: f9529122      ldr     x2, [x9, #0x2520]
    // ac: aa1803e0      mov     x0, x24
    // b0: 52800021      mov     w1, #0x1                // =1
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // bc: aa1803e0      mov     x0, x24
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // c4: d63f0100      blr     x8
    // c8: b5fffdf7      cbnz    x23, 0x84 <_JIT_ENTRY+0x84>
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb9, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x77, 0x02, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfd, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)&_PyLong_Multiply);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0x64, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_FLOAT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8ea1      ldr     x1, [x21, #-0x8]!
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFloat_FromDouble_ConsumeInputs
    // 14: fd400821      ldr     d1, [x1, #0x10]
    // 18: fd400800      ldr     d0, [x0, #0x10]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFloat_FromDouble_ConsumeInputs
    // 20: 1e613800      fsub    d0, d0, d1
    // 24: d63f0100      blr     x8
    // 28: b40000c0      cbz     x0, 0x40 <_JIT_ENTRY+0x40>
    // 2c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400021      ldr     x1, [x1]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f81f0260      stur    x0, [x19, #-0x10]
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0020      br      x1
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 44: aa1303f5      mov     x21, x19
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xa1, 0x8e, 0x5f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x08, 0x40, 0xfd,
        0x00, 0x08, 0x40, 0xfd, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x38, 0x61, 0x1e, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data + 0x8);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb9      ldr     x25, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_Subtract
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_Subtract
    // 18: aa1903e1      mov     x1, x25
    // 1c: aa1803e0      mov     x0, x24
    // 20: d63f0100      blr     x8
    // 24: b9400328      ldr     w8, [x25]
    // 28: aa0003f7      mov     x23, x0
    // 2c: 37f80208      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000328      str     w8, [x25]
    // 38: 540001a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 44: f9528d28      ldr     x8, [x9, #0x2518]
    // 48: b40000a8      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: f9529122      ldr     x2, [x9, #0x2520]
    // 50: aa1903e0      mov     x0, x25
    // 54: 52800021      mov     w1, #0x1                // =1
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // 60: aa1903e0      mov     x0, x25
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // 68: d63f0100      blr     x8
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80088      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540000e0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 80: b4000277      cbz     x23, 0xcc <_JIT_ENTRY+0xcc>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81f0277      stur    x23, [x19, #-0x10]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a0: f9528d28      ldr     x8, [x9, #0x2518]
    // a4: b40000a8      cbz     x8, 0xb8 <_JIT_ENTRY+0xb8>
    // a8: f9529122      ldr     x2, [x9, #0x2520]
    // ac: aa1803e0      mov     x0, x24
    // b0: 52800021      mov     w1, #0x1                // =1
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // bc: aa1803e0      mov     x0, x24
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // c4: d63f0100      blr     x8
    // c8: b5fffdf7      cbnz    x23, 0x84 <_JIT_ENTRY+0x84>
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb9, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x19, 0xaa, 0xe0, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x77, 0x02, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfd, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)&_PyLong_Subtract);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0x64, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SLICE.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyBuildSlice_ConsumeRefs
    // c: f85e82b3      ldur    x19, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyBuildSlice_ConsumeRefs
    // 18: d63f0100      blr     x8
    // 1c: f9402298      ldr     x24, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b4000320      cbz     x0, 0x88 <_JIT_ENTRY+0x88>
    // 28: d1004308      sub     x8, x24, #0x10
    // 2c: aa0003f5      mov     x21, x0
    // 30: aa1303e0      mov     x0, x19
    // 34: f9002288      str     x8, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_GetItem
    // 3c: aa1503e1      mov     x1, x21
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_GetItem
    // 44: d63f0100      blr     x8
    // 48: f9402298      ldr     x24, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: aa0003f7      mov     x23, x0
    // 54: b94002a8      ldr     w8, [x21]
    // 58: 37f80108      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b90002a8      str     w8, [x21]
    // 64: 540000a1      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: aa1503e0      mov     x0, x21
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 91004318      add     x24, x24, #0x10
    // 7c: b9400268      ldr     w8, [x19]
    // 80: 36f800a8      tbz     w8, #0x1f, 0x94 <_JIT_ENTRY+0x94>
    // 84: 14000007      b       0xa0 <_JIT_ENTRY+0xa0>
    // 88: aa1f03f7      mov     x23, xzr
    // 8c: b9400268      ldr     w8, [x19]
    // 90: 37f80088      tbnz    w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 94: 71000508      subs    w8, w8, #0x1
    // 98: b9000268      str     w8, [x19]
    // 9c: 54000100      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // a0: b4000197      cbz     x23, 0xd0 <_JIT_ENTRY+0xd0>
    // a4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a8: d1004315      sub     x21, x24, #0x10
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f81e8317      stur    x23, [x24, #-0x18]
    // b4: f84107fe      ldr     x30, [sp], #0x10
    // b8: d61f0000      br      x0
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: aa1303e0      mov     x0, x19
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: b5fffed7      cbnz    x23, 0xa4 <_JIT_ENTRY+0xa4>
    // d0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d4: aa1803f5      mov     x21, x24
    // d8: f9400000      ldr     x0, [x0]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // dc: f84107fe      ldr     x30, [sp], #0x10
    // e0: d61f0000      br      x0
    // e4: 00 00 00 00
    const unsigned char code_body[232] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x06, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb3, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x98, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x20, 0x03, 0x00, 0xb4,
        0x08, 0x43, 0x00, 0xd1, 0xf5, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe1, 0x03, 0x15, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0xa8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xa8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x15, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x18, 0x43, 0x00, 0x91, 0x68, 0x02, 0x40, 0xb9,
        0xa8, 0x00, 0xf8, 0x36, 0x07, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x1f, 0xaa, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x01, 0x00, 0x54,
        0x97, 0x01, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x15, 0x43, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0x17, 0x83, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd7, 0xfe, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x18, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)&PyObject_GetItem);
    patch_aarch64_12x(code + 0x40, (uintptr_t)&PyObject_GetItem);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)data + 0x8);
}

void
emit__BINARY_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f66b8      ldp     x24, x25, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_GetItem
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_GetItem
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1903e1      mov     x1, x25
    // 1c: d63f0100      blr     x8
    // 20: f9402293      ldr     x19, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: aa0003f7      mov     x23, x0
    // 2c: b9400308      ldr     w8, [x24]
    // 30: 37f80108      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000308      str     w8, [x24]
    // 3c: 540000a1      b.ne    0x50 <_JIT_ENTRY+0x50>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: aa1803e0      mov     x0, x24
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: b9400328      ldr     w8, [x25]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000328      str     w8, [x25]
    // 60: 54000100      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 64: b4000197      cbz     x23, 0x94 <_JIT_ENTRY+0x94>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: d1002275      sub     x21, x19, #0x8
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 74: f81f0277      stur    x23, [x19, #-0x10]
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 84: aa1903e0      mov     x0, x25
    // 88: f9400108      ldr     x8, [x8]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 8c: d63f0100      blr     x8
    // 90: b5fffed7      cbnz    x23, 0x68 <_JIT_ENTRY+0x68>
    // 94: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 98: aa1303f5      mov     x21, x19
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // a0: f84107fe      ldr     x30, [sp], #0x10
    // a4: d61f0000      br      x0
    const unsigned char code_body[168] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x66, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PyObject_GetItem);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&PyObject_GetItem);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x88, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x8);
}

void
emit__BINARY_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_CHECK_FUNC.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 3942a528      ldrb    w8, [x9, #0xa9]
    // c: 36080248      tbz     w8, #0x1, 0x54 <_JIT_ENTRY+0x54>
    // 10: f941c928      ldr     x8, [x9, #0x390]
    // 14: b4000208      cbz     x8, 0x54 <_JIT_ENTRY+0x54>
    // 18: b9439929      ldr     w9, [x9, #0x398]
    // 1c: b940910a      ldr     w10, [x8, #0x90]
    // 20: 6b09015f      cmp     w10, w9
    // 24: 54000181      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 28: f94076c9      ldr     x9, [x22, #0xe8]
    // 2c: b4000149      cbz     x9, 0x54 <_JIT_ENTRY+0x54>
    // 30: f9401908      ldr     x8, [x8, #0x30]
    // 34: f9407aca      ldr     x10, [x22, #0xf0]
    // 38: b9804d08      ldrsw   x8, [x8, #0x4c]
    // 3c: cb090149      sub     x9, x10, x9
    // 40: eb890d1f      cmp     x8, x9, asr #3
    // 44: 5400008a      b.ge    0x54 <_JIT_ENTRY+0x54>
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 5c: d61f0000      br      x0
    const unsigned char code_body[96] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x28, 0xa5, 0x42, 0x39, 0x48, 0x02, 0x08, 0x36,
        0x28, 0xc9, 0x41, 0xf9, 0x08, 0x02, 0x00, 0xb4,
        0x29, 0x99, 0x43, 0xb9, 0x0a, 0x91, 0x40, 0xb9,
        0x5f, 0x01, 0x09, 0x6b, 0x81, 0x01, 0x00, 0x54,
        0xc9, 0x76, 0x40, 0xf9, 0x49, 0x01, 0x00, 0xb4,
        0x08, 0x19, 0x40, 0xf9, 0xca, 0x7a, 0x40, 0xf9,
        0x08, 0x4d, 0x80, 0xb9, 0x49, 0x01, 0x09, 0xcb,
        0x1f, 0x0d, 0x89, 0xeb, 0x8a, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
}

void
emit__BINARY_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_DICT.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f02b9      ldur    x25, [x21, #-0x10]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // c: f9400728      ldr     x8, [x25, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_GetItemRef
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_GetItemRef
    // 3c: 910023e2      add     x2, sp, #0x8
    // 40: aa1903e0      mov     x0, x25
    // 44: aa1303e1      mov     x1, x19
    // 48: d63f0100      blr     x8
    // 4c: f9402297      ldr     x23, [x20, #0x40]
    // 50: 2a0003f8      mov     w24, w0
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: 35000100      cbnz    w0, 0x78 <_JIT_ENTRY+0x78>
    // 5c: f9002297      str     x23, [x20, #0x40]
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_SetKeyError
    // 64: aa1303e0      mov     x0, x19
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_SetKeyError
    // 6c: d63f0100      blr     x8
    // 70: f9402297      ldr     x23, [x20, #0x40]
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: b9400328      ldr     w8, [x25]
    // 7c: 37f80108      tbnz    w8, #0x1f, 0x9c <_JIT_ENTRY+0x9c>
    // 80: 71000508      subs    w8, w8, #0x1
    // 84: b9000328      str     w8, [x25]
    // 88: 540000a1      b.ne    0x9c <_JIT_ENTRY+0x9c>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 90: aa1903e0      mov     x0, x25
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 98: d63f0100      blr     x8
    // 9c: b9400268      ldr     w8, [x19]
    // a0: 37f80088      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // a4: 71000508      subs    w8, w8, #0x1
    // a8: b9000268      str     w8, [x19]
    // ac: 54000140      b.eq    0xd4 <_JIT_ENTRY+0xd4>
    // b0: 7100031f      cmp     w24, #0x0
    // b4: 540001cd      b.le    0xec <_JIT_ENTRY+0xec>
    // b8: f94007e8      ldr     x8, [sp, #0x8]
    // bc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c0: d10022f5      sub     x21, x23, #0x8
    // c4: f9400000      ldr     x0, [x0]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // c8: f81f02e8      stur    x8, [x23, #-0x10]
    // cc: f84107fe      ldr     x30, [sp], #0x10
    // d0: d61f0000      br      x0
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // d8: aa1303e0      mov     x0, x19
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e0: d63f0100      blr     x8
    // e4: 7100031f      cmp     w24, #0x0
    // e8: 54fffe8c      b.gt    0xb8 <_JIT_ENTRY+0xb8>
    // ec: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // f0: aa1703f5      mov     x21, x23
    // f4: f9400000      ldr     x0, [x0]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f8: f84107fe      ldr     x30, [sp], #0x10
    // fc: d61f0000      br      x0
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb9, 0x02, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x28, 0x07, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0xe0, 0x03, 0x19, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x97, 0x22, 0x40, 0xf9,
        0xf8, 0x03, 0x00, 0x2a, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0x35, 0x97, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x97, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x40, 0x01, 0x00, 0x54,
        0x1f, 0x03, 0x00, 0x71, 0xcd, 0x01, 0x00, 0x54,
        0xe8, 0x07, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xe8, 0x02, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x1f, 0x03, 0x00, 0x71,
        0x8c, 0xfe, 0xff, 0x54, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)&PyDict_GetItemRef);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)&_PyErr_SetKeyError);
    patch_aarch64_12x(code + 0x68, (uintptr_t)&_PyErr_SetKeyError);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x94, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x18);
}

void
emit__BINARY_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_INIT_CALL.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 3cdf02a0      ldur    q0, [x21, #-0x10]
    // 4: aa1503e8      mov     x8, x21
    // 8: 9e660009      fmov    x9, d0
    // c: f9400529      ldr     x9, [x9, #0x8]
    // 10: f941c92b      ldr     x11, [x9, #0x390]
    // 14: b9400169      ldr     w9, [x11]
    // 18: 37f80069      tbnz    w9, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 1c: 11000529      add     w9, w9, #0x1
    // 20: b9000169      str     w9, [x11]
    // 24: f940196a      ldr     x10, [x11, #0x30]
    // 28: f94076c9      ldr     x9, [x22, #0xe8]
    // 2c: b9804d4c      ldrsw   x12, [x10, #0x4c]
    // 30: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 34: f90076cc      str     x12, [x22, #0xe8]
    // 38: a900ad34      stp     x20, x11, [x9, #0x8]
    // 3c: b940014c      ldr     w12, [x10]
    // 40: 37f8006c      tbnz    w12, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 44: 1100058c      add     w12, w12, #0x1
    // 48: b900014c      str     w12, [x10]
    // 4c: f900012a      str     x10, [x9]
    // 50: f9400d6c      ldr     x12, [x11, #0x18]
    // 54: f900112c      str     x12, [x9, #0x20]
    // 58: 9103414c      add     x12, x10, #0xd0
    // 5c: f940096b      ldr     x11, [x11, #0x10]
    // 60: f900153f      str     xzr, [x9, #0x28]
    // 64: f9000d2b      str     x11, [x9, #0x18]
    // 68: b980494b      ldrsw   x11, [x10, #0x48]
    // 6c: a903313f      stp     xzr, x12, [x9, #0x30]
    // 70: b900493f      str     wzr, [x9, #0x48]
    // 74: 8b0b0d2b      add     x11, x9, x11, lsl #3
    // 78: 9101416b      add     x11, x11, #0x50
    // 7c: f900212b      str     x11, [x9, #0x40]
    // 80: b940494b      ldr     w11, [x10, #0x48]
    // 84: 71000d7f      cmp     w11, #0x3
    // 88: 5400010b      b.lt    0xa8 <_JIT_ENTRY+0xa8>
    // 8c: 9101812b      add     x11, x9, #0x60
    // 90: 5280004c      mov     w12, #0x2               // =2
    // 94: f800857f      str     xzr, [x11], #0x8
    // 98: 9100058c      add     x12, x12, #0x1
    // 9c: b980494d      ldrsw   x13, [x10, #0x48]
    // a0: eb0d019f      cmp     x12, x13
    // a4: 54ffff8b      b.lt    0x94 <_JIT_ENTRY+0x94>
    // a8: 3d801520      str     q0, [x9, #0x50]
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // b0: d1002115      sub     x21, x8, #0x8
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b8: 5280004a      mov     w10, #0x2               // =2
    // bc: 7900928a      strh    w10, [x20, #0x48]
    // c0: f81f0109      stur    x9, [x8, #-0x10]
    // c4: d61f0000      br      x0
    const unsigned char code_body[200] = {
        0xa0, 0x02, 0xdf, 0x3c, 0xe8, 0x03, 0x15, 0xaa,
        0x09, 0x00, 0x66, 0x9e, 0x29, 0x05, 0x40, 0xf9,
        0x2b, 0xc9, 0x41, 0xf9, 0x69, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x69, 0x01, 0x00, 0xb9, 0x6a, 0x19, 0x40, 0xf9,
        0xc9, 0x76, 0x40, 0xf9, 0x4c, 0x4d, 0x80, 0xb9,
        0x2c, 0x0d, 0x0c, 0x8b, 0xcc, 0x76, 0x00, 0xf9,
        0x34, 0xad, 0x00, 0xa9, 0x4c, 0x01, 0x40, 0xb9,
        0x6c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x4c, 0x01, 0x00, 0xb9, 0x2a, 0x01, 0x00, 0xf9,
        0x6c, 0x0d, 0x40, 0xf9, 0x2c, 0x11, 0x00, 0xf9,
        0x4c, 0x41, 0x03, 0x91, 0x6b, 0x09, 0x40, 0xf9,
        0x3f, 0x15, 0x00, 0xf9, 0x2b, 0x0d, 0x00, 0xf9,
        0x4b, 0x49, 0x80, 0xb9, 0x3f, 0x31, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0x2b, 0x0d, 0x0b, 0x8b,
        0x6b, 0x41, 0x01, 0x91, 0x2b, 0x21, 0x00, 0xf9,
        0x4b, 0x49, 0x40, 0xb9, 0x7f, 0x0d, 0x00, 0x71,
        0x0b, 0x01, 0x00, 0x54, 0x2b, 0x81, 0x01, 0x91,
        0x4c, 0x00, 0x80, 0x52, 0x7f, 0x85, 0x00, 0xf8,
        0x8c, 0x05, 0x00, 0x91, 0x4d, 0x49, 0x80, 0xb9,
        0x9f, 0x01, 0x0d, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0x20, 0x15, 0x80, 0x3d, 0x00, 0x00, 0x00, 0x90,
        0x15, 0x21, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0x4a, 0x00, 0x80, 0x52, 0x8a, 0x92, 0x00, 0x79,
        0x09, 0x01, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xac, (uintptr_t)data);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)data);
}

void
emit__BINARY_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_LIST_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb8      ldr     x24, [x21, #-0x8]!
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 10: f9400708      ldr     x8, [x24, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000661      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 20: f85f82b7      ldur    x23, [x21, #-0x8]
    // 24: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyList_Type
    // 28: f94006e8      ldr     x8, [x23, #0x8]
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyList_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 540005a1      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 38: f9400b08      ldr     x8, [x24, #0x10]
    // 3c: f100251f      cmp     x8, #0x9
    // 40: 54000542      b.hs    0xe8 <_JIT_ENTRY+0xe8>
    // 44: b9401b08      ldr     w8, [x24, #0x18]
    // 48: f9400ae9      ldr     x9, [x23, #0x10]
    // 4c: eb08013f      cmp     x9, x8
    // 50: 540004cd      b.le    0xe8 <_JIT_ENTRY+0xe8>
    // 54: f9400ee9      ldr     x9, [x23, #0x18]
    // 58: f8687939      ldr     x25, [x9, x8, lsl #3]
    // 5c: b9400328      ldr     w8, [x25]
    // 60: 37f80068      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 64: 11000508      add     w8, w8, #0x1
    // 68: b9000328      str     w8, [x25]
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80208      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540001a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 88: f9528d28      ldr     x8, [x9, #0x2518]
    // 8c: b40000a8      cbz     x8, 0xa0 <_JIT_ENTRY+0xa0>
    // 90: f9529122      ldr     x2, [x9, #0x2520]
    // 94: aa1803e0      mov     x0, x24
    // 98: 52800021      mov     w1, #0x1                // =1
    // 9c: d63f0100      blr     x8
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // a4: aa1803e0      mov     x0, x24
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // ac: d63f0100      blr     x8
    // b0: b94002e8      ldr     w8, [x23]
    // b4: 37f80108      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // b8: 71000508      subs    w8, w8, #0x1
    // bc: b90002e8      str     w8, [x23]
    // c0: 540000a1      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c8: aa1703e0      mov     x0, x23
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d8: f9400000      ldr     x0, [x0]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // dc: f81f0279      stur    x25, [x19, #-0x10]
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // ec: aa1303f5      mov     x21, x19
    // f0: f9400000      ldr     x0, [x0]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // f4: f84107fe      ldr     x30, [sp], #0x10
    // f8: d61f0000      br      x0
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x07, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x61, 0x06, 0x00, 0x54,
        0xb7, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0xe8, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa1, 0x05, 0x00, 0x54,
        0x08, 0x0b, 0x40, 0xf9, 0x1f, 0x25, 0x00, 0xf1,
        0x42, 0x05, 0x00, 0x54, 0x08, 0x1b, 0x40, 0xb9,
        0xe9, 0x0a, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xcd, 0x04, 0x00, 0x54, 0xe9, 0x0e, 0x40, 0xf9,
        0x39, 0x79, 0x68, 0xf8, 0x28, 0x03, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x03, 0x00, 0xb9, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x79, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x20);
}

void
emit__BINARY_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_STR_INT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb8      ldr     x24, [x21, #-0x8]!
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 10: f9400708      ldr     x8, [x24, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 540006a1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 20: f85f82b7      ldur    x23, [x21, #-0x8]
    // 24: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyUnicode_Type
    // 28: f94006e8      ldr     x8, [x23, #0x8]
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyUnicode_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 540005e1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // 38: f9400b08      ldr     x8, [x24, #0x10]
    // 3c: f100251f      cmp     x8, #0x9
    // 40: 54000582      b.hs    0xf0 <_JIT_ENTRY+0xf0>
    // 44: b9401b08      ldr     w8, [x24, #0x18]
    // 48: f9400ae9      ldr     x9, [x23, #0x10]
    // 4c: eb08013f      cmp     x9, x8
    // 50: 5400050d      b.le    0xf0 <_JIT_ENTRY+0xf0>
    // 54: b94022e9      ldr     w9, [x23, #0x20]
    // 58: 5302112a      ubfx    w10, w9, #2, #3
    // 5c: 7100095f      cmp     w10, #0x2
    // 60: 540000e0      b.eq    0x7c <_JIT_ENTRY+0x7c>
    // 64: 7100055f      cmp     w10, #0x1
    // 68: 54000121      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 6c: 37280169      tbnz    w9, #0x5, 0x98 <_JIT_ENTRY+0x98>
    // 70: f9401ee9      ldr     x9, [x23, #0x38]
    // 74: 38686939      ldrb    w25, [x9, x8]
    // 78: 1400001c      b       0xe8 <_JIT_ENTRY+0xe8>
    // 7c: 372801c9      tbnz    w9, #0x5, 0xb4 <_JIT_ENTRY+0xb4>
    // 80: f9401ee9      ldr     x9, [x23, #0x38]
    // 84: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // 88: 14000018      b       0xe8 <_JIT_ENTRY+0xe8>
    // 8c: 37280229      tbnz    w9, #0x5, 0xd0 <_JIT_ENTRY+0xd0>
    // 90: f9401ee9      ldr     x9, [x23, #0x38]
    // 94: 14000014      b       0xe4 <_JIT_ENTRY+0xe4>
    // 98: 721a013f      tst     w9, #0x40
    // 9c: 52800509      mov     w9, #0x28               // =40
    // a0: 5280070a      mov     w10, #0x38              // =56
    // a4: 9a890149      csel    x9, x10, x9, eq
    // a8: 8b0902e9      add     x9, x23, x9
    // ac: 38686939      ldrb    w25, [x9, x8]
    // b0: 1400000e      b       0xe8 <_JIT_ENTRY+0xe8>
    // b4: 721a013f      tst     w9, #0x40
    // b8: 52800509      mov     w9, #0x28               // =40
    // bc: 5280070a      mov     w10, #0x38              // =56
    // c0: 9a890149      csel    x9, x10, x9, eq
    // c4: 8b0902e9      add     x9, x23, x9
    // c8: 78687939      ldrh    w25, [x9, x8, lsl #1]
    // cc: 14000007      b       0xe8 <_JIT_ENTRY+0xe8>
    // d0: 721a013f      tst     w9, #0x40
    // d4: 52800509      mov     w9, #0x28               // =40
    // d8: 5280070a      mov     w10, #0x38              // =56
    // dc: 9a890149      csel    x9, x10, x9, eq
    // e0: 8b0902e9      add     x9, x23, x9
    // e4: b8687939      ldr     w25, [x9, x8, lsl #2]
    // e8: 7102033f      cmp     w25, #0x80
    // ec: 540000c3      b.lo    0x104 <_JIT_ENTRY+0x104>
    // f0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // f4: aa1303f5      mov     x21, x19
    // f8: f9400000      ldr     x0, [x0]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // fc: f84107fe      ldr     x30, [sp], #0x10
    // 100: d61f0000      br      x0
    // 104: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 108: b9400308      ldr     w8, [x24]
    // 10c: f940035a      ldr     x26, [x26]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 110: 37f801c8      tbnz    w8, #0x1f, 0x148 <_JIT_ENTRY+0x148>
    // 114: 71000508      subs    w8, w8, #0x1
    // 118: b9000308      str     w8, [x24]
    // 11c: 54000161      b.ne    0x148 <_JIT_ENTRY+0x148>
    // 120: f9528f48      ldr     x8, [x26, #0x2518]
    // 124: b40000a8      cbz     x8, 0x138 <_JIT_ENTRY+0x138>
    // 128: f9529342      ldr     x2, [x26, #0x2520]
    // 12c: aa1803e0      mov     x0, x24
    // 130: 52800021      mov     w1, #0x1                // =1
    // 134: d63f0100      blr     x8
    // 138: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000138:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // 13c: aa1803e0      mov     x0, x24
    // 140: f9400108      ldr     x8, [x8]
    // 0000000000000140:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // 144: d63f0100      blr     x8
    // 148: b94002e8      ldr     w8, [x23]
    // 14c: 37f80108      tbnz    w8, #0x1f, 0x16c <_JIT_ENTRY+0x16c>
    // 150: 71000508      subs    w8, w8, #0x1
    // 154: b90002e8      str     w8, [x23]
    // 158: 540000a1      b.ne    0x16c <_JIT_ENTRY+0x16c>
    // 15c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000015c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 160: aa1703e0      mov     x0, x23
    // 164: f9400108      ldr     x8, [x8]
    // 0000000000000164:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 168: d63f0100      blr     x8
    // 16c: 52800608      mov     w8, #0x30               // =48
    // 170: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000170:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 174: 9ba86b28      umaddl  x8, w25, w8, x26
    // 178: f9400000      ldr     x0, [x0]
    // 0000000000000178:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 17c: 91404908      add     x8, x8, #0x12, lsl #12  // =0x12000
    // 180: 91002108      add     x8, x8, #0x8
    // 184: f81f0268      stur    x8, [x19, #-0x10]
    // 188: f84107fe      ldr     x30, [sp], #0x10
    // 18c: d61f0000      br      x0
    const unsigned char code_body[400] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x07, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa1, 0x06, 0x00, 0x54,
        0xb7, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0xe8, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xe1, 0x05, 0x00, 0x54,
        0x08, 0x0b, 0x40, 0xf9, 0x1f, 0x25, 0x00, 0xf1,
        0x82, 0x05, 0x00, 0x54, 0x08, 0x1b, 0x40, 0xb9,
        0xe9, 0x0a, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0x0d, 0x05, 0x00, 0x54, 0xe9, 0x22, 0x40, 0xb9,
        0x2a, 0x11, 0x02, 0x53, 0x5f, 0x09, 0x00, 0x71,
        0xe0, 0x00, 0x00, 0x54, 0x5f, 0x05, 0x00, 0x71,
        0x21, 0x01, 0x00, 0x54, 0x69, 0x01, 0x28, 0x37,
        0xe9, 0x1e, 0x40, 0xf9, 0x39, 0x69, 0x68, 0x38,
        0x1c, 0x00, 0x00, 0x14, 0xc9, 0x01, 0x28, 0x37,
        0xe9, 0x1e, 0x40, 0xf9, 0x39, 0x79, 0x68, 0x78,
        0x18, 0x00, 0x00, 0x14, 0x29, 0x02, 0x28, 0x37,
        0xe9, 0x1e, 0x40, 0xf9, 0x14, 0x00, 0x00, 0x14,
        0x3f, 0x01, 0x1a, 0x72, 0x09, 0x05, 0x80, 0x52,
        0x0a, 0x07, 0x80, 0x52, 0x49, 0x01, 0x89, 0x9a,
        0xe9, 0x02, 0x09, 0x8b, 0x39, 0x69, 0x68, 0x38,
        0x0e, 0x00, 0x00, 0x14, 0x3f, 0x01, 0x1a, 0x72,
        0x09, 0x05, 0x80, 0x52, 0x0a, 0x07, 0x80, 0x52,
        0x49, 0x01, 0x89, 0x9a, 0xe9, 0x02, 0x09, 0x8b,
        0x39, 0x79, 0x68, 0x78, 0x07, 0x00, 0x00, 0x14,
        0x3f, 0x01, 0x1a, 0x72, 0x09, 0x05, 0x80, 0x52,
        0x0a, 0x07, 0x80, 0x52, 0x49, 0x01, 0x89, 0x9a,
        0xe9, 0x02, 0x09, 0x8b, 0x39, 0x79, 0x68, 0xb8,
        0x3f, 0x03, 0x02, 0x71, 0xc3, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x03, 0x40, 0xb9, 0x5a, 0x03, 0x40, 0xf9,
        0xc8, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0x61, 0x01, 0x00, 0x54,
        0x48, 0x8f, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x42, 0x93, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x06, 0x80, 0x52,
        0x00, 0x00, 0x00, 0x90, 0x28, 0x6b, 0xa8, 0x9b,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x49, 0x40, 0x91,
        0x08, 0x21, 0x00, 0x91, 0x68, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyUnicode_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_PyRuntime+0x0
    // 20: CONTINUE
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xf0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x138, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0x140, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0x15c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x164, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x170, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x178, (uintptr_t)data + 0x20);
}

void
emit__BINARY_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_TUPLE_INT.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb8      ldr     x24, [x21, #-0x8]!
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 10: f9400708      ldr     x8, [x24, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 54000661      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 20: f85f82b7      ldur    x23, [x21, #-0x8]
    // 24: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTuple_Type
    // 28: f94006e8      ldr     x8, [x23, #0x8]
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTuple_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 540005a1      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 38: f9400b08      ldr     x8, [x24, #0x10]
    // 3c: f100251f      cmp     x8, #0x9
    // 40: 54000542      b.hs    0xe8 <_JIT_ENTRY+0xe8>
    // 44: b9401b08      ldr     w8, [x24, #0x18]
    // 48: f9400ae9      ldr     x9, [x23, #0x10]
    // 4c: eb08013f      cmp     x9, x8
    // 50: 540004cd      b.le    0xe8 <_JIT_ENTRY+0xe8>
    // 54: 8b080ee8      add     x8, x23, x8, lsl #3
    // 58: f9400d19      ldr     x25, [x8, #0x18]
    // 5c: b9400328      ldr     w8, [x25]
    // 60: 37f80068      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 64: 11000508      add     w8, w8, #0x1
    // 68: b9000328      str     w8, [x25]
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 37f80208      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b9000308      str     w8, [x24]
    // 7c: 540001a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 88: f9528d28      ldr     x8, [x9, #0x2518]
    // 8c: b40000a8      cbz     x8, 0xa0 <_JIT_ENTRY+0xa0>
    // 90: f9529122      ldr     x2, [x9, #0x2520]
    // 94: aa1803e0      mov     x0, x24
    // 98: 52800021      mov     w1, #0x1                // =1
    // 9c: d63f0100      blr     x8
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // a4: aa1803e0      mov     x0, x24
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // ac: d63f0100      blr     x8
    // b0: b94002e8      ldr     w8, [x23]
    // b4: 37f80108      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // b8: 71000508      subs    w8, w8, #0x1
    // bc: b90002e8      str     w8, [x23]
    // c0: 540000a1      b.ne    0xd4 <_JIT_ENTRY+0xd4>
    // c4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c8: aa1703e0      mov     x0, x23
    // cc: f9400108      ldr     x8, [x8]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d0: d63f0100      blr     x8
    // d4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d8: f9400000      ldr     x0, [x0]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // dc: f81f0279      stur    x25, [x19, #-0x10]
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // ec: aa1303f5      mov     x21, x19
    // f0: f9400000      ldr     x0, [x0]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // f4: f84107fe      ldr     x30, [sp], #0x10
    // f8: d61f0000      br      x0
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb8, 0x8e, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x07, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x61, 0x06, 0x00, 0x54,
        0xb7, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0xe8, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa1, 0x05, 0x00, 0x54,
        0x08, 0x0b, 0x40, 0xf9, 0x1f, 0x25, 0x00, 0xf1,
        0x42, 0x05, 0x00, 0x54, 0x08, 0x1b, 0x40, 0xb9,
        0xe9, 0x0a, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xcd, 0x04, 0x00, 0x54, 0xe8, 0x0e, 0x08, 0x8b,
        0x19, 0x0d, 0x40, 0xf9, 0x28, 0x03, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x28, 0x03, 0x00, 0xb9, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x79, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyTuple_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x20);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_LIST.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyList_FromStackRefSteal
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyList_FromStackRefSteal
    // 14: cb282eb3      sub     x19, x21, w8, uxth #3
    // 18: 92403d01      and     x1, x8, #0xffff
    // 1c: aa1303e0      mov     x0, x19
    // 20: d63f0120      blr     x9
    // 24: b4000160      cbz     x0, 0x50 <_JIT_ENTRY+0x50>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 2c: 52800029      mov     w9, #0x1                // =1
    // 30: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 38: f9400021      ldr     x1, [x1]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f9000260      str     x0, [x19]
    // 40: cb282128      sub     x8, x9, w8, uxth
    // 44: 8b080eb5      add     x21, x21, x8, lsl #3
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0020      br      x1
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0000      br      x0
    const unsigned char code_body[96] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x2e, 0x28, 0xcb,
        0x01, 0x3d, 0x40, 0x92, 0xe0, 0x03, 0x13, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0x60, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x52,
        0x01, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x02, 0x00, 0xf9,
        0x28, 0x21, 0x28, 0xcb, 0xb5, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyList_FromStackRefSteal);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&_PyList_FromStackRefSteal);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x10);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_MAP.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1f03fa      mov     x26, xzr
    // c: 52800041      mov     w1, #0x2                // =2
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 52800043      mov     w3, #0x2                // =2
    // 1c: cb282759      sub     x25, x26, w8, uxth #1
    // 20: cb2832a0      sub     x0, x21, w8, uxth #4
    // 24: 12003d1b      and     w27, w8, #0xffff
    // 28: 92403d18      and     x24, x8, #0xffff
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyDict_FromItems
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyDict_FromItems
    // 34: 91002002      add     x2, x0, #0x8
    // 38: aa1803e4      mov     x4, x24
    // 3c: d63f0100      blr     x8
    // 40: f9402293      ldr     x19, [x20, #0x40]
    // 44: aa0003f7      mov     x23, x0
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 340002bb      cbz     w27, 0xa0 <_JIT_ENTRY+0xa0>
    // 50: d37cef08      lsl     x8, x24, #4
    // 54: 52800029      mov     w9, #0x1                // =1
    // 58: aa180538      orr     x24, x9, x24, lsl #1
    // 5c: 8b190d08      add     x8, x8, x25, lsl #3
    // 60: 8b150108      add     x8, x8, x21
    // 64: 90000015      adrp    x21, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: f94002b5      ldr     x21, [x21]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d100211a      sub     x26, x8, #0x8
    // 70: 14000004      b       0x80 <_JIT_ENTRY+0x80>
    // 74: d1000718      sub     x24, x24, #0x1
    // 78: f100071f      cmp     x24, #0x1
    // 7c: 54000129      b.ls    0xa0 <_JIT_ENTRY+0xa0>
    // 80: f85f8740      ldr     x0, [x26], #-0x8
    // 84: b9400008      ldr     w8, [x0]
    // 88: 37ffff68      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 8c: 71000508      subs    w8, w8, #0x1
    // 90: b9000008      str     w8, [x0]
    // 94: 54ffff01      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 98: d63f02a0      blr     x21
    // 9c: 17fffff6      b       0x74 <_JIT_ENTRY+0x74>
    // a0: b4000177      cbz     x23, 0xcc <_JIT_ENTRY+0xcc>
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // a8: 52800029      mov     w9, #0x1                // =1
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b8: f8397a77      str     x23, [x19, x25, lsl #3]
    // bc: cb282528      sub     x8, x9, w8, uxth #1
    // c0: 8b080e75      add     x21, x19, x8, lsl #3
    // c4: f84107fe      ldr     x30, [sp], #0x10
    // c8: d61f0000      br      x0
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xfa, 0x03, 0x1f, 0xaa, 0x41, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x43, 0x00, 0x80, 0x52, 0x59, 0x27, 0x28, 0xcb,
        0xa0, 0x32, 0x28, 0xcb, 0x1b, 0x3d, 0x00, 0x12,
        0x18, 0x3d, 0x40, 0x92, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x02, 0x20, 0x00, 0x91,
        0xe4, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0xbb, 0x02, 0x00, 0x34,
        0x08, 0xef, 0x7c, 0xd3, 0x29, 0x00, 0x80, 0x52,
        0x38, 0x05, 0x18, 0xaa, 0x08, 0x0d, 0x19, 0x8b,
        0x08, 0x01, 0x15, 0x8b, 0x15, 0x00, 0x00, 0x90,
        0xb5, 0x02, 0x40, 0xf9, 0x1a, 0x21, 0x00, 0xd1,
        0x04, 0x00, 0x00, 0x14, 0x18, 0x07, 0x00, 0xd1,
        0x1f, 0x07, 0x00, 0xf1, 0x29, 0x01, 0x00, 0x54,
        0x40, 0x87, 0x5f, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x68, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x01, 0xff, 0xff, 0x54,
        0xa0, 0x02, 0x3f, 0xd6, 0xf6, 0xff, 0xff, 0x17,
        0x77, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x52, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x77, 0x7a, 0x39, 0xf8, 0x28, 0x25, 0x28, 0xcb,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&_PyDict_FromItems);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xac, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xb0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SET.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: a9bf7bfd      stp     x29, x30, [sp, #-0x10]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySet_New
    // c: aa1f03e0      mov     x0, xzr
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySet_New
    // 14: aa1503f7      mov     x23, x21
    // 18: aa1f03f8      mov     x24, xzr
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b4000740      cbz     x0, 0x110 <_JIT_ENTRY+0x110>
    // 2c: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 34: aa0003f3      mov     x19, x0
    // 38: f940035a      ldr     x26, [x26]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 40: cb3a2319      sub     x25, x24, w26, uxth
    // 44: 72003d1f      tst     w8, #0xffff
    // 48: 540004e0      b.eq    0xe4 <_JIT_ENTRY+0xe4>
    // 4c: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySet_Add
    // 50: 9000001b      adrp    x27, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: 2a1f03f8      mov     w24, wzr
    // 58: f940039c      ldr     x28, [x28]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySet_Add
    // 5c: f940037b      ldr     x27, [x27]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 60: aa1903fd      mov     x29, x25
    // 64: 14000003      b       0x70 <_JIT_ENTRY+0x70>
    // 68: b10007bd      adds    x29, x29, #0x1
    // 6c: 540002a2      b.hs    0xc0 <_JIT_ENTRY+0xc0>
    // 70: 340000b8      cbz     w24, 0x84 <_JIT_ENTRY+0x84>
    // 74: f87d7ae0      ldr     x0, [x23, x29, lsl #3]
    // 78: b9400008      ldr     w8, [x0]
    // 7c: 36f80188      tbz     w8, #0x1f, 0xac <_JIT_ENTRY+0xac>
    // 80: 17fffffa      b       0x68 <_JIT_ENTRY+0x68>
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: aa1303e0      mov     x0, x19
    // 8c: f87d7ae1      ldr     x1, [x23, x29, lsl #3]
    // 90: d63f0380      blr     x28
    // 94: f9402295      ldr     x21, [x20, #0x40]
    // 98: 2a0003f8      mov     w24, w0
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: f87d7ae0      ldr     x0, [x23, x29, lsl #3]
    // a4: b9400008      ldr     w8, [x0]
    // a8: 37fffe08      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b9000008      str     w8, [x0]
    // b4: 54fffda1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // b8: d63f0360      blr     x27
    // bc: 17ffffeb      b       0x68 <_JIT_ENTRY+0x68>
    // c0: 34000138      cbz     w24, 0xe4 <_JIT_ENTRY+0xe4>
    // c4: b9400268      ldr     w8, [x19]
    // c8: 37f804e8      tbnz    w8, #0x1f, 0x164 <_JIT_ENTRY+0x164>
    // cc: 71000508      subs    w8, w8, #0x1
    // d0: b9000268      str     w8, [x19]
    // d4: 54000481      b.ne    0x164 <_JIT_ENTRY+0x164>
    // d8: aa1303e0      mov     x0, x19
    // dc: d63f0360      blr     x27
    // e0: 14000021      b       0x164 <_JIT_ENTRY+0x164>
    // e4: 12003f48      and     w8, w26, #0xffff
    // e8: 52800029      mov     w9, #0x1                // =1
    // ec: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // f0: 4b080128      sub     w8, w9, w8
    // f4: f9400000      ldr     x0, [x0]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // f8: 8b28cea8      add     x8, x21, w8, sxtw #3
    // fc: f8397ab3      str     x19, [x21, x25, lsl #3]
    // 100: aa0803f5      mov     x21, x8
    // 104: f94007fe      ldr     x30, [sp, #0x8]
    // 108: f84107fd      ldr     x29, [sp], #0x10
    // 10c: d61f0000      br      x0
    // 110: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 114: f9400108      ldr     x8, [x8]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 118: 72003d1f      tst     w8, #0xffff
    // 11c: 54000240      b.eq    0x164 <_JIT_ENTRY+0x164>
    // 120: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 124: 92403d08      and     x8, x8, #0xffff
    // 128: d10022f7      sub     x23, x23, #0x8
    // 12c: f9400273      ldr     x19, [x19]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 130: 91000518      add     x24, x8, #0x1
    // 134: 14000004      b       0x144 <_JIT_ENTRY+0x144>
    // 138: d1000718      sub     x24, x24, #0x1
    // 13c: f100071f      cmp     x24, #0x1
    // 140: 54000129      b.ls    0x164 <_JIT_ENTRY+0x164>
    // 144: f85f86e0      ldr     x0, [x23], #-0x8
    // 148: b9400008      ldr     w8, [x0]
    // 14c: 37ffff68      tbnz    w8, #0x1f, 0x138 <_JIT_ENTRY+0x138>
    // 150: 71000508      subs    w8, w8, #0x1
    // 154: b9000008      str     w8, [x0]
    // 158: 54ffff01      b.ne    0x138 <_JIT_ENTRY+0x138>
    // 15c: d63f0260      blr     x19
    // 160: 17fffff6      b       0x138 <_JIT_ENTRY+0x138>
    // 164: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000164:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 168: f9400000      ldr     x0, [x0]
    // 0000000000000168:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 16c: f94007fe      ldr     x30, [sp, #0x8]
    // 170: f84107fd      ldr     x29, [sp], #0x10
    // 174: d61f0000      br      x0
    const unsigned char code_body[376] = {
        0xfd, 0x7b, 0xbf, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x1f, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xf7, 0x03, 0x15, 0xaa,
        0xf8, 0x03, 0x1f, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x07, 0x00, 0xb4, 0x1a, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0xf3, 0x03, 0x00, 0xaa,
        0x5a, 0x03, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x19, 0x23, 0x3a, 0xcb, 0x1f, 0x3d, 0x00, 0x72,
        0xe0, 0x04, 0x00, 0x54, 0x1c, 0x00, 0x00, 0x90,
        0x1b, 0x00, 0x00, 0x90, 0xf8, 0x03, 0x1f, 0x2a,
        0x9c, 0x03, 0x40, 0xf9, 0x7b, 0x03, 0x40, 0xf9,
        0xfd, 0x03, 0x19, 0xaa, 0x03, 0x00, 0x00, 0x14,
        0xbd, 0x07, 0x00, 0xb1, 0xa2, 0x02, 0x00, 0x54,
        0xb8, 0x00, 0x00, 0x34, 0xe0, 0x7a, 0x7d, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x01, 0xf8, 0x36,
        0xfa, 0xff, 0xff, 0x17, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x7a, 0x7d, 0xf8,
        0x80, 0x03, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0xf8, 0x03, 0x00, 0x2a, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x7a, 0x7d, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x08, 0xfe, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa1, 0xfd, 0xff, 0x54,
        0x60, 0x03, 0x3f, 0xd6, 0xeb, 0xff, 0xff, 0x17,
        0x38, 0x01, 0x00, 0x34, 0x68, 0x02, 0x40, 0xb9,
        0xe8, 0x04, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x81, 0x04, 0x00, 0x54,
        0xe0, 0x03, 0x13, 0xaa, 0x60, 0x03, 0x3f, 0xd6,
        0x21, 0x00, 0x00, 0x14, 0x48, 0x3f, 0x00, 0x12,
        0x29, 0x00, 0x80, 0x52, 0x00, 0x00, 0x00, 0x90,
        0x28, 0x01, 0x08, 0x4b, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0xce, 0x28, 0x8b, 0xb3, 0x7a, 0x39, 0xf8,
        0xf5, 0x03, 0x08, 0xaa, 0xfe, 0x07, 0x40, 0xf9,
        0xfd, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x40, 0x02, 0x00, 0x54,
        0x13, 0x00, 0x00, 0x90, 0x08, 0x3d, 0x40, 0x92,
        0xf7, 0x22, 0x00, 0xd1, 0x73, 0x02, 0x40, 0xf9,
        0x18, 0x05, 0x00, 0x91, 0x04, 0x00, 0x00, 0x14,
        0x18, 0x07, 0x00, 0xd1, 0x1f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0xe0, 0x86, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x60, 0x02, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x40, 0xf9,
        0xfd, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PySet_New);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&PySet_New);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)&PySet_Add);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x58, (uintptr_t)&PySet_Add);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x110, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x120, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x12c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x164, (uintptr_t)data + 0x10);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SLICE.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1503f3      mov     x19, x21
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 71000d1f      cmp     w8, #0x3
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: f85f8277      ldur    x23, [x19, #-0x8]
    // 20: 9280005b      mov     x27, #-0x3              // =-3
    // 24: 14000003      b       0x30 <_JIT_ENTRY+0x30>
    // 28: aa1f03f7      mov     x23, xzr
    // 2c: 9280003b      mov     x27, #-0x2              // =-2
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 34: aa1703e2      mov     x2, x23
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 3c: f87b7a7a      ldr     x26, [x19, x27, lsl #3]
    // 40: 12003d08      and     w8, w8, #0xffff
    // 44: aa1a03e0      mov     x0, x26
    // 48: 71000d1f      cmp     w8, #0x3
    // 4c: 1a9f17e8      cset    w8, eq
    // 50: aa2803e8      mvn     x8, x8
    // 54: 8b080e75      add     x21, x19, x8, lsl #3
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySlice_New
    // 5c: f94002b9      ldr     x25, [x21]
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySlice_New
    // 64: aa1903e1      mov     x1, x25
    // 68: d63f0100      blr     x8
    // 6c: b9400348      ldr     w8, [x26]
    // 70: aa0003f8      mov     x24, x0
    // 74: 37f80108      tbnz    w8, #0x1f, 0x94 <_JIT_ENTRY+0x94>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000348      str     w8, [x26]
    // 80: 540000a1      b.ne    0x94 <_JIT_ENTRY+0x94>
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 88: aa1a03e0      mov     x0, x26
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 90: d63f0100      blr     x8
    // 94: b9400328      ldr     w8, [x25]
    // 98: 37f80108      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // 9c: 71000508      subs    w8, w8, #0x1
    // a0: b9000328      str     w8, [x25]
    // a4: 540000a1      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // ac: aa1903e0      mov     x0, x25
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b4: d63f0100      blr     x8
    // b8: b40000d7      cbz     x23, 0xd0 <_JIT_ENTRY+0xd0>
    // bc: b94002e8      ldr     w8, [x23]
    // c0: 37f80088      tbnz    w8, #0x1f, 0xd0 <_JIT_ENTRY+0xd0>
    // c4: 71000508      subs    w8, w8, #0x1
    // c8: b90002e8      str     w8, [x23]
    // cc: 540000e0      b.eq    0xe8 <_JIT_ENTRY+0xe8>
    // d0: b4000178      cbz     x24, 0xfc <_JIT_ENTRY+0xfc>
    // d4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d8: f9400000      ldr     x0, [x0]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // dc: f83b7a78      str     x24, [x19, x27, lsl #3]
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // ec: aa1703e0      mov     x0, x23
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: b5fffef8      cbnz    x24, 0xd4 <_JIT_ENTRY+0xd4>
    // fc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 100: aa1303f5      mov     x21, x19
    // 104: f9400000      ldr     x0, [x0]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d61f0000      br      x0
    const unsigned char code_body[272] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x15, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x1f, 0x0d, 0x00, 0x71,
        0x81, 0x00, 0x00, 0x54, 0x77, 0x82, 0x5f, 0xf8,
        0x5b, 0x00, 0x80, 0x92, 0x03, 0x00, 0x00, 0x14,
        0xf7, 0x03, 0x1f, 0xaa, 0x3b, 0x00, 0x80, 0x92,
        0x08, 0x00, 0x00, 0x90, 0xe2, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x7a, 0x7a, 0x7b, 0xf8,
        0x08, 0x3d, 0x00, 0x12, 0xe0, 0x03, 0x1a, 0xaa,
        0x1f, 0x0d, 0x00, 0x71, 0xe8, 0x17, 0x9f, 0x1a,
        0xe8, 0x03, 0x28, 0xaa, 0x75, 0x0e, 0x08, 0x8b,
        0x08, 0x00, 0x00, 0x90, 0xb9, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x19, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x48, 0x03, 0x40, 0xb9,
        0xf8, 0x03, 0x00, 0xaa, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x48, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x1a, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0x00, 0x00, 0xb4, 0xe8, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x78, 0x01, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x78, 0x7a, 0x3b, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf8, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)&PySlice_New);
    patch_aarch64_12x(code + 0x60, (uintptr_t)&PySlice_New);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xb0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xfc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x10);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_STRING.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_JoinArray
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_JoinArray
    // 1c: cb282eb3      sub     x19, x21, w8, uxth #3
    // 20: 12003d19      and     w25, w8, #0xffff
    // 24: 92403d18      and     x24, x8, #0xffff
    // 28: 5290d808      mov     w8, #0x86c0             // =34496
    // 2c: aa1803e2      mov     x2, x24
    // 30: 8b080120      add     x0, x9, x8
    // 34: aa1303e1      mov     x1, x19
    // 38: d63f0140      blr     x10
    // 3c: aa0003f7      mov     x23, x0
    // 40: 34000239      cbz     w25, 0x84 <_JIT_ENTRY+0x84>
    // 44: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 48: 91000718      add     x24, x24, #0x1
    // 4c: d10022ba      sub     x26, x21, #0x8
    // 50: f9400339      ldr     x25, [x25]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 54: 14000004      b       0x64 <_JIT_ENTRY+0x64>
    // 58: d1000718      sub     x24, x24, #0x1
    // 5c: f100071f      cmp     x24, #0x1
    // 60: 54000129      b.ls    0x84 <_JIT_ENTRY+0x84>
    // 64: f85f8740      ldr     x0, [x26], #-0x8
    // 68: b9400008      ldr     w8, [x0]
    // 6c: 37ffff68      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 70: 71000508      subs    w8, w8, #0x1
    // 74: b9000008      str     w8, [x0]
    // 78: 54ffff01      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 7c: d63f0320      blr     x25
    // 80: 17fffff6      b       0x58 <_JIT_ENTRY+0x58>
    // 84: b4000177      cbz     x23, 0xb0 <_JIT_ENTRY+0xb0>
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8c: 52800029      mov     w9, #0x1                // =1
    // 90: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 98: f9400000      ldr     x0, [x0]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 9c: f9000277      str     x23, [x19]
    // a0: cb282128      sub     x8, x9, w8, uxth
    // a4: 8b080eb5      add     x21, x21, x8, lsl #3
    // a8: f84107fe      ldr     x30, [sp], #0x10
    // ac: d61f0000      br      x0
    // b0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // b8: f84107fe      ldr     x30, [sp], #0x10
    // bc: d61f0000      br      x0
    const unsigned char code_body[192] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0xb3, 0x2e, 0x28, 0xcb,
        0x19, 0x3d, 0x00, 0x12, 0x18, 0x3d, 0x40, 0x92,
        0x08, 0xd8, 0x90, 0x52, 0xe2, 0x03, 0x18, 0xaa,
        0x20, 0x01, 0x08, 0x8b, 0xe1, 0x03, 0x13, 0xaa,
        0x40, 0x01, 0x3f, 0xd6, 0xf7, 0x03, 0x00, 0xaa,
        0x39, 0x02, 0x00, 0x34, 0x19, 0x00, 0x00, 0x90,
        0x18, 0x07, 0x00, 0x91, 0xba, 0x22, 0x00, 0xd1,
        0x39, 0x03, 0x40, 0xf9, 0x04, 0x00, 0x00, 0x14,
        0x18, 0x07, 0x00, 0xd1, 0x1f, 0x07, 0x00, 0xf1,
        0x29, 0x01, 0x00, 0x54, 0x40, 0x87, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xff, 0xff, 0x54, 0x20, 0x03, 0x3f, 0xd6,
        0xf6, 0xff, 0xff, 0x17, 0x77, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x52,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x00, 0xf9,
        0x28, 0x21, 0x28, 0xcb, 0xb5, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)&_PyUnicode_JoinArray);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)&_PyUnicode_JoinArray);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb0, (uintptr_t)data + 0x18);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_TUPLE.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyTuple_FromStackRefSteal
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyTuple_FromStackRefSteal
    // 14: cb282eb3      sub     x19, x21, w8, uxth #3
    // 18: 92403d01      and     x1, x8, #0xffff
    // 1c: aa1303e0      mov     x0, x19
    // 20: d63f0120      blr     x9
    // 24: b4000160      cbz     x0, 0x50 <_JIT_ENTRY+0x50>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 2c: 52800029      mov     w9, #0x1                // =1
    // 30: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 38: f9400021      ldr     x1, [x1]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f9000260      str     x0, [x19]
    // 40: cb282128      sub     x8, x9, w8, uxth
    // 44: 8b080eb5      add     x21, x21, x8, lsl #3
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0020      br      x1
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0000      br      x0
    const unsigned char code_body[96] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x2e, 0x28, 0xcb,
        0x01, 0x3d, 0x40, 0x92, 0xe0, 0x03, 0x13, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0x60, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x52,
        0x01, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x02, 0x00, 0xf9,
        0x28, 0x21, 0x28, 0xcb, 0xb5, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyTuple_FromStackRefSteal);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&_PyTuple_FromStackRefSteal);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x10);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_CLASS.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 1280002a      mov     w10, #-0x2              // =-2
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d09      and     w9, w8, #0xffff
    // 14: 4b09015a      sub     w26, w10, w9
    // 18: 2a2903fb      mvn     w27, w9
    // 1c: f87adaa0      ldr     x0, [x21, w26, sxtw #3]
    // 20: f87bdaab      ldr     x11, [x21, w27, sxtw #3]
    // 24: f940040a      ldr     x10, [x0, #0x8]
    // 28: f100017f      cmp     x11, #0x0
    // 2c: 928000eb      mov     x11, #-0x8              // =-8
    // 30: 1a890538      cinc    w24, w9, ne
    // 34: 9a9f1169      csel    x9, x11, xzr, ne
    // 38: b940a94a      ldr     w10, [x10, #0xa8]
    // 3c: 37f800aa      tbnz    w10, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0000      br      x0
    // 50: f940c80a      ldr     x10, [x0, #0x190]
    // 54: b4ffff6a      cbz     x10, 0x40 <_JIT_ENTRY+0x40>
    // 58: cb282ea8      sub     x8, x21, w8, uxth #3
    // 5c: f9002295      str     x21, [x20, #0x40]
    // 60: aa1803e2      mov     x2, x24
    // 64: f940c80a      ldr     x10, [x0, #0x190]
    // 68: aa1f03e3      mov     x3, xzr
    // 6c: 8b090119      add     x25, x8, x9
    // 70: aa1903e1      mov     x1, x25
    // 74: d63f0140      blr     x10
    // 78: f9402293      ldr     x19, [x20, #0x40]
    // 7c: aa0003f7      mov     x23, x0
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 340001d8      cbz     w24, 0xbc <_JIT_ENTRY+0xbc>
    // 88: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 8c: f940039c      ldr     x28, [x28]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 90: 14000003      b       0x9c <_JIT_ENTRY+0x9c>
    // 94: f1000718      subs    x24, x24, #0x1
    // 98: 54000120      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // 9c: f8408720      ldr     x0, [x25], #0x8
    // a0: b9400008      ldr     w8, [x0]
    // a4: 37ffff88      tbnz    w8, #0x1f, 0x94 <_JIT_ENTRY+0x94>
    // a8: 71000508      subs    w8, w8, #0x1
    // ac: b9000008      str     w8, [x0]
    // b0: 54ffff21      b.ne    0x94 <_JIT_ENTRY+0x94>
    // b4: d63f0380      blr     x28
    // b8: 17fffff7      b       0x94 <_JIT_ENTRY+0x94>
    // bc: f87adaa0      ldr     x0, [x21, w26, sxtw #3]
    // c0: b9400008      ldr     w8, [x0]
    // c4: 37f80088      tbnz    w8, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // c8: 71000508      subs    w8, w8, #0x1
    // cc: b9000008      str     w8, [x0]
    // d0: 54000120      b.eq    0xf4 <_JIT_ENTRY+0xf4>
    // d4: b4000197      cbz     x23, 0x104 <_JIT_ENTRY+0x104>
    // d8: 93407f68      sxtw    x8, w27
    // dc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // e0: f9400000      ldr     x0, [x0]
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e4: f83ada77      str     x23, [x19, w26, sxtw #3]
    // e8: 8b080e75      add     x21, x19, x8, lsl #3
    // ec: f84107fe      ldr     x30, [sp], #0x10
    // f0: d61f0000      br      x0
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // fc: d63f0100      blr     x8
    // 100: b5fffed7      cbnz    x23, 0xd8 <_JIT_ENTRY+0xd8>
    // 104: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 108: aa1303f5      mov     x21, x19
    // 10c: f9400000      ldr     x0, [x0]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 110: f84107fe      ldr     x30, [sp], #0x10
    // 114: d61f0000      br      x0
    const unsigned char code_body[280] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x2a, 0x00, 0x80, 0x12, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x3d, 0x00, 0x12, 0x5a, 0x01, 0x09, 0x4b,
        0xfb, 0x03, 0x29, 0x2a, 0xa0, 0xda, 0x7a, 0xf8,
        0xab, 0xda, 0x7b, 0xf8, 0x0a, 0x04, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x00, 0x80, 0x92,
        0x38, 0x05, 0x89, 0x1a, 0x69, 0x11, 0x9f, 0x9a,
        0x4a, 0xa9, 0x40, 0xb9, 0xaa, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x0a, 0xc8, 0x40, 0xf9, 0x6a, 0xff, 0xff, 0xb4,
        0xa8, 0x2e, 0x28, 0xcb, 0x95, 0x22, 0x00, 0xf9,
        0xe2, 0x03, 0x18, 0xaa, 0x0a, 0xc8, 0x40, 0xf9,
        0xe3, 0x03, 0x1f, 0xaa, 0x19, 0x01, 0x09, 0x8b,
        0xe1, 0x03, 0x19, 0xaa, 0x40, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0xd8, 0x01, 0x00, 0x34,
        0x1c, 0x00, 0x00, 0x90, 0x9c, 0x03, 0x40, 0xf9,
        0x03, 0x00, 0x00, 0x14, 0x18, 0x07, 0x00, 0xf1,
        0x20, 0x01, 0x00, 0x54, 0x20, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0xff, 0xff, 0x54, 0x80, 0x03, 0x3f, 0xd6,
        0xf7, 0xff, 0xff, 0x17, 0xa0, 0xda, 0x7a, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x68, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0xda, 0x3a, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xdc, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data + 0x18);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800029      mov     w9, #-0x2               // =-2
    // c: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyCFunction_Type
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 4b0a013a      sub     w26, w9, w10
    // 1c: 2a2a03fb      mvn     w27, w10
    // 20: f87adaa9      ldr     x9, [x21, w26, sxtw #3]
    // 24: f87bdaab      ldr     x11, [x21, w27, sxtw #3]
    // 28: f940052c      ldr     x12, [x9, #0x8]
    // 2c: f94001ad      ldr     x13, [x13]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyCFunction_Type
    // 30: f100017f      cmp     x11, #0x0
    // 34: 928000eb      mov     x11, #-0x8              // =-8
    // 38: 1a8a0553      cinc    w19, w10, ne
    // 3c: 9a9f116a      csel    x10, x11, xzr, ne
    // 40: eb0d019f      cmp     x12, x13
    // 44: 540001c1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 48: f940092b      ldr     x11, [x9, #0x10]
    // 4c: b940116c      ldr     w12, [x11, #0x10]
    // 50: 7102019f      cmp     w12, #0x80
    // 54: 54000141      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 58: f940056b      ldr     x11, [x11, #0x8]
    // 5c: f9002295      str     x21, [x20, #0x40]
    // 60: cb282ea8      sub     x8, x21, w8, uxth #3
    // 64: f940092c      ldr     x12, [x9, #0x10]
    // 68: 8b0a0119      add     x25, x8, x10
    // 6c: 3940418c      ldrb    w12, [x12, #0x10]
    // 70: 372800ec      tbnz    w12, #0x5, 0x8c <_JIT_ENTRY+0x8c>
    // 74: f9400d20      ldr     x0, [x9, #0x18]
    // 78: 14000006      b       0x90 <_JIT_ENTRY+0x90>
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 84: f84107fe      ldr     x30, [sp], #0x10
    // 88: d61f0000      br      x0
    // 8c: aa1f03e0      mov     x0, xzr
    // 90: aa1903e1      mov     x1, x25
    // 94: aa1303e2      mov     x2, x19
    // 98: d63f0160      blr     x11
    // 9c: f9402297      ldr     x23, [x20, #0x40]
    // a0: aa0003f8      mov     x24, x0
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: 340001d3      cbz     w19, 0xe0 <_JIT_ENTRY+0xe0>
    // ac: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b0: f940039c      ldr     x28, [x28]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b4: 14000003      b       0xc0 <_JIT_ENTRY+0xc0>
    // b8: f1000673      subs    x19, x19, #0x1
    // bc: 54000120      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // c0: f8408720      ldr     x0, [x25], #0x8
    // c4: b9400008      ldr     w8, [x0]
    // c8: 37ffff88      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // cc: 71000508      subs    w8, w8, #0x1
    // d0: b9000008      str     w8, [x0]
    // d4: 54ffff21      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // d8: d63f0380      blr     x28
    // dc: 17fffff7      b       0xb8 <_JIT_ENTRY+0xb8>
    // e0: f87adaa0      ldr     x0, [x21, w26, sxtw #3]
    // e4: b9400008      ldr     w8, [x0]
    // e8: 37f800e8      tbnz    w8, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // ec: 71000508      subs    w8, w8, #0x1
    // f0: b9000008      str     w8, [x0]
    // f4: 54000081      b.ne    0x104 <_JIT_ENTRY+0x104>
    // f8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // fc: f9400108      ldr     x8, [x8]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 100: d63f0100      blr     x8
    // 104: b4000118      cbz     x24, 0x124 <_JIT_ENTRY+0x124>
    // 108: 93407f68      sxtw    x8, w27
    // 10c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 110: f9400000      ldr     x0, [x0]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 114: f83adaf8      str     x24, [x23, w26, sxtw #3]
    // 118: 8b080ef5      add     x21, x23, x8, lsl #3
    // 11c: f84107fe      ldr     x30, [sp], #0x10
    // 120: d61f0000      br      x0
    // 124: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 128: aa1703f5      mov     x21, x23
    // 12c: f9400000      ldr     x0, [x0]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 130: f84107fe      ldr     x30, [sp], #0x10
    // 134: d61f0000      br      x0
    const unsigned char code_body[312] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x12, 0x0d, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0x3a, 0x01, 0x0a, 0x4b, 0xfb, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x7a, 0xf8, 0xab, 0xda, 0x7b, 0xf8,
        0x2c, 0x05, 0x40, 0xf9, 0xad, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x00, 0x80, 0x92,
        0x53, 0x05, 0x8a, 0x1a, 0x6a, 0x11, 0x9f, 0x9a,
        0x9f, 0x01, 0x0d, 0xeb, 0xc1, 0x01, 0x00, 0x54,
        0x2b, 0x09, 0x40, 0xf9, 0x6c, 0x11, 0x40, 0xb9,
        0x9f, 0x01, 0x02, 0x71, 0x41, 0x01, 0x00, 0x54,
        0x6b, 0x05, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xa8, 0x2e, 0x28, 0xcb, 0x2c, 0x09, 0x40, 0xf9,
        0x19, 0x01, 0x0a, 0x8b, 0x8c, 0x41, 0x40, 0x39,
        0xec, 0x00, 0x28, 0x37, 0x20, 0x0d, 0x40, 0xf9,
        0x06, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xe0, 0x03, 0x1f, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x60, 0x01, 0x3f, 0xd6, 0x97, 0x22, 0x40, 0xf9,
        0xf8, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0xd3, 0x01, 0x00, 0x34, 0x1c, 0x00, 0x00, 0x90,
        0x9c, 0x03, 0x40, 0xf9, 0x03, 0x00, 0x00, 0x14,
        0x73, 0x06, 0x00, 0xf1, 0x20, 0x01, 0x00, 0x54,
        0x20, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x21, 0xff, 0xff, 0x54,
        0x80, 0x03, 0x3f, 0xd6, 0xf7, 0xff, 0xff, 0x17,
        0xa0, 0xda, 0x7a, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x18, 0x01, 0x00, 0xb4,
        0x68, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xf8, 0xda, 0x3a, 0xf8,
        0xf5, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x10c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x124, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x12c, (uintptr_t)data + 0x20);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800028      mov     w8, #-0x2               // =-2
    // c: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyCFunction_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d2a      and     w10, w9, #0xffff
    // 18: 4b0a011a      sub     w26, w8, w10
    // 1c: 2a2a03fb      mvn     w27, w10
    // 20: f87adaa8      ldr     x8, [x21, w26, sxtw #3]
    // 24: f87bdaab      ldr     x11, [x21, w27, sxtw #3]
    // 28: f940050c      ldr     x12, [x8, #0x8]
    // 2c: f94001ad      ldr     x13, [x13]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyCFunction_Type
    // 30: f100017f      cmp     x11, #0x0
    // 34: 928000eb      mov     x11, #-0x8              // =-8
    // 38: 1a8a0553      cinc    w19, w10, ne
    // 3c: 9a9f116a      csel    x10, x11, xzr, ne
    // 40: eb0d019f      cmp     x12, x13
    // 44: 540001c1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 48: f940090b      ldr     x11, [x8, #0x10]
    // 4c: b940116b      ldr     w11, [x11, #0x10]
    // 50: 7102097f      cmp     w11, #0x82
    // 54: 54000141      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 58: f9002295      str     x21, [x20, #0x40]
    // 5c: cb292eac      sub     x12, x21, w9, uxth #3
    // 60: f940090b      ldr     x11, [x8, #0x10]
    // 64: 8b0a0199      add     x25, x12, x10
    // 68: 3940416d      ldrb    w13, [x11, #0x10]
    // 6c: f9400569      ldr     x9, [x11, #0x8]
    // 70: 372800ed      tbnz    w13, #0x5, 0x8c <_JIT_ENTRY+0x8c>
    // 74: f9400d00      ldr     x0, [x8, #0x18]
    // 78: 14000006      b       0x90 <_JIT_ENTRY+0x90>
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 84: f84107fe      ldr     x30, [sp], #0x10
    // 88: d61f0000      br      x0
    // 8c: aa1f03e0      mov     x0, xzr
    // 90: aa1903e1      mov     x1, x25
    // 94: aa1303e2      mov     x2, x19
    // 98: aa1f03e3      mov     x3, xzr
    // 9c: d63f0120      blr     x9
    // a0: f9402297      ldr     x23, [x20, #0x40]
    // a4: aa0003f8      mov     x24, x0
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: 340001d3      cbz     w19, 0xe4 <_JIT_ENTRY+0xe4>
    // b0: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b4: f940039c      ldr     x28, [x28]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b8: 14000003      b       0xc4 <_JIT_ENTRY+0xc4>
    // bc: f1000673      subs    x19, x19, #0x1
    // c0: 54000120      b.eq    0xe4 <_JIT_ENTRY+0xe4>
    // c4: f8408720      ldr     x0, [x25], #0x8
    // c8: b9400008      ldr     w8, [x0]
    // cc: 37ffff88      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // d0: 71000508      subs    w8, w8, #0x1
    // d4: b9000008      str     w8, [x0]
    // d8: 54ffff21      b.ne    0xbc <_JIT_ENTRY+0xbc>
    // dc: d63f0380      blr     x28
    // e0: 17fffff7      b       0xbc <_JIT_ENTRY+0xbc>
    // e4: f87adaa0      ldr     x0, [x21, w26, sxtw #3]
    // e8: b9400008      ldr     w8, [x0]
    // ec: 37f800e8      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // f0: 71000508      subs    w8, w8, #0x1
    // f4: b9000008      str     w8, [x0]
    // f8: 54000081      b.ne    0x108 <_JIT_ENTRY+0x108>
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: b4000118      cbz     x24, 0x128 <_JIT_ENTRY+0x128>
    // 10c: 93407f68      sxtw    x8, w27
    // 110: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 114: f9400000      ldr     x0, [x0]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 118: f83adaf8      str     x24, [x23, w26, sxtw #3]
    // 11c: 8b080ef5      add     x21, x23, x8, lsl #3
    // 120: f84107fe      ldr     x30, [sp], #0x10
    // 124: d61f0000      br      x0
    // 128: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 12c: aa1703f5      mov     x21, x23
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 134: f84107fe      ldr     x30, [sp], #0x10
    // 138: d61f0000      br      x0
    // 13c: 00 00 00 00
    const unsigned char code_body[320] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x12, 0x0d, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x3d, 0x00, 0x12,
        0x1a, 0x01, 0x0a, 0x4b, 0xfb, 0x03, 0x2a, 0x2a,
        0xa8, 0xda, 0x7a, 0xf8, 0xab, 0xda, 0x7b, 0xf8,
        0x0c, 0x05, 0x40, 0xf9, 0xad, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x00, 0x80, 0x92,
        0x53, 0x05, 0x8a, 0x1a, 0x6a, 0x11, 0x9f, 0x9a,
        0x9f, 0x01, 0x0d, 0xeb, 0xc1, 0x01, 0x00, 0x54,
        0x0b, 0x09, 0x40, 0xf9, 0x6b, 0x11, 0x40, 0xb9,
        0x7f, 0x09, 0x02, 0x71, 0x41, 0x01, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0xac, 0x2e, 0x29, 0xcb,
        0x0b, 0x09, 0x40, 0xf9, 0x99, 0x01, 0x0a, 0x8b,
        0x6d, 0x41, 0x40, 0x39, 0x69, 0x05, 0x40, 0xf9,
        0xed, 0x00, 0x28, 0x37, 0x00, 0x0d, 0x40, 0xf9,
        0x06, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xe0, 0x03, 0x1f, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0xe3, 0x03, 0x1f, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x97, 0x22, 0x40, 0xf9, 0xf8, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0xd3, 0x01, 0x00, 0x34,
        0x1c, 0x00, 0x00, 0x90, 0x9c, 0x03, 0x40, 0xf9,
        0x03, 0x00, 0x00, 0x14, 0x73, 0x06, 0x00, 0xf1,
        0x20, 0x01, 0x00, 0x54, 0x20, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0xff, 0xff, 0x54, 0x80, 0x03, 0x3f, 0xd6,
        0xf7, 0xff, 0xff, 0x17, 0xa0, 0xda, 0x7a, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x18, 0x01, 0x00, 0xb4, 0x68, 0x7f, 0x40, 0x93,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xf8, 0xda, 0x3a, 0xf8, 0xf5, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x110, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x128, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x130, (uintptr_t)data + 0x20);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_O.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 1c: f100017f      cmp     x11, #0x0
    // 20: 1a8a054a      cinc    w10, w10, ne
    // 24: 9a9f1129      csel    x9, x9, xzr, ne
    // 28: 7100055f      cmp     w10, #0x1
    // 2c: 54000361      b.ne    0x98 <_JIT_ENTRY+0x98>
    // 30: 9280002a      mov     x10, #-0x2              // =-2
    // 34: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyCFunction_Type
    // 38: cb28215a      sub     x26, x10, w8, uxth
    // 3c: f87a7aaa      ldr     x10, [x21, x26, lsl #3]
    // 40: f940054b      ldr     x11, [x10, #0x8]
    // 44: f940018c      ldr     x12, [x12]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyCFunction_Type
    // 48: eb0c017f      cmp     x11, x12
    // 4c: 54000261      b.ne    0x98 <_JIT_ENTRY+0x98>
    // 50: f940094b      ldr     x11, [x10, #0x10]
    // 54: b940116c      ldr     w12, [x11, #0x10]
    // 58: 7100219f      cmp     w12, #0x8
    // 5c: 540001e1      b.ne    0x98 <_JIT_ENTRY+0x98>
    // 60: b94036cc      ldr     w12, [x22, #0x34]
    // 64: 7100019f      cmp     w12, #0x0
    // 68: 5400018d      b.le    0x98 <_JIT_ENTRY+0x98>
    // 6c: cb282ead      sub     x13, x21, w8, uxth #3
    // 70: 5100058c      sub     w12, w12, #0x1
    // 74: f9400568      ldr     x8, [x11, #0x8]
    // 78: f86969b8      ldr     x24, [x13, x9]
    // 7c: b90036cc      str     w12, [x22, #0x34]
    // 80: f9002295      str     x21, [x20, #0x40]
    // 84: f9400949      ldr     x9, [x10, #0x10]
    // 88: 39404129      ldrb    w9, [x9, #0x10]
    // 8c: 372800e9      tbnz    w9, #0x5, 0xa8 <_JIT_ENTRY+0xa8>
    // 90: f9400d40      ldr     x0, [x10, #0x18]
    // 94: 14000006      b       0xac <_JIT_ENTRY+0xac>
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // a0: f84107fe      ldr     x30, [sp], #0x10
    // a4: d61f0000      br      x0
    // a8: aa1f03e0      mov     x0, xzr
    // ac: aa1803e1      mov     x1, x24
    // b0: d63f0100      blr     x8
    // b4: f9402293      ldr     x19, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: aa0003f7      mov     x23, x0
    // c0: b94036c8      ldr     w8, [x22, #0x34]
    // c4: 11000508      add     w8, w8, #0x1
    // c8: b90036c8      str     w8, [x22, #0x34]
    // cc: b9400308      ldr     w8, [x24]
    // d0: 37f80108      tbnz    w8, #0x1f, 0xf0 <_JIT_ENTRY+0xf0>
    // d4: 71000508      subs    w8, w8, #0x1
    // d8: b9000308      str     w8, [x24]
    // dc: 540000a1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e4: aa1803e0      mov     x0, x24
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ec: d63f0100      blr     x8
    // f0: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // f4: b9400008      ldr     w8, [x0]
    // f8: 37f800e8      tbnz    w8, #0x1f, 0x114 <_JIT_ENTRY+0x114>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b9000008      str     w8, [x0]
    // 104: 54000081      b.ne    0x114 <_JIT_ENTRY+0x114>
    // 108: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 10c: f9400108      ldr     x8, [x8]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 110: d63f0100      blr     x8
    // 114: b4000117      cbz     x23, 0x134 <_JIT_ENTRY+0x134>
    // 118: 93407f28      sxtw    x8, w25
    // 11c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000011c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 120: f9400000      ldr     x0, [x0]
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 124: f83a7a77      str     x23, [x19, x26, lsl #3]
    // 128: 8b080e75      add     x21, x19, x8, lsl #3
    // 12c: f84107fe      ldr     x30, [sp], #0x10
    // 130: d61f0000      br      x0
    // 134: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000134:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 138: aa1303f5      mov     x21, x19
    // 13c: f9400000      ldr     x0, [x0]
    // 000000000000013c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 140: f84107fe      ldr     x30, [sp], #0x10
    // 144: d61f0000      br      x0
    const unsigned char code_body[328] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xab, 0xda, 0x79, 0xf8, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x05, 0x8a, 0x1a, 0x29, 0x11, 0x9f, 0x9a,
        0x5f, 0x05, 0x00, 0x71, 0x61, 0x03, 0x00, 0x54,
        0x2a, 0x00, 0x80, 0x92, 0x0c, 0x00, 0x00, 0x90,
        0x5a, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x7a, 0xf8,
        0x4b, 0x05, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x0c, 0xeb, 0x61, 0x02, 0x00, 0x54,
        0x4b, 0x09, 0x40, 0xf9, 0x6c, 0x11, 0x40, 0xb9,
        0x9f, 0x21, 0x00, 0x71, 0xe1, 0x01, 0x00, 0x54,
        0xcc, 0x36, 0x40, 0xb9, 0x9f, 0x01, 0x00, 0x71,
        0x8d, 0x01, 0x00, 0x54, 0xad, 0x2e, 0x28, 0xcb,
        0x8c, 0x05, 0x00, 0x51, 0x68, 0x05, 0x40, 0xf9,
        0xb8, 0x69, 0x69, 0xf8, 0xcc, 0x36, 0x00, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0x49, 0x09, 0x40, 0xf9,
        0x29, 0x41, 0x40, 0x39, 0xe9, 0x00, 0x28, 0x37,
        0x40, 0x0d, 0x40, 0xf9, 0x06, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xe0, 0x03, 0x1f, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0xc8, 0x36, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x36, 0x00, 0xb9, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x7a, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0x01, 0x00, 0xb4,
        0x28, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x7a, 0x3a, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x108, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x11c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x134, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x13c, (uintptr_t)data + 0x20);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_1.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyIntrinsics_UnaryFunctions
    // c: aa1603e0      mov     x0, x22
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyIntrinsics_UnaryFunctions
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 92403d08      and     x8, x8, #0xffff
    // 24: aa1303e1      mov     x1, x19
    // 28: d37ced08      lsl     x8, x8, #4
    // 2c: f8686928      ldr     x8, [x9, x8]
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 540000e0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 50: b40001a0      cbz     x0, 0x84 <_JIT_ENTRY+0x84>
    // 54: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: f9400021      ldr     x1, [x1]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: f81f82a0      stur    x0, [x21, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0020      br      x1
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: aa0003f7      mov     x23, x0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: aa1703e0      mov     x0, x23
    // 80: b5fffeb7      cbnz    x23, 0x54 <_JIT_ENTRY+0x54>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0xed, 0x7c, 0xd3, 0x28, 0x69, 0x68, 0xf8,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa0, 0x01, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0xa0, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xb7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_UnaryFunctions+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x18);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_2.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyIntrinsics_BinaryFunctions
    // c: aa1603e0      mov     x0, x22
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyIntrinsics_BinaryFunctions
    // 18: a97f66b8      ldp     x24, x25, [x21, #-0x10]
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 92403d08      and     x8, x8, #0xffff
    // 24: d37ced08      lsl     x8, x8, #4
    // 28: aa1803e1      mov     x1, x24
    // 2c: aa1903e2      mov     x2, x25
    // 30: f8686928      ldr     x8, [x9, x8]
    // 34: d63f0100      blr     x8
    // 38: f9402293      ldr     x19, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: aa0003f7      mov     x23, x0
    // 44: b9400308      ldr     w8, [x24]
    // 48: 37f80108      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000308      str     w8, [x24]
    // 54: 540000a1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 5c: aa1803e0      mov     x0, x24
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 64: d63f0100      blr     x8
    // 68: b9400328      ldr     w8, [x25]
    // 6c: 37f80088      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 70: 71000508      subs    w8, w8, #0x1
    // 74: b9000328      str     w8, [x25]
    // 78: 54000100      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 7c: b4000197      cbz     x23, 0xac <_JIT_ENTRY+0xac>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: d1002275      sub     x21, x19, #0x8
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81f0277      stur    x23, [x19, #-0x10]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 9c: aa1903e0      mov     x0, x25
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: b5fffed7      cbnz    x23, 0x80 <_JIT_ENTRY+0x80>
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b0: aa1303f5      mov     x21, x19
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // b8: f84107fe      ldr     x30, [sp], #0x10
    // bc: d61f0000      br      x0
    const unsigned char code_body[192] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb8, 0x66, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x08, 0xed, 0x7c, 0xd3,
        0xe1, 0x03, 0x18, 0xaa, 0xe2, 0x03, 0x19, 0xaa,
        0x28, 0x69, 0x68, 0xf8, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_BinaryFunctions+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xac, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)data + 0x18);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_ISINSTANCE.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03fb      mvn     w27, w10
    // 18: f87bdaab      ldr     x11, [x21, w27, sxtw #3]
    // 1c: f100017f      cmp     x11, #0x0
    // 20: 1a8a054a      cinc    w10, w10, ne
    // 24: 9a9f1129      csel    x9, x9, xzr, ne
    // 28: 7100095f      cmp     w10, #0x2
    // 2c: 54000141      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 30: 9280002a      mov     x10, #-0x2              // =-2
    // 34: 528cbb0b      mov     w11, #0x65d8            // =26072
    // 38: cb28215a      sub     x26, x10, w8, uxth
    // 3c: f9400aca      ldr     x10, [x22, #0x10]
    // 40: 72a0006b      movk    w11, #0x3, lsl #16
    // 44: f87a7aac      ldr     x12, [x21, x26, lsl #3]
    // 48: f86b694a      ldr     x10, [x10, x11]
    // 4c: eb0c015f      cmp     x10, x12
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: cb282ea8      sub     x8, x21, w8, uxth #3
    // 68: 8b090108      add     x8, x8, x9
    // 6c: a9406119      ldp     x25, x24, [x8]
    // 70: f9002295      str     x21, [x20, #0x40]
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_IsInstance
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_IsInstance
    // 7c: aa1903e0      mov     x0, x25
    // 80: aa1803e1      mov     x1, x24
    // 84: d63f0100      blr     x8
    // 88: f9402293      ldr     x19, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 37f80540      tbnz    w0, #0x1f, 0x138 <_JIT_ENTRY+0x138>
    // 94: b9400328      ldr     w8, [x25]
    // 98: 2a0003f7      mov     w23, w0
    // 9c: 37f80108      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // a0: 71000508      subs    w8, w8, #0x1
    // a4: b9000328      str     w8, [x25]
    // a8: 540000a1      b.ne    0xbc <_JIT_ENTRY+0xbc>
    // ac: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b0: aa1903e0      mov     x0, x25
    // b4: f9400108      ldr     x8, [x8]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b8: d63f0100      blr     x8
    // bc: b9400308      ldr     w8, [x24]
    // c0: 37f80108      tbnz    w8, #0x1f, 0xe0 <_JIT_ENTRY+0xe0>
    // c4: 71000508      subs    w8, w8, #0x1
    // c8: b9000308      str     w8, [x24]
    // cc: 540000a1      b.ne    0xe0 <_JIT_ENTRY+0xe0>
    // d0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // d4: aa1803e0      mov     x0, x24
    // d8: f9400108      ldr     x8, [x8]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // dc: d63f0100      blr     x8
    // e0: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // e4: 93407f75      sxtw    x21, w27
    // e8: b9400008      ldr     w8, [x0]
    // ec: 37f800e8      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // f0: 71000508      subs    w8, w8, #0x1
    // f4: b9000008      str     w8, [x0]
    // f8: 54000081      b.ne    0x108 <_JIT_ENTRY+0x108>
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 10c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 110: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 114: f9400108      ldr     x8, [x8]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 118: f9400129      ldr     x9, [x9]
    // 0000000000000118:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 11c: 710002ff      cmp     w23, #0x0
    // 120: f9400000      ldr     x0, [x0]
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 124: 8b150e75      add     x21, x19, x21, lsl #3
    // 128: 9a880128      csel    x8, x9, x8, eq
    // 12c: f83a7a68      str     x8, [x19, x26, lsl #3]
    // 130: f84107fe      ldr     x30, [sp], #0x10
    // 134: d61f0000      br      x0
    // 138: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000138:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 13c: aa1303f5      mov     x21, x19
    // 140: f9400000      ldr     x0, [x0]
    // 0000000000000140:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 144: f84107fe      ldr     x30, [sp], #0x10
    // 148: d61f0000      br      x0
    // 14c: 00 00 00 00
    const unsigned char code_body[336] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xfb, 0x03, 0x2a, 0x2a,
        0xab, 0xda, 0x7b, 0xf8, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x05, 0x8a, 0x1a, 0x29, 0x11, 0x9f, 0x9a,
        0x5f, 0x09, 0x00, 0x71, 0x41, 0x01, 0x00, 0x54,
        0x2a, 0x00, 0x80, 0x92, 0x0b, 0xbb, 0x8c, 0x52,
        0x5a, 0x21, 0x28, 0xcb, 0xca, 0x0a, 0x40, 0xf9,
        0x6b, 0x00, 0xa0, 0x72, 0xac, 0x7a, 0x7a, 0xf8,
        0x4a, 0x69, 0x6b, 0xf8, 0x5f, 0x01, 0x0c, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xa8, 0x2e, 0x28, 0xcb,
        0x08, 0x01, 0x09, 0x8b, 0x19, 0x61, 0x40, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x05, 0xf8, 0x37, 0x28, 0x03, 0x40, 0xb9,
        0xf7, 0x03, 0x00, 0x2a, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x7a, 0xf8, 0x75, 0x7f, 0x40, 0x93,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xff, 0x02, 0x00, 0x71,
        0x00, 0x00, 0x40, 0xf9, 0x75, 0x0e, 0x15, 0x8b,
        0x28, 0x01, 0x88, 0x9a, 0x68, 0x7a, 0x3a, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)&PyObject_IsInstance);
    patch_aarch64_21rx(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x108, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x10c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x110, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x114, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x118, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x120, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x138, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x140, (uintptr_t)data + 0x28);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_KW_NON_PY.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 9280002a      mov     x10, #-0x2              // =-2
    // c: 9280004c      mov     x12, #-0x3              // =-3
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f82b9      ldur    x25, [x21, #-0x8]
    // 18: 92403d09      and     x9, x8, #0xffff
    // 1c: 12003d08      and     w8, w8, #0xffff
    // 20: aa1903e3      mov     x3, x25
    // 24: cb09015a      sub     x26, x10, x9
    // 28: 2a2803eb      mvn     w11, w8
    // 2c: cb09019b      sub     x27, x12, x9
    // 30: f87a7aaa      ldr     x10, [x21, x26, lsl #3]
    // 34: 8b2bceab      add     x11, x21, w11, sxtw #3
    // 38: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // 3c: f100015f      cmp     x10, #0x0
    // 40: b940132a      ldr     w10, [x25, #0x10]
    // 44: f9002295      str     x21, [x20, #0x40]
    // 48: 1a88051c      cinc    w28, w8, ne
    // 4c: 928000e8      mov     x8, #-0x8               // =-8
    // 50: 4b0a0389      sub     w9, w28, w10
    // 54: 9a9f1108      csel    x8, x8, xzr, ne
    // 58: 93407d29      sxtw    x9, w9
    // 5c: 8b080178      add     x24, x11, x8
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Vectorcall
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Vectorcall
    // 68: aa1803e1      mov     x1, x24
    // 6c: b2410122      orr     x2, x9, #0x8000000000000000
    // 70: d63f0100      blr     x8
    // 74: f9402293      ldr     x19, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: aa0003f7      mov     x23, x0
    // 80: b9400328      ldr     w8, [x25]
    // 84: 37f80108      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000328      str     w8, [x25]
    // 90: 540000a1      b.ne    0xa4 <_JIT_ENTRY+0xa4>
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 98: aa1903e0      mov     x0, x25
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // a0: d63f0100      blr     x8
    // a4: 340001dc      cbz     w28, 0xdc <_JIT_ENTRY+0xdc>
    // a8: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // ac: f9400339      ldr     x25, [x25]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b0: 14000003      b       0xbc <_JIT_ENTRY+0xbc>
    // b4: f100079c      subs    x28, x28, #0x1
    // b8: 54000120      b.eq    0xdc <_JIT_ENTRY+0xdc>
    // bc: f8408700      ldr     x0, [x24], #0x8
    // c0: b9400008      ldr     w8, [x0]
    // c4: 37ffff88      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // c8: 71000508      subs    w8, w8, #0x1
    // cc: b9000008      str     w8, [x0]
    // d0: 54ffff21      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // d4: d63f0320      blr     x25
    // d8: 17fffff7      b       0xb4 <_JIT_ENTRY+0xb4>
    // dc: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // e0: b9400008      ldr     w8, [x0]
    // e4: 37f80088      tbnz    w8, #0x1f, 0xf4 <_JIT_ENTRY+0xf4>
    // e8: 71000508      subs    w8, w8, #0x1
    // ec: b9000008      str     w8, [x0]
    // f0: 54000100      b.eq    0x110 <_JIT_ENTRY+0x110>
    // f4: b4000177      cbz     x23, 0x120 <_JIT_ENTRY+0x120>
    // f8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // fc: 8b1a0e75      add     x21, x19, x26, lsl #3
    // 100: f9400000      ldr     x0, [x0]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 104: f83b7a77      str     x23, [x19, x27, lsl #3]
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d61f0000      br      x0
    // 110: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 114: f9400108      ldr     x8, [x8]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 118: d63f0100      blr     x8
    // 11c: b5fffef7      cbnz    x23, 0xf8 <_JIT_ENTRY+0xf8>
    // 120: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 124: aa1303f5      mov     x21, x19
    // 128: f9400000      ldr     x0, [x0]
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 12c: f84107fe      ldr     x30, [sp], #0x10
    // 130: d61f0000      br      x0
    // 134: 00 00 00 00
    const unsigned char code_body[312] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x2a, 0x00, 0x80, 0x92, 0x4c, 0x00, 0x80, 0x92,
        0x08, 0x01, 0x40, 0xf9, 0xb9, 0x82, 0x5f, 0xf8,
        0x09, 0x3d, 0x40, 0x92, 0x08, 0x3d, 0x00, 0x12,
        0xe3, 0x03, 0x19, 0xaa, 0x5a, 0x01, 0x09, 0xcb,
        0xeb, 0x03, 0x28, 0x2a, 0x9b, 0x01, 0x09, 0xcb,
        0xaa, 0x7a, 0x7a, 0xf8, 0xab, 0xce, 0x2b, 0x8b,
        0xa0, 0x7a, 0x7b, 0xf8, 0x5f, 0x01, 0x00, 0xf1,
        0x2a, 0x13, 0x40, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0x1c, 0x05, 0x88, 0x1a, 0xe8, 0x00, 0x80, 0x92,
        0x89, 0x03, 0x0a, 0x4b, 0x08, 0x11, 0x9f, 0x9a,
        0x29, 0x7d, 0x40, 0x93, 0x78, 0x01, 0x08, 0x8b,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x18, 0xaa, 0x22, 0x01, 0x41, 0xb2,
        0x00, 0x01, 0x3f, 0xd6, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x28, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xdc, 0x01, 0x00, 0x34,
        0x19, 0x00, 0x00, 0x90, 0x39, 0x03, 0x40, 0xf9,
        0x03, 0x00, 0x00, 0x14, 0x9c, 0x07, 0x00, 0xf1,
        0x20, 0x01, 0x00, 0x54, 0x00, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0xff, 0xff, 0x54, 0x20, 0x03, 0x3f, 0xd6,
        0xf7, 0xff, 0xff, 0x17, 0xa0, 0x7a, 0x7b, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x77, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x0e, 0x1a, 0x8b,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x7a, 0x3b, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0xfe, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)&PyObject_Vectorcall);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xf8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x100, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x110, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x120, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x128, (uintptr_t)data + 0x10);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LEN.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 1c: f100017f      cmp     x11, #0x0
    // 20: 1a8a054a      cinc    w10, w10, ne
    // 24: 9a9f1129      csel    x9, x9, xzr, ne
    // 28: 7100055f      cmp     w10, #0x1
    // 2c: 54000141      b.ne    0x54 <_JIT_ENTRY+0x54>
    // 30: 9280002a      mov     x10, #-0x2              // =-2
    // 34: 528cbc0b      mov     w11, #0x65e0            // =26080
    // 38: cb282158      sub     x24, x10, w8, uxth
    // 3c: f9400aca      ldr     x10, [x22, #0x10]
    // 40: 72a0006b      movk    w11, #0x3, lsl #16
    // 44: f8787aac      ldr     x12, [x21, x24, lsl #3]
    // 48: f86b694a      ldr     x10, [x10, x11]
    // 4c: eb0c015f      cmp     x10, x12
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: cb282ea8      sub     x8, x21, w8, uxth #3
    // 68: f8696917      ldr     x23, [x8, x9]
    // 6c: f9002295      str     x21, [x20, #0x40]
    // 70: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Size
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Size
    // 78: aa1703e0      mov     x0, x23
    // 7c: d63f0100      blr     x8
    // 80: f9402293      ldr     x19, [x20, #0x40]
    // 84: f900229f      str     xzr, [x20, #0x40]
    // 88: b7f80460      tbnz    x0, #0x3f, 0x114 <_JIT_ENTRY+0x114>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyLong_FromSsize_t
    // 90: f9400108      ldr     x8, [x8]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyLong_FromSsize_t
    // 94: d63f0100      blr     x8
    // 98: b4000480      cbz     x0, 0x128 <_JIT_ENTRY+0x128>
    // 9c: f8787aa8      ldr     x8, [x21, x24, lsl #3]
    // a0: b9400109      ldr     w9, [x8]
    // a4: 37f80149      tbnz    w9, #0x1f, 0xcc <_JIT_ENTRY+0xcc>
    // a8: 71000529      subs    w9, w9, #0x1
    // ac: b9000109      str     w9, [x8]
    // b0: 540000e1      b.ne    0xcc <_JIT_ENTRY+0xcc>
    // b4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b8: aa0003f5      mov     x21, x0
    // bc: aa0803e0      mov     x0, x8
    // c0: f9400129      ldr     x9, [x9]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c4: d63f0120      blr     x9
    // c8: aa1503e0      mov     x0, x21
    // cc: b94002e8      ldr     w8, [x23]
    // d0: 93407f35      sxtw    x21, w25
    // d4: 37f80148      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // d8: 71000508      subs    w8, w8, #0x1
    // dc: b90002e8      str     w8, [x23]
    // e0: 540000e1      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // e4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e8: aa0003f9      mov     x25, x0
    // ec: aa1703e0      mov     x0, x23
    // f0: f9400108      ldr     x8, [x8]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // f4: d63f0100      blr     x8
    // f8: aa1903e0      mov     x0, x25
    // fc: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 100: 8b150e75      add     x21, x19, x21, lsl #3
    // 104: f9400021      ldr     x1, [x1]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 108: f8387a60      str     x0, [x19, x24, lsl #3]
    // 10c: f84107fe      ldr     x30, [sp], #0x10
    // 110: d61f0020      br      x1
    // 114: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 118: aa1303f5      mov     x21, x19
    // 11c: f9400000      ldr     x0, [x0]
    // 000000000000011c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 120: f84107fe      ldr     x30, [sp], #0x10
    // 124: d61f0000      br      x0
    // 128: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 12c: f9400108      ldr     x8, [x8]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 130: f90086c8      str     x8, [x22, #0x108]
    // 134: f9002293      str     x19, [x20, #0x40]
    // 138: f84107fe      ldr     x30, [sp], #0x10
    // 13c: d65f03c0      ret
    const unsigned char code_body[320] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xab, 0xda, 0x79, 0xf8, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x05, 0x8a, 0x1a, 0x29, 0x11, 0x9f, 0x9a,
        0x5f, 0x05, 0x00, 0x71, 0x41, 0x01, 0x00, 0x54,
        0x2a, 0x00, 0x80, 0x92, 0x0b, 0xbc, 0x8c, 0x52,
        0x58, 0x21, 0x28, 0xcb, 0xca, 0x0a, 0x40, 0xf9,
        0x6b, 0x00, 0xa0, 0x72, 0xac, 0x7a, 0x78, 0xf8,
        0x4a, 0x69, 0x6b, 0xf8, 0x5f, 0x01, 0x0c, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xa8, 0x2e, 0x28, 0xcb,
        0x17, 0x69, 0x69, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x60, 0x04, 0xf8, 0xb7, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x80, 0x04, 0x00, 0xb4, 0xa8, 0x7a, 0x78, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x49, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0xe8, 0x02, 0x40, 0xb9,
        0x35, 0x7f, 0x40, 0x93, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf9, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x19, 0xaa, 0x01, 0x00, 0x00, 0x90,
        0x75, 0x0e, 0x15, 0x8b, 0x21, 0x00, 0x40, 0xf9,
        0x60, 0x7a, 0x38, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x20, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xc8, 0x86, 0x00, 0xf9, 0x93, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: EXECUTOR
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)&PyObject_Size);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)&PyLong_FromSsize_t);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xe4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xfc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x114, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x11c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x128, (uintptr_t)data + 0x20);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LIST_APPEND.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 528cbd08      mov     w8, #0x65e8             // =26088
    // 8: f9400ac9      ldr     x9, [x22, #0x10]
    // c: aa1503f3      mov     x19, x21
    // 10: 72a00068      movk    w8, #0x3, lsl #16
    // 14: f85e8e77      ldr     x23, [x19, #-0x18]!
    // 18: f8686928      ldr     x8, [x9, x8]
    // 1c: eb17011f      cmp     x8, x23
    // 20: 540000a1      b.ne    0x34 <_JIT_ENTRY+0x34>
    // 24: f9400678      ldr     x24, [x19, #0x8]
    // 28: f9400708      ldr     x8, [x24, #0x8]
    // 2c: 3942ad08      ldrb    w8, [x8, #0xab]
    // 30: 370800a8      tbnz    w8, #0x1, 0x44 <_JIT_ENTRY+0x44>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: f9400b08      ldr     x8, [x24, #0x10]
    // 48: f9401309      ldr     x9, [x24, #0x20]
    // 4c: f9400a61      ldr     x1, [x19, #0x10]
    // 50: eb08013f      cmp     x9, x8
    // 54: 5400012d      b.le    0x78 <_JIT_ENTRY+0x78>
    // 58: f9400f09      ldr     x9, [x24, #0x18]
    // 5c: 9100050a      add     x10, x8, #0x1
    // 60: 52800039      mov     w25, #0x1               // =1
    // 64: f8287921      str     x1, [x9, x8, lsl #3]
    // 68: f9000b0a      str     x10, [x24, #0x10]
    // 6c: b9400308      ldr     w8, [x24]
    // 70: 36f80148      tbz     w8, #0x1f, 0x98 <_JIT_ENTRY+0x98>
    // 74: 14000010      b       0xb4 <_JIT_ENTRY+0xb4>
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyList_AppendTakeRefListResize
    // 7c: aa1803e0      mov     x0, x24
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyList_AppendTakeRefListResize
    // 84: d63f0100      blr     x8
    // 88: 7100001f      cmp     w0, #0x0
    // 8c: 1a9f17f9      cset    w25, eq
    // 90: b9400308      ldr     w8, [x24]
    // 94: 37f80108      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000308      str     w8, [x24]
    // a0: 540000a1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a8: aa1803e0      mov     x0, x24
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: b94002e8      ldr     w8, [x23]
    // b8: 37f80088      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b90002e8      str     w8, [x23]
    // c4: 540000e0      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // c8: 36000179      tbz     w25, #0x0, 0xf4 <_JIT_ENTRY+0xf4>
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d0: aa1303f5      mov     x21, x19
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e4: aa1703e0      mov     x0, x23
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ec: d63f0100      blr     x8
    // f0: 3707fef9      tbnz    w25, #0x0, 0xcc <_JIT_ENTRY+0xcc>
    // f4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // f8: f9400000      ldr     x0, [x0]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // fc: f84107fe      ldr     x30, [sp], #0x10
    // 100: d61f0000      br      x0
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0xbd, 0x8c, 0x52,
        0xc9, 0x0a, 0x40, 0xf9, 0xf3, 0x03, 0x15, 0xaa,
        0x68, 0x00, 0xa0, 0x72, 0x77, 0x8e, 0x5e, 0xf8,
        0x28, 0x69, 0x68, 0xf8, 0x1f, 0x01, 0x17, 0xeb,
        0xa1, 0x00, 0x00, 0x54, 0x78, 0x06, 0x40, 0xf9,
        0x08, 0x07, 0x40, 0xf9, 0x08, 0xad, 0x42, 0x39,
        0xa8, 0x00, 0x08, 0x37, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x0b, 0x40, 0xf9,
        0x09, 0x13, 0x40, 0xf9, 0x61, 0x0a, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x2d, 0x01, 0x00, 0x54,
        0x09, 0x0f, 0x40, 0xf9, 0x0a, 0x05, 0x00, 0x91,
        0x39, 0x00, 0x80, 0x52, 0x21, 0x79, 0x28, 0xf8,
        0x0a, 0x0b, 0x00, 0xf9, 0x08, 0x03, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x36, 0x10, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x1f, 0x00, 0x00, 0x71, 0xf9, 0x17, 0x9f, 0x1a,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x79, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf9, 0xfe, 0x07, 0x37, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)data + 0x10);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800029      mov     w9, #-0x2               // =-2
    // c: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethodDescr_Type
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 4b0a0138      sub     w24, w9, w10
    // 1c: 2a2a03f9      mvn     w25, w10
    // 20: f878daa9      ldr     x9, [x21, w24, sxtw #3]
    // 24: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 28: f940052c      ldr     x12, [x9, #0x8]
    // 2c: f94001ad      ldr     x13, [x13]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethodDescr_Type
    // 30: f100017f      cmp     x11, #0x0
    // 34: 928000eb      mov     x11, #-0x8              // =-8
    // 38: 1a8a055a      cinc    w26, w10, ne
    // 3c: 9a9f116b      csel    x11, x11, xzr, ne
    // 40: eb0d019f      cmp     x12, x13
    // 44: 54000181      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 48: f940152a      ldr     x10, [x9, #0x28]
    // 4c: b940114c      ldr     w12, [x10, #0x10]
    // 50: 7102019f      cmp     w12, #0x80
    // 54: 54000101      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 58: cb282ea8      sub     x8, x21, w8, uxth #3
    // 5c: 8b0b011b      add     x27, x8, x11
    // 60: f9400928      ldr     x8, [x9, #0x10]
    // 64: f9400360      ldr     x0, [x27]
    // 68: f9400409      ldr     x9, [x0, #0x8]
    // 6c: eb08013f      cmp     x9, x8
    // 70: 540000a0      b.eq    0x84 <_JIT_ENTRY+0x84>
    // 74: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 51000748      sub     w8, w26, #0x1
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: 91002361      add     x1, x27, #0x8
    // 90: f9400549      ldr     x9, [x10, #0x8]
    // 94: 93407d02      sxtw    x2, w8
    // 98: d63f0120      blr     x9
    // 9c: f9402293      ldr     x19, [x20, #0x40]
    // a0: aa0003f7      mov     x23, x0
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: 340001da      cbz     w26, 0xe0 <_JIT_ENTRY+0xe0>
    // ac: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b0: f940039c      ldr     x28, [x28]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b4: 14000003      b       0xc0 <_JIT_ENTRY+0xc0>
    // b8: f100075a      subs    x26, x26, #0x1
    // bc: 54000120      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // c0: f8408760      ldr     x0, [x27], #0x8
    // c4: b9400008      ldr     w8, [x0]
    // c8: 37ffff88      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // cc: 71000508      subs    w8, w8, #0x1
    // d0: b9000008      str     w8, [x0]
    // d4: 54ffff21      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // d8: d63f0380      blr     x28
    // dc: 17fffff7      b       0xb8 <_JIT_ENTRY+0xb8>
    // e0: f878daa0      ldr     x0, [x21, w24, sxtw #3]
    // e4: b9400008      ldr     w8, [x0]
    // e8: 37f800e8      tbnz    w8, #0x1f, 0x104 <_JIT_ENTRY+0x104>
    // ec: 71000508      subs    w8, w8, #0x1
    // f0: b9000008      str     w8, [x0]
    // f4: 54000081      b.ne    0x104 <_JIT_ENTRY+0x104>
    // f8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // fc: f9400108      ldr     x8, [x8]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 100: d63f0100      blr     x8
    // 104: b4000117      cbz     x23, 0x124 <_JIT_ENTRY+0x124>
    // 108: 93407f28      sxtw    x8, w25
    // 10c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 110: f9400000      ldr     x0, [x0]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 114: f838da77      str     x23, [x19, w24, sxtw #3]
    // 118: 8b080e75      add     x21, x19, x8, lsl #3
    // 11c: f84107fe      ldr     x30, [sp], #0x10
    // 120: d61f0000      br      x0
    // 124: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 128: aa1303f5      mov     x21, x19
    // 12c: f9400000      ldr     x0, [x0]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 130: f84107fe      ldr     x30, [sp], #0x10
    // 134: d61f0000      br      x0
    const unsigned char code_body[312] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x12, 0x0d, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0x38, 0x01, 0x0a, 0x4b, 0xf9, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x78, 0xf8, 0xab, 0xda, 0x79, 0xf8,
        0x2c, 0x05, 0x40, 0xf9, 0xad, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x00, 0x80, 0x92,
        0x5a, 0x05, 0x8a, 0x1a, 0x6b, 0x11, 0x9f, 0x9a,
        0x9f, 0x01, 0x0d, 0xeb, 0x81, 0x01, 0x00, 0x54,
        0x2a, 0x15, 0x40, 0xf9, 0x4c, 0x11, 0x40, 0xb9,
        0x9f, 0x01, 0x02, 0x71, 0x01, 0x01, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x1b, 0x01, 0x0b, 0x8b,
        0x28, 0x09, 0x40, 0xf9, 0x60, 0x03, 0x40, 0xf9,
        0x09, 0x04, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x48, 0x07, 0x00, 0x51,
        0x95, 0x22, 0x00, 0xf9, 0x61, 0x23, 0x00, 0x91,
        0x49, 0x05, 0x40, 0xf9, 0x02, 0x7d, 0x40, 0x93,
        0x20, 0x01, 0x3f, 0xd6, 0x93, 0x22, 0x40, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0xda, 0x01, 0x00, 0x34, 0x1c, 0x00, 0x00, 0x90,
        0x9c, 0x03, 0x40, 0xf9, 0x03, 0x00, 0x00, 0x14,
        0x5a, 0x07, 0x00, 0xf1, 0x20, 0x01, 0x00, 0x54,
        0x60, 0x87, 0x40, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0xff, 0xff, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x21, 0xff, 0xff, 0x54,
        0x80, 0x03, 0x3f, 0xd6, 0xf7, 0xff, 0xff, 0x17,
        0xa0, 0xda, 0x78, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0x01, 0x00, 0xb4,
        0x28, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0xda, 0x38, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x10c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x124, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x12c, (uintptr_t)data + 0x20);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800029      mov     w9, #-0x2               // =-2
    // c: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethodDescr_Type
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d0a      and     w10, w8, #0xffff
    // 18: 4b0a0138      sub     w24, w9, w10
    // 1c: 2a2a03f9      mvn     w25, w10
    // 20: f878daa9      ldr     x9, [x21, w24, sxtw #3]
    // 24: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 28: f940052c      ldr     x12, [x9, #0x8]
    // 2c: f94001ad      ldr     x13, [x13]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethodDescr_Type
    // 30: f100017f      cmp     x11, #0x0
    // 34: 928000eb      mov     x11, #-0x8              // =-8
    // 38: 1a8a055a      cinc    w26, w10, ne
    // 3c: 9a9f116b      csel    x11, x11, xzr, ne
    // 40: eb0d019f      cmp     x12, x13
    // 44: 54000181      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 48: f940152a      ldr     x10, [x9, #0x28]
    // 4c: b940114c      ldr     w12, [x10, #0x10]
    // 50: 7102099f      cmp     w12, #0x82
    // 54: 54000101      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 58: cb282ea8      sub     x8, x21, w8, uxth #3
    // 5c: 8b0b011b      add     x27, x8, x11
    // 60: f9400928      ldr     x8, [x9, #0x10]
    // 64: f9400360      ldr     x0, [x27]
    // 68: f9400409      ldr     x9, [x0, #0x8]
    // 6c: eb08013f      cmp     x9, x8
    // 70: 540000a0      b.eq    0x84 <_JIT_ENTRY+0x84>
    // 74: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 51000748      sub     w8, w26, #0x1
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: 91002361      add     x1, x27, #0x8
    // 90: f9400549      ldr     x9, [x10, #0x8]
    // 94: 93407d02      sxtw    x2, w8
    // 98: aa1f03e3      mov     x3, xzr
    // 9c: d63f0120      blr     x9
    // a0: f9402293      ldr     x19, [x20, #0x40]
    // a4: aa0003f7      mov     x23, x0
    // a8: f900229f      str     xzr, [x20, #0x40]
    // ac: 340001da      cbz     w26, 0xe4 <_JIT_ENTRY+0xe4>
    // b0: 9000001c      adrp    x28, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b4: f940039c      ldr     x28, [x28]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b8: 14000003      b       0xc4 <_JIT_ENTRY+0xc4>
    // bc: f100075a      subs    x26, x26, #0x1
    // c0: 54000120      b.eq    0xe4 <_JIT_ENTRY+0xe4>
    // c4: f8408760      ldr     x0, [x27], #0x8
    // c8: b9400008      ldr     w8, [x0]
    // cc: 37ffff88      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // d0: 71000508      subs    w8, w8, #0x1
    // d4: b9000008      str     w8, [x0]
    // d8: 54ffff21      b.ne    0xbc <_JIT_ENTRY+0xbc>
    // dc: d63f0380      blr     x28
    // e0: 17fffff7      b       0xbc <_JIT_ENTRY+0xbc>
    // e4: f878daa0      ldr     x0, [x21, w24, sxtw #3]
    // e8: b9400008      ldr     w8, [x0]
    // ec: 37f800e8      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // f0: 71000508      subs    w8, w8, #0x1
    // f4: b9000008      str     w8, [x0]
    // f8: 54000081      b.ne    0x108 <_JIT_ENTRY+0x108>
    // fc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: b4000117      cbz     x23, 0x128 <_JIT_ENTRY+0x128>
    // 10c: 93407f28      sxtw    x8, w25
    // 110: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 114: f9400000      ldr     x0, [x0]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 118: f838da77      str     x23, [x19, w24, sxtw #3]
    // 11c: 8b080e75      add     x21, x19, x8, lsl #3
    // 120: f84107fe      ldr     x30, [sp], #0x10
    // 124: d61f0000      br      x0
    // 128: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 12c: aa1303f5      mov     x21, x19
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 134: f84107fe      ldr     x30, [sp], #0x10
    // 138: d61f0000      br      x0
    // 13c: 00 00 00 00
    const unsigned char code_body[320] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x12, 0x0d, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0a, 0x3d, 0x00, 0x12,
        0x38, 0x01, 0x0a, 0x4b, 0xf9, 0x03, 0x2a, 0x2a,
        0xa9, 0xda, 0x78, 0xf8, 0xab, 0xda, 0x79, 0xf8,
        0x2c, 0x05, 0x40, 0xf9, 0xad, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0xeb, 0x00, 0x80, 0x92,
        0x5a, 0x05, 0x8a, 0x1a, 0x6b, 0x11, 0x9f, 0x9a,
        0x9f, 0x01, 0x0d, 0xeb, 0x81, 0x01, 0x00, 0x54,
        0x2a, 0x15, 0x40, 0xf9, 0x4c, 0x11, 0x40, 0xb9,
        0x9f, 0x09, 0x02, 0x71, 0x01, 0x01, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x1b, 0x01, 0x0b, 0x8b,
        0x28, 0x09, 0x40, 0xf9, 0x60, 0x03, 0x40, 0xf9,
        0x09, 0x04, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x48, 0x07, 0x00, 0x51,
        0x95, 0x22, 0x00, 0xf9, 0x61, 0x23, 0x00, 0x91,
        0x49, 0x05, 0x40, 0xf9, 0x02, 0x7d, 0x40, 0x93,
        0xe3, 0x03, 0x1f, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0xf7, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0xda, 0x01, 0x00, 0x34,
        0x1c, 0x00, 0x00, 0x90, 0x9c, 0x03, 0x40, 0xf9,
        0x03, 0x00, 0x00, 0x14, 0x5a, 0x07, 0x00, 0xf1,
        0x20, 0x01, 0x00, 0x54, 0x60, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0xff, 0xff, 0x54, 0x80, 0x03, 0x3f, 0xd6,
        0xf7, 0xff, 0xff, 0x17, 0xa0, 0xda, 0x78, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x17, 0x01, 0x00, 0xb4, 0x28, 0x7f, 0x40, 0x93,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x77, 0xda, 0x38, 0xf8, 0x75, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x110, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x128, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x130, (uintptr_t)data + 0x20);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03f9      mvn     w25, w10
    // 18: f879daab      ldr     x11, [x21, w25, sxtw #3]
    // 1c: f100017f      cmp     x11, #0x0
    // 20: 1a8a054a      cinc    w10, w10, ne
    // 24: 9a9f1129      csel    x9, x9, xzr, ne
    // 28: 7100055f      cmp     w10, #0x1
    // 2c: 540007a1      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 30: 9280002a      mov     x10, #-0x2              // =-2
    // 34: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethodDescr_Type
    // 38: cb28215a      sub     x26, x10, w8, uxth
    // 3c: f87a7aaa      ldr     x10, [x21, x26, lsl #3]
    // 40: f940054b      ldr     x11, [x10, #0x8]
    // 44: f940018c      ldr     x12, [x12]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethodDescr_Type
    // 48: eb0c017f      cmp     x11, x12
    // 4c: 540006a1      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 50: cb282ea8      sub     x8, x21, w8, uxth #3
    // 54: f8696917      ldr     x23, [x8, x9]
    // 58: f9400948      ldr     x8, [x10, #0x10]
    // 5c: f94006e9      ldr     x9, [x23, #0x8]
    // 60: eb08013f      cmp     x9, x8
    // 64: 540005e1      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 68: f9401548      ldr     x8, [x10, #0x28]
    // 6c: b9401109      ldr     w9, [x8, #0x10]
    // 70: 7100113f      cmp     w9, #0x4
    // 74: 54000561      b.ne    0x120 <_JIT_ENTRY+0x120>
    // 78: b94036c9      ldr     w9, [x22, #0x34]
    // 7c: 7100013f      cmp     w9, #0x0
    // 80: 5400050d      b.le    0x120 <_JIT_ENTRY+0x120>
    // 84: f9400508      ldr     x8, [x8, #0x8]
    // 88: 51000529      sub     w9, w9, #0x1
    // 8c: aa1703e0      mov     x0, x23
    // 90: aa1f03e1      mov     x1, xzr
    // 94: b90036c9      str     w9, [x22, #0x34]
    // 98: f9002295      str     x21, [x20, #0x40]
    // 9c: d63f0100      blr     x8
    // a0: f9402293      ldr     x19, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: aa0003f8      mov     x24, x0
    // ac: b94036c8      ldr     w8, [x22, #0x34]
    // b0: 11000508      add     w8, w8, #0x1
    // b4: b90036c8      str     w8, [x22, #0x34]
    // b8: b94002e8      ldr     w8, [x23]
    // bc: 37f80108      tbnz    w8, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // c0: 71000508      subs    w8, w8, #0x1
    // c4: b90002e8      str     w8, [x23]
    // c8: 540000a1      b.ne    0xdc <_JIT_ENTRY+0xdc>
    // cc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // d0: aa1703e0      mov     x0, x23
    // d4: f9400108      ldr     x8, [x8]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d8: d63f0100      blr     x8
    // dc: f87a7aa0      ldr     x0, [x21, x26, lsl #3]
    // e0: b9400008      ldr     w8, [x0]
    // e4: 37f800e8      tbnz    w8, #0x1f, 0x100 <_JIT_ENTRY+0x100>
    // e8: 71000508      subs    w8, w8, #0x1
    // ec: b9000008      str     w8, [x0]
    // f0: 54000081      b.ne    0x100 <_JIT_ENTRY+0x100>
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // fc: d63f0100      blr     x8
    // 100: b4000198      cbz     x24, 0x130 <_JIT_ENTRY+0x130>
    // 104: 93407f28      sxtw    x8, w25
    // 108: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10c: f9400000      ldr     x0, [x0]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 110: f83a7a78      str     x24, [x19, x26, lsl #3]
    // 114: 8b080e75      add     x21, x19, x8, lsl #3
    // 118: f84107fe      ldr     x30, [sp], #0x10
    // 11c: d61f0000      br      x0
    // 120: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 124: f9400000      ldr     x0, [x0]
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 128: f84107fe      ldr     x30, [sp], #0x10
    // 12c: d61f0000      br      x0
    // 130: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 134: aa1303f5      mov     x21, x19
    // 138: f9400000      ldr     x0, [x0]
    // 0000000000000138:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 13c: f84107fe      ldr     x30, [sp], #0x10
    // 140: d61f0000      br      x0
    // 144: 00 00 00 00
    const unsigned char code_body[328] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xf9, 0x03, 0x2a, 0x2a,
        0xab, 0xda, 0x79, 0xf8, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x05, 0x8a, 0x1a, 0x29, 0x11, 0x9f, 0x9a,
        0x5f, 0x05, 0x00, 0x71, 0xa1, 0x07, 0x00, 0x54,
        0x2a, 0x00, 0x80, 0x92, 0x0c, 0x00, 0x00, 0x90,
        0x5a, 0x21, 0x28, 0xcb, 0xaa, 0x7a, 0x7a, 0xf8,
        0x4b, 0x05, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x0c, 0xeb, 0xa1, 0x06, 0x00, 0x54,
        0xa8, 0x2e, 0x28, 0xcb, 0x17, 0x69, 0x69, 0xf8,
        0x48, 0x09, 0x40, 0xf9, 0xe9, 0x06, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xe1, 0x05, 0x00, 0x54,
        0x48, 0x15, 0x40, 0xf9, 0x09, 0x11, 0x40, 0xb9,
        0x3f, 0x11, 0x00, 0x71, 0x61, 0x05, 0x00, 0x54,
        0xc9, 0x36, 0x40, 0xb9, 0x3f, 0x01, 0x00, 0x71,
        0x0d, 0x05, 0x00, 0x54, 0x08, 0x05, 0x40, 0xf9,
        0x29, 0x05, 0x00, 0x51, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x1f, 0xaa, 0xc9, 0x36, 0x00, 0xb9,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf8, 0x03, 0x00, 0xaa, 0xc8, 0x36, 0x40, 0xb9,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x36, 0x00, 0xb9,
        0xe8, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xa0, 0x7a, 0x7a, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0x01, 0x00, 0xb4, 0x28, 0x7f, 0x40, 0x93,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x78, 0x7a, 0x3a, 0xf8, 0x75, 0x0e, 0x08, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x108, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x120, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x130, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x138, (uintptr_t)data + 0x20);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_O.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 928000e9      mov     x9, #-0x8               // =-8
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d0a      and     w10, w8, #0xffff
    // 14: 2a2a03fa      mvn     w26, w10
    // 18: f87adaab      ldr     x11, [x21, w26, sxtw #3]
    // 1c: f100017f      cmp     x11, #0x0
    // 20: 1a8a054a      cinc    w10, w10, ne
    // 24: 9a9f1129      csel    x9, x9, xzr, ne
    // 28: 7100095f      cmp     w10, #0x2
    // 2c: 540002e1      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 30: 9280002a      mov     x10, #-0x2              // =-2
    // 34: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethodDescr_Type
    // 38: cb28215b      sub     x27, x10, w8, uxth
    // 3c: f87b7aab      ldr     x11, [x21, x27, lsl #3]
    // 40: f940056a      ldr     x10, [x11, #0x8]
    // 44: f940018c      ldr     x12, [x12]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethodDescr_Type
    // 48: eb0c015f      cmp     x10, x12
    // 4c: 540001e1      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 50: f940156a      ldr     x10, [x11, #0x28]
    // 54: b940114c      ldr     w12, [x10, #0x10]
    // 58: 7100219f      cmp     w12, #0x8
    // 5c: 54000161      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 60: b94036cc      ldr     w12, [x22, #0x34]
    // 64: 7100019f      cmp     w12, #0x0
    // 68: 5400010d      b.le    0x88 <_JIT_ENTRY+0x88>
    // 6c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 70: 8b090108      add     x8, x8, x9
    // 74: f9400969      ldr     x9, [x11, #0x10]
    // 78: f9400119      ldr     x25, [x8]
    // 7c: f940072b      ldr     x11, [x25, #0x8]
    // 80: eb09017f      cmp     x11, x9
    // 84: 540000a0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: f9400518      ldr     x24, [x8, #0x8]
    // 9c: f9400548      ldr     x8, [x10, #0x8]
    // a0: 51000589      sub     w9, w12, #0x1
    // a4: aa1903e0      mov     x0, x25
    // a8: b90036c9      str     w9, [x22, #0x34]
    // ac: aa1803e1      mov     x1, x24
    // b0: f9002295      str     x21, [x20, #0x40]
    // b4: d63f0100      blr     x8
    // b8: f9402293      ldr     x19, [x20, #0x40]
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: aa0003f7      mov     x23, x0
    // c4: b94036c8      ldr     w8, [x22, #0x34]
    // c8: 11000508      add     w8, w8, #0x1
    // cc: b90036c8      str     w8, [x22, #0x34]
    // d0: b9400328      ldr     w8, [x25]
    // d4: 37f80108      tbnz    w8, #0x1f, 0xf4 <_JIT_ENTRY+0xf4>
    // d8: 71000508      subs    w8, w8, #0x1
    // dc: b9000328      str     w8, [x25]
    // e0: 540000a1      b.ne    0xf4 <_JIT_ENTRY+0xf4>
    // e4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e8: aa1903e0      mov     x0, x25
    // ec: f9400108      ldr     x8, [x8]
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // f0: d63f0100      blr     x8
    // f4: b9400308      ldr     w8, [x24]
    // f8: 37f80108      tbnz    w8, #0x1f, 0x118 <_JIT_ENTRY+0x118>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b9000308      str     w8, [x24]
    // 104: 540000a1      b.ne    0x118 <_JIT_ENTRY+0x118>
    // 108: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 10c: aa1803e0      mov     x0, x24
    // 110: f9400108      ldr     x8, [x8]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 114: d63f0100      blr     x8
    // 118: f87b7aa0      ldr     x0, [x21, x27, lsl #3]
    // 11c: b9400008      ldr     w8, [x0]
    // 120: 37f800e8      tbnz    w8, #0x1f, 0x13c <_JIT_ENTRY+0x13c>
    // 124: 71000508      subs    w8, w8, #0x1
    // 128: b9000008      str     w8, [x0]
    // 12c: 54000081      b.ne    0x13c <_JIT_ENTRY+0x13c>
    // 130: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 134: f9400108      ldr     x8, [x8]
    // 0000000000000134:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 138: d63f0100      blr     x8
    // 13c: b4000117      cbz     x23, 0x15c <_JIT_ENTRY+0x15c>
    // 140: 93407f48      sxtw    x8, w26
    // 144: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000144:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 148: f9400000      ldr     x0, [x0]
    // 0000000000000148:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14c: f83b7a77      str     x23, [x19, x27, lsl #3]
    // 150: 8b080e75      add     x21, x19, x8, lsl #3
    // 154: f84107fe      ldr     x30, [sp], #0x10
    // 158: d61f0000      br      x0
    // 15c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000015c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 160: aa1303f5      mov     x21, x19
    // 164: f9400000      ldr     x0, [x0]
    // 0000000000000164:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 168: f84107fe      ldr     x30, [sp], #0x10
    // 16c: d61f0000      br      x0
    const unsigned char code_body[368] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe9, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x00, 0x12, 0xfa, 0x03, 0x2a, 0x2a,
        0xab, 0xda, 0x7a, 0xf8, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x05, 0x8a, 0x1a, 0x29, 0x11, 0x9f, 0x9a,
        0x5f, 0x09, 0x00, 0x71, 0xe1, 0x02, 0x00, 0x54,
        0x2a, 0x00, 0x80, 0x92, 0x0c, 0x00, 0x00, 0x90,
        0x5b, 0x21, 0x28, 0xcb, 0xab, 0x7a, 0x7b, 0xf8,
        0x6a, 0x05, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x5f, 0x01, 0x0c, 0xeb, 0xe1, 0x01, 0x00, 0x54,
        0x6a, 0x15, 0x40, 0xf9, 0x4c, 0x11, 0x40, 0xb9,
        0x9f, 0x21, 0x00, 0x71, 0x61, 0x01, 0x00, 0x54,
        0xcc, 0x36, 0x40, 0xb9, 0x9f, 0x01, 0x00, 0x71,
        0x0d, 0x01, 0x00, 0x54, 0xa8, 0x2e, 0x28, 0xcb,
        0x08, 0x01, 0x09, 0x8b, 0x69, 0x09, 0x40, 0xf9,
        0x19, 0x01, 0x40, 0xf9, 0x2b, 0x07, 0x40, 0xf9,
        0x7f, 0x01, 0x09, 0xeb, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x18, 0x05, 0x40, 0xf9, 0x48, 0x05, 0x40, 0xf9,
        0x89, 0x05, 0x00, 0x51, 0xe0, 0x03, 0x19, 0xaa,
        0xc9, 0x36, 0x00, 0xb9, 0xe1, 0x03, 0x18, 0xaa,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0xc8, 0x36, 0x40, 0xb9,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x36, 0x00, 0xb9,
        0x28, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xa0, 0x7a, 0x7b, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0x01, 0x00, 0xb4,
        0x48, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x7a, 0x3b, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xe4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xec, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x108, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x110, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x130, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x144, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x15c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x164, (uintptr_t)data + 0x20);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_NON_PY_GENERAL.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 9280002a      mov     x10, #-0x2              // =-2
    // c: aa1f03e3      mov     x3, xzr
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d09      and     w9, w8, #0xffff
    // 18: cb282159      sub     x25, x10, w8, uxth
    // 1c: cb282ea8      sub     x8, x21, w8, uxth #3
    // 20: 2a2903fa      mvn     w26, w9
    // 24: 928000ea      mov     x10, #-0x8              // =-8
    // 28: f87adaab      ldr     x11, [x21, w26, sxtw #3]
    // 2c: f8797aa0      ldr     x0, [x21, x25, lsl #3]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: f100017f      cmp     x11, #0x0
    // 38: 9a9f114a      csel    x10, x10, xzr, ne
    // 3c: 1a89053b      cinc    w27, w9, ne
    // 40: 8b0a0118      add     x24, x8, x10
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Vectorcall
    // 48: b2410362      orr     x2, x27, #0x8000000000000000
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Vectorcall
    // 50: aa1803e1      mov     x1, x24
    // 54: d63f0100      blr     x8
    // 58: f9402293      ldr     x19, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: aa0003f7      mov     x23, x0
    // 64: f8797aa8      ldr     x8, [x21, x25, lsl #3]
    // 68: b9400109      ldr     w9, [x8]
    // 6c: 37f80109      tbnz    w9, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 70: 71000529      subs    w9, w9, #0x1
    // 74: b9000109      str     w9, [x8]
    // 78: 540000a1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 7c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 80: aa0803e0      mov     x0, x8
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 88: d63f0120      blr     x9
    // 8c: 340001db      cbz     w27, 0xc4 <_JIT_ENTRY+0xc4>
    // 90: 90000015      adrp    x21, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 94: f94002b5      ldr     x21, [x21]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 98: 14000003      b       0xa4 <_JIT_ENTRY+0xa4>
    // 9c: f100077b      subs    x27, x27, #0x1
    // a0: 54000120      b.eq    0xc4 <_JIT_ENTRY+0xc4>
    // a4: f8408700      ldr     x0, [x24], #0x8
    // a8: b9400008      ldr     w8, [x0]
    // ac: 37ffff88      tbnz    w8, #0x1f, 0x9c <_JIT_ENTRY+0x9c>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000008      str     w8, [x0]
    // b8: 54ffff21      b.ne    0x9c <_JIT_ENTRY+0x9c>
    // bc: d63f02a0      blr     x21
    // c0: 17fffff7      b       0x9c <_JIT_ENTRY+0x9c>
    // c4: b4000117      cbz     x23, 0xe4 <_JIT_ENTRY+0xe4>
    // c8: 93407f48      sxtw    x8, w26
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d0: f9400000      ldr     x0, [x0]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d4: f8397a77      str     x23, [x19, x25, lsl #3]
    // d8: 8b080e75      add     x21, x19, x8, lsl #3
    // dc: f84107fe      ldr     x30, [sp], #0x10
    // e0: d61f0000      br      x0
    // e4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // e8: aa1303f5      mov     x21, x19
    // ec: f9400000      ldr     x0, [x0]
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f0: f84107fe      ldr     x30, [sp], #0x10
    // f4: d61f0000      br      x0
    const unsigned char code_body[248] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x2a, 0x00, 0x80, 0x92, 0xe3, 0x03, 0x1f, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x3d, 0x00, 0x12,
        0x59, 0x21, 0x28, 0xcb, 0xa8, 0x2e, 0x28, 0xcb,
        0xfa, 0x03, 0x29, 0x2a, 0xea, 0x00, 0x80, 0x92,
        0xab, 0xda, 0x7a, 0xf8, 0xa0, 0x7a, 0x79, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x7f, 0x01, 0x00, 0xf1,
        0x4a, 0x11, 0x9f, 0x9a, 0x3b, 0x05, 0x89, 0x1a,
        0x18, 0x01, 0x0a, 0x8b, 0x08, 0x00, 0x00, 0x90,
        0x62, 0x03, 0x41, 0xb2, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0xa8, 0x7a, 0x79, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x09, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x08, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x20, 0x01, 0x3f, 0xd6, 0xdb, 0x01, 0x00, 0x34,
        0x15, 0x00, 0x00, 0x90, 0xb5, 0x02, 0x40, 0xf9,
        0x03, 0x00, 0x00, 0x14, 0x7b, 0x07, 0x00, 0xf1,
        0x20, 0x01, 0x00, 0x54, 0x00, 0x87, 0x40, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0xff, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0xff, 0xff, 0x54, 0xa0, 0x02, 0x3f, 0xd6,
        0xf7, 0xff, 0xff, 0x17, 0x17, 0x01, 0x00, 0xb4,
        0x48, 0x7f, 0x40, 0x93, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x7a, 0x39, 0xf8,
        0x75, 0x0e, 0x08, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)&PyObject_Vectorcall);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)&PyObject_Vectorcall);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x84, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xe4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xec, (uintptr_t)data + 0x10);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_STR_1.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f02a8      ldur    x8, [x21, #-0x10]
    // 8: b50000c8      cbnz    x8, 0x20 <_JIT_ENTRY+0x20>
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyUnicode_Type
    // 10: f85e82a8      ldur    x8, [x21, #-0x18]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyUnicode_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 540000a0      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 28: f84107fe      ldr     x30, [sp], #0x10
    // 2c: d61f0000      br      x0
    // 30: f85f82b7      ldur    x23, [x21, #-0x8]
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Str
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Str
    // 40: aa1703e0      mov     x0, x23
    // 44: d63f0100      blr     x8
    // 48: f9402293      ldr     x19, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: b94002e8      ldr     w8, [x23]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b90002e8      str     w8, [x23]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: aa0003f5      mov     x21, x0
    // 6c: aa1703e0      mov     x0, x23
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: aa1503e0      mov     x0, x21
    // 7c: b40000e0      cbz     x0, 0x98 <_JIT_ENTRY+0x98>
    // 80: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: d1004275      sub     x21, x19, #0x10
    // 88: f9400021      ldr     x1, [x1]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81e8260      stur    x0, [x19, #-0x18]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0020      br      x1
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 9c: aa1303f5      mov     x21, x19
    // a0: f9400000      ldr     x0, [x0]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // a4: f84107fe      ldr     x30, [sp], #0x10
    // a8: d61f0000      br      x0
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x02, 0x5f, 0xf8,
        0xc8, 0x00, 0x00, 0xb5, 0x09, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5e, 0xf8, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xb7, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0xe0, 0x00, 0x00, 0xb4,
        0x01, 0x00, 0x00, 0x90, 0x75, 0x42, 0x00, 0xd1,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x82, 0x1e, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&PyObject_Str);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x18);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TUPLE_1.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f02a8      ldur    x8, [x21, #-0x10]
    // 8: b50000c8      cbnz    x8, 0x20 <_JIT_ENTRY+0x20>
    // c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTuple_Type
    // 10: f85e82a8      ldur    x8, [x21, #-0x18]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTuple_Type
    // 18: eb09011f      cmp     x8, x9
    // 1c: 540000a0      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 28: f84107fe      ldr     x30, [sp], #0x10
    // 2c: d61f0000      br      x0
    // 30: f85f82b7      ldur    x23, [x21, #-0x8]
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySequence_Tuple
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySequence_Tuple
    // 40: aa1703e0      mov     x0, x23
    // 44: d63f0100      blr     x8
    // 48: f9402293      ldr     x19, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: b94002e8      ldr     w8, [x23]
    // 54: 37f80148      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b90002e8      str     w8, [x23]
    // 60: 540000e1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: aa0003f5      mov     x21, x0
    // 6c: aa1703e0      mov     x0, x23
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: aa1503e0      mov     x0, x21
    // 7c: b40000e0      cbz     x0, 0x98 <_JIT_ENTRY+0x98>
    // 80: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: d1004275      sub     x21, x19, #0x10
    // 88: f9400021      ldr     x1, [x1]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f81e8260      stur    x0, [x19, #-0x18]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0020      br      x1
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 9c: aa1303f5      mov     x21, x19
    // a0: f9400000      ldr     x0, [x0]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // a4: f84107fe      ldr     x30, [sp], #0x10
    // a8: d61f0000      br      x0
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x02, 0x5f, 0xf8,
        0xc8, 0x00, 0x00, 0xb5, 0x09, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5e, 0xf8, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xb7, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x17, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x15, 0xaa, 0xe0, 0x00, 0x00, 0xb4,
        0x01, 0x00, 0x00, 0x90, 0x75, 0x42, 0x00, 0xd1,
        0x21, 0x00, 0x40, 0xf9, 0x60, 0x82, 0x1e, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&PySequence_Tuple);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x18);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TYPE_1.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: f85f0ea9      ldr     x9, [x21, #-0x10]!
    // c: b50000c9      cbnz    x9, 0x24 <_JIT_ENTRY+0x24>
    // 10: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyType_Type
    // 14: f85e8109      ldur    x9, [x8, #-0x18]
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyType_Type
    // 1c: eb0a013f      cmp     x9, x10
    // 20: 540000c0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 28: aa0803f5      mov     x21, x8
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: f94006a0      ldr     x0, [x21, #0x8]
    // 3c: f9400413      ldr     x19, [x0, #0x8]
    // 40: b9400269      ldr     w9, [x19]
    // 44: 37f80069      tbnz    w9, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 11000529      add     w9, w9, #0x1
    // 4c: b9000269      str     w9, [x19]
    // 50: aa0803f7      mov     x23, x8
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 540000c0      b.eq    0x7c <_JIT_ENTRY+0x7c>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 70: f81e82f3      stur    x19, [x23, #-0x18]
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 90: f81e82f3      stur    x19, [x23, #-0x18]
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xe8, 0x03, 0x15, 0xaa,
        0xa9, 0x0e, 0x5f, 0xf8, 0xc9, 0x00, 0x00, 0xb5,
        0x0a, 0x00, 0x00, 0x90, 0x09, 0x81, 0x5e, 0xf8,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0xc0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xa0, 0x06, 0x40, 0xf9, 0x13, 0x04, 0x40, 0xf9,
        0x69, 0x02, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x69, 0x02, 0x00, 0xb9,
        0xf7, 0x03, 0x08, 0xaa, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xf3, 0x82, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xf3, 0x82, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyType_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyType_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x10);
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_AND_ALLOCATE_OBJECT.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 12003d08      and     w8, w8, #0xffff
    // 10: 2a2803f7      mvn     w23, w8
    // 14: f877daa9      ldr     x9, [x21, w23, sxtw #3]
    // 18: b5000609      cbnz    x9, 0xd8 <_JIT_ENTRY+0xd8>
    // 1c: 12800029      mov     w9, #-0x2               // =-2
    // 20: 4b080133      sub     w19, w9, w8
    // 24: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // 28: f9400408      ldr     x8, [x0, #0x8]
    // 2c: b940a908      ldr     w8, [x8, #0xa8]
    // 30: 36f80548      tbz     w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // 34: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 38: b9418008      ldr     w8, [x0, #0x180]
    // 3c: f9400129      ldr     x9, [x9]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 40: 6b09011f      cmp     w8, w9
    // 44: 540004a1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // 48: f94076c8      ldr     x8, [x22, #0xe8]
    // 4c: b4000468      cbz     x8, 0xd8 <_JIT_ENTRY+0xd8>
    // 50: f941d018      ldr     x24, [x0, #0x3a0]
    // 54: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_InitCleanup
    // 58: f9401b09      ldr     x9, [x24, #0x30]
    // 5c: f940014a      ldr     x10, [x10]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_InitCleanup
    // 60: f9407acb      ldr     x11, [x22, #0xf0]
    // 64: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 68: b9804d4a      ldrsw   x10, [x10, #0x4c]
    // 6c: cb080168      sub     x8, x11, x8
    // 70: 8b090149      add     x9, x10, x9
    // 74: eb880d3f      cmp     x9, x8, asr #3
    // 78: 5400030a      b.ge    0xd8 <_JIT_ENTRY+0xd8>
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyType_NewManagedObject
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyType_NewManagedObject
    // 84: d63f0100      blr     x8
    // 88: b4000300      cbz     x0, 0xe8 <_JIT_ENTRY+0xe8>
    // 8c: f837daa0      str     x0, [x21, w23, sxtw #3]
    // 90: b9400308      ldr     w8, [x24]
    // 94: f873daa0      ldr     x0, [x21, w19, sxtw #3]
    // 98: 37f80068      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 9c: 11000508      add     w8, w8, #0x1
    // a0: b9000308      str     w8, [x24]
    // a4: f833dab8      str     x24, [x21, w19, sxtw #3]
    // a8: b9400008      ldr     w8, [x0]
    // ac: 37f800e8      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000008      str     w8, [x0]
    // b8: 54000081      b.ne    0xc8 <_JIT_ENTRY+0xc8>
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c4: d63f0100      blr     x8
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: f9400000      ldr     x0, [x0]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d0: f84107fe      ldr     x30, [sp], #0x10
    // d4: d61f0000      br      x0
    // d8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // dc: f9400000      ldr     x0, [x0]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // ec: f9400000      ldr     x0, [x0]
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f0: f84107fe      ldr     x30, [sp], #0x10
    // f4: d61f0000      br      x0
    const unsigned char code_body[248] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x3d, 0x00, 0x12,
        0xf7, 0x03, 0x28, 0x2a, 0xa9, 0xda, 0x77, 0xf8,
        0x09, 0x06, 0x00, 0xb5, 0x29, 0x00, 0x80, 0x12,
        0x33, 0x01, 0x08, 0x4b, 0xa0, 0xda, 0x73, 0xf8,
        0x08, 0x04, 0x40, 0xf9, 0x08, 0xa9, 0x40, 0xb9,
        0x48, 0x05, 0xf8, 0x36, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x80, 0x41, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0xa1, 0x04, 0x00, 0x54,
        0xc8, 0x76, 0x40, 0xf9, 0x68, 0x04, 0x00, 0xb4,
        0x18, 0xd0, 0x41, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x1b, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0xcb, 0x7a, 0x40, 0xf9, 0x29, 0x4d, 0x80, 0xb9,
        0x4a, 0x4d, 0x80, 0xb9, 0x68, 0x01, 0x08, 0xcb,
        0x49, 0x01, 0x09, 0x8b, 0x3f, 0x0d, 0x88, 0xeb,
        0x0a, 0x03, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x03, 0x00, 0xb4, 0xa0, 0xda, 0x37, 0xf8,
        0x08, 0x03, 0x40, 0xb9, 0xa0, 0xda, 0x73, 0xf8,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x08, 0x03, 0x00, 0xb9, 0xb8, 0xda, 0x33, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: OPERAND0
    // 10: &_Py_InitCleanup+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)&_PyType_NewManagedObject);
    patch_aarch64_33rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xd8, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data + 0x28);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_CLASS.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: b940a929      ldr     w9, [x9, #0xa8]
    // c: 36f80129      tbz     w9, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 14: b9418108      ldr     w8, [x8, #0x180]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: 6b09011f      cmp     w8, w9
    // 20: 54000081      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 38: d61f0000      br      x0
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0xa9, 0x40, 0xb9, 0x29, 0x01, 0xf8, 0x36,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x81, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x10);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: 8b292108      add     x8, x8, w9, uxth
    // 10: f85e8108      ldur    x8, [x8, #-0x18]
    // 14: b4000088      cbz     x8, 0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0x8b,
        0x08, 0x81, 0x5e, 0xf8, 0x88, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__CHECK_ATTR_MODULE_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_MODULE_PUSH_KEYS.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyModule_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyModule_Type
    // 10: f9404929      ldr     x9, [x9, #0x90]
    // 14: f940494a      ldr     x10, [x10, #0x90]
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000181      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 20: f9400908      ldr     x8, [x8, #0x10]
    // 24: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 28: f9401108      ldr     x8, [x8, #0x20]
    // 2c: b9400d09      ldr     w9, [x8, #0xc]
    // 30: f940014a      ldr     x10, [x10]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 34: 6b0a013f      cmp     w9, w10
    // 38: 540000a1      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 3c: f80086a8      str     x8, [x21], #0x8
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: d61f0000      br      x0
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 54: d61f0000      br      x0
    const unsigned char code_body[88] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0x49, 0x40, 0xf9, 0x4a, 0x49, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x81, 0x01, 0x00, 0x54,
        0x08, 0x09, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x0d, 0x40, 0xb9,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0x6b,
        0xa1, 0x00, 0x00, 0x54, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyModule_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyModule_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x18);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_WITH_HINT.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8108      ldur    x8, [x8, #-0x18]
    // 8: b4000088      cbz     x8, 0x18 <_JIT_ENTRY+0x18>
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: d61f0000      br      x0
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x81, 0x5e, 0xf8,
        0x88, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 8: 12003d08      and     w8, w8, #0xffff
    // c: 2a2803e9      mvn     w9, w8
    // 10: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 14: b5000129      cbnz    x9, 0x38 <_JIT_ENTRY+0x38>
    // 18: 12800029      mov     w9, #-0x2               // =-2
    // 1c: 4b080128      sub     w8, w9, w8
    // 20: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // 24: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 28: f9400508      ldr     x8, [x8, #0x8]
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000080      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 40: d61f0000      br      x0
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0xe9, 0x03, 0x28, 0x2a,
        0xa9, 0xda, 0x69, 0xf8, 0x29, 0x01, 0x00, 0xb5,
        0x29, 0x00, 0x80, 0x12, 0x28, 0x01, 0x08, 0x4b,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0xda, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x18);
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EG_MATCH.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10083ff      sub     sp, sp, #0x20
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_CheckExceptStarTypeValid
    // c: f9000bfe      str     x30, [sp, #0x10]
    // 10: aa1603e0      mov     x0, x22
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_CheckExceptStarTypeValid
    // 1c: aa1303e1      mov     x1, x19
    // 20: d63f0100      blr     x8
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 37f80640      tbnz    w0, #0x1f, 0xf4 <_JIT_ENTRY+0xf4>
    // 30: f9000fff      str     xzr, [sp, #0x18]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_ExceptionGroupMatch
    // 38: 910063e2      add     x2, sp, #0x18
    // 3c: f90007ff      str     xzr, [sp, #0x8]
    // 40: 910023e3      add     x3, sp, #0x8
    // 44: aa1703e0      mov     x0, x23
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: aa1303e1      mov     x1, x19
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_ExceptionGroupMatch
    // 54: d63f0100      blr     x8
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: 2a0003f8      mov     w24, w0
    // 64: b94002e8      ldr     w8, [x23]
    // 68: 37f80108      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 6c: 71000508      subs    w8, w8, #0x1
    // 70: b90002e8      str     w8, [x23]
    // 74: 540000a1      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: aa1703e0      mov     x0, x23
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: b9400268      ldr     w8, [x19]
    // 8c: 37f80088      tbnz    w8, #0x1f, 0x9c <_JIT_ENTRY+0x9c>
    // 90: 71000508      subs    w8, w8, #0x1
    // 94: b9000268      str     w8, [x19]
    // 98: 54000540      b.eq    0x140 <_JIT_ENTRY+0x140>
    // 9c: 37f80498      tbnz    w24, #0x1f, 0x12c <_JIT_ENTRY+0x12c>
    // a0: f9400fe0      ldr     x0, [sp, #0x18]
    // a4: b4000440      cbz     x0, 0x12c <_JIT_ENTRY+0x12c>
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // b0: eb08001f      cmp     x0, x8
    // b4: 54000140      b.eq    0xdc <_JIT_ENTRY+0xdc>
    // b8: d10042a8      sub     x8, x21, #0x10
    // bc: f9002288      str     x8, [x20, #0x40]
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyErr_SetHandledException
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyErr_SetHandledException
    // c8: d63f0100      blr     x8
    // cc: f9402289      ldr     x9, [x20, #0x40]
    // d0: f9400fe8      ldr     x8, [sp, #0x18]
    // d4: f900229f      str     xzr, [x20, #0x40]
    // d8: 91004135      add     x21, x9, #0x10
    // dc: a940fbe9      ldp     x9, x30, [sp, #0x8]
    // e0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // e4: f9400000      ldr     x0, [x0]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e8: a93f22a9      stp     x9, x8, [x21, #-0x10]
    // ec: 910083ff      add     sp, sp, #0x20
    // f0: d61f0000      br      x0
    // f4: b94002e8      ldr     w8, [x23]
    // f8: 37f80108      tbnz    w8, #0x1f, 0x118 <_JIT_ENTRY+0x118>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b90002e8      str     w8, [x23]
    // 104: 540000a1      b.ne    0x118 <_JIT_ENTRY+0x118>
    // 108: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 10c: aa1703e0      mov     x0, x23
    // 110: f9400108      ldr     x8, [x8]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 114: d63f0100      blr     x8
    // 118: b9400268      ldr     w8, [x19]
    // 11c: 37f80088      tbnz    w8, #0x1f, 0x12c <_JIT_ENTRY+0x12c>
    // 120: 71000508      subs    w8, w8, #0x1
    // 124: b9000268      str     w8, [x19]
    // 128: 54000180      b.eq    0x158 <_JIT_ENTRY+0x158>
    // 12c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 134: f9400bfe      ldr     x30, [sp, #0x10]
    // 138: 910083ff      add     sp, sp, #0x20
    // 13c: d61f0000      br      x0
    // 140: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000140:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 144: aa1303e0      mov     x0, x19
    // 148: f9400108      ldr     x8, [x8]
    // 0000000000000148:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 14c: d63f0100      blr     x8
    // 150: 36fffa98      tbz     w24, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 154: 17fffff6      b       0x12c <_JIT_ENTRY+0x12c>
    // 158: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000158:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 15c: aa1303e0      mov     x0, x19
    // 160: f9400108      ldr     x8, [x8]
    // 0000000000000160:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 164: d63f0100      blr     x8
    // 168: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000168:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 16c: f9400000      ldr     x0, [x0]
    // 000000000000016c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 170: f9400bfe      ldr     x30, [sp, #0x10]
    // 174: 910083ff      add     sp, sp, #0x20
    // 178: d61f0000      br      x0
    // 17c: 00 00 00 00
    const unsigned char code_body[384] = {
        0xff, 0x83, 0x00, 0xd1, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xfe, 0x0b, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x40, 0x06, 0xf8, 0x37,
        0xff, 0x0f, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe2, 0x63, 0x00, 0x91, 0xff, 0x07, 0x00, 0xf9,
        0xe3, 0x23, 0x00, 0x91, 0xe0, 0x03, 0x17, 0xaa,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf8, 0x03, 0x00, 0x2a, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x40, 0x05, 0x00, 0x54, 0x98, 0x04, 0xf8, 0x37,
        0xe0, 0x0f, 0x40, 0xf9, 0x40, 0x04, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x00, 0x08, 0xeb, 0x40, 0x01, 0x00, 0x54,
        0xa8, 0x42, 0x00, 0xd1, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x89, 0x22, 0x40, 0xf9,
        0xe8, 0x0f, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x35, 0x41, 0x00, 0x91, 0xe9, 0xfb, 0x40, 0xa9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa9, 0x22, 0x3f, 0xa9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x1f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x80, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x0b, 0x40, 0xf9,
        0xff, 0x83, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0xfa, 0xff, 0x36, 0xf6, 0xff, 0xff, 0x17,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x0b, 0x40, 0xf9, 0xff, 0x83, 0x00, 0x91,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    patch_aarch64_12x(code + 0x18, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_aarch64_12x(code + 0x50, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)&PyErr_SetHandledException);
    patch_aarch64_33rx(code + 0xe0, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x108, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x110, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x12c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x140, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x148, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x158, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x160, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x168, (uintptr_t)data + 0x10);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EXC_MATCH.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f4eb7      ldp     x23, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_CheckExceptTypeValid
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_CheckExceptTypeValid
    // 18: aa1303e1      mov     x1, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: 37f803e0      tbnz    w0, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyErr_GivenExceptionMatches
    // 34: aa1703e0      mov     x0, x23
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyErr_GivenExceptionMatches
    // 3c: aa1303e1      mov     x1, x19
    // 40: d63f0100      blr     x8
    // 44: f9402295      ldr     x21, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: b9400268      ldr     w8, [x19]
    // 50: 37f80148      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000268      str     w8, [x19]
    // 5c: 540000e1      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 64: 2a0003f7      mov     w23, w0
    // 68: aa1303e0      mov     x0, x19
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: 2a1703e0      mov     w0, w23
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 7c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 80: 7100001f      cmp     w0, #0x0
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 88: f9400129      ldr     x9, [x9]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 90: f9400000      ldr     x0, [x0]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 94: 9a880128      csel    x8, x9, x8, eq
    // 98: f81f82a8      stur    x8, [x21, #-0x8]
    // 9c: f84107fe      ldr     x30, [sp], #0x10
    // a0: d61f0000      br      x0
    // a4: b9400268      ldr     w8, [x19]
    // a8: 37f80088      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b9000268      str     w8, [x19]
    // b4: 540000a0      b.eq    0xc8 <_JIT_ENTRY+0xc8>
    // b8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // bc: f9400000      ldr     x0, [x0]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // cc: aa1303e0      mov     x0, x19
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // dc: f9400000      ldr     x0, [x0]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    const unsigned char code_body[232] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb7, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0xf8, 0x37, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0x2a,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x1f, 0x00, 0x00, 0x71, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x28, 0x01, 0x88, 0x9a,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_aarch64_12x(code + 0x38, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xd8, (uintptr_t)data + 0x18);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400a88      ldr     x8, [x20, #0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: b9409108      ldr     w8, [x8, #0x90]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 10: 6b09011f      cmp     w8, w9
    // 14: 54000081      b.ne    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x88, 0x0a, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x91, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_EXACT_ARGS.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 12800028      mov     w8, #-0x2               // =-2
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 12003d29      and     w9, w9, #0xffff
    // 10: 4b090108      sub     w8, w8, w9
    // 14: 2a2903ea      mvn     w10, w9
    // 18: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 1c: f86adaaa      ldr     x10, [x21, w10, sxtw #3]
    // 20: f9401908      ldr     x8, [x8, #0x30]
    // 24: f100015f      cmp     x10, #0x0
    // 28: 1a890529      cinc    w9, w9, ne
    // 2c: b9403508      ldr     w8, [x8, #0x34]
    // 30: 6b09011f      cmp     w8, w9
    // 34: 54000081      b.ne    0x44 <_JIT_ENTRY+0x44>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 40: d61f0000      br      x0
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x12,
        0x29, 0x01, 0x40, 0xf9, 0x29, 0x3d, 0x00, 0x12,
        0x08, 0x01, 0x09, 0x4b, 0xea, 0x03, 0x29, 0x2a,
        0xa8, 0xda, 0x68, 0xf8, 0xaa, 0xda, 0x6a, 0xf8,
        0x08, 0x19, 0x40, 0xf9, 0x5f, 0x01, 0x00, 0xf1,
        0x29, 0x05, 0x89, 0x1a, 0x08, 0x35, 0x40, 0xb9,
        0x1f, 0x01, 0x09, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x10);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 92800028      mov     x8, #-0x2               // =-2
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: cb292108      sub     x8, x8, w9, uxth
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400509      ldr     x9, [x8, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 54000121      b.ne    0x48 <_JIT_ENTRY+0x48>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 2c: b9409108      ldr     w8, [x8, #0x90]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000081      b.ne    0x48 <_JIT_ENTRY+0x48>
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: d61f0000      br      x0
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x92,
        0x0a, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0xcb, 0xa8, 0x7a, 0x68, 0xf8,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x20);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_INLINE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND1
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND1
    // c: b9409108      ldr     w8, [x8, #0x90]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND1
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand1);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x18);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_KW.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 92800048      mov     x8, #-0x3               // =-3
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: cb292108      sub     x8, x8, w9, uxth
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400509      ldr     x9, [x8, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 20: eb0a013f      cmp     x9, x10
    // 24: 54000121      b.ne    0x48 <_JIT_ENTRY+0x48>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 2c: b9409108      ldr     w8, [x8, #0x90]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 34: 6b09011f      cmp     w8, w9
    // 38: 54000081      b.ne    0x48 <_JIT_ENTRY+0x48>
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: d61f0000      br      x0
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0x09, 0x00, 0x00, 0x90, 0x48, 0x00, 0x80, 0x92,
        0x0a, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0xcb, 0xa8, 0x7a, 0x68, 0xf8,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x91, 0x40, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x20);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 92800028      mov     x8, #-0x2               // =-2
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: cb292108      sub     x8, x8, w9, uxth
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400508      ldr     x8, [x8, #0x8]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 54000100      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000080      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 40: d61f0000      br      x0
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0x09, 0x00, 0x00, 0x90, 0x28, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x7a, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x00, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x20);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 92800048      mov     x8, #-0x3               // =-3
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: cb292108      sub     x8, x8, w9, uxth
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // 14: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 18: f9400508      ldr     x8, [x8, #0x8]
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 20: eb09011f      cmp     x8, x9
    // 24: 54000100      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // 2c: f9400129      ldr     x9, [x9]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 30: eb09011f      cmp     x8, x9
    // 34: 54000080      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 40: d61f0000      br      x0
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0x09, 0x00, 0x00, 0x90, 0x48, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x7a, 0x68, 0xf8,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x00, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x20);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000088      cbz     w8, 0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x88, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 12800029      mov     w9, #-0x2               // =-2
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d08      and     w8, w8, #0xffff
    // 14: 4b080129      sub     w9, w9, w8
    // 18: f869daa9      ldr     x9, [x21, w9, sxtw #3]
    // 1c: f940052a      ldr     x10, [x9, #0x8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 540001e1      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // 34: f940052a      ldr     x10, [x9, #0x8]
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000121      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 44: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 48: b9409129      ldr     w9, [x9, #0x90]
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 54000081      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 58: 2a2803e8      mvn     w8, w8
    // 5c: f868daa8      ldr     x8, [x21, w8, sxtw #3]
    // 60: b4000088      cbz     x8, 0x70 <_JIT_ENTRY+0x70>
    // 64: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 6c: d61f0000      br      x0
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: f9400000      ldr     x0, [x0]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x12,
        0x0b, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x00, 0x12, 0x29, 0x01, 0x08, 0x4b,
        0xa9, 0xda, 0x69, 0xf8, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0xe1, 0x01, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x21, 0x01, 0x00, 0x54, 0x0a, 0x00, 0x00, 0x90,
        0x29, 0x91, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0xe8, 0x03, 0x28, 0x2a, 0xa8, 0xda, 0x68, 0xf8,
        0x88, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    // 20: JUMP_TARGET
    // 28: CONTINUE
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x28);
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION_KW.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 92800049      mov     x9, #-0x3               // =-3
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: cb080129      sub     x9, x9, x8
    // 18: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 1c: f940052a      ldr     x10, [x9, #0x8]
    // 20: f940016b      ldr     x11, [x11]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 24: eb0b015f      cmp     x10, x11
    // 28: 54000201      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 2c: f9400929      ldr     x9, [x9, #0x10]
    // 30: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFunction_Type
    // 34: f940052a      ldr     x10, [x9, #0x8]
    // 38: f940016b      ldr     x11, [x11]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFunction_Type
    // 3c: eb0b015f      cmp     x10, x11
    // 40: 54000141      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 44: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 48: b9409129      ldr     w9, [x9, #0x90]
    // 4c: f940014a      ldr     x10, [x10]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 50: 6b0a013f      cmp     w9, w10
    // 54: 540000a1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 58: 92800029      mov     x9, #-0x2               // =-2
    // 5c: cb080128      sub     x8, x9, x8
    // 60: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 64: b4000088      cbz     x8, 0x74 <_JIT_ENTRY+0x74>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: d61f0000      br      x0
    // 74: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 7c: d61f0000      br      x0
    const unsigned char code_body[128] = {
        0x08, 0x00, 0x00, 0x90, 0x49, 0x00, 0x80, 0x92,
        0x0b, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x29, 0x01, 0x08, 0xcb,
        0xa9, 0x7a, 0x69, 0xf8, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x01, 0x02, 0x00, 0x54, 0x29, 0x09, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x2a, 0x05, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x41, 0x01, 0x00, 0x54, 0x0a, 0x00, 0x00, 0x90,
        0x29, 0x91, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0x6b, 0xa1, 0x00, 0x00, 0x54,
        0x29, 0x00, 0x80, 0x92, 0x28, 0x01, 0x08, 0xcb,
        0xa8, 0x7a, 0x68, 0xf8, 0x88, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    // 20: JUMP_TARGET
    // 28: CONTINUE
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x28);
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PEP_523.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ac8      ldr     x8, [x22, #0x10]
    // 4: f9503908      ldr     x8, [x8, #0x2070]
    // 8: b4000088      cbz     x8, 0x18 <_JIT_ENTRY+0x18>
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 14: d61f0000      br      x0
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xc8, 0x0a, 0x40, 0xf9, 0x08, 0x39, 0x50, 0xf9,
        0x88, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400ec8      ldr     x8, [x22, #0x18]
    // 8: f2401d1f      tst     x8, #0xff
    // c: 540001a0      b.eq    0x40 <_JIT_ENTRY+0x40>
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_HandlePending
    // 18: aa1603e0      mov     x0, x22
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_HandlePending
    // 20: d63f0100      blr     x8
    // 24: f9402295      ldr     x21, [x20, #0x40]
    // 28: f900229f      str     xzr, [x20, #0x40]
    // 2c: 340000a0      cbz     w0, 0x40 <_JIT_ENTRY+0x40>
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0000      br      x0
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xc8, 0x0e, 0x40, 0xf9,
        0x1f, 0x1d, 0x40, 0xf2, 0xa0, 0x01, 0x00, 0x54,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: ERROR_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x14, (uintptr_t)&_Py_HandlePending);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&_Py_HandlePending);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 37080208      tbnz    w8, #0x1, 0x4c <_JIT_ENTRY+0x4c>
    // 10: f9400ec8      ldr     x8, [x22, #0x18]
    // 14: f2401d1f      tst     x8, #0xff
    // 18: 540001a0      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_HandlePending
    // 24: aa1603e0      mov     x0, x22
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_HandlePending
    // 2c: d63f0100      blr     x8
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: 340000a0      cbz     w0, 0x4c <_JIT_ENTRY+0x4c>
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 44: f84107fe      ldr     x30, [sp], #0x10
    // 48: d61f0000      br      x0
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f84107fe      ldr     x30, [sp], #0x10
    // 58: d61f0000      br      x0
    // 5c: 00 00 00 00
    const unsigned char code_body[96] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x08, 0x02, 0x08, 0x37,
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0xa0, 0x01, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xa0, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)&_Py_HandlePending);
    patch_aarch64_12x(code + 0x28, (uintptr_t)&_Py_HandlePending);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x10);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f94076c8      ldr     x8, [x22, #0xe8]
    // 4: b40001e8      cbz     x8, 0x40 <_JIT_ENTRY+0x40>
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: 9280002a      mov     x10, #-0x2              // =-2
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: cb292149      sub     x9, x10, w9, uxth
    // 18: f9407aca      ldr     x10, [x22, #0xf0]
    // 1c: f8697aa9      ldr     x9, [x21, x9, lsl #3]
    // 20: cb080148      sub     x8, x10, x8
    // 24: f9401929      ldr     x9, [x9, #0x30]
    // 28: b9804d29      ldrsw   x9, [x9, #0x4c]
    // 2c: eb880d3f      cmp     x9, x8, asr #3
    // 30: 5400008a      b.ge    0x40 <_JIT_ENTRY+0x40>
    // 34: b9402ec8      ldr     w8, [x22, #0x2c]
    // 38: 7100051f      cmp     w8, #0x1
    // 3c: 5400008c      b.gt    0x4c <_JIT_ENTRY+0x4c>
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 48: d61f0000      br      x0
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: d61f0000      br      x0
    const unsigned char code_body[88] = {
        0xc8, 0x76, 0x40, 0xf9, 0xe8, 0x01, 0x00, 0xb4,
        0x09, 0x00, 0x00, 0x90, 0x2a, 0x00, 0x80, 0x92,
        0x29, 0x01, 0x40, 0xf9, 0x49, 0x21, 0x29, 0xcb,
        0xca, 0x7a, 0x40, 0xf9, 0xa9, 0x7a, 0x69, 0xf8,
        0x48, 0x01, 0x08, 0xcb, 0x29, 0x19, 0x40, 0xf9,
        0x29, 0x4d, 0x80, 0xb9, 0x3f, 0x0d, 0x88, 0xeb,
        0x8a, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x8c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x10);
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE_OPERAND.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f94076c8      ldr     x8, [x22, #0xe8]
    // 4: b4000168      cbz     x8, 0x30 <_JIT_ENTRY+0x30>
    // 8: f9407ac9      ldr     x9, [x22, #0xf0]
    // c: cb080128      sub     x8, x9, x8
    // 10: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 18: 9343fd08      asr     x8, x8, #3
    // 1c: eb29c11f      cmp     x8, w9, sxtw
    // 20: 5400008d      b.le    0x30 <_JIT_ENTRY+0x30>
    // 24: b9402ec8      ldr     w8, [x22, #0x2c]
    // 28: 7100051f      cmp     w8, #0x1
    // 2c: 5400008c      b.gt    0x3c <_JIT_ENTRY+0x3c>
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 38: d61f0000      br      x0
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0xc8, 0x76, 0x40, 0xf9, 0x68, 0x01, 0x00, 0xb4,
        0xc9, 0x7a, 0x40, 0xf9, 0x28, 0x01, 0x08, 0xcb,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0xfd, 0x43, 0x93, 0x1f, 0xc1, 0x29, 0xeb,
        0x8d, 0x00, 0x00, 0x54, 0xc8, 0x2e, 0x40, 0xb9,
        0x1f, 0x05, 0x00, 0x71, 0x8c, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x10);
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000088      tbnz    w8, #0x0, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 14: f9400000      ldr     x0, [x0]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 18: d61f0000      br      x0
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x88, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: EXECUTOR
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x10);
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY_AND_SET_IP.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 8: 39408908      ldrb    w8, [x8, #0x22]
    // c: 37000088      tbnz    w8, #0x0, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 14: f9400000      ldr     x0, [x0]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 18: d61f0000      br      x0
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: f9001e88      str     x8, [x20, #0x38]
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x89, 0x40, 0x39, 0x88, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x88, 0x1e, 0x00, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: JUMP_TARGET
    // 10: OPERAND0
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->operand0);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x18);
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_RichCompare
    // c: f9400339      ldr     x25, [x25]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: a97f5eb8      ldp     x24, x23, [x21, #-0x10]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 53053f22      ubfx    w2, w25, #5, #11
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_RichCompare
    // 20: aa1803e0      mov     x0, x24
    // 24: aa1703e1      mov     x1, x23
    // 28: d63f0100      blr     x8
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: aa0003f3      mov     x19, x0
    // 38: b9400308      ldr     w8, [x24]
    // 3c: 37f80108      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b9000308      str     w8, [x24]
    // 48: 540000a1      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 50: aa1803e0      mov     x0, x24
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: b94002e8      ldr     w8, [x23]
    // 60: 37f80088      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 64: 71000508      subs    w8, w8, #0x1
    // 68: b90002e8      str     w8, [x23]
    // 6c: 54000460      b.eq    0xf8 <_JIT_ENTRY+0xf8>
    // 70: b40005f3      cbz     x19, 0x12c <_JIT_ENTRY+0x12c>
    // 74: 12003f28      and     w8, w25, #0xffff
    // 78: 372000e8      tbnz    w8, #0x4, 0x94 <_JIT_ENTRY+0x94>
    // 7c: d10042b5      sub     x21, x21, #0x10
    // 80: f80086b3      str     x19, [x21], #0x8
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: d10042a8      sub     x8, x21, #0x10
    // 98: aa1303e0      mov     x0, x19
    // 9c: f9002288      str     x8, [x20, #0x40]
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_IsTrue
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_IsTrue
    // a8: d63f0100      blr     x8
    // ac: f9402295      ldr     x21, [x20, #0x40]
    // b0: f900229f      str     xzr, [x20, #0x40]
    // b4: b9400268      ldr     w8, [x19]
    // b8: 37f80088      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b9000268      str     w8, [x19]
    // c4: 54000260      b.eq    0x110 <_JIT_ENTRY+0x110>
    // c8: 37f80320      tbnz    w0, #0x1f, 0x12c <_JIT_ENTRY+0x12c>
    // cc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // d0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // d4: 7100001f      cmp     w0, #0x0
    // d8: f9400108      ldr     x8, [x8]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // dc: f9400129      ldr     x9, [x9]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // e0: 9a880133      csel    x19, x9, x8, eq
    // e4: f80086b3      str     x19, [x21], #0x8
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ec: f9400000      ldr     x0, [x0]
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // f0: f84107fe      ldr     x30, [sp], #0x10
    // f4: d61f0000      br      x0
    // f8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // fc: aa1703e0      mov     x0, x23
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: b5fffb73      cbnz    x19, 0x74 <_JIT_ENTRY+0x74>
    // 10c: 14000008      b       0x12c <_JIT_ENTRY+0x12c>
    // 110: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 114: 2a0003f7      mov     w23, w0
    // 118: aa1303e0      mov     x0, x19
    // 11c: f9400108      ldr     x8, [x8]
    // 000000000000011c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 120: d63f0100      blr     x8
    // 124: 2a1703e0      mov     w0, w23
    // 128: 36fffd37      tbz     w23, #0x1f, 0xcc <_JIT_ENTRY+0xcc>
    // 12c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 134: f84107fe      ldr     x30, [sp], #0x10
    // 138: d61f0000      br      x0
    // 13c: 00 00 00 00
    const unsigned char code_body[320] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x19, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0x39, 0x03, 0x40, 0xf9,
        0xb8, 0x5e, 0x7f, 0xa9, 0x95, 0x22, 0x00, 0xf9,
        0x22, 0x3f, 0x05, 0x53, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0x60, 0x04, 0x00, 0x54,
        0xf3, 0x05, 0x00, 0xb4, 0x28, 0x3f, 0x00, 0x12,
        0xe8, 0x00, 0x20, 0x37, 0xb5, 0x42, 0x00, 0xd1,
        0xb3, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xa8, 0x42, 0x00, 0xd1,
        0xe0, 0x03, 0x13, 0xaa, 0x88, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x60, 0x02, 0x00, 0x54,
        0x20, 0x03, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x1f, 0x00, 0x00, 0x71,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x33, 0x01, 0x88, 0x9a, 0xb3, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x73, 0xfb, 0xff, 0xb5, 0x08, 0x00, 0x00, 0x14,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0x2a,
        0x37, 0xfd, 0xff, 0x36, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PyObject_RichCompare);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&PyObject_RichCompare);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x54, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)&PyObject_IsTrue);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xf8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x100, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x110, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x11c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x12c, (uintptr_t)data + 0x20);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_FLOAT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: fd400ae9      ldr     d9, [x23, #0x10]
    // 14: b9400308      ldr     w8, [x24]
    // 18: fd400b08      ldr     d8, [x24, #0x10]
    // 1c: 37f80208      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 20: 71000508      subs    w8, w8, #0x1
    // 24: b9000308      str     w8, [x24]
    // 28: 540001a1      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 2c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 34: f9528d28      ldr     x8, [x9, #0x2518]
    // 38: b40000a8      cbz     x8, 0x4c <_JIT_ENTRY+0x4c>
    // 3c: f9529122      ldr     x2, [x9, #0x2520]
    // 40: aa1803e0      mov     x0, x24
    // 44: 52800021      mov     w1, #0x1                // =1
    // 48: d63f0100      blr     x8
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFloat_ExactDealloc
    // 50: aa1803e0      mov     x0, x24
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFloat_ExactDealloc
    // 58: d63f0100      blr     x8
    // 5c: b94002e8      ldr     w8, [x23]
    // 60: 37f80208      tbnz    w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 64: 71000508      subs    w8, w8, #0x1
    // 68: b90002e8      str     w8, [x23]
    // 6c: 540001a1      b.ne    0xa0 <_JIT_ENTRY+0xa0>
    // 70: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 74: f9400129      ldr     x9, [x9]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 78: f9528d28      ldr     x8, [x9, #0x2518]
    // 7c: b40000a8      cbz     x8, 0x90 <_JIT_ENTRY+0x90>
    // 80: f9529122      ldr     x2, [x9, #0x2520]
    // 84: aa1703e0      mov     x0, x23
    // 88: 52800021      mov     w1, #0x1                // =1
    // 8c: d63f0100      blr     x8
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFloat_ExactDealloc
    // 94: aa1703e0      mov     x0, x23
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFloat_ExactDealloc
    // 9c: d63f0100      blr     x8
    // a0: 1e692100      fcmp    d8, d9
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // b0: 1a9fb7e9      cset    w9, ge
    // b4: 1a9f87ea      cset    w10, ls
    // b8: 12003d08      and     w8, w8, #0xffff
    // bc: 2a090549      orr     w9, w10, w9, lsl #1
    // c0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // c4: f940014a      ldr     x10, [x10]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // c8: 1ac92508      lsr     w8, w8, w9
    // cc: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // d0: f9400129      ldr     x9, [x9]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: 7200011f      tst     w8, #0x1
    // dc: 9a8a0128      csel    x8, x9, x10, eq
    // e0: f81f0268      stur    x8, [x19, #-0x10]
    // e4: f84107fe      ldr     x30, [sp], #0x10
    // e8: d61f0000      br      x0
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0xe9, 0x0a, 0x40, 0xfd, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x0b, 0x40, 0xfd, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x21, 0x69, 0x1e, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe9, 0xb7, 0x9f, 0x1a, 0xea, 0x87, 0x9f, 0x1a,
        0x08, 0x3d, 0x00, 0x12, 0x49, 0x05, 0x09, 0x2a,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x08, 0x25, 0xc9, 0x1a, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0x72, 0x28, 0x01, 0x8a, 0x9a,
        0x68, 0x02, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    // 8: OPARG
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_aarch64_12x(code + 0x54, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_aarch64_12x(code + 0x98, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x10);
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f7      mov     x23, x21
    // 8: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: f9400b19      ldr     x25, [x24, #0x10]
    // 14: f100433f      cmp     x25, #0x10
    // 18: 54000082      b.hs    0x28 <_JIT_ENTRY+0x28>
    // 1c: f9400a7a      ldr     x26, [x19, #0x10]
    // 20: f100435f      cmp     x26, #0x10
    // 24: 540000c3      b.lo    0x3c <_JIT_ENTRY+0x3c>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: aa1703f5      mov     x21, x23
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 34: f84107fe      ldr     x30, [sp], #0x10
    // 38: d61f0000      br      x0
    // 3c: b9400308      ldr     w8, [x24]
    // 40: b9401b1c      ldr     w28, [x24, #0x18]
    // 44: b9401a7b      ldr     w27, [x19, #0x18]
    // 48: 37f80208      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000308      str     w8, [x24]
    // 54: 540001a1      b.ne    0x88 <_JIT_ENTRY+0x88>
    // 58: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 5c: f9400129      ldr     x9, [x9]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 60: f9528d28      ldr     x8, [x9, #0x2518]
    // 64: b40000a8      cbz     x8, 0x78 <_JIT_ENTRY+0x78>
    // 68: f9529122      ldr     x2, [x9, #0x2520]
    // 6c: aa1803e0      mov     x0, x24
    // 70: 52800021      mov     w1, #0x1                // =1
    // 74: d63f0100      blr     x8
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // 7c: aa1803e0      mov     x0, x24
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // 84: d63f0100      blr     x8
    // 88: b9400268      ldr     w8, [x19]
    // 8c: 37f80208      tbnz    w8, #0x1f, 0xcc <_JIT_ENTRY+0xcc>
    // 90: 71000508      subs    w8, w8, #0x1
    // 94: b9000268      str     w8, [x19]
    // 98: 540001a1      b.ne    0xcc <_JIT_ENTRY+0xcc>
    // 9c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // a0: f9400129      ldr     x9, [x9]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a4: f9528d28      ldr     x8, [x9, #0x2518]
    // a8: b40000a8      cbz     x8, 0xbc <_JIT_ENTRY+0xbc>
    // ac: f9529122      ldr     x2, [x9, #0x2520]
    // b0: aa1303e0      mov     x0, x19
    // b4: 52800021      mov     w1, #0x1                // =1
    // b8: d63f0100      blr     x8
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // c0: aa1303e0      mov     x0, x19
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // c8: d63f0100      blr     x8
    // cc: 92400728      and     x8, x25, #0x3
    // d0: 92400749      and     x9, x26, #0x3
    // d4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // d8: 9ba8f388      umsubl  x8, w28, w8, x28
    // dc: f940014a      ldr     x10, [x10]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // e0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // e4: 9ba9ef69      umsubl  x9, w27, w9, x27
    // e8: eb09011f      cmp     x8, x9
    // ec: 1a9fb7e8      cset    w8, ge
    // f0: 1a9fc7e9      cset    w9, le
    // f4: 2a080528      orr     w8, w9, w8, lsl #1
    // f8: 12003d49      and     w9, w10, #0xffff
    // fc: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 100: f940014a      ldr     x10, [x10]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 104: 1ac82528      lsr     w8, w9, w8
    // 108: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 10c: f9400129      ldr     x9, [x9]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 110: f9400000      ldr     x0, [x0]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 114: 7200011f      tst     w8, #0x1
    // 118: 9a8a0128      csel    x8, x9, x10, eq
    // 11c: f81f02e8      stur    x8, [x23, #-0x10]
    // 120: f84107fe      ldr     x30, [sp], #0x10
    // 124: d61f0000      br      x0
    const unsigned char code_body[296] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf7, 0x03, 0x15, 0xaa,
        0xb3, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0x19, 0x0b, 0x40, 0xf9, 0x3f, 0x43, 0x00, 0xf1,
        0x82, 0x00, 0x00, 0x54, 0x7a, 0x0a, 0x40, 0xf9,
        0x5f, 0x43, 0x00, 0xf1, 0xc3, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x1c, 0x1b, 0x40, 0xb9, 0x7b, 0x1a, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x07, 0x40, 0x92,
        0x49, 0x07, 0x40, 0x92, 0x0a, 0x00, 0x00, 0x90,
        0x88, 0xf3, 0xa8, 0x9b, 0x4a, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x69, 0xef, 0xa9, 0x9b,
        0x1f, 0x01, 0x09, 0xeb, 0xe8, 0xb7, 0x9f, 0x1a,
        0xe9, 0xc7, 0x9f, 0x1a, 0x28, 0x05, 0x08, 0x2a,
        0x49, 0x3d, 0x00, 0x12, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x28, 0x25, 0xc8, 0x1a,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x1f, 0x01, 0x00, 0x72,
        0x28, 0x01, 0x8a, 0x9a, 0xe8, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: JUMP_TARGET
    // 8: &_PyRuntime+0x0
    // 10: OPARG
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_FalseStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_33rx(code + 0x9c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xfc, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x108, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x110, (uintptr_t)data + 0x18);
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_STR.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b9      ldur    x25, [x21, #-0x8]
    // 10: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_Equal
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_Equal
    // 18: aa1703e1      mov     x1, x23
    // 1c: aa1903e0      mov     x0, x25
    // 20: d63f0100      blr     x8
    // 24: b9400328      ldr     w8, [x25]
    // 28: 2a0003f8      mov     w24, w0
    // 2c: 37f80208      tbnz    w8, #0x1f, 0x6c <_JIT_ENTRY+0x6c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000328      str     w8, [x25]
    // 38: 540001a1      b.ne    0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 44: f9528d28      ldr     x8, [x9, #0x2518]
    // 48: b40000a8      cbz     x8, 0x5c <_JIT_ENTRY+0x5c>
    // 4c: f9529122      ldr     x2, [x9, #0x2520]
    // 50: aa1903e0      mov     x0, x25
    // 54: 52800021      mov     w1, #0x1                // =1
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_ExactDealloc
    // 60: aa1903e0      mov     x0, x25
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_ExactDealloc
    // 68: d63f0100      blr     x8
    // 6c: b94002e8      ldr     w8, [x23]
    // 70: 37f80208      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 74: 71000508      subs    w8, w8, #0x1
    // 78: b90002e8      str     w8, [x23]
    // 7c: 540001a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // 80: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 88: f9528d28      ldr     x8, [x9, #0x2518]
    // 8c: b40000a8      cbz     x8, 0xa0 <_JIT_ENTRY+0xa0>
    // 90: f9529122      ldr     x2, [x9, #0x2520]
    // 94: aa1703e0      mov     x0, x23
    // 98: 52800021      mov     w1, #0x1                // =1
    // 9c: d63f0100      blr     x8
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyUnicode_ExactDealloc
    // a4: aa1703e0      mov     x0, x23
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyUnicode_ExactDealloc
    // ac: d63f0100      blr     x8
    // b0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // b4: 11001f09      add     w9, w24, #0x7
    // b8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c0: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // c4: f940014a      ldr     x10, [x10]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // c8: f940016b      ldr     x11, [x11]
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d0: 0a090108      and     w8, w8, w9
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: 72003d1f      tst     w8, #0xffff
    // dc: 9a8a0168      csel    x8, x11, x10, eq
    // e0: f81f0268      stur    x8, [x19, #-0x10]
    // e4: f84107fe      ldr     x30, [sp], #0x10
    // e8: d61f0000      br      x0
    // ec: 00 00 00 00
    const unsigned char code_body[240] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb9, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x17, 0xaa, 0xe0, 0x03, 0x19, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0xf8, 0x03, 0x00, 0x2a, 0x08, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0xa1, 0x01, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x28, 0x8d, 0x52, 0xf9,
        0xa8, 0x00, 0x00, 0xb4, 0x22, 0x91, 0x52, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0x21, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x1f, 0x00, 0x11,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x09, 0x0a, 0x00, 0x00, 0x40, 0xf9,
        0x1f, 0x3d, 0x00, 0x72, 0x68, 0x01, 0x8a, 0x9a,
        0x68, 0x02, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyRuntime+0x0
    // 8: OPARG
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)&_PyUnicode_Equal);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_12x(code + 0x64, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x20);
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f5eb8      ldp     x24, x23, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySequence_Contains
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySequence_Contains
    // 14: aa1703e0      mov     x0, x23
    // 18: aa1803e1      mov     x1, x24
    // 1c: d63f0100      blr     x8
    // 20: f9402293      ldr     x19, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: 2a0003f9      mov     w25, w0
    // 2c: b9400308      ldr     w8, [x24]
    // 30: 37f80108      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000308      str     w8, [x24]
    // 3c: 540000a1      b.ne    0x50 <_JIT_ENTRY+0x50>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: aa1803e0      mov     x0, x24
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: b94002e8      ldr     w8, [x23]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b90002e8      str     w8, [x23]
    // 60: 54000200      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 64: 37f80299      tbnz    w25, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 6c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 70: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 78: f9400129      ldr     x9, [x9]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 7c: f940014a      ldr     x10, [x10]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: d1002275      sub     x21, x19, #0x8
    // 88: 6b28233f      cmp     w25, w8, uxth
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 90: 9a890148      csel    x8, x10, x9, eq
    // 94: f81f0268      stur    x8, [x19, #-0x10]
    // 98: f84107fe      ldr     x30, [sp], #0x10
    // 9c: d61f0000      br      x0
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a4: aa1703e0      mov     x0, x23
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: 36fffdd9      tbz     w25, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // b4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b8: aa1303f5      mov     x21, x19
    // bc: f9400000      ldr     x0, [x0]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    const unsigned char code_body[200] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x5e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf9, 0x03, 0x00, 0x2a, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe8, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0x00, 0x02, 0x00, 0x54, 0x99, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x3f, 0x23, 0x28, 0x6b, 0x00, 0x00, 0x40, 0xf9,
        0x48, 0x01, 0x89, 0x9a, 0x68, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd9, 0xfd, 0xff, 0x36, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PySequence_Contains);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&PySequence_Contains);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x20);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_DICT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b9      ldur    x25, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // c: f9400728      ldr     x8, [x25, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: f85f02b8      ldur    x24, [x21, #-0x10]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_Contains
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_Contains
    // 3c: aa1903e0      mov     x0, x25
    // 40: aa1803e1      mov     x1, x24
    // 44: d63f0100      blr     x8
    // 48: f9402293      ldr     x19, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: 2a0003f7      mov     w23, w0
    // 54: b9400308      ldr     w8, [x24]
    // 58: 37f80108      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000308      str     w8, [x24]
    // 64: 540000a1      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: aa1803e0      mov     x0, x24
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: b9400328      ldr     w8, [x25]
    // 7c: 37f80088      tbnz    w8, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 80: 71000508      subs    w8, w8, #0x1
    // 84: b9000328      str     w8, [x25]
    // 88: 54000200      b.eq    0xc8 <_JIT_ENTRY+0xc8>
    // 8c: 37f80297      tbnz    w23, #0x1f, 0xdc <_JIT_ENTRY+0xdc>
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 94: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 98: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // a0: f9400129      ldr     x9, [x9]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // a4: f940014a      ldr     x10, [x10]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ac: d1002275      sub     x21, x19, #0x8
    // b0: 6b2822ff      cmp     w23, w8, uxth
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b8: 9a890148      csel    x8, x10, x9, eq
    // bc: f81f0268      stur    x8, [x19, #-0x10]
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // cc: aa1903e0      mov     x0, x25
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: 36fffdd7      tbz     w23, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // dc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // e0: aa1303f5      mov     x21, x19
    // e4: f9400000      ldr     x0, [x0]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // e8: f84107fe      ldr     x30, [sp], #0x10
    // ec: d61f0000      br      x0
    const unsigned char code_body[240] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb9, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x28, 0x07, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xb8, 0x02, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x19, 0xaa,
        0xe1, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0x2a, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x02, 0x00, 0x54, 0x97, 0x02, 0xf8, 0x37,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0xff, 0x22, 0x28, 0x6b, 0x00, 0x00, 0x40, 0xf9,
        0x48, 0x01, 0x89, 0x9a, 0x68, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfd, 0xff, 0x36, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)&PyDict_Contains);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa4, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xa8, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)data + 0x28);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0xe4, (uintptr_t)data + 0x30);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_SET.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b9      ldur    x25, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PySet_Type
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFrozenSet_Type
    // 10: f9400728      ldr     x8, [x25, #0x8]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PySet_Type
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFrozenSet_Type
    // 1c: eb09011f      cmp     x8, x9
    // 20: fa4a1104      ccmp    x8, x10, #0x4, ne
    // 24: 54000501      b.ne    0xc4 <_JIT_ENTRY+0xc4>
    // 28: f85f02b8      ldur    x24, [x21, #-0x10]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PySet_Contains
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PySet_Contains
    // 38: aa1903e0      mov     x0, x25
    // 3c: aa1803e1      mov     x1, x24
    // 40: d63f0100      blr     x8
    // 44: f9402293      ldr     x19, [x20, #0x40]
    // 48: f900229f      str     xzr, [x20, #0x40]
    // 4c: 2a0003f7      mov     w23, w0
    // 50: b9400308      ldr     w8, [x24]
    // 54: 37f80108      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000308      str     w8, [x24]
    // 60: 540000a1      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: aa1803e0      mov     x0, x24
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: b9400328      ldr     w8, [x25]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 7c: 71000508      subs    w8, w8, #0x1
    // 80: b9000328      str     w8, [x25]
    // 84: 54000280      b.eq    0xd4 <_JIT_ENTRY+0xd4>
    // 88: 37f80317      tbnz    w23, #0x1f, 0xe8 <_JIT_ENTRY+0xe8>
    // 8c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 90: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 94: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // a0: f940014a      ldr     x10, [x10]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // a4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a8: d1002275      sub     x21, x19, #0x8
    // ac: 6b2822ff      cmp     w23, w8, uxth
    // b0: f9400000      ldr     x0, [x0]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b4: 9a890148      csel    x8, x10, x9, eq
    // b8: f81f0268      stur    x8, [x19, #-0x10]
    // bc: f84107fe      ldr     x30, [sp], #0x10
    // c0: d61f0000      br      x0
    // c4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // c8: f9400000      ldr     x0, [x0]
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // cc: f84107fe      ldr     x30, [sp], #0x10
    // d0: d61f0000      br      x0
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // d8: aa1903e0      mov     x0, x25
    // dc: f9400108      ldr     x8, [x8]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e0: d63f0100      blr     x8
    // e4: 36fffd57      tbz     w23, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // ec: aa1303f5      mov     x21, x19
    // f0: f9400000      ldr     x0, [x0]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f4: f84107fe      ldr     x30, [sp], #0x10
    // f8: d61f0000      br      x0
    // fc: 00 00 00 00
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb9, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x28, 0x07, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x04, 0x11, 0x4a, 0xfa, 0x01, 0x05, 0x00, 0x54,
        0xb8, 0x02, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x19, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x93, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xf7, 0x03, 0x00, 0x2a,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0x80, 0x02, 0x00, 0x54,
        0x17, 0x03, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x75, 0x22, 0x00, 0xd1, 0xff, 0x22, 0x28, 0x6b,
        0x00, 0x00, 0x40, 0xf9, 0x48, 0x01, 0x89, 0x9a,
        0x68, 0x02, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x19, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x57, 0xfd, 0xff, 0x36,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySet_Type+0x0
    // 8: &PyFrozenSet_Type+0x0
    // 10: OPARG
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySet_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)&_PySet_Contains);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0xb0, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0xc4, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0xf0, (uintptr_t)data + 0x38);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONVERT_VALUE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyEval_ConversionFuncs
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyEval_ConversionFuncs
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: aa1303e0      mov     x0, x19
    // 20: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: d63f0100      blr     x8
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: b9400268      ldr     w8, [x19]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000268      str     w8, [x19]
    // 44: 540000e0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 48: b40001a0      cbz     x0, 0x7c <_JIT_ENTRY+0x7c>
    // 4c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: f9400021      ldr     x1, [x1]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f81f82a0      stur    x0, [x21, #-0x8]
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0020      br      x1
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 64: aa0003f7      mov     x23, x0
    // 68: aa1303e0      mov     x0, x19
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: aa1703e0      mov     x0, x23
    // 78: b5fffeb7      cbnz    x23, 0x4c <_JIT_ENTRY+0x4c>
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 84: f84107fe      ldr     x30, [sp], #0x10
    // 88: d61f0000      br      x0
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0xe0, 0x03, 0x13, 0xaa,
        0x28, 0x79, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa0, 0x01, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0xa0, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xb7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ConversionFuncs+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x18);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 8: cb282ea8      sub     x8, x21, w8, uxth #3
    // c: f9400108      ldr     x8, [x8]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa8, 0x2e, 0x28, 0xcb, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY_FREE_VARS.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: f9400129      ldr     x9, [x9]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 8: 72003d3f      tst     w9, #0xffff
    // c: 540002a0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9400a8a      ldr     x10, [x20, #0x10]
    // 18: b9404908      ldr     w8, [x8, #0x48]
    // 1c: f940254a      ldr     x10, [x10, #0x48]
    // 20: 4b292108      sub     w8, w8, w9, uxth
    // 24: 92403d29      and     x9, x9, #0xffff
    // 28: 8b28ce8b      add     x11, x20, w8, sxtw #3
    // 2c: 91006148      add     x8, x10, #0x18
    // 30: 9101416a      add     x10, x11, #0x50
    // 34: 14000005      b       0x48 <_JIT_ENTRY+0x48>
    // 38: f1000529      subs    x9, x9, #0x1
    // 3c: 91002108      add     x8, x8, #0x8
    // 40: f800854b      str     x11, [x10], #0x8
    // 44: 540000e0      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 48: f940010b      ldr     x11, [x8]
    // 4c: b940016c      ldr     w12, [x11]
    // 50: 37ffff4c      tbnz    w12, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 54: 1100058c      add     w12, w12, #0x1
    // 58: b900016c      str     w12, [x11]
    // 5c: 17fffff7      b       0x38 <_JIT_ENTRY+0x38>
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 68: d61f0000      br      x0
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x3f, 0x3d, 0x00, 0x72, 0xa0, 0x02, 0x00, 0x54,
        0x88, 0x02, 0x40, 0xf9, 0x8a, 0x0a, 0x40, 0xf9,
        0x08, 0x49, 0x40, 0xb9, 0x4a, 0x25, 0x40, 0xf9,
        0x08, 0x21, 0x29, 0x4b, 0x29, 0x3d, 0x40, 0x92,
        0x8b, 0xce, 0x28, 0x8b, 0x48, 0x61, 0x00, 0x91,
        0x6a, 0x41, 0x01, 0x91, 0x05, 0x00, 0x00, 0x14,
        0x29, 0x05, 0x00, 0xf1, 0x08, 0x21, 0x00, 0x91,
        0x4b, 0x85, 0x00, 0xf8, 0xe0, 0x00, 0x00, 0x54,
        0x0b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0x4c, 0xff, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf7, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data + 0x8);
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CREATE_INIT_FRAME.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_InitCleanup
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_InitCleanup
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: f94076d3      ldr     x19, [x22, #0xe8]
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 1c: 6949250a      ldpsw   x10, x9, [x8, #0x48]
    // 20: 8b090e69      add     x9, x19, x9, lsl #3
    // 24: f90076c9      str     x9, [x22, #0xe8]
    // 28: 8b0a0e69      add     x9, x19, x10, lsl #3
    // 2c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 30: a900ae74      stp     x20, x11, [x19, #0x8]
    // 34: f9000268      str     x8, [x19]
    // 38: 91016129      add     x9, x9, #0x58
    // 3c: 91034108      add     x8, x8, #0xd0
    // 40: f940014a      ldr     x10, [x10]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 44: a902fe7f      stp     xzr, xzr, [x19, #0x28]
    // 48: a903a668      stp     x8, x9, [x19, #0x38]
    // 4c: 12003d48      and     w8, w10, #0xffff
    // 50: b9004a7f      str     wzr, [x19, #0x48]
    // 54: 2a2803eb      mvn     w11, w8
    // 58: f9402289      ldr     x9, [x20, #0x40]
    // 5c: f900229f      str     xzr, [x20, #0x40]
    // 60: f86bdaac      ldr     x12, [x21, w11, sxtw #3]
    // 64: 9280002b      mov     x11, #-0x2              // =-2
    // 68: cb2a216b      sub     x11, x11, w10, uxth
    // 6c: cb2a2eaa      sub     x10, x21, w10, uxth #3
    // 70: b940018d      ldr     w13, [x12]
    // 74: 37f8006d      tbnz    w13, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 78: 110005ad      add     w13, w13, #0x1
    // 7c: b900018d      str     w13, [x12]
    // 80: d37df177      lsl     x23, x11, #3
    // 84: f9002a6c      str     x12, [x19, #0x50]
    // 88: 11000504      add     w4, w8, #0x1
    // 8c: f9002289      str     x9, [x20, #0x40]
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEvalFramePushAndInit
    // 94: d1002143      sub     x3, x10, #0x8
    // 98: f8776aa1      ldr     x1, [x21, x23]
    // 9c: f9400108      ldr     x8, [x8]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEvalFramePushAndInit
    // a0: aa1603e0      mov     x0, x22
    // a4: aa1f03e2      mov     x2, xzr
    // a8: aa1f03e5      mov     x5, xzr
    // ac: aa1303e6      mov     x6, x19
    // b0: d63f0100      blr     x8
    // b4: f9402288      ldr     x8, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: 8b170115      add     x21, x8, x23
    // c0: b4000160      cbz     x0, 0xec <_JIT_ENTRY+0xec>
    // c4: 52800088      mov     w8, #0x4                // =4
    // c8: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: 79009288      strh    w8, [x20, #0x48]
    // d0: b9402ec8      ldr     w8, [x22, #0x2c]
    // d4: f9400021      ldr     x1, [x1]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: 51000508      sub     w8, w8, #0x1
    // dc: b9002ec8      str     w8, [x22, #0x2c]
    // e0: f80086a0      str     x0, [x21], #0x8
    // e4: f84107fe      ldr     x30, [sp], #0x10
    // e8: d61f0020      br      x1
    // ec: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FrameClearAndPop
    // f0: aa1603e0      mov     x0, x22
    // f4: aa1303e1      mov     x1, x19
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FrameClearAndPop
    // fc: d63f0100      blr     x8
    // 100: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 104: f9400000      ldr     x0, [x0]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d61f0000      br      x0
    const unsigned char code_body[272] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xd3, 0x76, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x0a, 0x25, 0x49, 0x69,
        0x69, 0x0e, 0x09, 0x8b, 0xc9, 0x76, 0x00, 0xf9,
        0x69, 0x0e, 0x0a, 0x8b, 0x0a, 0x00, 0x00, 0x90,
        0x74, 0xae, 0x00, 0xa9, 0x68, 0x02, 0x00, 0xf9,
        0x29, 0x61, 0x01, 0x91, 0x08, 0x41, 0x03, 0x91,
        0x4a, 0x01, 0x40, 0xf9, 0x7f, 0xfe, 0x02, 0xa9,
        0x68, 0xa6, 0x03, 0xa9, 0x48, 0x3d, 0x00, 0x12,
        0x7f, 0x4a, 0x00, 0xb9, 0xeb, 0x03, 0x28, 0x2a,
        0x89, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xac, 0xda, 0x6b, 0xf8, 0x2b, 0x00, 0x80, 0x92,
        0x6b, 0x21, 0x2a, 0xcb, 0xaa, 0x2e, 0x2a, 0xcb,
        0x8d, 0x01, 0x40, 0xb9, 0x6d, 0x00, 0xf8, 0x37,
        0xad, 0x05, 0x00, 0x11, 0x8d, 0x01, 0x00, 0xb9,
        0x77, 0xf1, 0x7d, 0xd3, 0x6c, 0x2a, 0x00, 0xf9,
        0x04, 0x05, 0x00, 0x11, 0x89, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x43, 0x21, 0x00, 0xd1,
        0xa1, 0x6a, 0x77, 0xf8, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe2, 0x03, 0x1f, 0xaa,
        0xe5, 0x03, 0x1f, 0xaa, 0xe6, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x01, 0x17, 0x8b,
        0x60, 0x01, 0x00, 0xb4, 0x88, 0x00, 0x80, 0x52,
        0x01, 0x00, 0x00, 0x90, 0x88, 0x92, 0x00, 0x79,
        0xc8, 0x2e, 0x40, 0xb9, 0x21, 0x00, 0x40, 0xf9,
        0x08, 0x05, 0x00, 0x51, 0xc8, 0x2e, 0x00, 0xb9,
        0xa0, 0x86, 0x00, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x20, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_InitCleanup+0x0
    // 8: &_Py_NoneStruct+0x0
    // 10: OPARG
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x8, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_aarch64_33rx(code + 0x100, (uintptr_t)data + 0x20);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_ATTR.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 8b292d08      add     x8, x8, w9, uxth #3
    // 1c: aa1303e0      mov     x0, x19
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_DelAttr
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_DelAttr
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 540000c0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 50: 34000160      cbz     w0, 0x7c <_JIT_ENTRY+0x7c>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 35fffef7      cbnz    w23, 0x54 <_JIT_ENTRY+0x54>
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 80: d10022b5      sub     x21, x21, #0x8
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x2d, 0x29, 0x8b, 0xe0, 0x03, 0x13, 0xaa,
        0x01, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x60, 0x01, 0x00, 0x34, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfe, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&PyObject_DelAttr);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x10);
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_DEREF.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 8b282e88      add     x8, x20, w8, uxth #3
    // 10: f9402908      ldr     x8, [x8, #0x50]
    // 14: f9400900      ldr     x0, [x8, #0x10]
    // 18: f900091f      str     xzr, [x8, #0x10]
    // 1c: b4000140      cbz     x0, 0x44 <_JIT_ENTRY+0x44>
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 54000280      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 48: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcUnbound
    // 4c: aa1603e0      mov     x0, x22
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: f9400281      ldr     x1, [x20]
    // 5c: f9400129      ldr     x9, [x9]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcUnbound
    // 60: 12003d02      and     w2, w8, #0xffff
    // 64: d63f0120      blr     x9
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 6c: f9402295      ldr     x21, [x20, #0x40]
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 74: f900229f      str     xzr, [x20, #0x40]
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 90: f9400000      ldr     x0, [x0]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x88, 0x2e, 0x28, 0x8b,
        0x08, 0x29, 0x40, 0xf9, 0x00, 0x09, 0x40, 0xf9,
        0x1f, 0x09, 0x00, 0xf9, 0x40, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x80, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x02, 0x3d, 0x00, 0x12, 0x20, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x8);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_FAST.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 91014288      add     x8, x20, #0x50
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 92403d21      and     x1, x9, #0xffff
    // 14: f8617900      ldr     x0, [x8, x1, lsl #3]
    // 18: b4000160      cbz     x0, 0x44 <_JIT_ENTRY+0x44>
    // 1c: f821791f      str     xzr, [x8, x1, lsl #3]
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 54000360      b.eq    0x9c <_JIT_ENTRY+0x9c>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: f9400288      ldr     x8, [x20]
    // 48: f9002295      str     x21, [x20, #0x40]
    // 4c: f9403100      ldr     x0, [x8, #0x60]
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyTuple_GetItem
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyTuple_GetItem
    // 58: d63f0100      blr     x8
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_UnboundLocalError
    // 60: aa0003e3      mov     x3, x0
    // 64: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 68: 91000042      add     x2, x2, #0x0
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_UnboundLocalError
    // 70: aa1603e0      mov     x0, x22
    // 74: f9400101      ldr     x1, [x8]
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcCheckArg
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcCheckArg
    // 80: d63f0100      blr     x8
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 90: f900229f      str     xzr, [x20, #0x40]
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x88, 0x42, 0x01, 0x91, 0x29, 0x01, 0x40, 0xf9,
        0x21, 0x3d, 0x40, 0x92, 0x00, 0x79, 0x61, 0xf8,
        0x60, 0x01, 0x00, 0xb4, 0x1f, 0x79, 0x21, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x60, 0x03, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x88, 0x02, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x00, 0x31, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe3, 0x03, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyExc_UnboundLocalError+0x0
    // 68: ERROR_TARGET
    const unsigned char data_body[112] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x68, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x50);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x50);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x58);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)&PyTuple_GetItem);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data);
    patch_aarch64_12(code + 0x68, (uintptr_t)data);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x60);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_aarch64_21rx(code + 0x84, (uintptr_t)data + 0x68);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)data + 0x68);
    patch_aarch64_33rx(code + 0x9c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x58);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_GLOBAL.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: aa1f03e2      mov     x2, xzr
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 18: f9400e80      ldr     x0, [x20, #0x18]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d13      ldr     x19, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_Pop
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_Pop
    // 30: aa1303e1      mov     x1, x19
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 37f800c0      tbnz    w0, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 44: 34000120      cbz     w0, 0x68 <_JIT_ENTRY+0x68>
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 50: f84107fe      ldr     x30, [sp], #0x10
    // 54: d61f0000      br      x0
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_NameError
    // 6c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 70: 91000042      add     x2, x2, #0x0
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_NameError
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: aa1603e0      mov     x0, x22
    // 80: aa1303e3      mov     x3, x19
    // 84: f9400101      ldr     x1, [x8]
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcCheckArg
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcCheckArg
    // 90: d63f0100      blr     x8
    // 94: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 98: f9402295      ldr     x21, [x20, #0x40]
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: f84107fe      ldr     x30, [sp], #0x10
    // a8: d61f0000      br      x0
    // ac: 00 00 00 00
    const unsigned char code_body[176] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe2, 0x03, 0x1f, 0xaa,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x80, 0x0e, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x13, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc0, 0x00, 0xf8, 0x37, 0x20, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe3, 0x03, 0x13, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: OPARG
    // 28: CONTINUE
    // 30: ERROR_TARGET
    // 38: &PyExc_NameError+0x0
    const unsigned char data_body[64] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x38, (uintptr_t)&PyExc_NameError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&PyDict_Pop);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data);
    patch_aarch64_12(code + 0x70, (uintptr_t)data);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x30);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_NAME.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9401680      ldr     x0, [x20, #0x28]
    // 18: 8b292d08      add     x8, x8, w9, uxth #3
    // 1c: f9400d13      ldr     x19, [x8, #0x18]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: b4000320      cbz     x0, 0x88 <_JIT_ENTRY+0x88>
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_DelItem
    // 2c: aa1303e1      mov     x1, x19
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_DelItem
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 34000440      cbz     w0, 0xc8 <_JIT_ENTRY+0xc8>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_NameError
    // 48: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 4c: 91000042      add     x2, x2, #0x0
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_NameError
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: aa1603e0      mov     x0, x22
    // 5c: aa1303e3      mov     x3, x19
    // 60: f9400101      ldr     x1, [x8]
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcCheckArg
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcCheckArg
    // 6c: d63f0100      blr     x8
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 74: f9402295      ldr     x21, [x20, #0x40]
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 7c: f900229f      str     xzr, [x20, #0x40]
    // 80: f84107fe      ldr     x30, [sp], #0x10
    // 84: d61f0000      br      x0
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_SystemError
    // 8c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BL@HJKLBJNK@no?5locals?5when?5deleting?5?$CFR?$AA@
    // 90: 91000042      add     x2, x2, #0x0
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BL@HJKLBJNK@no?5locals?5when?5deleting?5?$CFR?$AA@
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_SystemError
    // 98: aa1603e0      mov     x0, x22
    // 9c: aa1303e3      mov     x3, x19
    // a0: f9400101      ldr     x1, [x8]
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // ac: d63f0100      blr     x8
    // b0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f9400000      ldr     x0, [x0]
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: f9400000      ldr     x0, [x0]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d0: f84107fe      ldr     x30, [sp], #0x10
    // d4: d61f0000      br      x0
    const unsigned char code_body[216] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x80, 0x16, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x13, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x20, 0x03, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x04, 0x00, 0x34, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe3, 0x03, 0x13, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe3, 0x03, 0x13, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: OPARG
    // 40: &PyExc_NameError+0x0
    // 48: ERROR_TARGET
    // 50: &PyExc_SystemError+0x0
    // 58: CONTINUE
    const unsigned char data_body[96] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, instruction->oparg);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x50, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)&PyObject_DelItem);
    patch_aarch64_12x(code + 0x30, (uintptr_t)&PyObject_DelItem);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x1b);
    patch_aarch64_12(code + 0x4c, (uintptr_t)data + 0x1b);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x40);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x48);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x50);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12(code + 0x90, (uintptr_t)data);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x50);
    patch_aarch64_33rx(code + 0xa4, (uintptr_t)&_PyErr_Format);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x58);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_SUBSCR.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_DelItem
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_DelItem
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1303e1      mov     x1, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: 2a0003f7      mov     w23, w0
    // 2c: b9400308      ldr     w8, [x24]
    // 30: 37f80108      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000308      str     w8, [x24]
    // 3c: 540000a1      b.ne    0x50 <_JIT_ENTRY+0x50>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: aa1803e0      mov     x0, x24
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540000c0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 64: 34000157      cbz     w23, 0x8c <_JIT_ENTRY+0x8c>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: aa1303e0      mov     x0, x19
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: 35ffff17      cbnz    w23, 0x68 <_JIT_ENTRY+0x68>
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 90: d10042b5      sub     x21, x21, #0x10
    // 94: f9400000      ldr     x0, [x0]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 98: f84107fe      ldr     x30, [sp], #0x10
    // 9c: d61f0000      br      x0
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0x2a, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x57, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x17, 0xff, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: ERROR_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PyObject_DelItem);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&PyObject_DelItem);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x8);
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DEOPT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_TARGET
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // c: f90086c8      str     x8, [x22, #0x108]
    // 10: f9400288      ldr     x8, [x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_TARGET
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 8b294508      add     x8, x8, w9, uxtw #1
    // 20: 91034100      add     x0, x8, #0xd0
    // 24: d65f03c0      ret
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xc8, 0x86, 0x00, 0xf9,
        0x88, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x45, 0x29, 0x8b,
        0x00, 0x41, 0x03, 0x91, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: EXECUTOR
    // 8: TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->target);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_MERGE.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800069      mov     w9, #-0x4               // =-4
    // c: 52800042      mov     w2, #0x2                // =2
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: 12003d08      and     w8, w8, #0xffff
    // 1c: aa1303e1      mov     x1, x19
    // 20: 2a2803ea      mvn     w10, w8
    // 24: 4b080128      sub     w8, w9, w8
    // 28: f86adaa0      ldr     x0, [x21, w10, sxtw #3]
    // 2c: f868dab7      ldr     x23, [x21, w8, sxtw #3]
    // 30: f9002295      str     x21, [x20, #0x40]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyDict_MergeEx
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyDict_MergeEx
    // 3c: d63f0100      blr     x8
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: 37f80160      tbnz    w0, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 4c: b9400268      ldr     w8, [x19]
    // 50: 37f80088      tbnz    w8, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000268      str     w8, [x19]
    // 5c: 54000300      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: d10022b5      sub     x21, x21, #0x8
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatKwargsError
    // 7c: aa1603e0      mov     x0, x22
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatKwargsError
    // 84: aa1703e1      mov     x1, x23
    // 88: aa1303e2      mov     x2, x19
    // 8c: d63f0100      blr     x8
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f900229f      str     xzr, [x20, #0x40]
    // 98: b9400268      ldr     w8, [x19]
    // 9c: 37f80088      tbnz    w8, #0x1f, 0xac <_JIT_ENTRY+0xac>
    // a0: 71000508      subs    w8, w8, #0x1
    // a4: b9000268      str     w8, [x19]
    // a8: 540001c0      b.eq    0xe0 <_JIT_ENTRY+0xe0>
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b0: f9400000      ldr     x0, [x0]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // b4: f84107fe      ldr     x30, [sp], #0x10
    // b8: d61f0000      br      x0
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: aa1303e0      mov     x0, x19
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d0: d10022b5      sub     x21, x21, #0x8
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e4: aa1303e0      mov     x0, x19
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ec: d63f0100      blr     x8
    // f0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // f4: f9400000      ldr     x0, [x0]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f8: f84107fe      ldr     x30, [sp], #0x10
    // fc: d61f0000      br      x0
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x69, 0x00, 0x80, 0x12, 0x42, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x00, 0x12, 0xe1, 0x03, 0x13, 0xaa,
        0xea, 0x03, 0x28, 0x2a, 0x28, 0x01, 0x08, 0x4b,
        0xa0, 0xda, 0x6a, 0xf8, 0xb7, 0xda, 0x68, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x60, 0x01, 0xf8, 0x37, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x03, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x17, 0xaa,
        0xe2, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)&_PyDict_MergeEx);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xcc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xd4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data + 0x10);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_UPDATE.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: 2a2803e8      mvn     w8, w8
    // 14: aa1303e1      mov     x1, x19
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_Update
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_Update
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 37f80160      tbnz    w0, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 54000500      b.eq    0xf0 <_JIT_ENTRY+0xf0>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_AttributeError
    // 6c: aa1603e0      mov     x0, x22
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_AttributeError
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: f9400101      ldr     x1, [x8]
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_ExceptionMatches
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_ExceptionMatches
    // 84: d63f0100      blr     x8
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 340001e0      cbz     w0, 0xcc <_JIT_ENTRY+0xcc>
    // 94: f9002295      str     x21, [x20, #0x40]
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 9c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0CB@CMJMJEG@?8?$CF?4200s?8?5object?5is?5not?5a?5mapping@
    // a0: 91000042      add     x2, x2, #0x0
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0CB@CMJMJEG@?8?$CF?4200s?8?5object?5is?5not?5a?5mapping@
    // a4: f9400668      ldr     x8, [x19, #0x8]
    // a8: f9400129      ldr     x9, [x9]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // ac: aa1603e0      mov     x0, x22
    // b0: f9400d03      ldr     x3, [x8, #0x18]
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // b8: f9400121      ldr     x1, [x9]
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // c0: d63f0100      blr     x8
    // c4: f9402295      ldr     x21, [x20, #0x40]
    // c8: f900229f      str     xzr, [x20, #0x40]
    // cc: b9400268      ldr     w8, [x19]
    // d0: 37f80088      tbnz    w8, #0x1f, 0xe0 <_JIT_ENTRY+0xe0>
    // d4: 71000508      subs    w8, w8, #0x1
    // d8: b9000268      str     w8, [x19]
    // dc: 540001c0      b.eq    0x114 <_JIT_ENTRY+0x114>
    // e0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // e4: f9400000      ldr     x0, [x0]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // e8: f84107fe      ldr     x30, [sp], #0x10
    // ec: d61f0000      br      x0
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f4: aa1303e0      mov     x0, x19
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // fc: d63f0100      blr     x8
    // 100: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 104: d10022b5      sub     x21, x21, #0x8
    // 108: f9400000      ldr     x0, [x0]
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10c: f84107fe      ldr     x30, [sp], #0x10
    // 110: d61f0000      br      x0
    // 114: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 118: aa1303e0      mov     x0, x19
    // 11c: f9400108      ldr     x8, [x8]
    // 000000000000011c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 120: d63f0100      blr     x8
    // 124: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 128: f9400000      ldr     x0, [x0]
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 12c: f84107fe      ldr     x30, [sp], #0x10
    // 130: d61f0000      br      x0
    // 134: 00 00 00 00
    const unsigned char code_body[312] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe8, 0x03, 0x28, 0x2a, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x01, 0xf8, 0x37,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe0, 0x01, 0x00, 0x34, 0x95, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x03, 0x0d, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x21, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: OPARG
    // 30: CONTINUE
    // 38: &PyExc_AttributeError+0x0
    // 40: &PyExc_TypeError+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, instruction->oparg);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x40, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&PyDict_Update);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12(code + 0xa0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)&_PyErr_Format);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)&_PyErr_Format);
    patch_aarch64_33rx(code + 0xe0, (uintptr_t)data + 0x48);
    patch_aarch64_21rx(code + 0xf0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x100, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x108, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x114, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x11c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x124, (uintptr_t)data + 0x48);
}

void
emit__DYNAMIC_EXIT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DYNAMIC_EXIT.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 8: f94002f7      ldr     x23, [x23]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // c: f90086d7      str     x23, [x22, #0x108]
    // 10: f9401e93      ldr     x19, [x20, #0x38]
    // 14: 39400268      ldrb    w8, [x19]
    // 18: 7103fd1f      cmp     w8, #0xff
    // 1c: 54000320      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 20: 90000018      adrp    x24, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 24: f9400318      ldr     x24, [x24]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 28: 79400b08      ldrh    w8, [x24, #0x4]
    // 2c: 71003d1f      cmp     w8, #0xf
    // 30: 54000402      b.hs    0xb0 <_JIT_ENTRY+0xb0>
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyOptimizer_Optimize
    // 3c: 910023e3      add     x3, sp, #0x8
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyOptimizer_Optimize
    // 44: aa1403e0      mov     x0, x20
    // 48: aa1303e1      mov     x1, x19
    // 4c: aa1503e2      mov     x2, x21
    // 50: 2a1f03e4      mov     w4, wzr
    // 54: d63f0100      blr     x8
    // 58: f9402295      ldr     x21, [x20, #0x40]
    // 5c: 7100001f      cmp     w0, #0x0
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: 5400032d      b.le    0xc8 <_JIT_ENTRY+0xc8>
    // 68: f94007e8      ldr     x8, [sp, #0x8]
    // 6c: 529fff89      mov     w9, #0xfffc             // =65532
    // 70: 79000b09      strh    w9, [x24, #0x4]
    // 74: f9403d00      ldr     x0, [x8, #0x78]
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: f9400288      ldr     x8, [x20]
    // 84: 39400669      ldrb    w9, [x19, #0x1]
    // 88: f9404d08      ldr     x8, [x8, #0x98]
    // 8c: 8b090d08      add     x8, x8, x9, lsl #3
    // 90: f9400508      ldr     x8, [x8, #0x8]
    // 94: b9400109      ldr     w9, [x8]
    // 98: 37fffee9      tbnz    w9, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 9c: 11000529      add     w9, w9, #0x1
    // a0: b9000109      str     w9, [x8]
    // a4: f9403d00      ldr     x0, [x8, #0x78]
    // a8: f84107fe      ldr     x30, [sp], #0x10
    // ac: d61f0000      br      x0
    // b0: 51004108      sub     w8, w8, #0x10
    // b4: 79000b08      strh    w8, [x24, #0x4]
    // b8: f9002295      str     x21, [x20, #0x40]
    // bc: aa1303e0      mov     x0, x19
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d65f03c0      ret
    // c8: 79400b08      ldrh    w8, [x24, #0x4]
    // cc: 52800409      mov     w9, #0x20               // =32
    // d0: 92400d08      and     x8, x8, #0xf
    // d4: 1ac82129      lsl     w9, w9, w8
    // d8: 1100050a      add     w10, w8, #0x1
    // dc: 7100311f      cmp     w8, #0xc
    // e0: 12800068      mov     w8, #-0x4               // =-4
    // e4: 51004129      sub     w9, w9, #0x10
    // e8: 2a0a0129      orr     w9, w9, w10
    // ec: 1a883128      csel    w8, w9, w8, lo
    // f0: 79000b08      strh    w8, [x24, #0x4]
    // f4: 36fffe20      tbz     w0, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // f8: aa1f03f3      mov     x19, xzr
    // fc: f90086d7      str     x23, [x22, #0x108]
    // 100: f9002295      str     x21, [x20, #0x40]
    // 104: aa1303e0      mov     x0, x19
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d65f03c0      ret
    const unsigned char code_body[272] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0xd7, 0x86, 0x00, 0xf9,
        0x93, 0x1e, 0x40, 0xf9, 0x68, 0x02, 0x40, 0x39,
        0x1f, 0xfd, 0x03, 0x71, 0x20, 0x03, 0x00, 0x54,
        0x18, 0x00, 0x00, 0x90, 0x18, 0x03, 0x40, 0xf9,
        0x08, 0x0b, 0x40, 0x79, 0x1f, 0x3d, 0x00, 0x71,
        0x02, 0x04, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe3, 0x23, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x14, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x15, 0xaa,
        0xe4, 0x03, 0x1f, 0x2a, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x1f, 0x00, 0x00, 0x71,
        0x9f, 0x22, 0x00, 0xf9, 0x2d, 0x03, 0x00, 0x54,
        0xe8, 0x07, 0x40, 0xf9, 0x89, 0xff, 0x9f, 0x52,
        0x09, 0x0b, 0x00, 0x79, 0x00, 0x3d, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x88, 0x02, 0x40, 0xf9, 0x69, 0x06, 0x40, 0x39,
        0x08, 0x4d, 0x40, 0xf9, 0x08, 0x0d, 0x09, 0x8b,
        0x08, 0x05, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0xe9, 0xfe, 0xff, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0x00, 0x3d, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x41, 0x00, 0x51, 0x08, 0x0b, 0x00, 0x79,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfe, 0x07, 0x41, 0xf8, 0xc0, 0x03, 0x5f, 0xd6,
        0x08, 0x0b, 0x40, 0x79, 0x09, 0x04, 0x80, 0x52,
        0x08, 0x0d, 0x40, 0x92, 0x29, 0x21, 0xc8, 0x1a,
        0x0a, 0x05, 0x00, 0x11, 0x1f, 0x31, 0x00, 0x71,
        0x68, 0x00, 0x80, 0x12, 0x29, 0x41, 0x00, 0x51,
        0x29, 0x01, 0x0a, 0x2a, 0x28, 0x31, 0x88, 0x1a,
        0x08, 0x0b, 0x00, 0x79, 0x20, 0xfe, 0xff, 0x36,
        0xf3, 0x03, 0x1f, 0xaa, 0xd7, 0x86, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfe, 0x07, 0x41, 0xf8, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)&_PyOptimizer_Optimize);
    patch_aarch64_12x(code + 0x40, (uintptr_t)&_PyOptimizer_Optimize);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _END_SEND.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: b9400008      ldr     w8, [x0]
    // 14: 37f80088      tbnz    w8, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 18: 71000508      subs    w8, w8, #0x1
    // 1c: b9000008      str     w8, [x0]
    // 20: 540000c0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: f81f0277      stur    x23, [x19, #-0x10]
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f81f0277      stur    x23, [x19, #-0x10]
    // 50: f84107fe      ldr     x30, [sp], #0x10
    // 54: d61f0000      br      x0
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ERROR_POP_N.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 8: aa1f03e0      mov     x0, xzr
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 10: f9400289      ldr     x9, [x20]
    // 14: 8b284528      add     x8, x9, w8, uxtw #1
    // 18: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 1c: f9400129      ldr     x9, [x9]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 20: f940014a      ldr     x10, [x10]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 24: 91034108      add     x8, x8, #0xd0
    // 28: cb292ea9      sub     x9, x21, w9, uxth #3
    // 2c: f9001e88      str     x8, [x20, #0x38]
    // 30: f90086ca      str     x10, [x22, #0x108]
    // 34: f9002289      str     x9, [x20, #0x40]
    // 38: d65f03c0      ret
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0x08, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x1f, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x89, 0x02, 0x40, 0xf9, 0x28, 0x45, 0x28, 0x8b,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x41, 0x03, 0x91,
        0xa9, 0x2e, 0x29, 0xcb, 0x88, 0x1e, 0x00, 0xf9,
        0xca, 0x86, 0x00, 0xf9, 0x89, 0x22, 0x00, 0xf9,
        0xc0, 0x03, 0x5f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    // 10: OPARG
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    patch_64(data + 0x10, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x20, (uintptr_t)data + 0x8);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_INIT_CHECK.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // c: f85f8d09      ldr     x9, [x8, #-0x8]!
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 14: eb0a013f      cmp     x9, x10
    // 18: 54000240      b.eq    0x60 <_JIT_ENTRY+0x60>
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
    // 24: 91000021      add     x1, x1, #0x0
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
    // 28: f9400528      ldr     x8, [x9, #0x8]
    // 2c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // 34: f9400d02      ldr     x2, [x8, #0x18]
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyErr_Format
    // 3c: f9400120      ldr     x0, [x9]
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyErr_Format
    // 44: d63f0100      blr     x8
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0000      br      x0
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: aa0803f5      mov     x21, x8
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xe8, 0x03, 0x15, 0xaa,
        0x0a, 0x00, 0x00, 0x90, 0x09, 0x8d, 0x5f, 0xf8,
        0x4a, 0x01, 0x40, 0xf9, 0x3f, 0x01, 0x0a, 0xeb,
        0x40, 0x02, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x01, 0x00, 0x00, 0x90, 0x21, 0x00, 0x00, 0x91,
        0x28, 0x05, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x02, 0x0d, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x20, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &_Py_NoneStruct+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: ERROR_TARGET
    // 48: CONTINUE
    const unsigned char data_body[80] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x48, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_12(code + 0x24, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)&PyErr_Format);
    patch_aarch64_12x(code + 0x40, (uintptr_t)&PyErr_Format);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x48);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_TRACE.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f94002f7      ldr     x23, [x23]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f9400299      ldr     x25, [x20]
    // 10: f900229f      str     xzr, [x20, #0x40]
    // 14: b94002e8      ldr     w8, [x23]
    // 18: f94006e0      ldr     x0, [x23, #0x8]
    // 1c: 8b080728      add     x8, x25, x8, lsl #1
    // 20: 91034113      add     x19, x8, #0xd0
    // 24: b40001a0      cbz     x0, 0x58 <_JIT_ENTRY+0x58>
    // 28: 39408808      ldrb    w8, [x0, #0x22]
    // 2c: 37000128      tbnz    w8, #0x0, 0x50 <_JIT_ENTRY+0x50>
    // 30: 529fff98      mov     w24, #0xfffc            // =65532
    // 34: f90006ff      str     xzr, [x23, #0x8]
    // 38: 79000af8      strh    w24, [x23, #0x4]
    // 3c: b9400008      ldr     w8, [x0]
    // 40: 37f80428      tbnz    w8, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000008      str     w8, [x0]
    // 4c: 54000760      b.eq    0x138 <_JIT_ENTRY+0x138>
    // 50: f94006e8      ldr     x8, [x23, #0x8]
    // 54: b50005c8      cbnz    x8, 0x10c <_JIT_ENTRY+0x10c>
    // 58: 79400af8      ldrh    w24, [x23, #0x4]
    // 5c: 71003f1f      cmp     w24, #0xf
    // 60: 54000322      b.hs    0xc4 <_JIT_ENTRY+0xc4>
    // 64: 39400268      ldrb    w8, [x19]
    // 68: 7103fd1f      cmp     w8, #0xff
    // 6c: 540003e0      b.eq    0xe8 <_JIT_ENTRY+0xe8>
    // 70: 90000019      adrp    x25, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 74: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyOptimizer_Optimize
    // 78: 910023e3      add     x3, sp, #0x8
    // 7c: f9400339      ldr     x25, [x25]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 80: f9002295      str     x21, [x20, #0x40]
    // 84: aa1403e0      mov     x0, x20
    // 88: aa1303e1      mov     x1, x19
    // 8c: aa1503e2      mov     x2, x21
    // 90: 39408b28      ldrb    w8, [x25, #0x22]
    // 94: f9400129      ldr     x9, [x9]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyOptimizer_Optimize
    // 98: 53027d08      lsr     w8, w8, #2
    // 9c: 11000504      add     w4, w8, #0x1
    // a0: d63f0120      blr     x9
    // a4: f9402295      ldr     x21, [x20, #0x40]
    // a8: 7100001f      cmp     w0, #0x0
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: 5400050d      b.le    0x150 <_JIT_ENTRY+0x150>
    // b4: f94007e8      ldr     x8, [sp, #0x8]
    // b8: 529fff89      mov     w9, #0xfffc             // =65532
    // bc: 79000ae9      strh    w9, [x23, #0x4]
    // c0: 14000012      b       0x108 <_JIT_ENTRY+0x108>
    // c4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // c8: 51004308      sub     w8, w24, #0x10
    // cc: f9400129      ldr     x9, [x9]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // d0: 79000ae8      strh    w8, [x23, #0x4]
    // d4: f90086c9      str     x9, [x22, #0x108]
    // d8: f9002295      str     x21, [x20, #0x40]
    // dc: aa1303e0      mov     x0, x19
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d65f03c0      ret
    // e8: f9404f28      ldr     x8, [x25, #0x98]
    // ec: 39400669      ldrb    w9, [x19, #0x1]
    // f0: 8b090d08      add     x8, x8, x9, lsl #3
    // f4: f9400508      ldr     x8, [x8, #0x8]
    // f8: b9400109      ldr     w9, [x8]
    // fc: 37f80069      tbnz    w9, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // 100: 11000529      add     w9, w9, #0x1
    // 104: b9000109      str     w9, [x8]
    // 108: f90006e8      str     x8, [x23, #0x8]
    // 10c: b9400109      ldr     w9, [x8]
    // 110: 37f80089      tbnz    w9, #0x1f, 0x120 <_JIT_ENTRY+0x120>
    // 114: 11000529      add     w9, w9, #0x1
    // 118: b9000109      str     w9, [x8]
    // 11c: f94006e8      ldr     x8, [x23, #0x8]
    // 120: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 124: f9400129      ldr     x9, [x9]
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // 128: f90086c9      str     x9, [x22, #0x108]
    // 12c: f9403d00      ldr     x0, [x8, #0x78]
    // 130: f84107fe      ldr     x30, [sp], #0x10
    // 134: d61f0000      br      x0
    // 138: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000138:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 13c: f9400108      ldr     x8, [x8]
    // 000000000000013c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 140: d63f0100      blr     x8
    // 144: f94006e8      ldr     x8, [x23, #0x8]
    // 148: b5fffe28      cbnz    x8, 0x10c <_JIT_ENTRY+0x10c>
    // 14c: 17ffffc3      b       0x58 <_JIT_ENTRY+0x58>
    // 150: 71002f1f      cmp     w24, #0xb
    // 154: 54000148      b.hi    0x17c <_JIT_ENTRY+0x17c>
    // 158: 52800048      mov     w8, #0x2                // =2
    // 15c: 11000709      add     w9, w24, #0x1
    // 160: 1ad82108      lsl     w8, w8, w24
    // 164: 531c6d08      lsl     w8, w8, #4
    // 168: 51004108      sub     w8, w8, #0x10
    // 16c: 2a090108      orr     w8, w8, w9
    // 170: 79000ae8      strh    w8, [x23, #0x4]
    // 174: 36f800c0      tbz     w0, #0x1f, 0x18c <_JIT_ENTRY+0x18c>
    // 178: 14000004      b       0x188 <_JIT_ENTRY+0x188>
    // 17c: 529fff88      mov     w8, #0xfffc             // =65532
    // 180: 79000ae8      strh    w8, [x23, #0x4]
    // 184: 36f80040      tbz     w0, #0x1f, 0x18c <_JIT_ENTRY+0x18c>
    // 188: aa1f03f3      mov     x19, xzr
    // 18c: f90086d9      str     x25, [x22, #0x108]
    // 190: f9002295      str     x21, [x20, #0x40]
    // 194: aa1303e0      mov     x0, x19
    // 198: f84107fe      ldr     x30, [sp], #0x10
    // 19c: d65f03c0      ret
    const unsigned char code_body[416] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0x99, 0x02, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0xe0, 0x06, 0x40, 0xf9, 0x28, 0x07, 0x08, 0x8b,
        0x13, 0x41, 0x03, 0x91, 0xa0, 0x01, 0x00, 0xb4,
        0x08, 0x88, 0x40, 0x39, 0x28, 0x01, 0x00, 0x37,
        0x98, 0xff, 0x9f, 0x52, 0xff, 0x06, 0x00, 0xf9,
        0xf8, 0x0a, 0x00, 0x79, 0x08, 0x00, 0x40, 0xb9,
        0x28, 0x04, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x60, 0x07, 0x00, 0x54,
        0xe8, 0x06, 0x40, 0xf9, 0xc8, 0x05, 0x00, 0xb5,
        0xf8, 0x0a, 0x40, 0x79, 0x1f, 0x3f, 0x00, 0x71,
        0x22, 0x03, 0x00, 0x54, 0x68, 0x02, 0x40, 0x39,
        0x1f, 0xfd, 0x03, 0x71, 0xe0, 0x03, 0x00, 0x54,
        0x19, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0xe3, 0x23, 0x00, 0x91, 0x39, 0x03, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x14, 0xaa,
        0xe1, 0x03, 0x13, 0xaa, 0xe2, 0x03, 0x15, 0xaa,
        0x28, 0x8b, 0x40, 0x39, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x7d, 0x02, 0x53, 0x04, 0x05, 0x00, 0x11,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x1f, 0x00, 0x00, 0x71, 0x9f, 0x22, 0x00, 0xf9,
        0x0d, 0x05, 0x00, 0x54, 0xe8, 0x07, 0x40, 0xf9,
        0x89, 0xff, 0x9f, 0x52, 0xe9, 0x0a, 0x00, 0x79,
        0x12, 0x00, 0x00, 0x14, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x43, 0x00, 0x51, 0x29, 0x01, 0x40, 0xf9,
        0xe8, 0x0a, 0x00, 0x79, 0xc9, 0x86, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfe, 0x07, 0x41, 0xf8, 0xc0, 0x03, 0x5f, 0xd6,
        0x28, 0x4f, 0x40, 0xf9, 0x69, 0x06, 0x40, 0x39,
        0x08, 0x0d, 0x09, 0x8b, 0x08, 0x05, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xe8, 0x06, 0x00, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x89, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xe8, 0x06, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xc9, 0x86, 0x00, 0xf9, 0x00, 0x3d, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x06, 0x40, 0xf9,
        0x28, 0xfe, 0xff, 0xb5, 0xc3, 0xff, 0xff, 0x17,
        0x1f, 0x2f, 0x00, 0x71, 0x48, 0x01, 0x00, 0x54,
        0x48, 0x00, 0x80, 0x52, 0x09, 0x07, 0x00, 0x11,
        0x08, 0x21, 0xd8, 0x1a, 0x08, 0x6d, 0x1c, 0x53,
        0x08, 0x41, 0x00, 0x51, 0x08, 0x01, 0x09, 0x2a,
        0xe8, 0x0a, 0x00, 0x79, 0xc0, 0x00, 0xf8, 0x36,
        0x04, 0x00, 0x00, 0x14, 0x88, 0xff, 0x9f, 0x52,
        0xe8, 0x0a, 0x00, 0x79, 0x40, 0x00, 0xf8, 0x36,
        0xf3, 0x03, 0x1f, 0xaa, 0xd9, 0x86, 0x00, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xfe, 0x07, 0x41, 0xf8, 0xc0, 0x03, 0x5f, 0xd6,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)&_PyOptimizer_Optimize);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x94, (uintptr_t)&_PyOptimizer_Optimize);
    patch_aarch64_21rx(code + 0xc4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x120, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x138, (uintptr_t)&_Py_Dealloc);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 12003d0b      and     w11, w8, #0xffff
    // 10: 12800028      mov     w8, #-0x2               // =-2
    // 14: 4b0b0108      sub     w8, w8, w11
    // 18: 2a2b03eb      mvn     w11, w11
    // 1c: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 20: f9400d2a      ldr     x10, [x9, #0x18]
    // 24: b940014c      ldr     w12, [x10]
    // 28: 37f8006c      tbnz    w12, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 2c: 1100058c      add     w12, w12, #0x1
    // 30: b900014c      str     w12, [x10]
    // 34: f82bdaaa      str     x10, [x21, w11, sxtw #3]
    // 38: f9400929      ldr     x9, [x9, #0x10]
    // 3c: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 40: b940012a      ldr     w10, [x9]
    // 44: 37f8006a      tbnz    w10, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 1100054a      add     w10, w10, #0x1
    // 4c: b900012a      str     w10, [x9]
    // 50: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 540000a0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0b, 0x3d, 0x00, 0x12,
        0x28, 0x00, 0x80, 0x12, 0x08, 0x01, 0x0b, 0x4b,
        0xeb, 0x03, 0x2b, 0x2a, 0xa9, 0xda, 0x68, 0xf8,
        0x2a, 0x0d, 0x40, 0xf9, 0x4c, 0x01, 0x40, 0xb9,
        0x6c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x4c, 0x01, 0x00, 0xb9, 0xaa, 0xda, 0x2b, 0xf8,
        0x29, 0x09, 0x40, 0xf9, 0xa0, 0xda, 0x68, 0xf8,
        0x2a, 0x01, 0x40, 0xb9, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x2a, 0x01, 0x00, 0xb9,
        0xa9, 0xda, 0x28, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD_KW.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 9280002c      mov     x12, #-0x2              // =-2
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 92403d0a      and     x10, x8, #0xffff
    // 14: 92800048      mov     x8, #-0x3               // =-3
    // 18: cb0a0108      sub     x8, x8, x10
    // 1c: cb0a018a      sub     x10, x12, x10
    // 20: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 24: f9400c09      ldr     x9, [x0, #0x18]
    // 28: b940012b      ldr     w11, [x9]
    // 2c: 37f8006b      tbnz    w11, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 30: 1100056b      add     w11, w11, #0x1
    // 34: b900012b      str     w11, [x9]
    // 38: f82a7aa9      str     x9, [x21, x10, lsl #3]
    // 3c: f9400809      ldr     x9, [x0, #0x10]
    // 40: b940012a      ldr     w10, [x9]
    // 44: 37f8006a      tbnz    w10, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 1100054a      add     w10, w10, #0x1
    // 4c: b900012a      str     w10, [x9]
    // 50: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 540000a0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x2c, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0x0a, 0x3d, 0x40, 0x92, 0x48, 0x00, 0x80, 0x92,
        0x08, 0x01, 0x0a, 0xcb, 0x8a, 0x01, 0x0a, 0xcb,
        0xa0, 0x7a, 0x68, 0xf8, 0x09, 0x0c, 0x40, 0xf9,
        0x2b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x2b, 0x01, 0x00, 0xb9,
        0xa9, 0x7a, 0x2a, 0xf8, 0x09, 0x08, 0x40, 0xf9,
        0x2a, 0x01, 0x40, 0xb9, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x2a, 0x01, 0x00, 0xb9,
        0xa9, 0x7a, 0x28, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FATAL_ERROR.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_FatalErrorFunc
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0L@HIBONIGH@_JIT_ENTRY?$AA@
    // c: 91000000      add     x0, x0, #0x0
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0L@HIBONIGH@_JIT_ENTRY?$AA@
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_FatalErrorFunc
    // 14: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BK@GCJGAMOK@Fatal?5error?5uop?5executed?4?$AA@
    // 18: 91000021      add     x1, x1, #0x0
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BK@GCJGAMOK@Fatal?5error?5uop?5executed?4?$AA@
    // 1c: d63f0100      blr     x8
    // 20: d4200020      brk     #0x1
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x00, 0x91, 0x00, 0x01, 0x3f, 0xd6,
        0x20, 0x00, 0x20, 0xd4, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Fatal error uop executed.\x00_JIT_ENTRY\x00'
    // 25: 00 00 00
    const unsigned char data_body[40] = {
        0x46, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x72,
        0x72, 0x6f, 0x72, 0x20, 0x75, 0x6f, 0x70, 0x20,
        0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
        0x2e, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45,
        0x4e, 0x54, 0x52, 0x59, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)&_Py_FatalErrorFunc);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x1a);
    patch_aarch64_12(code + 0xc, (uintptr_t)data + 0x1a);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&_Py_FatalErrorFunc);
    patch_aarch64_21rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_12(code + 0x18, (uintptr_t)data);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_SIMPLE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyUnicode_Type
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyUnicode_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 54000200      b.eq    0x58 <_JIT_ENTRY+0x58>
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Format
    // 24: aa1303e0      mov     x0, x19
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Format
    // 2c: aa1f03e1      mov     x1, xzr
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 54000100      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 50: b40001c0      cbz     x0, 0x88 <_JIT_ENTRY+0x88>
    // 54: aa0003f3      mov     x19, x0
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f81f82b3      stur    x19, [x21, #-0x8]
    // 64: f84107fe      ldr     x30, [sp], #0x10
    // 68: d61f0000      br      x0
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 70: aa0003f7      mov     x23, x0
    // 74: aa1303e0      mov     x0, x19
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 7c: d63f0100      blr     x8
    // 80: aa1703e0      mov     x0, x23
    // 84: b5fffe97      cbnz    x23, 0x54 <_JIT_ENTRY+0x54>
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x00, 0x02, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x1f, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x01, 0x00, 0x54,
        0xc0, 0x01, 0x00, 0xb4, 0xf3, 0x03, 0x00, 0xaa,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0x97, 0xfe, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)&PyObject_Format);
    patch_aarch64_12x(code + 0x28, (uintptr_t)&PyObject_Format);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x10);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_WITH_SPEC.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f66b8      ldp     x24, x25, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Format
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Format
    // 14: aa1803e0      mov     x0, x24
    // 18: aa1903e1      mov     x1, x25
    // 1c: d63f0100      blr     x8
    // 20: f9402293      ldr     x19, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: aa0003f7      mov     x23, x0
    // 2c: b9400308      ldr     w8, [x24]
    // 30: 37f80108      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000308      str     w8, [x24]
    // 3c: 540000a1      b.ne    0x50 <_JIT_ENTRY+0x50>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: aa1803e0      mov     x0, x24
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: b9400328      ldr     w8, [x25]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000328      str     w8, [x25]
    // 60: 54000100      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 64: b4000197      cbz     x23, 0x94 <_JIT_ENTRY+0x94>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: d1002275      sub     x21, x19, #0x8
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 74: f81f0277      stur    x23, [x19, #-0x10]
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 84: aa1903e0      mov     x0, x25
    // 88: f9400108      ldr     x8, [x8]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 8c: d63f0100      blr     x8
    // 90: b5fffed7      cbnz    x23, 0x68 <_JIT_ENTRY+0x68>
    // 94: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 98: aa1303f5      mov     x21, x19
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // a0: f84107fe      ldr     x30, [sp], #0x10
    // a4: d61f0000      br      x0
    const unsigned char code_body[168] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x66, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x18, 0xaa,
        0xe1, 0x03, 0x19, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PyObject_Format);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&PyObject_Format);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x88, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data + 0x8);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_GEN_FRAME.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyGen_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyGen_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000061      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 18: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 1c: 37f80089      tbnz    w9, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 28: d61f0000      br      x0
    // 2c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 30: f9404509      ldr     x9, [x8, #0x88]
    // 34: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 38: f940014a      ldr     x10, [x10]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f900012a      str     x10, [x9]
    // 44: 9100a10a      add     x10, x8, #0x28
    // 48: f9404509      ldr     x9, [x8, #0x88]
    // 4c: 39010d1f      strb    wzr, [x8, #0x43]
    // 50: 91002129      add     x9, x9, #0x8
    // 54: f9004509      str     x9, [x8, #0x88]
    // 58: f9403ec9      ldr     x9, [x22, #0x78]
    // 5c: f940016b      ldr     x11, [x11]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 60: f9001909      str     x9, [x8, #0x30]
    // 64: 91012109      add     x9, x8, #0x48
    // 68: f9003eca      str     x10, [x22, #0x78]
    // 6c: 1100096a      add     w10, w11, #0x2
    // 70: f9002914      str     x20, [x8, #0x50]
    // 74: f9400000      ldr     x0, [x0]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 78: 7900928a      strh    w10, [x20, #0x48]
    // 7c: f80086a9      str     x9, [x21], #0x8
    // 80: d61f0000      br      x0
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x61, 0x00, 0x00, 0x54,
        0x09, 0x0d, 0xc1, 0x39, 0x89, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x45, 0x40, 0xf9, 0x0b, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x2a, 0x01, 0x00, 0xf9, 0x0a, 0xa1, 0x00, 0x91,
        0x09, 0x45, 0x40, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0x29, 0x21, 0x00, 0x91, 0x09, 0x45, 0x00, 0xf9,
        0xc9, 0x3e, 0x40, 0xf9, 0x6b, 0x01, 0x40, 0xf9,
        0x09, 0x19, 0x00, 0xf9, 0x09, 0x21, 0x01, 0x91,
        0xca, 0x3e, 0x00, 0xf9, 0x6a, 0x09, 0x00, 0x11,
        0x14, 0x29, 0x00, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x8a, 0x92, 0x00, 0x79, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyGen_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_NoneStruct+0x0
    // 18: OPARG
    // 20: CONTINUE
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x20);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_TIER_TWO.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: f9400408      ldr     x8, [x0, #0x8]
    // 10: f9407108      ldr     x8, [x8, #0xe0]
    // 14: d63f0100      blr     x8
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b40000c0      cbz     x0, 0x38 <_JIT_ENTRY+0x38>
    // 24: f80086a0      str     x0, [x21], #0x8
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: f9403ac8      ldr     x8, [x22, #0x70]
    // 3c: b4000368      cbz     x8, 0xa8 <_JIT_ENTRY+0xa8>
    // 40: f9400508      ldr     x8, [x8, #0x8]
    // 44: b4000328      cbz     x8, 0xa8 <_JIT_ENTRY+0xa8>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_StopIteration
    // 4c: aa1603e0      mov     x0, x22
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_StopIteration
    // 54: f9002295      str     x21, [x20, #0x40]
    // 58: f9400101      ldr     x1, [x8]
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_ExceptionMatches
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_ExceptionMatches
    // 64: d63f0100      blr     x8
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f900229f      str     xzr, [x20, #0x40]
    // 70: 34000240      cbz     w0, 0xb8 <_JIT_ENTRY+0xb8>
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_MonitorRaise
    // 7c: f9401e82      ldr     x2, [x20, #0x38]
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_MonitorRaise
    // 84: aa1603e0      mov     x0, x22
    // 88: aa1403e1      mov     x1, x20
    // 8c: d63f0100      blr     x8
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Clear
    // 94: aa1603e0      mov     x0, x22
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Clear
    // 9c: d63f0100      blr     x8
    // a0: f9402295      ldr     x21, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    // b8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // bc: f9400000      ldr     x0, [x0]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    const unsigned char code_body[200] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x04, 0x40, 0xf9,
        0x08, 0x71, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xc8, 0x3a, 0x40, 0xf9, 0x68, 0x03, 0x00, 0xb4,
        0x08, 0x05, 0x40, 0xf9, 0x28, 0x03, 0x00, 0xb4,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x02, 0x00, 0x34, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x82, 0x1e, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: &PyExc_StopIteration+0x0
    // 10: JUMP_TARGET
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyExc_StopIteration);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_PyEval_MonitorRaise);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_PyEval_MonitorRaise);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_PyErr_Clear);
    patch_aarch64_12x(code + 0x98, (uintptr_t)&_PyErr_Clear);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xb8, (uintptr_t)data + 0x18);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AITER.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9400668      ldr     x8, [x19, #0x8]
    // c: f9402909      ldr     x9, [x8, #0x50]
    // 10: b4000329      cbz     x9, 0x74 <_JIT_ENTRY+0x74>
    // 14: f9400529      ldr     x9, [x9, #0x8]
    // 18: b40002e9      cbz     x9, 0x74 <_JIT_ENTRY+0x74>
    // 1c: aa1303e0      mov     x0, x19
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: d63f0120      blr     x9
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: aa0003f7      mov     x23, x0
    // 34: b9400268      ldr     w8, [x19]
    // 38: 37f80088      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000268      str     w8, [x19]
    // 44: 540008c0      b.eq    0x15c <_JIT_ENTRY+0x15c>
    // 48: b40003b7      cbz     x23, 0xbc <_JIT_ENTRY+0xbc>
    // 4c: f94006e8      ldr     x8, [x23, #0x8]
    // 50: f9402908      ldr     x8, [x8, #0x50]
    // 54: b40003c8      cbz     x8, 0xcc <_JIT_ENTRY+0xcc>
    // 58: f9400908      ldr     x8, [x8, #0x10]
    // 5c: b4000388      cbz     x8, 0xcc <_JIT_ENTRY+0xcc>
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 68: f81f82b7      stur    x23, [x21, #-0x8]
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 78: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0EB@HAIFCLCF@?8async?5for?8?5requires?5an?5object?5w@
    // 7c: 91000042      add     x2, x2, #0x0
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0EB@HAIFCLCF@?8async?5for?8?5requires?5an?5object?5w@
    // 80: f9400129      ldr     x9, [x9]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: aa1603e0      mov     x0, x22
    // 8c: f9400d03      ldr     x3, [x8, #0x18]
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // 94: f9400121      ldr     x1, [x9]
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // 9c: d63f0100      blr     x8
    // a0: f9402295      ldr     x21, [x20, #0x40]
    // a4: f900229f      str     xzr, [x20, #0x40]
    // a8: b9400268      ldr     w8, [x19]
    // ac: 37f80088      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000268      str     w8, [x19]
    // b8: 54000420      b.eq    0x13c <_JIT_ENTRY+0x13c>
    // bc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // c0: f9400000      ldr     x0, [x0]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c4: f84107fe      ldr     x30, [sp], #0x10
    // c8: d61f0000      br      x0
    // cc: d10022a8      sub     x8, x21, #0x8
    // d0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // d4: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0FI@MHPMLJOA@?8async?5for?8?5received?5an?5object?5f@
    // d8: 91000042      add     x2, x2, #0x0
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0FI@MHPMLJOA@?8async?5for?8?5received?5an?5object?5f@
    // dc: f9002288      str     x8, [x20, #0x40]
    // e0: aa1603e0      mov     x0, x22
    // e4: f94006e8      ldr     x8, [x23, #0x8]
    // e8: f9400129      ldr     x9, [x9]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // ec: f9400d03      ldr     x3, [x8, #0x18]
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // f4: f9400121      ldr     x1, [x9]
    // f8: f9400108      ldr     x8, [x8]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // fc: d63f0100      blr     x8
    // 100: f9402295      ldr     x21, [x20, #0x40]
    // 104: f900229f      str     xzr, [x20, #0x40]
    // 108: b94002e8      ldr     w8, [x23]
    // 10c: 37fffd88      tbnz    w8, #0x1f, 0xbc <_JIT_ENTRY+0xbc>
    // 110: 71000508      subs    w8, w8, #0x1
    // 114: b90002e8      str     w8, [x23]
    // 118: 54fffd21      b.ne    0xbc <_JIT_ENTRY+0xbc>
    // 11c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000011c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 120: aa1703e0      mov     x0, x23
    // 124: f9400108      ldr     x8, [x8]
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 128: d63f0100      blr     x8
    // 12c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 134: f84107fe      ldr     x30, [sp], #0x10
    // 138: d61f0000      br      x0
    // 13c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000013c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 140: aa1303e0      mov     x0, x19
    // 144: f9400108      ldr     x8, [x8]
    // 0000000000000144:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 148: d63f0100      blr     x8
    // 14c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000014c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 150: f9400000      ldr     x0, [x0]
    // 0000000000000150:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 154: f84107fe      ldr     x30, [sp], #0x10
    // 158: d61f0000      br      x0
    // 15c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000015c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 160: aa1303e0      mov     x0, x19
    // 164: f9400108      ldr     x8, [x8]
    // 0000000000000164:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 168: d63f0100      blr     x8
    // 16c: b5fff717      cbnz    x23, 0x4c <_JIT_ENTRY+0x4c>
    // 170: 17ffffd3      b       0xbc <_JIT_ENTRY+0xbc>
    // 174: 00 00 00 00
    const unsigned char code_body[376] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x68, 0x06, 0x40, 0xf9, 0x09, 0x29, 0x40, 0xf9,
        0x29, 0x03, 0x00, 0xb4, 0x29, 0x05, 0x40, 0xf9,
        0xe9, 0x02, 0x00, 0xb4, 0xe0, 0x03, 0x13, 0xaa,
        0x95, 0x22, 0x00, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x08, 0x00, 0x54,
        0xb7, 0x03, 0x00, 0xb4, 0xe8, 0x06, 0x40, 0xf9,
        0x08, 0x29, 0x40, 0xf9, 0xc8, 0x03, 0x00, 0xb4,
        0x08, 0x09, 0x40, 0xf9, 0x88, 0x03, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb7, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x09, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x29, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x03, 0x0d, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x20, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xa8, 0x22, 0x00, 0xd1,
        0x09, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x88, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0xe8, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x03, 0x0d, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x88, 0xfd, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0x21, 0xfd, 0xff, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xf7, 0xff, 0xb5,
        0xd3, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: CONTINUE
    // a8: &PyExc_TypeError+0x0
    // b0: ERROR_TARGET
    const unsigned char data_body[184] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0xa8, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0xb0, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data + 0xa0);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)data + 0xa8);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data);
    patch_aarch64_12(code + 0x7c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0xa8);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_PyErr_Format);
    patch_aarch64_12x(code + 0x98, (uintptr_t)&_PyErr_Format);
    patch_aarch64_33rx(code + 0xbc, (uintptr_t)data + 0xb0);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data + 0xa8);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)data + 0x41);
    patch_aarch64_12(code + 0xd8, (uintptr_t)data + 0x41);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)data + 0xa8);
    patch_aarch64_21rx(code + 0xf0, (uintptr_t)&_PyErr_Format);
    patch_aarch64_12x(code + 0xf8, (uintptr_t)&_PyErr_Format);
    patch_aarch64_21rx(code + 0x11c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x124, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x12c, (uintptr_t)data + 0xb0);
    patch_aarch64_21rx(code + 0x13c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x144, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x14c, (uintptr_t)data + 0xb0);
    patch_aarch64_21rx(code + 0x15c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x164, (uintptr_t)&_Py_Dealloc);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ANEXT.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_GetANext
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_GetANext
    // 14: d63f0100      blr     x8
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b40000c0      cbz     x0, 0x38 <_JIT_ENTRY+0x38>
    // 24: f80086a0      str     x0, [x21], #0x8
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&_PyEval_GetANext);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AWAITABLE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_GetAwaitable
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_GetAwaitable
    // 1c: 12003d01      and     w1, w8, #0xffff
    // 20: aa1303e0      mov     x0, x19
    // 24: d63f0120      blr     x9
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: b9400268      ldr     w8, [x19]
    // 34: 37f80088      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b9000268      str     w8, [x19]
    // 40: 540000e0      b.eq    0x5c <_JIT_ENTRY+0x5c>
    // 44: b40001a0      cbz     x0, 0x78 <_JIT_ENTRY+0x78>
    // 48: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4c: f9400021      ldr     x1, [x1]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 50: f81f82a0      stur    x0, [x21, #-0x8]
    // 54: f84107fe      ldr     x30, [sp], #0x10
    // 58: d61f0020      br      x1
    // 5c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 60: aa0003f7      mov     x23, x0
    // 64: aa1303e0      mov     x0, x19
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: aa1703e0      mov     x0, x23
    // 74: b5fffeb7      cbnz    x23, 0x48 <_JIT_ENTRY+0x48>
    // 78: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 7c: f9400000      ldr     x0, [x0]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 80: f84107fe      ldr     x30, [sp], #0x10
    // 84: d61f0000      br      x0
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x01, 0x3d, 0x00, 0x12,
        0xe0, 0x03, 0x13, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe0, 0x00, 0x00, 0x54, 0xa0, 0x01, 0x00, 0xb4,
        0x01, 0x00, 0x00, 0x90, 0x21, 0x00, 0x40, 0xf9,
        0xa0, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x20, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x17, 0xaa, 0xb7, 0xfe, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyEval_GetAwaitable);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)&_PyEval_GetAwaitable);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x10);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ITER.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_GetIter
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_GetIter
    // 14: aa1303e0      mov     x0, x19
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b9400268      ldr     w8, [x19]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000268      str     w8, [x19]
    // 34: 540000e0      b.eq    0x50 <_JIT_ENTRY+0x50>
    // 38: b40001a0      cbz     x0, 0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400021      ldr     x1, [x1]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f81f82a0      stur    x0, [x21, #-0x8]
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0020      br      x1
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: aa0003f7      mov     x23, x0
    // 58: aa1303e0      mov     x0, x19
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 60: d63f0100      blr     x8
    // 64: aa1703e0      mov     x0, x23
    // 68: b5fffeb7      cbnz    x23, 0x3c <_JIT_ENTRY+0x3c>
    // 6c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa0, 0x01, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0xa0, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xb7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&PyObject_GetIter);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_LEN.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Size
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Size
    // 14: d63f0100      blr     x8
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b7f80140      tbnz    x0, #0x3f, 0x48 <_JIT_ENTRY+0x48>
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyLong_FromSsize_t
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyLong_FromSsize_t
    // 2c: d63f0100      blr     x8
    // 30: b40000c0      cbz     x0, 0x48 <_JIT_ENTRY+0x48>
    // 34: f80086a0      str     x0, [x21], #0x8
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 50: f84107fe      ldr     x30, [sp], #0x10
    // 54: d61f0000      br      x0
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x01, 0xf8, 0xb7, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&PyObject_Size);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)&PyLong_FromSsize_t);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)data + 0x8);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_YIELD_FROM_ITER.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyCoro_Type
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyCoro_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 54000300      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyGen_Type
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyGen_Type
    // 24: eb09011f      cmp     x8, x9
    // 28: 540001e0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_GetIter
    // 34: aa1303e0      mov     x0, x19
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_GetIter
    // 3c: d63f0100      blr     x8
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: b4000400      cbz     x0, 0xc8 <_JIT_ENTRY+0xc8>
    // 4c: b9400268      ldr     w8, [x19]
    // 50: 37f80448      tbnz    w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000268      str     w8, [x19]
    // 5c: 540004a0      b.eq    0xf0 <_JIT_ENTRY+0xf0>
    // 60: aa0003f3      mov     x19, x0
    // 64: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: f81f82b3      stur    x19, [x21, #-0x8]
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: f9400288      ldr     x8, [x20]
    // 7c: 79406108      ldrh    w8, [x8, #0x30]
    // 80: 7219051f      tst     w8, #0x180
    // 84: 54ffff01      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 88: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 8c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0EE@OKAKFBDN@cannot?5?8yield?5from?8?5a?5coroutine?5@
    // 90: 91000042      add     x2, x2, #0x0
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0EE@OKAKFBDN@cannot?5?8yield?5from?8?5a?5coroutine?5@
    // 94: f9400108      ldr     x8, [x8]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // 98: f9002295      str     x21, [x20, #0x40]
    // 9c: aa1603e0      mov     x0, x22
    // a0: f9400101      ldr     x1, [x8]
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_SetString
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_SetString
    // ac: d63f0100      blr     x8
    // b0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f9400000      ldr     x0, [x0]
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // bc: f900229f      str     xzr, [x20, #0x40]
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // cc: f9400000      ldr     x0, [x0]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // d0: f84107fe      ldr     x30, [sp], #0x10
    // d4: d61f0000      br      x0
    // d8: aa0003f3      mov     x19, x0
    // dc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // e0: f9400000      ldr     x0, [x0]
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e4: f81f82b3      stur    x19, [x21, #-0x8]
    // e8: f84107fe      ldr     x30, [sp], #0x10
    // ec: d61f0000      br      x0
    // f0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f4: aa0003f7      mov     x23, x0
    // f8: aa1303e0      mov     x0, x19
    // fc: f9400108      ldr     x8, [x8]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 100: d63f0100      blr     x8
    // 104: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 108: f9400000      ldr     x0, [x0]
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10c: f81f82b7      stur    x23, [x21, #-0x8]
    // 110: f84107fe      ldr     x30, [sp], #0x10
    // 114: d61f0000      br      x0
    const unsigned char code_body[280] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x00, 0x03, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xe0, 0x01, 0x00, 0x54, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x04, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x48, 0x04, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x04, 0x00, 0x54,
        0xf3, 0x03, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x88, 0x02, 0x40, 0xf9, 0x08, 0x61, 0x40, 0x79,
        0x1f, 0x05, 0x19, 0x72, 0x01, 0xff, 0xff, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xf3, 0x03, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb7, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &PyCoro_Type+0x0
    // 50: &PyGen_Type+0x0
    // 58: CONTINUE
    // 60: &PyExc_TypeError+0x0
    // 68: ERROR_TARGET
    const unsigned char data_body[112] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x50, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x68, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x50);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)&PyObject_GetIter);
    patch_aarch64_12x(code + 0x38, (uintptr_t)&PyObject_GetIter);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x58);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data);
    patch_aarch64_12(code + 0x90, (uintptr_t)data);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x60);
    patch_aarch64_33rx(code + 0xa4, (uintptr_t)&_PyErr_SetString);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data + 0x68);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data + 0x68);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x68);
    patch_aarch64_33rx(code + 0xdc, (uintptr_t)data + 0x58);
    patch_aarch64_21rx(code + 0xf0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xfc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x104, (uintptr_t)data + 0x58);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_FLOAT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFloat_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFloat_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: d61f0000      br      x0
    const unsigned char code_body[64] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: d61f0000      br      x0
    const unsigned char code_body[64] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_UNICODE.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyUnicode_Type
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyUnicode_Type
    // 10: eb08013f      cmp     x9, x8
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f82a9      ldur    x9, [x21, #-0x8]
    // 1c: f9400529      ldr     x9, [x9, #0x8]
    // 20: eb08013f      cmp     x9, x8
    // 24: 54000080      b.eq    0x34 <_JIT_ENTRY+0x34>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: d61f0000      br      x0
    const unsigned char code_body[64] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xa9, 0x82, 0x5f, 0xf8, 0x29, 0x05, 0x40, 0xf9,
        0x3f, 0x01, 0x08, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000161      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 20: b9400d09      ldr     w9, [x8, #0xc]
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 540000a1      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: d61f0000      br      x0
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 48: d61f0000      br      x0
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0x88, 0x12, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x61, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x0d, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0xa1, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x18);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_NO_DICT.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f85e8109      ldur    x9, [x8, #-0x18]
    // 8: b4000089      cbz     x9, 0x18 <_JIT_ENTRY+0x18>
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 14: d61f0000      br      x0
    // 18: f9400509      ldr     x9, [x8, #0x8]
    // 1c: f9401129      ldr     x9, [x9, #0x20]
    // 20: 8b090108      add     x8, x8, x9
    // 24: 39400d08      ldrb    w8, [x8, #0x3]
    // 28: 34ffff28      cbz     w8, 0xc <_JIT_ENTRY+0xc>
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x81, 0x5e, 0xf8,
        0x89, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x05, 0x40, 0xf9, 0x29, 0x11, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x08, 0x0d, 0x40, 0x39,
        0x28, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: JUMP_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400509      ldr     x9, [x8, #0x8]
    // 8: f9401129      ldr     x9, [x9, #0x20]
    // c: 8b090108      add     x8, x8, x9
    // 10: 39400d08      ldrb    w8, [x8, #0x3]
    // 14: 34000088      cbz     w8, 0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x05, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x0d, 0x40, 0x39, 0x88, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000141      b.ne    0x3c <_JIT_ENTRY+0x3c>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 20: b9400d08      ldr     w8, [x8, #0xc]
    // 24: f9400129      ldr     x9, [x9]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 28: 6b29211f      cmp     w8, w9, uxth
    // 2c: 54000081      b.ne    0x3c <_JIT_ENTRY+0x3c>
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 38: d61f0000      br      x0
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0x88, 0x0e, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x41, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x0d, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x21, 0x29, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x18);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // 8: f9400509      ldr     x9, [x8, #0x8]
    // c: f940014a      ldr     x10, [x10]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 10: eb0a013f      cmp     x9, x10
    // 14: 54000161      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 18: f9401108      ldr     x8, [x8, #0x20]
    // 1c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 20: b9400d09      ldr     w9, [x8, #0xc]
    // 24: f940014a      ldr     x10, [x10]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 28: 6b2a213f      cmp     w9, w10, uxth
    // 2c: 540000a1      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 30: f80086a8      str     x8, [x21], #0x8
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: d61f0000      br      x0
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 48: d61f0000      br      x0
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0x88, 0x0e, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x61, 0x01, 0x00, 0x54,
        0x08, 0x11, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x0d, 0x40, 0xb9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x21, 0x2a, 0x6b, 0xa1, 0x00, 0x00, 0x54,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x18);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_FALSE_POP.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000080      b.eq    0x20 <_JIT_ENTRY+0x20>
    // 14: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 18: f9400000      ldr     x0, [x0]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 1c: d61f0000      br      x0
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: d61f0000      br      x0
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x8e, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x10);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NONE_POP.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 8: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 10: eb08001f      cmp     x0, x8
    // 14: 54000140      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 18: b9400008      ldr     w8, [x0]
    // 1c: 37f80088      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 20: 71000508      subs    w8, w8, #0x1
    // 24: b9000008      str     w8, [x0]
    // 28: 54000120      b.eq    0x4c <_JIT_ENTRY+0x4c>
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 34: f84107fe      ldr     x30, [sp], #0x10
    // 38: d61f0000      br      x0
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f84107fe      ldr     x30, [sp], #0x10
    // 48: d61f0000      br      x0
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 54: d63f0100      blr     x8
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xa0, 0x8e, 0x5f, 0xf8, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x00, 0x08, 0xeb, 0x40, 0x01, 0x00, 0x54,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NOT_NONE_POP.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 8: b9400268      ldr     w8, [x19]
    // c: 37f80088      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000268      str     w8, [x19]
    // 18: 54000120      b.eq    0x3c <_JIT_ENTRY+0x3c>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 24: eb08027f      cmp     x19, x8
    // 28: 540001a0      b.eq    0x5c <_JIT_ENTRY+0x5c>
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f84107fe      ldr     x30, [sp], #0x10
    // 38: d61f0000      br      x0
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 40: aa1303e0      mov     x0, x19
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 54: eb08027f      cmp     x19, x8
    // 58: 54fffea1      b.ne    0x2c <_JIT_ENTRY+0x2c>
    // 5c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 60: f9400000      ldr     x0, [x0]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 64: f84107fe      ldr     x30, [sp], #0x10
    // 68: d61f0000      br      x0
    // 6c: 00 00 00 00
    const unsigned char code_body[112] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x8e, 0x5f, 0xf8,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x7f, 0x02, 0x08, 0xeb,
        0xa0, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x7f, 0x02, 0x08, 0xeb,
        0xa1, 0xfe, 0xff, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x44, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data + 0x10);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_TRUE_POP.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000080      b.eq    0x20 <_JIT_ENTRY+0x20>
    // 14: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 18: f9400000      ldr     x0, [x0]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 1c: d61f0000      br      x0
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: d61f0000      br      x0
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x8e, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x10);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_KEYS_VERSION.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f941b908      ldr     x8, [x8, #0x370]
    // 10: b9400d08      ldr     w8, [x8, #0xc]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 18: 6b09011f      cmp     w8, w9
    // 1c: 54000081      b.ne    0x2c <_JIT_ENTRY+0x2c>
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: d61f0000      br      x0
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x08, 0xb9, 0x41, 0xf9,
        0x08, 0x0d, 0x40, 0xb9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0x6b, 0x81, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x10);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_FLOAT.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFloat_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_INT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_LIST.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b4000109      cbz     x9, 0x28 <_JIT_ENTRY+0x28>
    // c: f940090a      ldr     x10, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09015f      cmp     x10, x9
    // 18: 540000e2      b.hs    0x34 <_JIT_ENTRY+0x34>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 38: 92800009      mov     x9, #-0x1               // =-1
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 40: f9000909      str     x9, [x8, #0x10]
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x00, 0xb4, 0x0a, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x5f, 0x01, 0x09, 0xeb,
        0xe2, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x80, 0x92, 0x00, 0x00, 0x40, 0xf9,
        0x09, 0x09, 0x00, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x8);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_RANGE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: b9401908      ldr     w8, [x8, #0x18]
    // 8: 7100011f      cmp     w8, #0x0
    // c: 5400008d      b.le    0x1c <_JIT_ENTRY+0x1c>
    // 10: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 14: f9400000      ldr     x0, [x0]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 18: d61f0000      br      x0
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: d61f0000      br      x0
    const unsigned char code_body[40] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x08, 0x19, 0x40, 0xb9,
        0x1f, 0x01, 0x00, 0x71, 0x8d, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: f9400d09      ldr     x9, [x8, #0x18]
    // 8: b4000109      cbz     x9, 0x28 <_JIT_ENTRY+0x28>
    // c: f9400908      ldr     x8, [x8, #0x10]
    // 10: f9400929      ldr     x9, [x9, #0x10]
    // 14: eb09011f      cmp     x8, x9
    // 18: 5400008a      b.ge    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x00, 0xb4, 0x08, 0x09, 0x40, 0xf9,
        0x29, 0x09, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x8a, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_FLOAT.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyFloat_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyFloat_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_INT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TYPE_VERSION.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: b9418108      ldr     w8, [x8, #0x180]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 14: 6b09011f      cmp     w8, w9
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x08, 0x81, 0x41, 0xb9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0x6b,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x10);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_FROM.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 18: f85f82a1      ldur    x1, [x21, #-0x8]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d02      ldr     x2, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_ImportFrom
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_ImportFrom
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b40000c0      cbz     x0, 0x54 <_JIT_ENTRY+0x54>
    // 40: f80086a0      str     x0, [x21], #0x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xa1, 0x82, 0x5f, 0xf8, 0x08, 0x2d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&_PyEval_ImportFrom);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x10);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_NAME.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: aa1403e1      mov     x1, x20
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 1c: a97f66b8      ldp     x24, x25, [x21, #-0x10]
    // 20: 8b292d08      add     x8, x8, w9, uxth #3
    // 24: f9400d02      ldr     x2, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_ImportName
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_ImportName
    // 34: aa1903e3      mov     x3, x25
    // 38: aa1803e4      mov     x4, x24
    // 3c: d63f0100      blr     x8
    // 40: f9402293      ldr     x19, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: aa0003f7      mov     x23, x0
    // 4c: b9400308      ldr     w8, [x24]
    // 50: 37f80108      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 54: 71000508      subs    w8, w8, #0x1
    // 58: b9000308      str     w8, [x24]
    // 5c: 540000a1      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 60: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 64: aa1803e0      mov     x0, x24
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: b9400328      ldr     w8, [x25]
    // 74: 37f80088      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 78: 71000508      subs    w8, w8, #0x1
    // 7c: b9000328      str     w8, [x25]
    // 80: 54000100      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 84: b4000197      cbz     x23, 0xb4 <_JIT_ENTRY+0xb4>
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8c: d1002275      sub     x21, x19, #0x8
    // 90: f9400000      ldr     x0, [x0]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 94: f81f0277      stur    x23, [x19, #-0x10]
    // 98: f84107fe      ldr     x30, [sp], #0x10
    // 9c: d61f0000      br      x0
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a4: aa1903e0      mov     x0, x25
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: b5fffed7      cbnz    x23, 0x88 <_JIT_ENTRY+0x88>
    // b4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // b8: aa1303f5      mov     x21, x19
    // bc: f9400000      ldr     x0, [x0]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c0: f84107fe      ldr     x30, [sp], #0x10
    // c4: d61f0000      br      x0
    const unsigned char code_body[200] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb8, 0x66, 0x7f, 0xa9,
        0x08, 0x2d, 0x29, 0x8b, 0x02, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe3, 0x03, 0x19, 0xaa,
        0xe4, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x28, 0x03, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x28, 0x03, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0x97, 0x01, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0x02, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xd7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&_PyEval_ImportName);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x90, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)data + 0x10);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 12003d0b      and     w11, w8, #0xffff
    // 10: 12800028      mov     w8, #-0x2               // =-2
    // 14: 4b0b0108      sub     w8, w8, w11
    // 18: 2a2b03eb      mvn     w11, w11
    // 1c: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 20: f9400d2a      ldr     x10, [x9, #0x18]
    // 24: b940014c      ldr     w12, [x10]
    // 28: 37f8006c      tbnz    w12, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 2c: 1100058c      add     w12, w12, #0x1
    // 30: b900014c      str     w12, [x10]
    // 34: f82bdaaa      str     x10, [x21, w11, sxtw #3]
    // 38: f9400929      ldr     x9, [x9, #0x10]
    // 3c: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 40: b940012a      ldr     w10, [x9]
    // 44: 37f8006a      tbnz    w10, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 1100054a      add     w10, w10, #0x1
    // 4c: b900012a      str     w10, [x9]
    // 50: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 54: b9400008      ldr     w8, [x0]
    // 58: 37f80088      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000008      str     w8, [x0]
    // 64: 540000a0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x0b, 0x3d, 0x00, 0x12,
        0x28, 0x00, 0x80, 0x12, 0x08, 0x01, 0x0b, 0x4b,
        0xeb, 0x03, 0x2b, 0x2a, 0xa9, 0xda, 0x68, 0xf8,
        0x2a, 0x0d, 0x40, 0xf9, 0x4c, 0x01, 0x40, 0xb9,
        0x6c, 0x00, 0xf8, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x4c, 0x01, 0x00, 0xb9, 0xaa, 0xda, 0x2b, 0xf8,
        0x29, 0x09, 0x40, 0xf9, 0xa0, 0xda, 0x68, 0xf8,
        0x2a, 0x01, 0x40, 0xb9, 0x6a, 0x00, 0xf8, 0x37,
        0x4a, 0x05, 0x00, 0x11, 0x2a, 0x01, 0x00, 0xb9,
        0xa9, 0xda, 0x28, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x8);
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 1280002a      mov     w10, #-0x2              // =-2
    // 8: aa1503e8      mov     x8, x21
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 12003d2d      and     w13, w9, #0xffff
    // 14: 4b0d0149      sub     w9, w10, w13
    // 18: f94076ca      ldr     x10, [x22, #0xe8]
    // 1c: 2a2d03ef      mvn     w15, w13
    // 20: f869daae      ldr     x14, [x21, w9, sxtw #3]
    // 24: 8b2fceb5      add     x21, x21, w15, sxtw #3
    // 28: f94019cb      ldr     x11, [x14, #0x30]
    // 2c: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 30: 8b0c0d4f      add     x15, x10, x12, lsl #3
    // 34: f94002ac      ldr     x12, [x21]
    // 38: f90076cf      str     x15, [x22, #0xe8]
    // 3c: f100019f      cmp     x12, #0x0
    // 40: a900b954      stp     x20, x14, [x10, #0x8]
    // 44: 1a8d05ad      cinc    w13, w13, ne
    // 48: b940016f      ldr     w15, [x11]
    // 4c: 37f8006f      tbnz    w15, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 50: 110005ef      add     w15, w15, #0x1
    // 54: b900016f      str     w15, [x11]
    // 58: f900014b      str     x11, [x10]
    // 5c: 91034170      add     x16, x11, #0xd0
    // 60: f9400dcf      ldr     x15, [x14, #0x18]
    // 64: f900114f      str     x15, [x10, #0x20]
    // 68: f94009ce      ldr     x14, [x14, #0x10]
    // 6c: f900155f      str     xzr, [x10, #0x28]
    // 70: f9000d4e      str     x14, [x10, #0x18]
    // 74: 9101414e      add     x14, x10, #0x50
    // 78: b980496f      ldrsw   x15, [x11, #0x48]
    // 7c: a903415f      stp     xzr, x16, [x10, #0x30]
    // 80: b900495f      str     wzr, [x10, #0x48]
    // 84: 8b0f0dcf      add     x15, x14, x15, lsl #3
    // 88: f900214f      str     x15, [x10, #0x40]
    // 8c: b940496f      ldr     w15, [x11, #0x48]
    // 90: 6b0d01ff      cmp     w15, w13
    // 94: 540000cd      b.le    0xac <_JIT_ENTRY+0xac>
    // 98: f82d79df      str     xzr, [x14, x13, lsl #3]
    // 9c: 910005ad      add     x13, x13, #0x1
    // a0: b980496f      ldrsw   x15, [x11, #0x48]
    // a4: eb0f01bf      cmp     x13, x15
    // a8: 54ffff8b      b.lt    0x98 <_JIT_ENTRY+0x98>
    // ac: 9000000d      adrp    x13, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // b0: f100019f      cmp     x12, #0x0
    // b4: f94001ad      ldr     x13, [x13]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // b8: f94002af      ldr     x15, [x21]
    // bc: 1a9f07eb      cset    w11, ne
    // c0: 72003dbf      tst     w13, #0xffff
    // c4: f90001cf      str     x15, [x14]
    // c8: 54000300      b.eq    0x128 <_JIT_ENTRY+0x128>
    // cc: 12003dae      and     w14, w13, #0xffff
    // d0: 92403dad      and     x13, x13, #0xffff
    // d4: 71002ddf      cmp     w14, #0xb
    // d8: 54000149      b.ls    0x100 <_JIT_ENTRY+0x100>
    // dc: f100019f      cmp     x12, #0x0
    // e0: d37df1ae      lsl     x14, x13, #3
    // e4: 1a9f07ec      cset    w12, ne
    // e8: 8b2c4d4c      add     x12, x10, w12, uxtw #3
    // ec: 8b0e018c      add     x12, x12, x14
    // f0: cb08018c      sub     x12, x12, x8
    // f4: 9101418c      add     x12, x12, #0x50
    // f8: f100819f      cmp     x12, #0x20
    // fc: 540001e2      b.hs    0x138 <_JIT_ENTRY+0x138>
    // 100: aa1f03ec      mov     x12, xzr
    // 104: d37df18e      lsl     x14, x12, #3
    // 108: 8b0b0dcb      add     x11, x14, x11, lsl #3
    // 10c: 8b0a016e      add     x14, x11, x10
    // 110: cb0d018b      sub     x11, x12, x13
    // 114: 910141cc      add     x12, x14, #0x50
    // 118: f86b790d      ldr     x13, [x8, x11, lsl #3]
    // 11c: b100056b      adds    x11, x11, #0x1
    // 120: f800858d      str     x13, [x12], #0x8
    // 124: 54ffffa3      b.lo    0x118 <_JIT_ENTRY+0x118>
    // 128: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 12c: f9400000      ldr     x0, [x0]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 130: f829d90a      str     x10, [x8, w9, sxtw #3]
    // 134: d61f0000      br      x0
    // 138: 8b0b0d4f      add     x15, x10, x11, lsl #3
    // 13c: 927e35ac      and     x12, x13, #0xfffc
    // 140: cb0e0110      sub     x16, x8, x14
    // 144: 910181ee      add     x14, x15, #0x60
    // 148: 9100420f      add     x15, x16, #0x10
    // 14c: aa0c03f0      mov     x16, x12
    // 150: ad7f85e0      ldp     q0, q1, [x15, #-0x10]
    // 154: f1001210      subs    x16, x16, #0x4
    // 158: 910081ef      add     x15, x15, #0x20
    // 15c: ad3f85c0      stp     q0, q1, [x14, #-0x10]
    // 160: 910081ce      add     x14, x14, #0x20
    // 164: 54ffff61      b.ne    0x150 <_JIT_ENTRY+0x150>
    // 168: eb0d019f      cmp     x12, x13
    // 16c: 54fffcc1      b.ne    0x104 <_JIT_ENTRY+0x104>
    // 170: 17ffffee      b       0x128 <_JIT_ENTRY+0x128>
    // 174: 00 00 00 00
    const unsigned char code_body[376] = {
        0x09, 0x00, 0x00, 0x90, 0x2a, 0x00, 0x80, 0x12,
        0xe8, 0x03, 0x15, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x2d, 0x3d, 0x00, 0x12, 0x49, 0x01, 0x0d, 0x4b,
        0xca, 0x76, 0x40, 0xf9, 0xef, 0x03, 0x2d, 0x2a,
        0xae, 0xda, 0x69, 0xf8, 0xb5, 0xce, 0x2f, 0x8b,
        0xcb, 0x19, 0x40, 0xf9, 0x6c, 0x4d, 0x80, 0xb9,
        0x4f, 0x0d, 0x0c, 0x8b, 0xac, 0x02, 0x40, 0xf9,
        0xcf, 0x76, 0x00, 0xf9, 0x9f, 0x01, 0x00, 0xf1,
        0x54, 0xb9, 0x00, 0xa9, 0xad, 0x05, 0x8d, 0x1a,
        0x6f, 0x01, 0x40, 0xb9, 0x6f, 0x00, 0xf8, 0x37,
        0xef, 0x05, 0x00, 0x11, 0x6f, 0x01, 0x00, 0xb9,
        0x4b, 0x01, 0x00, 0xf9, 0x70, 0x41, 0x03, 0x91,
        0xcf, 0x0d, 0x40, 0xf9, 0x4f, 0x11, 0x00, 0xf9,
        0xce, 0x09, 0x40, 0xf9, 0x5f, 0x15, 0x00, 0xf9,
        0x4e, 0x0d, 0x00, 0xf9, 0x4e, 0x41, 0x01, 0x91,
        0x6f, 0x49, 0x80, 0xb9, 0x5f, 0x41, 0x03, 0xa9,
        0x5f, 0x49, 0x00, 0xb9, 0xcf, 0x0d, 0x0f, 0x8b,
        0x4f, 0x21, 0x00, 0xf9, 0x6f, 0x49, 0x40, 0xb9,
        0xff, 0x01, 0x0d, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xdf, 0x79, 0x2d, 0xf8, 0xad, 0x05, 0x00, 0x91,
        0x6f, 0x49, 0x80, 0xb9, 0xbf, 0x01, 0x0f, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0d, 0x00, 0x00, 0x90,
        0x9f, 0x01, 0x00, 0xf1, 0xad, 0x01, 0x40, 0xf9,
        0xaf, 0x02, 0x40, 0xf9, 0xeb, 0x07, 0x9f, 0x1a,
        0xbf, 0x3d, 0x00, 0x72, 0xcf, 0x01, 0x00, 0xf9,
        0x00, 0x03, 0x00, 0x54, 0xae, 0x3d, 0x00, 0x12,
        0xad, 0x3d, 0x40, 0x92, 0xdf, 0x2d, 0x00, 0x71,
        0x49, 0x01, 0x00, 0x54, 0x9f, 0x01, 0x00, 0xf1,
        0xae, 0xf1, 0x7d, 0xd3, 0xec, 0x07, 0x9f, 0x1a,
        0x4c, 0x4d, 0x2c, 0x8b, 0x8c, 0x01, 0x0e, 0x8b,
        0x8c, 0x01, 0x08, 0xcb, 0x8c, 0x41, 0x01, 0x91,
        0x9f, 0x81, 0x00, 0xf1, 0xe2, 0x01, 0x00, 0x54,
        0xec, 0x03, 0x1f, 0xaa, 0x8e, 0xf1, 0x7d, 0xd3,
        0xcb, 0x0d, 0x0b, 0x8b, 0x6e, 0x01, 0x0a, 0x8b,
        0x8b, 0x01, 0x0d, 0xcb, 0xcc, 0x41, 0x01, 0x91,
        0x0d, 0x79, 0x6b, 0xf8, 0x6b, 0x05, 0x00, 0xb1,
        0x8d, 0x85, 0x00, 0xf8, 0xa3, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x0a, 0xd9, 0x29, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x4f, 0x0d, 0x0b, 0x8b, 0xac, 0x35, 0x7e, 0x92,
        0x10, 0x01, 0x0e, 0xcb, 0xee, 0x81, 0x01, 0x91,
        0x0f, 0x42, 0x00, 0x91, 0xf0, 0x03, 0x0c, 0xaa,
        0xe0, 0x85, 0x7f, 0xad, 0x10, 0x12, 0x00, 0xf1,
        0xef, 0x81, 0x00, 0x91, 0xc0, 0x85, 0x3f, 0xad,
        0xce, 0x81, 0x00, 0x91, 0x61, 0xff, 0xff, 0x54,
        0x9f, 0x01, 0x0d, 0xeb, 0xc1, 0xfc, 0xff, 0x54,
        0xee, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xac, (uintptr_t)data);
    patch_aarch64_12x(code + 0xb4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x128, (uintptr_t)data + 0x8);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_0.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8eab      ldr     x11, [x21, #-0x8]!
    // 8: f85f82ac      ldur    x12, [x21, #-0x8]
    // c: f94076c9      ldr     x9, [x22, #0xe8]
    // 10: f100017f      cmp     x11, #0x0
    // 14: f940198a      ldr     x10, [x12, #0x30]
    // 18: b9804d4d      ldrsw   x13, [x10, #0x4c]
    // 1c: 8b0d0d2d      add     x13, x9, x13, lsl #3
    // 20: f90076cd      str     x13, [x22, #0xe8]
    // 24: 1a9f07ed      cset    w13, ne
    // 28: a900b134      stp     x20, x12, [x9, #0x8]
    // 2c: b940014e      ldr     w14, [x10]
    // 30: 37f8006e      tbnz    w14, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 110005ce      add     w14, w14, #0x1
    // 38: b900014e      str     w14, [x10]
    // 3c: f900012a      str     x10, [x9]
    // 40: 9103414f      add     x15, x10, #0xd0
    // 44: f9400d8e      ldr     x14, [x12, #0x18]
    // 48: f900112e      str     x14, [x9, #0x20]
    // 4c: f940098c      ldr     x12, [x12, #0x10]
    // 50: f900153f      str     xzr, [x9, #0x28]
    // 54: f9000d2c      str     x12, [x9, #0x18]
    // 58: 9101412c      add     x12, x9, #0x50
    // 5c: b980494e      ldrsw   x14, [x10, #0x48]
    // 60: a9033d3f      stp     xzr, x15, [x9, #0x30]
    // 64: b900493f      str     wzr, [x9, #0x48]
    // 68: 8b0e0d8e      add     x14, x12, x14, lsl #3
    // 6c: f900212e      str     x14, [x9, #0x40]
    // 70: b940494e      ldr     w14, [x10, #0x48]
    // 74: 6b0d01df      cmp     w14, w13
    // 78: 5400010d      b.le    0x98 <_JIT_ENTRY+0x98>
    // 7c: f100017f      cmp     x11, #0x0
    // 80: 1a9f07eb      cset    w11, ne
    // 84: f82b799f      str     xzr, [x12, x11, lsl #3]
    // 88: 9100056b      add     x11, x11, #0x1
    // 8c: b980494d      ldrsw   x13, [x10, #0x48]
    // 90: eb0d017f      cmp     x11, x13
    // 94: 54ffff8b      b.lt    0x84 <_JIT_ENTRY+0x84>
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 9c: f85f810a      ldur    x10, [x8, #-0x8]
    // a0: f9400000      ldr     x0, [x0]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // a4: f900292a      str     x10, [x9, #0x50]
    // a8: f81f0109      stur    x9, [x8, #-0x10]
    // ac: d61f0000      br      x0
    const unsigned char code_body[176] = {
        0xe8, 0x03, 0x15, 0xaa, 0xab, 0x8e, 0x5f, 0xf8,
        0xac, 0x82, 0x5f, 0xf8, 0xc9, 0x76, 0x40, 0xf9,
        0x7f, 0x01, 0x00, 0xf1, 0x8a, 0x19, 0x40, 0xf9,
        0x4d, 0x4d, 0x80, 0xb9, 0x2d, 0x0d, 0x0d, 0x8b,
        0xcd, 0x76, 0x00, 0xf9, 0xed, 0x07, 0x9f, 0x1a,
        0x34, 0xb1, 0x00, 0xa9, 0x4e, 0x01, 0x40, 0xb9,
        0x6e, 0x00, 0xf8, 0x37, 0xce, 0x05, 0x00, 0x11,
        0x4e, 0x01, 0x00, 0xb9, 0x2a, 0x01, 0x00, 0xf9,
        0x4f, 0x41, 0x03, 0x91, 0x8e, 0x0d, 0x40, 0xf9,
        0x2e, 0x11, 0x00, 0xf9, 0x8c, 0x09, 0x40, 0xf9,
        0x3f, 0x15, 0x00, 0xf9, 0x2c, 0x0d, 0x00, 0xf9,
        0x2c, 0x41, 0x01, 0x91, 0x4e, 0x49, 0x80, 0xb9,
        0x3f, 0x3d, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x8e, 0x0d, 0x0e, 0x8b, 0x2e, 0x21, 0x00, 0xf9,
        0x4e, 0x49, 0x40, 0xb9, 0xdf, 0x01, 0x0d, 0x6b,
        0x0d, 0x01, 0x00, 0x54, 0x7f, 0x01, 0x00, 0xf1,
        0xeb, 0x07, 0x9f, 0x1a, 0x9f, 0x79, 0x2b, 0xf8,
        0x6b, 0x05, 0x00, 0x91, 0x4d, 0x49, 0x80, 0xb9,
        0x7f, 0x01, 0x0d, 0xeb, 0x8b, 0xff, 0xff, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x0a, 0x81, 0x5f, 0xf8,
        0x00, 0x00, 0x40, 0xf9, 0x2a, 0x29, 0x00, 0xf9,
        0x09, 0x01, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)data);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_1.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f0eaa      ldr     x10, [x21, #-0x10]!
    // 8: f85f82ad      ldur    x13, [x21, #-0x8]
    // c: f94076c9      ldr     x9, [x22, #0xe8]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019ab      ldr     x11, [x13, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f90076cc      str     x12, [x22, #0xe8]
    // 24: 5280002c      mov     w12, #0x1               // =1
    // 28: a900b534      stp     x20, x13, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016e      ldr     w14, [x11]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900016e      str     w14, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9103416f      add     x15, x11, #0xd0
    // 48: f9400dae      ldr     x14, [x13, #0x18]
    // 4c: f900112e      str     x14, [x9, #0x20]
    // 50: f94009ad      ldr     x13, [x13, #0x10]
    // 54: f900153f      str     xzr, [x9, #0x28]
    // 58: f9000d2d      str     x13, [x9, #0x18]
    // 5c: 9101412d      add     x13, x9, #0x50
    // 60: b980496e      ldrsw   x14, [x11, #0x48]
    // 64: a9033d3f      stp     xzr, x15, [x9, #0x30]
    // 68: b900493f      str     wzr, [x9, #0x48]
    // 6c: 8b0e0dae      add     x14, x13, x14, lsl #3
    // 70: f900212e      str     x14, [x9, #0x40]
    // 74: b940496e      ldr     w14, [x11, #0x48]
    // 78: 6b0c01df      cmp     w14, w12
    // 7c: 540000cd      b.le    0x94 <_JIT_ENTRY+0x94>
    // 80: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 84: 9100058c      add     x12, x12, #0x1
    // 88: b980496e      ldrsw   x14, [x11, #0x48]
    // 8c: eb0e019f      cmp     x12, x14
    // 90: 54ffff8b      b.lt    0x80 <_JIT_ENTRY+0x80>
    // 94: f85f010b      ldur    x11, [x8, #-0x10]
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 9c: f100015f      cmp     x10, #0x0
    // a0: 1a9f07ea      cset    w10, ne
    // a4: f900292b      str     x11, [x9, #0x50]
    // a8: f85f810b      ldur    x11, [x8, #-0x8]
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f82a59ab      str     x11, [x13, w10, uxtw #3]
    // b4: f81e8109      stur    x9, [x8, #-0x18]
    // b8: d61f0000      br      x0
    // bc: 00 00 00 00
    const unsigned char code_body[192] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x0e, 0x5f, 0xf8,
        0xad, 0x82, 0x5f, 0xf8, 0xc9, 0x76, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xab, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x76, 0x00, 0xf9, 0x2c, 0x00, 0x80, 0x52,
        0x34, 0xb5, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x6e, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x6f, 0x41, 0x03, 0x91,
        0xae, 0x0d, 0x40, 0xf9, 0x2e, 0x11, 0x00, 0xf9,
        0xad, 0x09, 0x40, 0xf9, 0x3f, 0x15, 0x00, 0xf9,
        0x2d, 0x0d, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x3f, 0x3d, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0e, 0x8b,
        0x2e, 0x21, 0x00, 0xf9, 0x6e, 0x49, 0x40, 0xb9,
        0xdf, 0x01, 0x0c, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x01, 0x5f, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x5f, 0x01, 0x00, 0xf1,
        0xea, 0x07, 0x9f, 0x1a, 0x2b, 0x29, 0x00, 0xf9,
        0x0b, 0x81, 0x5f, 0xf8, 0x00, 0x00, 0x40, 0xf9,
        0xab, 0x59, 0x2a, 0xf8, 0x09, 0x81, 0x1e, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x98, (uintptr_t)data);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_2.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e8eaa      ldr     x10, [x21, #-0x18]!
    // 8: f85f82ad      ldur    x13, [x21, #-0x8]
    // c: f94076c9      ldr     x9, [x22, #0xe8]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019ab      ldr     x11, [x13, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f90076cc      str     x12, [x22, #0xe8]
    // 24: 5280004c      mov     w12, #0x2               // =2
    // 28: a900b534      stp     x20, x13, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016e      ldr     w14, [x11]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900016e      str     w14, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9103416f      add     x15, x11, #0xd0
    // 48: f9400dae      ldr     x14, [x13, #0x18]
    // 4c: f900112e      str     x14, [x9, #0x20]
    // 50: f94009ad      ldr     x13, [x13, #0x10]
    // 54: f900153f      str     xzr, [x9, #0x28]
    // 58: f9000d2d      str     x13, [x9, #0x18]
    // 5c: 9101412d      add     x13, x9, #0x50
    // 60: b980496e      ldrsw   x14, [x11, #0x48]
    // 64: a9033d3f      stp     xzr, x15, [x9, #0x30]
    // 68: b900493f      str     wzr, [x9, #0x48]
    // 6c: 8b0e0dae      add     x14, x13, x14, lsl #3
    // 70: f900212e      str     x14, [x9, #0x40]
    // 74: b940496e      ldr     w14, [x11, #0x48]
    // 78: 6b0c01df      cmp     w14, w12
    // 7c: 540000cd      b.le    0x94 <_JIT_ENTRY+0x94>
    // 80: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 84: 9100058c      add     x12, x12, #0x1
    // 88: b980496e      ldrsw   x14, [x11, #0x48]
    // 8c: eb0e019f      cmp     x12, x14
    // 90: 54ffff8b      b.lt    0x80 <_JIT_ENTRY+0x80>
    // 94: f85e810b      ldur    x11, [x8, #-0x18]
    // 98: f100015f      cmp     x10, #0x0
    // 9c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a0: 1a9f07ea      cset    w10, ne
    // a4: f900292b      str     x11, [x9, #0x50]
    // a8: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // ac: f85f010b      ldur    x11, [x8, #-0x10]
    // b0: f900014b      str     x11, [x10]
    // b4: f85f810b      ldur    x11, [x8, #-0x8]
    // b8: f9400000      ldr     x0, [x0]
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // bc: f900054b      str     x11, [x10, #0x8]
    // c0: f81e0109      stur    x9, [x8, #-0x20]
    // c4: d61f0000      br      x0
    const unsigned char code_body[200] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x8e, 0x5e, 0xf8,
        0xad, 0x82, 0x5f, 0xf8, 0xc9, 0x76, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xab, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x76, 0x00, 0xf9, 0x4c, 0x00, 0x80, 0x52,
        0x34, 0xb5, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x6e, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x6f, 0x41, 0x03, 0x91,
        0xae, 0x0d, 0x40, 0xf9, 0x2e, 0x11, 0x00, 0xf9,
        0xad, 0x09, 0x40, 0xf9, 0x3f, 0x15, 0x00, 0xf9,
        0x2d, 0x0d, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x3f, 0x3d, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0e, 0x8b,
        0x2e, 0x21, 0x00, 0xf9, 0x6e, 0x49, 0x40, 0xb9,
        0xdf, 0x01, 0x0c, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x81, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x90,
        0xea, 0x07, 0x9f, 0x1a, 0x2b, 0x29, 0x00, 0xf9,
        0xaa, 0x4d, 0x2a, 0x8b, 0x0b, 0x01, 0x5f, 0xf8,
        0x4b, 0x01, 0x00, 0xf9, 0x0b, 0x81, 0x5f, 0xf8,
        0x00, 0x00, 0x40, 0xf9, 0x4b, 0x05, 0x00, 0xf9,
        0x09, 0x01, 0x1e, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_3.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85e0eaa      ldr     x10, [x21, #-0x20]!
    // 8: f85f82ad      ldur    x13, [x21, #-0x8]
    // c: f94076c9      ldr     x9, [x22, #0xe8]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019ab      ldr     x11, [x13, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f90076cc      str     x12, [x22, #0xe8]
    // 24: 5280006c      mov     w12, #0x3               // =3
    // 28: a900b534      stp     x20, x13, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016e      ldr     w14, [x11]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900016e      str     w14, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9103416f      add     x15, x11, #0xd0
    // 48: f9400dae      ldr     x14, [x13, #0x18]
    // 4c: f900112e      str     x14, [x9, #0x20]
    // 50: f94009ad      ldr     x13, [x13, #0x10]
    // 54: f900153f      str     xzr, [x9, #0x28]
    // 58: f9000d2d      str     x13, [x9, #0x18]
    // 5c: 9101412d      add     x13, x9, #0x50
    // 60: b980496e      ldrsw   x14, [x11, #0x48]
    // 64: a9033d3f      stp     xzr, x15, [x9, #0x30]
    // 68: b900493f      str     wzr, [x9, #0x48]
    // 6c: 8b0e0dae      add     x14, x13, x14, lsl #3
    // 70: f900212e      str     x14, [x9, #0x40]
    // 74: b940496e      ldr     w14, [x11, #0x48]
    // 78: 6b0c01df      cmp     w14, w12
    // 7c: 540000cd      b.le    0x94 <_JIT_ENTRY+0x94>
    // 80: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 84: 9100058c      add     x12, x12, #0x1
    // 88: b980496e      ldrsw   x14, [x11, #0x48]
    // 8c: eb0e019f      cmp     x12, x14
    // 90: 54ffff8b      b.lt    0x80 <_JIT_ENTRY+0x80>
    // 94: f85e010b      ldur    x11, [x8, #-0x20]
    // 98: f100015f      cmp     x10, #0x0
    // 9c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a0: 1a9f07ea      cset    w10, ne
    // a4: f900292b      str     x11, [x9, #0x50]
    // a8: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // ac: f85e810b      ldur    x11, [x8, #-0x18]
    // b0: f900014b      str     x11, [x10]
    // b4: f85f010b      ldur    x11, [x8, #-0x10]
    // b8: f900054b      str     x11, [x10, #0x8]
    // bc: f85f810b      ldur    x11, [x8, #-0x8]
    // c0: f900094b      str     x11, [x10, #0x10]
    // c4: f9400000      ldr     x0, [x0]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // c8: f81d8109      stur    x9, [x8, #-0x28]
    // cc: d61f0000      br      x0
    const unsigned char code_body[208] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x0e, 0x5e, 0xf8,
        0xad, 0x82, 0x5f, 0xf8, 0xc9, 0x76, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xab, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x76, 0x00, 0xf9, 0x6c, 0x00, 0x80, 0x52,
        0x34, 0xb5, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x6e, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x6f, 0x41, 0x03, 0x91,
        0xae, 0x0d, 0x40, 0xf9, 0x2e, 0x11, 0x00, 0xf9,
        0xad, 0x09, 0x40, 0xf9, 0x3f, 0x15, 0x00, 0xf9,
        0x2d, 0x0d, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x3f, 0x3d, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0e, 0x8b,
        0x2e, 0x21, 0x00, 0xf9, 0x6e, 0x49, 0x40, 0xb9,
        0xdf, 0x01, 0x0c, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x01, 0x5e, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x90,
        0xea, 0x07, 0x9f, 0x1a, 0x2b, 0x29, 0x00, 0xf9,
        0xaa, 0x4d, 0x2a, 0x8b, 0x0b, 0x81, 0x5e, 0xf8,
        0x4b, 0x01, 0x00, 0xf9, 0x0b, 0x01, 0x5f, 0xf8,
        0x4b, 0x05, 0x00, 0xf9, 0x0b, 0x81, 0x5f, 0xf8,
        0x4b, 0x09, 0x00, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x09, 0x81, 0x1d, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)data);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_4.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85d8eaa      ldr     x10, [x21, #-0x28]!
    // 8: f85f82ad      ldur    x13, [x21, #-0x8]
    // c: f94076c9      ldr     x9, [x22, #0xe8]
    // 10: f100015f      cmp     x10, #0x0
    // 14: f94019ab      ldr     x11, [x13, #0x30]
    // 18: b9804d6c      ldrsw   x12, [x11, #0x4c]
    // 1c: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 20: f90076cc      str     x12, [x22, #0xe8]
    // 24: 5280008c      mov     w12, #0x4               // =4
    // 28: a900b534      stp     x20, x13, [x9, #0x8]
    // 2c: 1a8c058c      cinc    w12, w12, ne
    // 30: b940016e      ldr     w14, [x11]
    // 34: 37f8006e      tbnz    w14, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 110005ce      add     w14, w14, #0x1
    // 3c: b900016e      str     w14, [x11]
    // 40: f900012b      str     x11, [x9]
    // 44: 9103416f      add     x15, x11, #0xd0
    // 48: f9400dae      ldr     x14, [x13, #0x18]
    // 4c: f900112e      str     x14, [x9, #0x20]
    // 50: f94009ad      ldr     x13, [x13, #0x10]
    // 54: f900153f      str     xzr, [x9, #0x28]
    // 58: f9000d2d      str     x13, [x9, #0x18]
    // 5c: 9101412d      add     x13, x9, #0x50
    // 60: b980496e      ldrsw   x14, [x11, #0x48]
    // 64: a9033d3f      stp     xzr, x15, [x9, #0x30]
    // 68: b900493f      str     wzr, [x9, #0x48]
    // 6c: 8b0e0dae      add     x14, x13, x14, lsl #3
    // 70: f900212e      str     x14, [x9, #0x40]
    // 74: b940496e      ldr     w14, [x11, #0x48]
    // 78: 6b0c01df      cmp     w14, w12
    // 7c: 540000cd      b.le    0x94 <_JIT_ENTRY+0x94>
    // 80: f82c79bf      str     xzr, [x13, x12, lsl #3]
    // 84: 9100058c      add     x12, x12, #0x1
    // 88: b980496e      ldrsw   x14, [x11, #0x48]
    // 8c: eb0e019f      cmp     x12, x14
    // 90: 54ffff8b      b.lt    0x80 <_JIT_ENTRY+0x80>
    // 94: f85d810b      ldur    x11, [x8, #-0x28]
    // 98: f100015f      cmp     x10, #0x0
    // 9c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a0: 1a9f07ea      cset    w10, ne
    // a4: f900292b      str     x11, [x9, #0x50]
    // a8: 8b2a4daa      add     x10, x13, w10, uxtw #3
    // ac: f85e010b      ldur    x11, [x8, #-0x20]
    // b0: f900014b      str     x11, [x10]
    // b4: f85e810b      ldur    x11, [x8, #-0x18]
    // b8: f900054b      str     x11, [x10, #0x8]
    // bc: f85f010b      ldur    x11, [x8, #-0x10]
    // c0: f900094b      str     x11, [x10, #0x10]
    // c4: f85f810b      ldur    x11, [x8, #-0x8]
    // c8: f9000d4b      str     x11, [x10, #0x18]
    // cc: f9400000      ldr     x0, [x0]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d0: f81d0109      stur    x9, [x8, #-0x30]
    // d4: d61f0000      br      x0
    const unsigned char code_body[216] = {
        0xe8, 0x03, 0x15, 0xaa, 0xaa, 0x8e, 0x5d, 0xf8,
        0xad, 0x82, 0x5f, 0xf8, 0xc9, 0x76, 0x40, 0xf9,
        0x5f, 0x01, 0x00, 0xf1, 0xab, 0x19, 0x40, 0xf9,
        0x6c, 0x4d, 0x80, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x76, 0x00, 0xf9, 0x8c, 0x00, 0x80, 0x52,
        0x34, 0xb5, 0x00, 0xa9, 0x8c, 0x05, 0x8c, 0x1a,
        0x6e, 0x01, 0x40, 0xb9, 0x6e, 0x00, 0xf8, 0x37,
        0xce, 0x05, 0x00, 0x11, 0x6e, 0x01, 0x00, 0xb9,
        0x2b, 0x01, 0x00, 0xf9, 0x6f, 0x41, 0x03, 0x91,
        0xae, 0x0d, 0x40, 0xf9, 0x2e, 0x11, 0x00, 0xf9,
        0xad, 0x09, 0x40, 0xf9, 0x3f, 0x15, 0x00, 0xf9,
        0x2d, 0x0d, 0x00, 0xf9, 0x2d, 0x41, 0x01, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x3f, 0x3d, 0x03, 0xa9,
        0x3f, 0x49, 0x00, 0xb9, 0xae, 0x0d, 0x0e, 0x8b,
        0x2e, 0x21, 0x00, 0xf9, 0x6e, 0x49, 0x40, 0xb9,
        0xdf, 0x01, 0x0c, 0x6b, 0xcd, 0x00, 0x00, 0x54,
        0xbf, 0x79, 0x2c, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x6e, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0e, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x0b, 0x81, 0x5d, 0xf8,
        0x5f, 0x01, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x90,
        0xea, 0x07, 0x9f, 0x1a, 0x2b, 0x29, 0x00, 0xf9,
        0xaa, 0x4d, 0x2a, 0x8b, 0x0b, 0x01, 0x5e, 0xf8,
        0x4b, 0x01, 0x00, 0xf9, 0x0b, 0x81, 0x5e, 0xf8,
        0x4b, 0x05, 0x00, 0xf9, 0x0b, 0x01, 0x5f, 0xf8,
        0x4b, 0x09, 0x00, 0xf9, 0x0b, 0x81, 0x5f, 0xf8,
        0x4b, 0x0d, 0x00, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x09, 0x01, 0x1d, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xcc, (uintptr_t)data);
}

void
emit__INTERNAL_INCREMENT_OPT_COUNTER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INTERNAL_INCREMENT_OPT_COUNTER.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400d09      ldr     x9, [x8, #0x18]
    // c: f9400000      ldr     x0, [x0]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10: 91000529      add     x9, x9, #0x1
    // 14: f9000d09      str     x9, [x8, #0x18]
    // 18: d61f0000      br      x0
    // 1c: 00 00 00 00
    const unsigned char code_body[32] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x0d, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x29, 0x05, 0x00, 0x91, 0x09, 0x0d, 0x00, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_NONE.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 8: f85f82a0      ldur    x0, [x21, #-0x8]
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 10: eb08001f      cmp     x0, x8
    // 14: 54000200      b.eq    0x54 <_JIT_ENTRY+0x54>
    // 18: b9400008      ldr     w8, [x0]
    // 1c: 37f800e8      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 20: 71000508      subs    w8, w8, #0x1
    // 24: b9000008      str     w8, [x0]
    // 28: 54000081      b.ne    0x38 <_JIT_ENTRY+0x38>
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 34: d63f0100      blr     x8
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 5c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 60: f9400000      ldr     x0, [x0]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 64: f81f82a8      stur    x8, [x21, #-0x8]
    // 68: f84107fe      ldr     x30, [sp], #0x10
    // 6c: d61f0000      br      x0
    const unsigned char code_body[112] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xa0, 0x82, 0x5f, 0xf8, 0x08, 0x01, 0x40, 0xf9,
        0x1f, 0x00, 0x08, 0xeb, 0x00, 0x02, 0x00, 0x54,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data + 0x10);
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_OP.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8eb7      ldr     x23, [x21, #-0x8]!
    // c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 10: b9400308      ldr     w8, [x24]
    // 14: 37f80108      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 18: 71000508      subs    w8, w8, #0x1
    // 1c: b9000308      str     w8, [x24]
    // 20: 540000a1      b.ne    0x34 <_JIT_ENTRY+0x34>
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 28: aa1803e0      mov     x0, x24
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 30: d63f0100      blr     x8
    // 34: b94002e8      ldr     w8, [x23]
    // 38: 37f80108      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b90002e8      str     w8, [x23]
    // 44: 540000a1      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 4c: aa1703e0      mov     x0, x23
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 54: d63f0100      blr     x8
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 5c: eb17031f      cmp     x24, x23
    // 60: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 64: f9400108      ldr     x8, [x8]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 68: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 6c: f9400129      ldr     x9, [x9]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 70: 1a9f17ea      cset    w10, eq
    // 74: f940016b      ldr     x11, [x11]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 78: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 7c: 6b28215f      cmp     w10, w8, uxth
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 84: 9a890168      csel    x8, x11, x9, eq
    // 88: f81f0268      stur    x8, [x19, #-0x10]
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xb7, 0x8e, 0x5f, 0xf8, 0xb8, 0x82, 0x5f, 0xf8,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x1f, 0x03, 0x17, 0xeb,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xea, 0x17, 0x9f, 0x1a, 0x6b, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x5f, 0x21, 0x28, 0x6b,
        0x00, 0x00, 0x40, 0xf9, 0x68, 0x01, 0x89, 0x9a,
        0x68, 0x02, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_TrueStruct+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x24, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x80, (uintptr_t)data + 0x18);
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_LIST.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyListIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyListIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyListIter_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_RANGE.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyRangeIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyRangeIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyRangeIter_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_TUPLE.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTupleIter_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTupleIter_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyTupleIter_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_LIST.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: a941250a      ldp     x10, x9, [x8, #0x10]
    // 8: f9400d29      ldr     x9, [x9, #0x18]
    // c: 9100054b      add     x11, x10, #0x1
    // 10: f900090b      str     x11, [x8, #0x10]
    // 14: f86a7928      ldr     x8, [x9, x10, lsl #3]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x25, 0x41, 0xa9,
        0x29, 0x0d, 0x40, 0xf9, 0x4b, 0x05, 0x00, 0x91,
        0x0b, 0x09, 0x00, 0xf9, 0x28, 0x79, 0x6a, 0xf8,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_RANGE.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: 29422500      ldp     w0, w9, [x8, #0x10]
    // c: b940190a      ldr     w10, [x8, #0x18]
    // 10: 0b000129      add     w9, w9, w0
    // 14: 5100054a      sub     w10, w10, #0x1
    // 18: b9001109      str     w9, [x8, #0x10]
    // 1c: b900190a      str     w10, [x8, #0x18]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyLong_FromLong
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyLong_FromLong
    // 28: d63f0100      blr     x8
    // 2c: b40000c0      cbz     x0, 0x44 <_JIT_ENTRY+0x44>
    // 30: f80086a0      str     x0, [x21], #0x8
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x82, 0x5f, 0xf8,
        0x00, 0x25, 0x42, 0x29, 0x0a, 0x19, 0x40, 0xb9,
        0x29, 0x01, 0x00, 0x0b, 0x4a, 0x05, 0x00, 0x51,
        0x09, 0x11, 0x00, 0xb9, 0x0a, 0x19, 0x00, 0xb9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xc0, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x20, (uintptr_t)&PyLong_FromLong);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x8);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_TUPLE.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: a941250a      ldp     x10, x9, [x8, #0x10]
    // 8: 8b0a0d29      add     x9, x9, x10, lsl #3
    // c: 9100054a      add     x10, x10, #0x1
    // 10: f900090a      str     x10, [x8, #0x10]
    // 14: f9400d28      ldr     x8, [x9, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x0a, 0x25, 0x41, 0xa9,
        0x29, 0x0d, 0x0a, 0x8b, 0x4a, 0x05, 0x00, 0x91,
        0x0a, 0x09, 0x00, 0xf9, 0x28, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _JUMP_TO_TOP.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 4: f9400000      ldr     x0, [x0]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 8: d61f0000      br      x0
    // c: 00 00 00 00
    const unsigned char code_body[16] = {
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_APPEND.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1503f3      mov     x19, x21
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f85f8e61      ldr     x1, [x19, #-0x8]!
    // 14: 2a2803e8      mvn     w8, w8
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9400808      ldr     x8, [x0, #0x10]
    // 28: f9401009      ldr     x9, [x0, #0x20]
    // 2c: eb08013f      cmp     x9, x8
    // 30: 5400014d      b.le    0x58 <_JIT_ENTRY+0x58>
    // 34: f9400c09      ldr     x9, [x0, #0x18]
    // 38: 9100050a      add     x10, x8, #0x1
    // 3c: f8287921      str     x1, [x9, x8, lsl #3]
    // 40: f900080a      str     x10, [x0, #0x10]
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: aa1303f5      mov     x21, x19
    // 4c: f9400000      ldr     x0, [x0]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 50: f84107fe      ldr     x30, [sp], #0x10
    // 54: d61f0000      br      x0
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyList_AppendTakeRefListResize
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyList_AppendTakeRefListResize
    // 60: d63f0100      blr     x8
    // 64: 37f800c0      tbnz    w0, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 6c: aa1303f5      mov     x21, x19
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 80: f9400000      ldr     x0, [x0]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 84: f84107fe      ldr     x30, [sp], #0x10
    // 88: d61f0000      br      x0
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x15, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x61, 0x8e, 0x5f, 0xf8, 0xe8, 0x03, 0x28, 0x2a,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x08, 0x08, 0x40, 0xf9,
        0x09, 0x10, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0x4d, 0x01, 0x00, 0x54, 0x09, 0x0c, 0x40, 0xf9,
        0x0a, 0x05, 0x00, 0x91, 0x21, 0x79, 0x28, 0xf8,
        0x0a, 0x08, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x13, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xc0, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x7c, (uintptr_t)data + 0x10);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_EXTEND.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: 2a2803e8      mvn     w8, w8
    // 14: aa1303e1      mov     x1, x19
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyList_Extend
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyList_Extend
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b4000160      cbz     x0, 0x68 <_JIT_ENTRY+0x68>
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 54000640      b.eq    0x118 <_JIT_ENTRY+0x118>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_ExceptionMatches
    // 70: aa1603e0      mov     x0, x22
    // 74: f94002f7      ldr     x23, [x23]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // 78: f9002295      str     x21, [x20, #0x40]
    // 7c: f94002e1      ldr     x1, [x23]
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_ExceptionMatches
    // 84: d63f0100      blr     x8
    // 88: f9402295      ldr     x21, [x20, #0x40]
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: 34000320      cbz     w0, 0xf4 <_JIT_ENTRY+0xf4>
    // 94: f9400668      ldr     x8, [x19, #0x8]
    // 98: f9406d08      ldr     x8, [x8, #0xd8]
    // 9c: b50002c8      cbnz    x8, 0xf4 <_JIT_ENTRY+0xf4>
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySequence_Check
    // a4: aa1303e0      mov     x0, x19
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySequence_Check
    // ac: d63f0100      blr     x8
    // b0: 35000220      cbnz    w0, 0xf4 <_JIT_ENTRY+0xf4>
    // b4: f9002295      str     x21, [x20, #0x40]
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Clear
    // bc: aa1603e0      mov     x0, x22
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Clear
    // c4: d63f0100      blr     x8
    // c8: f9400668      ldr     x8, [x19, #0x8]
    // cc: f94002e1      ldr     x1, [x23]
    // d0: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0CO@OBBMLOHJ@Value?5after?5?$CK?5must?5be?5an?5iterabl@
    // d4: 91000042      add     x2, x2, #0x0
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0CO@OBBMLOHJ@Value?5after?5?$CK?5must?5be?5an?5iterabl@
    // d8: aa1603e0      mov     x0, x22
    // dc: f9400d03      ldr     x3, [x8, #0x18]
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // e4: f9400108      ldr     x8, [x8]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // e8: d63f0100      blr     x8
    // ec: f9402295      ldr     x21, [x20, #0x40]
    // f0: f900229f      str     xzr, [x20, #0x40]
    // f4: b9400268      ldr     w8, [x19]
    // f8: 37f80088      tbnz    w8, #0x1f, 0x108 <_JIT_ENTRY+0x108>
    // fc: 71000508      subs    w8, w8, #0x1
    // 100: b9000268      str     w8, [x19]
    // 104: 540001c0      b.eq    0x13c <_JIT_ENTRY+0x13c>
    // 108: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 10c: f9400000      ldr     x0, [x0]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 110: f84107fe      ldr     x30, [sp], #0x10
    // 114: d61f0000      br      x0
    // 118: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000118:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 11c: aa1303e0      mov     x0, x19
    // 120: f9400108      ldr     x8, [x8]
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 124: d63f0100      blr     x8
    // 128: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 12c: d10022b5      sub     x21, x21, #0x8
    // 130: f9400000      ldr     x0, [x0]
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 134: f84107fe      ldr     x30, [sp], #0x10
    // 138: d61f0000      br      x0
    // 13c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000013c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 140: aa1303e0      mov     x0, x19
    // 144: f9400108      ldr     x8, [x8]
    // 0000000000000144:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 148: d63f0100      blr     x8
    // 14c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000014c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 150: f9400000      ldr     x0, [x0]
    // 0000000000000150:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 154: f84107fe      ldr     x30, [sp], #0x10
    // 158: d61f0000      br      x0
    // 15c: 00 00 00 00
    const unsigned char code_body[352] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe8, 0x03, 0x28, 0x2a, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x01, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x40, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x17, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0xf7, 0x02, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe1, 0x02, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x03, 0x00, 0x34, 0x68, 0x06, 0x40, 0xf9,
        0x08, 0x6d, 0x40, 0xf9, 0xc8, 0x02, 0x00, 0xb5,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x20, 0x02, 0x00, 0x35, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x06, 0x40, 0xf9, 0xe1, 0x02, 0x40, 0xf9,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0xe0, 0x03, 0x16, 0xaa, 0x03, 0x0d, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: OPARG
    // 38: CONTINUE
    // 40: &PyExc_TypeError+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, instruction->oparg);
    patch_64(data + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x40, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&_PyList_Extend);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&PySequence_Check);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&PySequence_Check);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyErr_Clear);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyErr_Clear);
    patch_aarch64_21rx(code + 0xd0, (uintptr_t)data);
    patch_aarch64_12(code + 0xd4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0xe0, (uintptr_t)&_PyErr_Format);
    patch_aarch64_33rx(code + 0x108, (uintptr_t)data + 0x48);
    patch_aarch64_21rx(code + 0x118, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x120, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x128, (uintptr_t)data + 0x38);
    patch_aarch64_12x(code + 0x130, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x13c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x144, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x14c, (uintptr_t)data + 0x48);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f94002f7      ldr     x23, [x23]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f9400288      ldr     x8, [x20]
    // 10: f85f82b3      ldur    x19, [x21, #-0x8]
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: 53013ee9      ubfx    w9, w23, #1, #15
    // 1c: 8b294d08      add     x8, x8, w9, uxtw #3
    // 20: f9400d01      ldr     x1, [x8, #0x18]
    // 24: 370002b7      tbnz    w23, #0x0, 0x78 <_JIT_ENTRY+0x78>
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_GetAttr
    // 30: aa1303e0      mov     x0, x19
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_GetAttr
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: b9400268      ldr     w8, [x19]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000268      str     w8, [x19]
    // 54: 54000500      b.eq    0xf4 <_JIT_ENTRY+0xf4>
    // 58: b40005c0      cbz     x0, 0x110 <_JIT_ENTRY+0x110>
    // 5c: f81f82a0      stur    x0, [x21, #-0x8]
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: 120002e8      and     w8, w23, #0x1
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: f90007ff      str     xzr, [sp, #0x8]
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyObject_GetMethod
    // 80: 910023e2      add     x2, sp, #0x8
    // 84: f9002295      str     x21, [x20, #0x40]
    // 88: aa1303e0      mov     x0, x19
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyObject_GetMethod
    // 90: d63f0100      blr     x8
    // 94: f9402295      ldr     x21, [x20, #0x40]
    // 98: f900229f      str     xzr, [x20, #0x40]
    // 9c: 34000060      cbz     w0, 0xa8 <_JIT_ENTRY+0xa8>
    // a0: f94007e8      ldr     x8, [sp, #0x8]
    // a4: 1400000d      b       0xd8 <_JIT_ENTRY+0xd8>
    // a8: b9400268      ldr     w8, [x19]
    // ac: 37f80108      tbnz    w8, #0x1f, 0xcc <_JIT_ENTRY+0xcc>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000268      str     w8, [x19]
    // b8: 540000a1      b.ne    0xcc <_JIT_ENTRY+0xcc>
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: aa1303e0      mov     x0, x19
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: f94007e8      ldr     x8, [sp, #0x8]
    // d0: b4000208      cbz     x8, 0x110 <_JIT_ENTRY+0x110>
    // d4: aa1f03f3      mov     x19, xzr
    // d8: a93fcea8      stp     x8, x19, [x21, #-0x8]
    // dc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // e0: 120002e8      and     w8, w23, #0x1
    // e4: f9400000      ldr     x0, [x0]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e8: 8b284eb5      add     x21, x21, w8, uxtw #3
    // ec: f84107fe      ldr     x30, [sp], #0x10
    // f0: d61f0000      br      x0
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f8: aa0003f8      mov     x24, x0
    // fc: aa1303e0      mov     x0, x19
    // 100: f9400108      ldr     x8, [x8]
    // 0000000000000100:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 104: d63f0100      blr     x8
    // 108: aa1803e0      mov     x0, x24
    // 10c: b5fffa98      cbnz    x24, 0x5c <_JIT_ENTRY+0x5c>
    // 110: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 114: f9400000      ldr     x0, [x0]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 118: f84107fe      ldr     x30, [sp], #0x10
    // 11c: d61f0000      br      x0
    const unsigned char code_body[288] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0x88, 0x02, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x11, 0x40, 0xf9,
        0xe9, 0x3e, 0x01, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x01, 0x0d, 0x40, 0xf9, 0xb7, 0x02, 0x00, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x05, 0x00, 0x54,
        0xc0, 0x05, 0x00, 0xb4, 0xa0, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0xe8, 0x02, 0x00, 0x12,
        0x00, 0x00, 0x40, 0xf9, 0xb5, 0x4e, 0x28, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xff, 0x07, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe2, 0x23, 0x00, 0x91, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x60, 0x00, 0x00, 0x34,
        0xe8, 0x07, 0x40, 0xf9, 0x0d, 0x00, 0x00, 0x14,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x07, 0x40, 0xf9,
        0x08, 0x02, 0x00, 0xb4, 0xf3, 0x03, 0x1f, 0xaa,
        0xa8, 0xce, 0x3f, 0xa9, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x02, 0x00, 0x12, 0x00, 0x00, 0x40, 0xf9,
        0xb5, 0x4e, 0x28, 0x8b, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf8, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x18, 0xaa, 0x98, 0xfa, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)&PyObject_GetAttr);
    patch_aarch64_12x(code + 0x34, (uintptr_t)&PyObject_GetAttr);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)&_PyObject_GetMethod);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)&_PyObject_GetMethod);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xe4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x100, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x110, (uintptr_t)data + 0x10);
}

void
emit__LOAD_ATTR_CLASS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_0.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400273      ldr     x19, [x19]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: b9400268      ldr     w8, [x19]
    // 14: 37f80068      tbnz    w8, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 11000508      add     w8, w8, #0x1
    // 1c: b9000268      str     w8, [x19]
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 540000c0      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f81f82b3      stur    x19, [x21, #-0x8]
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 50: d63f0100      blr     x8
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: f81f82b3      stur    x19, [x21, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x13, 0x00, 0x00, 0x90,
        0x73, 0x02, 0x40, 0xf9, 0xa0, 0x82, 0x5f, 0xf8,
        0x68, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x68, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_CLASS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_1.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: aa1503f3      mov     x19, x21
    // c: f94002f7      ldr     x23, [x23]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 10: f85f82a0      ldur    x0, [x21, #-0x8]
    // 14: b94002e8      ldr     w8, [x23]
    // 18: 37f80068      tbnz    w8, #0x1f, 0x24 <_JIT_ENTRY+0x24>
    // 1c: 11000508      add     w8, w8, #0x1
    // 20: b90002e8      str     w8, [x23]
    // 24: b9400008      ldr     w8, [x0]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000008      str     w8, [x0]
    // 34: 540000e0      b.eq    0x50 <_JIT_ENTRY+0x50>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: 91002275      add     x21, x19, #0x8
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: a93ffe77      stp     x23, xzr, [x19, #-0x8]
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0000      br      x0
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 58: d63f0100      blr     x8
    // 5c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 60: 91002275      add     x21, x19, #0x8
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 68: a93ffe77      stp     x23, xzr, [x19, #-0x8]
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x15, 0xaa, 0xf7, 0x02, 0x40, 0xf9,
        0xa0, 0x82, 0x5f, 0xf8, 0xe8, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x75, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x77, 0xfe, 0x3f, 0xa9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x75, 0x22, 0x00, 0x91, 0x00, 0x00, 0x40, 0xf9,
        0x77, 0xfe, 0x3f, 0xa9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_0.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f8686813      ldr     x19, [x0, x8]
    // 18: b40001f3      cbz     x19, 0x54 <_JIT_ENTRY+0x54>
    // 1c: b9400268      ldr     w8, [x19]
    // 20: 37f80068      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 24: 11000508      add     w8, w8, #0x1
    // 28: b9000268      str     w8, [x19]
    // 2c: b9400008      ldr     w8, [x0]
    // 30: 37f80088      tbnz    w8, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000008      str     w8, [x0]
    // 3c: 54000140      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f81f82b3      stur    x19, [x21, #-0x8]
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: f9400000      ldr     x0, [x0]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 78: f81f82b3      stur    x19, [x21, #-0x8]
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0x13, 0x68, 0x68, 0xf8,
        0xf3, 0x01, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x40, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_1.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f8686813      ldr     x19, [x0, x8]
    // 18: b4000293      cbz     x19, 0x68 <_JIT_ENTRY+0x68>
    // 1c: b9400268      ldr     w8, [x19]
    // 20: 37f80068      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 24: 11000508      add     w8, w8, #0x1
    // 28: b9000268      str     w8, [x19]
    // 2c: b9400008      ldr     w8, [x0]
    // 30: 37f800e8      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000008      str     w8, [x0]
    // 3c: 54000081      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: aa1503e8      mov     x8, x21
    // 54: 910022b5      add     x21, x21, #0x8
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: a93ffd13      stp     x19, xzr, [x8, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    const unsigned char code_body[120] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0x13, 0x68, 0x68, 0xf8,
        0x93, 0x02, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x13, 0xfd, 0x3f, 0xa9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_LAZY_DICT.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: 91002115      add     x21, x8, #0x8
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x90, 0x15, 0x21, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x0a, 0xa5, 0x3f, 0xa9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_NO_DICT.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: 91002115      add     x21, x8, #0x8
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x90, 0x15, 0x21, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x0a, 0xa5, 0x3f, 0xa9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f940014a      ldr     x10, [x10]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: b940014b      ldr     w11, [x10]
    // 14: 37f8006b      tbnz    w11, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100056b      add     w11, w11, #0x1
    // 1c: b900014b      str     w11, [x10]
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: 91002115      add     x21, x8, #0x8
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x0a, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x4b, 0x01, 0x40, 0xb9, 0x6b, 0x00, 0xf8, 0x37,
        0x6b, 0x05, 0x00, 0x11, 0x4b, 0x01, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x90, 0x15, 0x21, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x0a, 0xa5, 0x3f, 0xa9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_MODULE.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 5280002a      mov     w10, #0x1               // =1
    // c: f9400808      ldr     x8, [x0, #0x10]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: 39402509      ldrb    w9, [x8, #0x9]
    // 18: 9ac92149      lsl     x9, x10, x9
    // 1c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 20: f940014a      ldr     x10, [x10]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 24: 8b090108      add     x8, x8, x9
    // 28: 8b2a3108      add     x8, x8, w10, uxth #4
    // 2c: f9401513      ldr     x19, [x8, #0x28]
    // 30: b40002b3      cbz     x19, 0x84 <_JIT_ENTRY+0x84>
    // 34: b9400268      ldr     w8, [x19]
    // 38: 37f80068      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 3c: 11000508      add     w8, w8, #0x1
    // 40: b9000268      str     w8, [x19]
    // 44: b9400008      ldr     w8, [x0]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000008      str     w8, [x0]
    // 54: 54000200      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 58: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 5c: f9400129      ldr     x9, [x9]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 60: f81f82b3      stur    x19, [x21, #-0x8]
    // 64: 12000128      and     w8, w9, #0x1
    // 68: 36000049      tbz     w9, #0x0, 0x70 <_JIT_ENTRY+0x70>
    // 6c: f90002bf      str     xzr, [x21]
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // a4: f9400129      ldr     x9, [x9]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // a8: f81f82b3      stur    x19, [x21, #-0x8]
    // ac: 12000128      and     w8, w9, #0x1
    // b0: 3707fde9      tbnz    w9, #0x0, 0x6c <_JIT_ENTRY+0x6c>
    // b4: 17ffffef      b       0x70 <_JIT_ENTRY+0x70>
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x2a, 0x00, 0x80, 0x52, 0x08, 0x08, 0x40, 0xf9,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x49, 0x21, 0xc9, 0x9a, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x31, 0x2a, 0x8b, 0x13, 0x15, 0x40, 0xf9,
        0xb3, 0x02, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x00, 0x02, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0x28, 0x01, 0x00, 0x12,
        0x49, 0x00, 0x00, 0x36, 0xbf, 0x02, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0x28, 0x01, 0x00, 0x12,
        0xe9, 0xfd, 0x07, 0x37, 0xef, 0xff, 0xff, 0x17,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_MODULE_FROM_KEYS.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503f3      mov     x19, x21
    // 8: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // c: 5280002a      mov     w10, #0x1               // =1
    // 10: 39402509      ldrb    w9, [x8, #0x9]
    // 14: 9ac92149      lsl     x9, x10, x9
    // 18: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 20: 8b090108      add     x8, x8, x9
    // 24: 8b2a3108      add     x8, x8, w10, uxth #4
    // 28: f9401517      ldr     x23, [x8, #0x28]
    // 2c: b40002d7      cbz     x23, 0x84 <_JIT_ENTRY+0x84>
    // 30: b94002e8      ldr     w8, [x23]
    // 34: f85f82a0      ldur    x0, [x21, #-0x8]
    // 38: 37f80068      tbnz    w8, #0x1f, 0x44 <_JIT_ENTRY+0x44>
    // 3c: 11000508      add     w8, w8, #0x1
    // 40: b90002e8      str     w8, [x23]
    // 44: b9400008      ldr     w8, [x0]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000008      str     w8, [x0]
    // 54: 54000200      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 58: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 5c: f9400129      ldr     x9, [x9]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 60: f81f0277      stur    x23, [x19, #-0x10]
    // 64: 12000128      and     w8, w9, #0x1
    // 68: 36000049      tbz     w9, #0x0, 0x70 <_JIT_ENTRY+0x70>
    // 6c: f90002bf      str     xzr, [x21]
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // a4: f9400129      ldr     x9, [x9]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // a8: f81f0277      stur    x23, [x19, #-0x10]
    // ac: 12000128      and     w8, w9, #0x1
    // b0: 3707fde9      tbnz    w9, #0x0, 0x6c <_JIT_ENTRY+0x6c>
    // b4: 17ffffef      b       0x70 <_JIT_ENTRY+0x70>
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xf3, 0x03, 0x15, 0xaa,
        0xa8, 0x8e, 0x5f, 0xf8, 0x2a, 0x00, 0x80, 0x52,
        0x09, 0x25, 0x40, 0x39, 0x49, 0x21, 0xc9, 0x9a,
        0x0a, 0x00, 0x00, 0x90, 0x4a, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x08, 0x31, 0x2a, 0x8b,
        0x17, 0x15, 0x40, 0xf9, 0xd7, 0x02, 0x00, 0xb4,
        0xe8, 0x02, 0x40, 0xb9, 0xa0, 0x82, 0x5f, 0xf8,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0xe8, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x00, 0x02, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x77, 0x02, 0x1f, 0xf8, 0x28, 0x01, 0x00, 0x12,
        0x49, 0x00, 0x00, 0x36, 0xbf, 0x02, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x77, 0x02, 0x1f, 0xf8, 0x28, 0x01, 0x00, 0x12,
        0xe9, 0xfd, 0x07, 0x37, 0xef, 0xff, 0xff, 0x17,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f800e8      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 24: d63f0100      blr     x8
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 30: b9400109      ldr     w9, [x8]
    // 34: 37f80069      tbnz    w9, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 11000529      add     w9, w9, #0x1
    // 3c: b9000109      str     w9, [x8]
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f800e8      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 24: d63f0100      blr     x8
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 30: b9400109      ldr     w9, [x8]
    // 34: 37f80069      tbnz    w9, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 38: 11000529      add     w9, w9, #0x1
    // 3c: b9000109      str     w9, [x8]
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f81f82a8      stur    x8, [x21, #-0x8]
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_PROPERTY_FRAME.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: 528001aa      mov     w10, #0xd               // =13
    // 8: f940016b      ldr     x11, [x11]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f9401968      ldr     x8, [x11, #0x30]
    // 10: b9403109      ldr     w9, [x8, #0x30]
    // 14: 0a0a0129      and     w9, w9, w10
    // 18: 7100053f      cmp     w9, #0x1
    // 1c: 54000661      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 20: b9403d09      ldr     w9, [x8, #0x3c]
    // 24: 35000629      cbnz    w9, 0xe8 <_JIT_ENTRY+0xe8>
    // 28: b9403509      ldr     w9, [x8, #0x34]
    // 2c: 7100053f      cmp     w9, #0x1
    // 30: 540005c1      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // 34: f94076c9      ldr     x9, [x22, #0xe8]
    // 38: b4000589      cbz     x9, 0xe8 <_JIT_ENTRY+0xe8>
    // 3c: f9407aca      ldr     x10, [x22, #0xf0]
    // 40: b9804d0c      ldrsw   x12, [x8, #0x4c]
    // 44: cb09014a      sub     x10, x10, x9
    // 48: eb8a0d9f      cmp     x12, x10, asr #3
    // 4c: 540004ea      b.ge    0xe8 <_JIT_ENTRY+0xe8>
    // 50: b940016d      ldr     w13, [x11]
    // 54: f85f82aa      ldur    x10, [x21, #-0x8]
    // 58: 37f8006d      tbnz    w13, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 5c: 110005ad      add     w13, w13, #0x1
    // 60: b900016d      str     w13, [x11]
    // 64: 8b0c0d2c      add     x12, x9, x12, lsl #3
    // 68: f90076cc      str     x12, [x22, #0xe8]
    // 6c: a900ad34      stp     x20, x11, [x9, #0x8]
    // 70: b940010c      ldr     w12, [x8]
    // 74: 37f8006c      tbnz    w12, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 78: 1100058c      add     w12, w12, #0x1
    // 7c: b900010c      str     w12, [x8]
    // 80: f9000128      str     x8, [x9]
    // 84: 9103410c      add     x12, x8, #0xd0
    // 88: 3dc00560      ldr     q0, [x11, #0x10]
    // 8c: f900153f      str     xzr, [x9, #0x28]
    // 90: 3c818120      stur    q0, [x9, #0x18]
    // 94: b980490b      ldrsw   x11, [x8, #0x48]
    // 98: a903313f      stp     xzr, x12, [x9, #0x30]
    // 9c: b900493f      str     wzr, [x9, #0x48]
    // a0: 8b0b0d2b      add     x11, x9, x11, lsl #3
    // a4: 9101416b      add     x11, x11, #0x50
    // a8: f900212b      str     x11, [x9, #0x40]
    // ac: b940490b      ldr     w11, [x8, #0x48]
    // b0: 7100097f      cmp     w11, #0x2
    // b4: 5400010b      b.lt    0xd4 <_JIT_ENTRY+0xd4>
    // b8: 9101612b      add     x11, x9, #0x58
    // bc: 5280002c      mov     w12, #0x1               // =1
    // c0: f800857f      str     xzr, [x11], #0x8
    // c4: 9100058c      add     x12, x12, #0x1
    // c8: b980490d      ldrsw   x13, [x8, #0x48]
    // cc: eb0d019f      cmp     x12, x13
    // d0: 54ffff8b      b.lt    0xc0 <_JIT_ENTRY+0xc0>
    // d4: f900292a      str     x10, [x9, #0x50]
    // d8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // dc: f9400000      ldr     x0, [x0]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e0: f81f82a9      stur    x9, [x21, #-0x8]
    // e4: d61f0000      br      x0
    // e8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // ec: f9400000      ldr     x0, [x0]
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // f0: d61f0000      br      x0
    // f4: 00 00 00 00
    const unsigned char code_body[248] = {
        0x0b, 0x00, 0x00, 0x90, 0xaa, 0x01, 0x80, 0x52,
        0x6b, 0x01, 0x40, 0xf9, 0x68, 0x19, 0x40, 0xf9,
        0x09, 0x31, 0x40, 0xb9, 0x29, 0x01, 0x0a, 0x0a,
        0x3f, 0x05, 0x00, 0x71, 0x61, 0x06, 0x00, 0x54,
        0x09, 0x3d, 0x40, 0xb9, 0x29, 0x06, 0x00, 0x35,
        0x09, 0x35, 0x40, 0xb9, 0x3f, 0x05, 0x00, 0x71,
        0xc1, 0x05, 0x00, 0x54, 0xc9, 0x76, 0x40, 0xf9,
        0x89, 0x05, 0x00, 0xb4, 0xca, 0x7a, 0x40, 0xf9,
        0x0c, 0x4d, 0x80, 0xb9, 0x4a, 0x01, 0x09, 0xcb,
        0x9f, 0x0d, 0x8a, 0xeb, 0xea, 0x04, 0x00, 0x54,
        0x6d, 0x01, 0x40, 0xb9, 0xaa, 0x82, 0x5f, 0xf8,
        0x6d, 0x00, 0xf8, 0x37, 0xad, 0x05, 0x00, 0x11,
        0x6d, 0x01, 0x00, 0xb9, 0x2c, 0x0d, 0x0c, 0x8b,
        0xcc, 0x76, 0x00, 0xf9, 0x34, 0xad, 0x00, 0xa9,
        0x0c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x0c, 0x01, 0x00, 0xb9,
        0x28, 0x01, 0x00, 0xf9, 0x0c, 0x41, 0x03, 0x91,
        0x60, 0x05, 0xc0, 0x3d, 0x3f, 0x15, 0x00, 0xf9,
        0x20, 0x81, 0x81, 0x3c, 0x0b, 0x49, 0x80, 0xb9,
        0x3f, 0x31, 0x03, 0xa9, 0x3f, 0x49, 0x00, 0xb9,
        0x2b, 0x0d, 0x0b, 0x8b, 0x6b, 0x41, 0x01, 0x91,
        0x2b, 0x21, 0x00, 0xf9, 0x0b, 0x49, 0x40, 0xb9,
        0x7f, 0x09, 0x00, 0x71, 0x0b, 0x01, 0x00, 0x54,
        0x2b, 0x61, 0x01, 0x91, 0x2c, 0x00, 0x80, 0x52,
        0x7f, 0x85, 0x00, 0xf8, 0x8c, 0x05, 0x00, 0x91,
        0x0d, 0x49, 0x80, 0xb9, 0x9f, 0x01, 0x0d, 0xeb,
        0x8b, 0xff, 0xff, 0x54, 0x2a, 0x29, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa9, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0xd8, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xe8, (uintptr_t)data + 0x10);
}

void
emit__LOAD_ATTR_SLOT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_0.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f8686813      ldr     x19, [x0, x8]
    // 18: b40001f3      cbz     x19, 0x54 <_JIT_ENTRY+0x54>
    // 1c: b9400268      ldr     w8, [x19]
    // 20: 37f80068      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 24: 11000508      add     w8, w8, #0x1
    // 28: b9000268      str     w8, [x19]
    // 2c: b9400008      ldr     w8, [x0]
    // 30: 37f80088      tbnz    w8, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000008      str     w8, [x0]
    // 3c: 54000140      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 40: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 44: f9400000      ldr     x0, [x0]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 48: f81f82b3      stur    x19, [x21, #-0x8]
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: f9400000      ldr     x0, [x0]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 78: f81f82b3      stur    x19, [x21, #-0x8]
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0x13, 0x68, 0x68, 0xf8,
        0xf3, 0x01, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x40, 0x01, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x8);
}

void
emit__LOAD_ATTR_SLOT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_1.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f85f82a0      ldur    x0, [x21, #-0x8]
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f8686813      ldr     x19, [x0, x8]
    // 18: b4000293      cbz     x19, 0x68 <_JIT_ENTRY+0x68>
    // 1c: b9400268      ldr     w8, [x19]
    // 20: 37f80068      tbnz    w8, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 24: 11000508      add     w8, w8, #0x1
    // 28: b9000268      str     w8, [x19]
    // 2c: b9400008      ldr     w8, [x0]
    // 30: 37f800e8      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000008      str     w8, [x0]
    // 3c: 54000081      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: aa1503e8      mov     x8, x21
    // 54: 910022b5      add     x21, x21, #0x8
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: a93ffd13      stp     x19, xzr, [x8, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    const unsigned char code_body[120] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0x13, 0x68, 0x68, 0xf8,
        0x93, 0x02, 0x00, 0xb4, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xb5, 0x22, 0x00, 0x91,
        0x00, 0x00, 0x40, 0xf9, 0x13, 0xfd, 0x3f, 0xa9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_WITH_HINT.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // c: f85e8008      ldur    x8, [x0, #-0x18]
    // 10: f9401108      ldr     x8, [x8, #0x20]
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 18: f9400d0a      ldr     x10, [x8, #0x18]
    // 1c: 92403d29      and     x9, x9, #0xffff
    // 20: eb09015f      cmp     x10, x9
    // 24: 54000269      b.ls    0x70 <_JIT_ENTRY+0x70>
    // 28: 3940290a      ldrb    w10, [x8, #0xa]
    // 2c: 3400022a      cbz     w10, 0x70 <_JIT_ENTRY+0x70>
    // 30: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 34: 5280002d      mov     w13, #0x1               // =1
    // 38: f940014a      ldr     x10, [x10]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 3c: 3940250b      ldrb    w11, [x8, #0x9]
    // 40: f940028c      ldr     x12, [x20]
    // 44: 12003d53      and     w19, w10, #0xffff
    // 48: 9acb21aa      lsl     x10, x13, x11
    // 4c: f940118b      ldr     x11, [x12, #0x20]
    // 50: 53017e6c      lsr     w12, w19, #1
    // 54: 8b0a0108      add     x8, x8, x10
    // 58: 8b2c4d6a      add     x10, x11, w12, uxtw #3
    // 5c: 8b091108      add     x8, x8, x9, lsl #4
    // 60: f9400d49      ldr     x9, [x10, #0x18]
    // 64: f8420d0a      ldr     x10, [x8, #0x20]!
    // 68: eb09015f      cmp     x10, x9
    // 6c: 540000a0      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 74: f9400000      ldr     x0, [x0]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: f9400517      ldr     x23, [x8, #0x8]
    // 84: b4ffff77      cbz     x23, 0x70 <_JIT_ENTRY+0x70>
    // 88: b94002e8      ldr     w8, [x23]
    // 8c: 37f80068      tbnz    w8, #0x1f, 0x98 <_JIT_ENTRY+0x98>
    // 90: 11000508      add     w8, w8, #0x1
    // 94: b90002e8      str     w8, [x23]
    // 98: b9400008      ldr     w8, [x0]
    // 9c: 37f800e8      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // a0: 71000508      subs    w8, w8, #0x1
    // a4: b9000008      str     w8, [x0]
    // a8: 54000081      b.ne    0xb8 <_JIT_ENTRY+0xb8>
    // ac: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b0: f9400108      ldr     x8, [x8]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b4: d63f0100      blr     x8
    // b8: 12000268      and     w8, w19, #0x1
    // bc: f81f82b7      stur    x23, [x21, #-0x8]
    // c0: 36000053      tbz     w19, #0x0, 0xc8 <_JIT_ENTRY+0xc8>
    // c4: f90002bf      str     xzr, [x21]
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: 8b284eb5      add     x21, x21, w8, uxtw #3
    // d0: f9400000      ldr     x0, [x0]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d4: f84107fe      ldr     x30, [sp], #0x10
    // d8: d61f0000      br      x0
    // dc: 00 00 00 00
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x80, 0x5e, 0xf8,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x0a, 0x0d, 0x40, 0xf9, 0x29, 0x3d, 0x40, 0x92,
        0x5f, 0x01, 0x09, 0xeb, 0x69, 0x02, 0x00, 0x54,
        0x0a, 0x29, 0x40, 0x39, 0x2a, 0x02, 0x00, 0x34,
        0x0a, 0x00, 0x00, 0x90, 0x2d, 0x00, 0x80, 0x52,
        0x4a, 0x01, 0x40, 0xf9, 0x0b, 0x25, 0x40, 0x39,
        0x8c, 0x02, 0x40, 0xf9, 0x53, 0x3d, 0x00, 0x12,
        0xaa, 0x21, 0xcb, 0x9a, 0x8b, 0x11, 0x40, 0xf9,
        0x6c, 0x7e, 0x01, 0x53, 0x08, 0x01, 0x0a, 0x8b,
        0x6a, 0x4d, 0x2c, 0x8b, 0x08, 0x11, 0x09, 0x8b,
        0x49, 0x0d, 0x40, 0xf9, 0x0a, 0x0d, 0x42, 0xf8,
        0x5f, 0x01, 0x09, 0xeb, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x17, 0x05, 0x40, 0xf9, 0x77, 0xff, 0xff, 0xb4,
        0xe8, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0xe8, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x00, 0x12, 0xb7, 0x82, 0x1f, 0xf8,
        0x53, 0x00, 0x00, 0x36, 0xbf, 0x02, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x70, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data + 0x18);
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_BUILD_CLASS.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 8: f9401280      ldr     x0, [x20, #0x20]
    // c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyMapping_GetOptionalItem
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 5291d209      mov     w9, #0x8e90             // =36496
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyMapping_GetOptionalItem
    // 20: 910023e2      add     x2, sp, #0x8
    // 24: 8b090101      add     x1, x8, x9
    // 28: d63f0140      blr     x10
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: 37f80100      tbnz    w0, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 38: f94007e8      ldr     x8, [sp, #0x8]
    // 3c: b4000148      cbz     x8, 0x64 <_JIT_ENTRY+0x64>
    // 40: f80086a8      str     x8, [x21], #0x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_NameError
    // 68: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BK@IAGNFEAN@__build_class__?5not?5found?$AA@
    // 6c: 91000042      add     x2, x2, #0x0
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BK@IAGNFEAN@__build_class__?5not?5found?$AA@
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_NameError
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: aa1603e0      mov     x0, x22
    // 7c: f9400101      ldr     x1, [x8]
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_SetString
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_SetString
    // 88: d63f0100      blr     x8
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f9400000      ldr     x0, [x0]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 98: f900229f      str     xzr, [x20, #0x40]
    // 9c: f84107fe      ldr     x30, [sp], #0x10
    // a0: d61f0000      br      x0
    // a4: 00 00 00 00
    const unsigned char code_body[168] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x80, 0x12, 0x40, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x09, 0xd2, 0x91, 0x52, 0x4a, 0x01, 0x40, 0xf9,
        0xe2, 0x23, 0x00, 0x91, 0x01, 0x01, 0x09, 0x8b,
        0x40, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x01, 0xf8, 0x37,
        0xe8, 0x07, 0x40, 0xf9, 0x48, 0x01, 0x00, 0xb4,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &_PyRuntime+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    // 38: &PyExc_NameError+0x0
    const unsigned char data_body[64] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x38, (uintptr_t)&PyExc_NameError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data);
    patch_aarch64_12(code + 0x6c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)&_PyErr_SetString);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x30);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_COMMON_CONSTANT.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_AssertionError
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_NotImplementedError
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_AssertionError
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_NotImplementedError
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: 72003d1f      tst     w8, #0xffff
    // 20: 9a8a0128      csel    x8, x9, x10, eq
    // 24: f9400108      ldr     x8, [x8]
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: f80086a8      str     x8, [x21], #0x8
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x0a, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x1f, 0x3d, 0x00, 0x72,
        0x28, 0x01, 0x8a, 0x9a, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyExc_AssertionError+0x0
    // 10: &PyExc_NotImplementedError+0x0
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyExc_AssertionError);
    patch_64(data + 0x10, (uintptr_t)&PyExc_NotImplementedError);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x18, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x18);
}

void
emit__LOAD_CONST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400d08      ldr     x8, [x8, #0x18]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 8b292d08      add     x8, x8, w9, uxth #3
    // 14: f9400d08      ldr     x8, [x8, #0x18]
    // 18: b9400109      ldr     w9, [x8]
    // 1c: 37f80069      tbnz    w9, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000529      add     w9, w9, #0x1
    // 24: b9000109      str     w9, [x8]
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0x88, 0x02, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x0d, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x2d, 0x29, 0x8b, 0x08, 0x0d, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_IMMORTAL.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400288      ldr     x8, [x20]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400d08      ldr     x8, [x8, #0x18]
    // 14: 8b292d08      add     x8, x8, w9, uxth #3
    // 18: f9400d08      ldr     x8, [x8, #0x18]
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: d61f0000      br      x0
    const unsigned char code_body[40] = {
        0x88, 0x02, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x08, 0x0d, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x08, 0x0d, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 8: b9400109      ldr     w9, [x8]
    // c: 37f80069      tbnz    w9, #0x1f, 0x18 <_JIT_ENTRY+0x18>
    // 10: 11000529      add     w9, w9, #0x1
    // 14: b9000109      str     w9, [x8]
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: d61f0000      br      x0
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f9400000      ldr     x0, [x0]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10: f80086a8      str     x8, [x21], #0x8
    // 14: d61f0000      br      x0
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x8);
}

void
emit__LOAD_CONST_INLINE_BORROW_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW_WITH_NULL.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: aa1503e8      mov     x8, x21
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: 910042b5      add     x21, x21, #0x10
    // 18: a9007d09      stp     x9, xzr, [x8]
    // 1c: d61f0000      br      x0
    const unsigned char code_body[32] = {
        0x09, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0xb5, 0x42, 0x00, 0x91,
        0x09, 0x7d, 0x00, 0xa9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__LOAD_CONST_INLINE_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_WITH_NULL.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: aa1503e8      mov     x8, x21
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: b940012a      ldr     w10, [x9]
    // 10: 37f8006a      tbnz    w10, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 14: 1100054a      add     w10, w10, #0x1
    // 18: b900012a      str     w10, [x9]
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: 91004115      add     x21, x8, #0x10
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: a9007d09      stp     x9, xzr, [x8]
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x09, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x90,
        0x15, 0x41, 0x00, 0x91, 0x00, 0x00, 0x40, 0xf9,
        0x09, 0x7d, 0x00, 0xa9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_DEREF.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 8b282e88      add     x8, x20, w8, uxth #3
    // 10: f9402908      ldr     x8, [x8, #0x50]
    // 14: f9400908      ldr     x8, [x8, #0x10]
    // 18: b4000148      cbz     x8, 0x40 <_JIT_ENTRY+0x40>
    // 1c: b9400109      ldr     w9, [x8]
    // 20: 37f80069      tbnz    w9, #0x1f, 0x2c <_JIT_ENTRY+0x2c>
    // 24: 11000529      add     w9, w9, #0x1
    // 28: b9000109      str     w9, [x8]
    // 2c: f80086a8      str     x8, [x21], #0x8
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0000      br      x0
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 44: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcUnbound
    // 48: aa1603e0      mov     x0, x22
    // 4c: f9400108      ldr     x8, [x8]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 50: f9002295      str     x21, [x20, #0x40]
    // 54: f9400281      ldr     x1, [x20]
    // 58: f9400129      ldr     x9, [x9]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcUnbound
    // 5c: 12003d02      and     w2, w8, #0xffff
    // 60: d63f0120      blr     x9
    // 64: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 68: f9402295      ldr     x21, [x20, #0x40]
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 70: f900229f      str     xzr, [x20, #0x40]
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x88, 0x2e, 0x28, 0x8b,
        0x08, 0x29, 0x40, 0xf9, 0x08, 0x09, 0x40, 0xf9,
        0x48, 0x01, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x81, 0x02, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x02, 0x3d, 0x00, 0x12,
        0x20, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x58, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)data + 0x10);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: f9400108      ldr     x8, [x8]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 8: 8b282e88      add     x8, x20, w8, uxth #3
    // c: f9402908      ldr     x8, [x8, #0x50]
    // 10: b9400109      ldr     w9, [x8]
    // 14: 37f80069      tbnz    w9, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 11000529      add     w9, w9, #0x1
    // 1c: b9000109      str     w9, [x8]
    // 20: f80086a8      str     x8, [x21], #0x8
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x88, 0x2e, 0x28, 0x8b, 0x08, 0x29, 0x40, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x69, 0x00, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x11, 0x09, 0x01, 0x00, 0xb9,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x8);
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_0.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9402a88      ldr     x8, [x20, #0x50]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x2a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_1.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9402e88      ldr     x8, [x20, #0x58]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x2e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_2.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403288      ldr     x8, [x20, #0x60]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x32, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_3.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403688      ldr     x8, [x20, #0x68]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x36, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_4.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403a88      ldr     x8, [x20, #0x70]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x3a, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_5.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9403e88      ldr     x8, [x20, #0x78]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x3e, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_6.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9404288      ldr     x8, [x20, #0x80]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x42, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_7.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9404688      ldr     x8, [x20, #0x88]
    // 4: b9400109      ldr     w9, [x8]
    // 8: 37f80069      tbnz    w9, #0x1f, 0x14 <_JIT_ENTRY+0x14>
    // c: 11000529      add     w9, w9, #0x1
    // 10: b9000109      str     w9, [x8]
    // 14: f80086a8      str     x8, [x21], #0x8
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x88, 0x46, 0x40, 0xf9, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data);
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_AND_CLEAR.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 8b282e88      add     x8, x20, w8, uxth #3
    // 10: f9402909      ldr     x9, [x8, #0x50]
    // 14: f9400000      ldr     x0, [x0]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 18: f900291f      str     xzr, [x8, #0x50]
    // 1c: f80086a9      str     x9, [x21], #0x8
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x88, 0x2e, 0x28, 0x8b,
        0x09, 0x29, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x1f, 0x29, 0x00, 0xf9, 0xa9, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_CHECK.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 8b282e89      add     x9, x20, w8, uxth #3
    // 10: f9402929      ldr     x9, [x9, #0x50]
    // 14: b4000149      cbz     x9, 0x3c <_JIT_ENTRY+0x3c>
    // 18: b9400128      ldr     w8, [x9]
    // 1c: 37f80068      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 20: 11000508      add     w8, w8, #0x1
    // 24: b9000128      str     w8, [x9]
    // 28: f80086a9      str     x9, [x21], #0x8
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f84107fe      ldr     x30, [sp], #0x10
    // 38: d61f0000      br      x0
    // 3c: f9400289      ldr     x9, [x20]
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: 92403d01      and     x1, x8, #0xffff
    // 48: f9403120      ldr     x0, [x9, #0x60]
    // 4c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyTuple_GetItem
    // 50: f9400129      ldr     x9, [x9]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyTuple_GetItem
    // 54: d63f0120      blr     x9
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_UnboundLocalError
    // 5c: aa0003e3      mov     x3, x0
    // 60: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 64: 91000042      add     x2, x2, #0x0
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_UnboundLocalError
    // 6c: aa1603e0      mov     x0, x22
    // 70: f9400101      ldr     x1, [x8]
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcCheckArg
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcCheckArg
    // 7c: d63f0100      blr     x8
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 84: f9402295      ldr     x21, [x20, #0x40]
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 8c: f900229f      str     xzr, [x20, #0x40]
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x89, 0x2e, 0x28, 0x8b,
        0x29, 0x29, 0x40, 0xf9, 0x49, 0x01, 0x00, 0xb4,
        0x28, 0x01, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0x28, 0x01, 0x00, 0xb9,
        0xa9, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x89, 0x02, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x01, 0x3d, 0x40, 0x92,
        0x20, 0x31, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe3, 0x03, 0x00, 0xaa,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyExc_UnboundLocalError+0x0
    // 68: ERROR_TARGET
    const unsigned char data_body[112] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x68, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data + 0x50);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x58);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)&PyTuple_GetItem);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x60);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data);
    patch_aarch64_12(code + 0x64, (uintptr_t)data);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x60);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x68);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x68);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FROM_DICT_OR_DEREF.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: 910023e2      add     x2, sp, #0x8
    // 10: f9403108      ldr     x8, [x8, #0x60]
    // 14: f94002f7      ldr     x23, [x23]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 8b372d08      add     x8, x8, w23, uxth #3
    // 20: aa1303e0      mov     x0, x19
    // 24: f9400d01      ldr     x1, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyMapping_GetOptionalItem
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyMapping_GetOptionalItem
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 37f80140      tbnz    w0, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 44: f94007e8      ldr     x8, [sp, #0x8]
    // 48: b4000188      cbz     x8, 0x78 <_JIT_ENTRY+0x78>
    // 4c: b9400269      ldr     w9, [x19]
    // 50: 36f802c9      tbz     w9, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: f81f82a8      stur    x8, [x21, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 92403ee8      and     x8, x23, #0xffff
    // 7c: 8b080e88      add     x8, x20, x8, lsl #3
    // 80: f9402908      ldr     x8, [x8, #0x50]
    // 84: f9400908      ldr     x8, [x8, #0x10]
    // 88: b40002a8      cbz     x8, 0xdc <_JIT_ENTRY+0xdc>
    // 8c: b9400109      ldr     w9, [x8]
    // 90: 37f80069      tbnz    w9, #0x1f, 0x9c <_JIT_ENTRY+0x9c>
    // 94: 11000529      add     w9, w9, #0x1
    // 98: b9000109      str     w9, [x8]
    // 9c: f90007e8      str     x8, [sp, #0x8]
    // a0: b9400269      ldr     w9, [x19]
    // a4: 37fffd89      tbnz    w9, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // a8: 71000529      subs    w9, w9, #0x1
    // ac: b9000269      str     w9, [x19]
    // b0: 54fffd21      b.ne    0x54 <_JIT_ENTRY+0x54>
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b8: aa1303e0      mov     x0, x19
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: f94007e8      ldr     x8, [sp, #0x8]
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: f9400000      ldr     x0, [x0]
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d0: f81f82a8      stur    x8, [x21, #-0x8]
    // d4: f84107fe      ldr     x30, [sp], #0x10
    // d8: d61f0000      br      x0
    // dc: f90007ff      str     xzr, [sp, #0x8]
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // e4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FormatExcUnbound
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // ec: f9002295      str     x21, [x20, #0x40]
    // f0: f9400281      ldr     x1, [x20]
    // f4: f9400129      ldr     x9, [x9]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FormatExcUnbound
    // f8: aa1603e0      mov     x0, x22
    // fc: 12003d02      and     w2, w8, #0xffff
    // 100: d63f0120      blr     x9
    // 104: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 108: f9402295      ldr     x21, [x20, #0x40]
    // 10c: f9400000      ldr     x0, [x0]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 110: f900229f      str     xzr, [x20, #0x40]
    // 114: f84107fe      ldr     x30, [sp], #0x10
    // 118: d61f0000      br      x0
    // 11c: 00 00 00 00
    const unsigned char code_body[288] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x17, 0x00, 0x00, 0x90, 0xe2, 0x23, 0x00, 0x91,
        0x08, 0x31, 0x40, 0xf9, 0xf7, 0x02, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x2d, 0x37, 0x8b,
        0xe0, 0x03, 0x13, 0xaa, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x01, 0xf8, 0x37, 0xe8, 0x07, 0x40, 0xf9,
        0x88, 0x01, 0x00, 0xb4, 0x69, 0x02, 0x40, 0xb9,
        0xc9, 0x02, 0xf8, 0x36, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xe8, 0x3e, 0x40, 0x92, 0x88, 0x0e, 0x08, 0x8b,
        0x08, 0x29, 0x40, 0xf9, 0x08, 0x09, 0x40, 0xf9,
        0xa8, 0x02, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xe8, 0x07, 0x00, 0xf9,
        0x69, 0x02, 0x40, 0xb9, 0x89, 0xfd, 0xff, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x69, 0x02, 0x00, 0xb9,
        0x21, 0xfd, 0xff, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x07, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xff, 0x07, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x81, 0x02, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x02, 0x3d, 0x00, 0x12,
        0x20, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xc8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xe4, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)data + 0x10);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1503e3      mov     x3, x21
    // c: aa1503f3      mov     x19, x21
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9400288      ldr     x8, [x20]
    // 18: a9418680      ldp     x0, x1, [x20, #0x18]
    // 1c: f9401108      ldr     x8, [x8, #0x20]
    // 20: 53013ee9      ubfx    w9, w23, #1, #15
    // 24: 8b294d08      add     x8, x8, w9, uxtw #3
    // 28: f9400d02      ldr     x2, [x8, #0x18]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_LoadGlobalStackRef
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_LoadGlobalStackRef
    // 38: d63f0100      blr     x8
    // 3c: f9402295      ldr     x21, [x20, #0x40]
    // 40: f900229f      str     xzr, [x20, #0x40]
    // 44: f9400268      ldr     x8, [x19]
    // 48: b4000168      cbz     x8, 0x74 <_JIT_ENTRY+0x74>
    // 4c: 12003ee9      and     w9, w23, #0xffff
    // 50: 12000128      and     w8, w9, #0x1
    // 54: 36000049      tbz     w9, #0x0, 0x5c <_JIT_ENTRY+0x5c>
    // 58: f90006bf      str     xzr, [x21, #0x8]
    // 5c: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 68: 91002115      add     x21, x8, #0x8
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xe3, 0x03, 0x15, 0xaa, 0xf3, 0x03, 0x15, 0xaa,
        0xf7, 0x02, 0x40, 0xf9, 0x88, 0x02, 0x40, 0xf9,
        0x80, 0x86, 0x41, 0xa9, 0x08, 0x11, 0x40, 0xf9,
        0xe9, 0x3e, 0x01, 0x53, 0x08, 0x4d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xf9,
        0x68, 0x01, 0x00, 0xb4, 0xe9, 0x3e, 0x00, 0x12,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x06, 0x00, 0xf9, 0xa8, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)&_PyEval_LoadGlobalStackRef);
    patch_aarch64_33rx(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x10);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9401288      ldr     x8, [x20, #0x20]
    // 4: 5280002a      mov     w10, #0x1               // =1
    // 8: f9401108      ldr     x8, [x8, #0x20]
    // c: 39402509      ldrb    w9, [x8, #0x9]
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: 8b090108      add     x8, x8, x9
    // 20: 8b2a3108      add     x8, x8, w10, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b4000208      cbz     x8, 0x68 <_JIT_ENTRY+0x68>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 44: f90002a8      str     x8, [x21]
    // 48: 12000128      and     w8, w9, #0x1
    // 4c: 36000049      tbz     w9, #0x0, 0x54 <_JIT_ENTRY+0x54>
    // 50: f90006bf      str     xzr, [x21, #0x8]
    // 54: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: 91002115      add     x21, x8, #0x8
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0x88, 0x12, 0x40, 0xf9, 0x2a, 0x00, 0x80, 0x52,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x49, 0x21, 0xc9, 0x9a, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x31, 0x2a, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0x08, 0x02, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xa8, 0x02, 0x00, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x06, 0x00, 0xf9, 0xa8, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x18);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 8: 5280002b      mov     w11, #0x1               // =1
    // c: 3940252a      ldrb    w10, [x9, #0x9]
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: 8b0a0129      add     x9, x9, x10
    // 20: 8b2b3129      add     x9, x9, w11, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b4000209      cbz     x9, 0x68 <_JIT_ENTRY+0x68>
    // 2c: b940012a      ldr     w10, [x9]
    // 30: 37f8006a      tbnz    w10, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 1100054a      add     w10, w10, #0x1
    // 38: b900012a      str     w10, [x9]
    // 3c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 40: f940014a      ldr     x10, [x10]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 44: f90002a9      str     x9, [x21]
    // 48: 12000149      and     w9, w10, #0x1
    // 4c: 3600004a      tbz     w10, #0x0, 0x54 <_JIT_ENTRY+0x54>
    // 50: f900011f      str     xzr, [x8]
    // 54: 8b294ea8      add     x8, x21, w9, uxtw #3
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: 91002115      add     x21, x8, #0x8
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5f, 0xf8,
        0x2b, 0x00, 0x80, 0x52, 0x2a, 0x25, 0x40, 0x39,
        0x6a, 0x21, 0xca, 0x9a, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x0a, 0x8b,
        0x29, 0x31, 0x2b, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0x09, 0x02, 0x00, 0xb4, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x02, 0x00, 0xf9,
        0x49, 0x01, 0x00, 0x12, 0x4a, 0x00, 0x00, 0x36,
        0x1f, 0x01, 0x00, 0xf9, 0xa8, 0x4e, 0x29, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x18);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400e88      ldr     x8, [x20, #0x18]
    // 4: 5280002a      mov     w10, #0x1               // =1
    // 8: f9401108      ldr     x8, [x8, #0x20]
    // c: 39402509      ldrb    w9, [x8, #0x9]
    // 10: 9ac92149      lsl     x9, x10, x9
    // 14: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 18: f940014a      ldr     x10, [x10]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: 8b090108      add     x8, x8, x9
    // 20: 8b2a3108      add     x8, x8, w10, uxth #4
    // 24: f9401508      ldr     x8, [x8, #0x28]
    // 28: b4000208      cbz     x8, 0x68 <_JIT_ENTRY+0x68>
    // 2c: b9400109      ldr     w9, [x8]
    // 30: 37f80069      tbnz    w9, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000529      add     w9, w9, #0x1
    // 38: b9000109      str     w9, [x8]
    // 3c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 40: f9400129      ldr     x9, [x9]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 44: f90002a8      str     x8, [x21]
    // 48: 12000128      and     w8, w9, #0x1
    // 4c: 36000049      tbz     w9, #0x0, 0x54 <_JIT_ENTRY+0x54>
    // 50: f90006bf      str     xzr, [x21, #0x8]
    // 54: 8b284ea8      add     x8, x21, w8, uxtw #3
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: 91002115      add     x21, x8, #0x8
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0x88, 0x0e, 0x40, 0xf9, 0x2a, 0x00, 0x80, 0x52,
        0x08, 0x11, 0x40, 0xf9, 0x09, 0x25, 0x40, 0x39,
        0x49, 0x21, 0xc9, 0x9a, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0x08, 0x31, 0x2a, 0x8b, 0x08, 0x15, 0x40, 0xf9,
        0x08, 0x02, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0xa8, 0x02, 0x00, 0xf9,
        0x28, 0x01, 0x00, 0x12, 0x49, 0x00, 0x00, 0x36,
        0xbf, 0x06, 0x00, 0xf9, 0xa8, 0x4e, 0x28, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x18);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: aa1503e8      mov     x8, x21
    // 4: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 8: 5280002b      mov     w11, #0x1               // =1
    // c: 3940252a      ldrb    w10, [x9, #0x9]
    // 10: 9aca216a      lsl     x10, x11, x10
    // 14: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: 8b0a0129      add     x9, x9, x10
    // 20: 8b2b3129      add     x9, x9, w11, uxth #4
    // 24: f9401529      ldr     x9, [x9, #0x28]
    // 28: b4000209      cbz     x9, 0x68 <_JIT_ENTRY+0x68>
    // 2c: b940012a      ldr     w10, [x9]
    // 30: 37f8006a      tbnz    w10, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 1100054a      add     w10, w10, #0x1
    // 38: b900012a      str     w10, [x9]
    // 3c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 40: f940014a      ldr     x10, [x10]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 44: f90002a9      str     x9, [x21]
    // 48: 12000149      and     w9, w10, #0x1
    // 4c: 3600004a      tbz     w10, #0x0, 0x54 <_JIT_ENTRY+0x54>
    // 50: f900011f      str     xzr, [x8]
    // 54: 8b294ea8      add     x8, x21, w9, uxtw #3
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: 91002115      add     x21, x8, #0x8
    // 64: d61f0000      br      x0
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 70: d61f0000      br      x0
    // 74: 00 00 00 00
    const unsigned char code_body[120] = {
        0xe8, 0x03, 0x15, 0xaa, 0xa9, 0x8e, 0x5f, 0xf8,
        0x2b, 0x00, 0x80, 0x52, 0x2a, 0x25, 0x40, 0x39,
        0x6a, 0x21, 0xca, 0x9a, 0x0b, 0x00, 0x00, 0x90,
        0x6b, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x0a, 0x8b,
        0x29, 0x31, 0x2b, 0x8b, 0x29, 0x15, 0x40, 0xf9,
        0x09, 0x02, 0x00, 0xb4, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0x0a, 0x00, 0x00, 0x90,
        0x4a, 0x01, 0x40, 0xf9, 0xa9, 0x02, 0x00, 0xf9,
        0x49, 0x01, 0x00, 0x12, 0x4a, 0x00, 0x00, 0x36,
        0x1f, 0x01, 0x00, 0xf9, 0xa8, 0x4e, 0x29, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x18);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_LOCALS.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9401688      ldr     x8, [x20, #0x28]
    // 8: b4000148      cbz     x8, 0x30 <_JIT_ENTRY+0x30>
    // c: b9400109      ldr     w9, [x8]
    // 10: 37f80069      tbnz    w9, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 14: 11000529      add     w9, w9, #0x1
    // 18: b9000109      str     w9, [x8]
    // 1c: f80086a8      str     x8, [x21], #0x8
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: f84107fe      ldr     x30, [sp], #0x10
    // 2c: d61f0000      br      x0
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_SystemError
    // 34: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0BA@GFAKPHCI@no?5locals?5found?$AA@
    // 38: 91000042      add     x2, x2, #0x0
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0BA@GFAKPHCI@no?5locals?5found?$AA@
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_SystemError
    // 40: f9002295      str     x21, [x20, #0x40]
    // 44: aa1603e0      mov     x0, x22
    // 48: f9400101      ldr     x1, [x8]
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_SetString
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_SetString
    // 54: d63f0100      blr     x8
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f9400000      ldr     x0, [x0]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 64: f900229f      str     xzr, [x20, #0x40]
    // 68: f84107fe      ldr     x30, [sp], #0x10
    // 6c: d61f0000      br      x0
    const unsigned char code_body[112] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x16, 0x40, 0xf9,
        0x48, 0x01, 0x00, 0xb4, 0x09, 0x01, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x09, 0x01, 0x00, 0xb9, 0xa8, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x01, 0x01, 0x40, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x95, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: 'no locals found\x00'
    // 10: CONTINUE
    // 18: &PyExc_SystemError+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x30, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)data);
    patch_aarch64_12(code + 0x38, (uintptr_t)data);
    patch_aarch64_12x(code + 0x3c, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)&_PyErr_SetString);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x60, (uintptr_t)data + 0x20);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_NAME.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: aa1603e0      mov     x0, x22
    // 10: aa1403e1      mov     x1, x20
    // 14: f9401108      ldr     x8, [x8, #0x20]
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d02      ldr     x2, [x8, #0x18]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_LoadName
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_LoadName
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b40000c0      cbz     x0, 0x54 <_JIT_ENTRY+0x54>
    // 40: f80086a0      str     x0, [x21], #0x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0xe1, 0x03, 0x14, 0xaa, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&_PyEval_LoadName);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x10);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 14: f9400000      ldr     x0, [x0]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: 8b081528      add     x8, x9, x8, lsl #5
    // 20: 52867109      mov     w9, #0x3388             // =13192
    // 24: 8b090108      add     x8, x8, x9
    // 28: f80086a8      str     x8, [x21], #0x8
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x08, 0x3d, 0x40, 0x92, 0x28, 0x15, 0x08, 0x8b,
        0x09, 0x71, 0x86, 0x52, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x10);
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_0.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: 52867109      mov     w9, #0x3388             // =13192
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: 8b090108      add     x8, x8, x9
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: d61f0000      br      x0
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x71, 0x86, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_1.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: 52867509      mov     w9, #0x33a8             // =13224
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: 8b090108      add     x8, x8, x9
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: d61f0000      br      x0
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x75, 0x86, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_2.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: 52867909      mov     w9, #0x33c8             // =13256
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: 8b090108      add     x8, x8, x9
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: d61f0000      br      x0
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x79, 0x86, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_3.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: 52867d09      mov     w9, #0x33e8             // =13288
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 14: 8b090108      add     x8, x8, x9
    // 18: f80086a8      str     x8, [x21], #0x8
    // 1c: d61f0000      br      x0
    const unsigned char code_body[32] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x09, 0x7d, 0x86, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x09, 0x8b,
        0xa8, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_PyRuntime+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SPECIAL.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_SpecialMethods
    // c: 910023e2      add     x2, sp, #0x8
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9400129      ldr     x9, [x9]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_SpecialMethods
    // 18: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 1c: 8b283137      add     x23, x9, w8, uxth #4
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyObject_LookupSpecialMethod
    // 24: aa1303e0      mov     x0, x19
    // 28: f94002e1      ldr     x1, [x23]
    // 2c: f9002295      str     x21, [x20, #0x40]
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyObject_LookupSpecialMethod
    // 34: d63f0100      blr     x8
    // 38: f9402288      ldr     x8, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b4000100      cbz     x0, 0x60 <_JIT_ENTRY+0x60>
    // 44: f94007e9      ldr     x9, [sp, #0x8]
    // 48: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4c: 91004115      add     x21, x8, #0x10
    // 50: f9400021      ldr     x1, [x1]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: a9002500      stp     x0, x9, [x8]
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0020      br      x1
    // 60: f9403ac9      ldr     x9, [x22, #0x70]
    // 64: b4000109      cbz     x9, 0x84 <_JIT_ENTRY+0x84>
    // 68: f9400529      ldr     x9, [x9, #0x8]
    // 6c: b40000c9      cbz     x9, 0x84 <_JIT_ENTRY+0x84>
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 74: aa0803f5      mov     x21, x8
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: f9002288      str     x8, [x20, #0x40]
    // 88: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_TypeError
    // 8c: aa1603e0      mov     x0, x22
    // 90: f9400668      ldr     x8, [x19, #0x8]
    // 94: f9400129      ldr     x9, [x9]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_TypeError
    // 98: f94006e2      ldr     x2, [x23, #0x8]
    // 9c: f9400d03      ldr     x3, [x8, #0x18]
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // a4: f9400121      ldr     x1, [x9]
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // ac: d63f0100      blr     x8
    // b0: f9402288      ldr     x8, [x20, #0x40]
    // b4: f900229f      str     xzr, [x20, #0x40]
    // b8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // bc: aa0803f5      mov     x21, x8
    // c0: f9400000      ldr     x0, [x0]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c4: f84107fe      ldr     x30, [sp], #0x10
    // c8: d61f0000      br      x0
    // cc: 00 00 00 00
    const unsigned char code_body[208] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0xe2, 0x23, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x8e, 0x5f, 0xf8, 0x37, 0x31, 0x28, 0x8b,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0xe1, 0x02, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x01, 0x00, 0xb4, 0xe9, 0x07, 0x40, 0xf9,
        0x01, 0x00, 0x00, 0x90, 0x15, 0x41, 0x00, 0x91,
        0x21, 0x00, 0x40, 0xf9, 0x00, 0x25, 0x00, 0xa9,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0xc9, 0x3a, 0x40, 0xf9, 0x09, 0x01, 0x00, 0xb4,
        0x29, 0x05, 0x40, 0xf9, 0xc9, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x88, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x16, 0xaa,
        0x68, 0x06, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0xe2, 0x06, 0x40, 0xf9, 0x03, 0x0d, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x21, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x08, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_SpecialMethods+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: &PyExc_TypeError+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_SpecialMethods);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&PyExc_TypeError);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)&_PyObject_LookupSpecialMethod);
    patch_aarch64_12x(code + 0x30, (uintptr_t)&_PyObject_LookupSpecialMethod);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x78, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x88, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_PyErr_Format);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_PyErr_Format);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x18);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_ATTR.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PySuper_Type
    // 8: f85e82a8      ldur    x8, [x21, #-0x18]
    // c: f940035a      ldr     x26, [x26]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PySuper_Type
    // 10: eb1a011f      cmp     x8, x26
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f02b8      ldur    x24, [x21, #-0x10]
    // 1c: f9400708      ldr     x8, [x24, #0x8]
    // 20: b940a908      ldr     w8, [x8, #0xa8]
    // 24: 37f800a8      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 3c: f9400288      ldr     x8, [x20]
    // 40: aa1803e0      mov     x0, x24
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 48: f85f82b9      ldur    x25, [x21, #-0x8]
    // 4c: aa1f03e3      mov     x3, xzr
    // 50: f9401108      ldr     x8, [x8, #0x20]
    // 54: 53023d29      ubfx    w9, w9, #2, #14
    // 58: aa1903e1      mov     x1, x25
    // 5c: 8b294d08      add     x8, x8, w9, uxtw #3
    // 60: f9400d02      ldr     x2, [x8, #0x18]
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PySuper_Lookup
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PySuper_Lookup
    // 70: d63f0100      blr     x8
    // 74: b9400348      ldr     w8, [x26]
    // 78: f9402297      ldr     x23, [x20, #0x40]
    // 7c: aa0003f3      mov     x19, x0
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: 37f80128      tbnz    w8, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000348      str     w8, [x26]
    // 90: 540000c1      b.ne    0xa8 <_JIT_ENTRY+0xa8>
    // 94: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PySuper_Type
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PySuper_Type
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: b9400308      ldr     w8, [x24]
    // ac: 37f80108      tbnz    w8, #0x1f, 0xcc <_JIT_ENTRY+0xcc>
    // b0: 71000508      subs    w8, w8, #0x1
    // b4: b9000308      str     w8, [x24]
    // b8: 540000a1      b.ne    0xcc <_JIT_ENTRY+0xcc>
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: aa1803e0      mov     x0, x24
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: b9400328      ldr     w8, [x25]
    // d0: 37f80108      tbnz    w8, #0x1f, 0xf0 <_JIT_ENTRY+0xf0>
    // d4: 71000508      subs    w8, w8, #0x1
    // d8: b9000328      str     w8, [x25]
    // dc: 540000a1      b.ne    0xf0 <_JIT_ENTRY+0xf0>
    // e0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e4: aa1903e0      mov     x0, x25
    // e8: f9400108      ldr     x8, [x8]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ec: d63f0100      blr     x8
    // f0: b40000f3      cbz     x19, 0x10c <_JIT_ENTRY+0x10c>
    // f4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // f8: d10042f5      sub     x21, x23, #0x10
    // fc: f9400000      ldr     x0, [x0]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 100: f81e82f3      stur    x19, [x23, #-0x18]
    // 104: f84107fe      ldr     x30, [sp], #0x10
    // 108: d61f0000      br      x0
    // 10c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 110: aa1703f5      mov     x21, x23
    // 114: f9400000      ldr     x0, [x0]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 118: f84107fe      ldr     x30, [sp], #0x10
    // 11c: d61f0000      br      x0
    const unsigned char code_body[288] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x1a, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5e, 0xf8, 0x5a, 0x03, 0x40, 0xf9,
        0x1f, 0x01, 0x1a, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xb8, 0x02, 0x5f, 0xf8, 0x08, 0x07, 0x40, 0xf9,
        0x08, 0xa9, 0x40, 0xb9, 0xa8, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x88, 0x02, 0x40, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0xb9, 0x82, 0x5f, 0xf8, 0xe3, 0x03, 0x1f, 0xaa,
        0x08, 0x11, 0x40, 0xf9, 0x29, 0x3d, 0x02, 0x53,
        0xe1, 0x03, 0x19, 0xaa, 0x08, 0x4d, 0x29, 0x8b,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x48, 0x03, 0x40, 0xb9,
        0x97, 0x22, 0x40, 0xf9, 0xf3, 0x03, 0x00, 0xaa,
        0x9f, 0x22, 0x00, 0xf9, 0x28, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x48, 0x03, 0x00, 0xb9,
        0xc1, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x28, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf3, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xf3, 0x82, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x17, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)&_PySuper_Lookup);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x9c, (uintptr_t)data);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0xfc, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x10c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x114, (uintptr_t)data + 0x20);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_METHOD.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 9000001a      adrp    x26, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PySuper_Type
    // 8: f85e82a8      ldur    x8, [x21, #-0x18]
    // c: f940035a      ldr     x26, [x26]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PySuper_Type
    // 10: eb1a011f      cmp     x8, x26
    // 14: 540000a1      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 18: f85f02b8      ldur    x24, [x21, #-0x10]
    // 1c: f9400708      ldr     x8, [x24, #0x8]
    // 20: b940a908      ldr     w8, [x8, #0xa8]
    // 24: 37f800a8      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 3c: f9400288      ldr     x8, [x20]
    // 40: aa1803e0      mov     x0, x24
    // 44: f9400129      ldr     x9, [x9]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 48: f85f82b3      ldur    x19, [x21, #-0x8]
    // 4c: f9401108      ldr     x8, [x8, #0x20]
    // 50: 53023d29      ubfx    w9, w9, #2, #14
    // 54: aa1303e1      mov     x1, x19
    // 58: 8b294d08      add     x8, x8, w9, uxtw #3
    // 5c: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyObject_GenericGetAttr
    // 60: f9400d02      ldr     x2, [x8, #0x18]
    // 64: f9002295      str     x21, [x20, #0x40]
    // 68: f9400668      ldr     x8, [x19, #0x8]
    // 6c: f9404908      ldr     x8, [x8, #0x90]
    // 70: f9400129      ldr     x9, [x9]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyObject_GenericGetAttr
    // 74: b9000fff      str     wzr, [sp, #0xc]
    // 78: eb09011f      cmp     x8, x9
    // 7c: 910033e8      add     x8, sp, #0xc
    // 80: 9a9f0103      csel    x3, x8, xzr, eq
    // 84: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PySuper_Lookup
    // 88: f9400108      ldr     x8, [x8]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PySuper_Lookup
    // 8c: d63f0100      blr     x8
    // 90: b9400348      ldr     w8, [x26]
    // 94: f9402297      ldr     x23, [x20, #0x40]
    // 98: aa0003f9      mov     x25, x0
    // 9c: f900229f      str     xzr, [x20, #0x40]
    // a0: 37f80128      tbnz    w8, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // a4: 71000508      subs    w8, w8, #0x1
    // a8: b9000348      str     w8, [x26]
    // ac: 540000c1      b.ne    0xc4 <_JIT_ENTRY+0xc4>
    // b0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PySuper_Type
    // b4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // b8: f9400000      ldr     x0, [x0]
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PySuper_Type
    // bc: f9400108      ldr     x8, [x8]
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c0: d63f0100      blr     x8
    // c4: b9400308      ldr     w8, [x24]
    // c8: 37f80108      tbnz    w8, #0x1f, 0xe8 <_JIT_ENTRY+0xe8>
    // cc: 71000508      subs    w8, w8, #0x1
    // d0: b9000308      str     w8, [x24]
    // d4: 540000a1      b.ne    0xe8 <_JIT_ENTRY+0xe8>
    // d8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // dc: aa1803e0      mov     x0, x24
    // e0: f9400108      ldr     x8, [x8]
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e4: d63f0100      blr     x8
    // e8: b4000139      cbz     x25, 0x10c <_JIT_ENTRY+0x10c>
    // ec: b9400fe8      ldr     w8, [sp, #0xc]
    // f0: 340002a8      cbz     w8, 0x144 <_JIT_ENTRY+0x144>
    // f4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // f8: d10022f5      sub     x21, x23, #0x8
    // fc: f9400000      ldr     x0, [x0]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 100: a93ecef9      stp     x25, x19, [x23, #-0x18]
    // 104: f84107fe      ldr     x30, [sp], #0x10
    // 108: d61f0000      br      x0
    // 10c: b9400268      ldr     w8, [x19]
    // 110: 37f80108      tbnz    w8, #0x1f, 0x130 <_JIT_ENTRY+0x130>
    // 114: 71000508      subs    w8, w8, #0x1
    // 118: b9000268      str     w8, [x19]
    // 11c: 540000a1      b.ne    0x130 <_JIT_ENTRY+0x130>
    // 120: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 124: aa1303e0      mov     x0, x19
    // 128: f9400108      ldr     x8, [x8]
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 12c: d63f0100      blr     x8
    // 130: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 134: aa1703f5      mov     x21, x23
    // 138: f9400000      ldr     x0, [x0]
    // 0000000000000138:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 13c: f84107fe      ldr     x30, [sp], #0x10
    // 140: d61f0000      br      x0
    // 144: b9400268      ldr     w8, [x19]
    // 148: 37f80108      tbnz    w8, #0x1f, 0x168 <_JIT_ENTRY+0x168>
    // 14c: 71000508      subs    w8, w8, #0x1
    // 150: b9000268      str     w8, [x19]
    // 154: 540000a1      b.ne    0x168 <_JIT_ENTRY+0x168>
    // 158: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000158:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 15c: aa1303e0      mov     x0, x19
    // 160: f9400108      ldr     x8, [x8]
    // 0000000000000160:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 164: d63f0100      blr     x8
    // 168: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000168:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 16c: d10022f5      sub     x21, x23, #0x8
    // 170: f9400000      ldr     x0, [x0]
    // 0000000000000170:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 174: a93efef9      stp     x25, xzr, [x23, #-0x18]
    // 178: f84107fe      ldr     x30, [sp], #0x10
    // 17c: d61f0000      br      x0
    const unsigned char code_body[384] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x1a, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5e, 0xf8, 0x5a, 0x03, 0x40, 0xf9,
        0x1f, 0x01, 0x1a, 0xeb, 0xa1, 0x00, 0x00, 0x54,
        0xb8, 0x02, 0x5f, 0xf8, 0x08, 0x07, 0x40, 0xf9,
        0x08, 0xa9, 0x40, 0xb9, 0xa8, 0x00, 0xf8, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x09, 0x00, 0x00, 0x90, 0x88, 0x02, 0x40, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0x29, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x3d, 0x02, 0x53, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x4d, 0x29, 0x8b, 0x09, 0x00, 0x00, 0x90,
        0x02, 0x0d, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x68, 0x06, 0x40, 0xf9, 0x08, 0x49, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xff, 0x0f, 0x00, 0xb9,
        0x1f, 0x01, 0x09, 0xeb, 0xe8, 0x33, 0x00, 0x91,
        0x03, 0x01, 0x9f, 0x9a, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x48, 0x03, 0x40, 0xb9, 0x97, 0x22, 0x40, 0xf9,
        0xf9, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x28, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x48, 0x03, 0x00, 0xb9, 0xc1, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x39, 0x01, 0x00, 0xb4, 0xe8, 0x0f, 0x40, 0xb9,
        0xa8, 0x02, 0x00, 0x34, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xf9, 0xce, 0x3e, 0xa9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x17, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xf9, 0xfe, 0x3e, 0xa9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &PyObject_GenericGetAttr+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x38, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x44, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x70, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)&_PySuper_Lookup);
    patch_aarch64_21rx(code + 0xb0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xb4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xb8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xd8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0xfc, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x120, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x128, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x130, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x138, (uintptr_t)data + 0x28);
    patch_aarch64_21rx(code + 0x158, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x160, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x168, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x170, (uintptr_t)data + 0x20);
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CALLARGS_A_TUPLE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: 12000117      and     w23, w8, #0x1
    // 10: 37000068      tbnz    w8, #0x0, 0x1c <_JIT_ENTRY+0x1c>
    // 14: aa1f03f8      mov     x24, xzr
    // 18: 14000002      b       0x20 <_JIT_ENTRY+0x20>
    // 1c: f85f82b8      ldur    x24, [x21, #-0x8]
    // 20: 2a3703f9      mvn     w25, w23
    // 24: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTuple_Type
    // 28: f879dab3      ldr     x19, [x21, w25, sxtw #3]
    // 2c: f9400668      ldr     x8, [x19, #0x8]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTuple_Type
    // 34: eb09011f      cmp     x8, x9
    // 38: 54000400      b.eq    0xb8 <_JIT_ENTRY+0xb8>
    // 3c: 521e7ae8      eor     w8, w23, #0xfffffffd
    // 40: aa1603e0      mov     x0, x22
    // 44: aa1303e2      mov     x2, x19
    // 48: f868daa1      ldr     x1, [x21, w8, sxtw #3]
    // 4c: f9002295      str     x21, [x20, #0x40]
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Check_ArgsIterable
    // 54: f9400108      ldr     x8, [x8]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Check_ArgsIterable
    // 58: d63f0100      blr     x8
    // 5c: f9402295      ldr     x21, [x20, #0x40]
    // 60: f900229f      str     xzr, [x20, #0x40]
    // 64: 37f80380      tbnz    w0, #0x1f, 0xd4 <_JIT_ENTRY+0xd4>
    // 68: f9002295      str     x21, [x20, #0x40]
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySequence_Tuple
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySequence_Tuple
    // 78: d63f0100      blr     x8
    // 7c: f9402295      ldr     x21, [x20, #0x40]
    // 80: f900229f      str     xzr, [x20, #0x40]
    // 84: b4000280      cbz     x0, 0xd4 <_JIT_ENTRY+0xd4>
    // 88: b9400268      ldr     w8, [x19]
    // 8c: 37f80148      tbnz    w8, #0x1f, 0xb4 <_JIT_ENTRY+0xb4>
    // 90: 71000508      subs    w8, w8, #0x1
    // 94: b9000268      str     w8, [x19]
    // 98: 540000e1      b.ne    0xb4 <_JIT_ENTRY+0xb4>
    // 9c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a0: aa0003fa      mov     x26, x0
    // a4: aa1303e0      mov     x0, x19
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: aa1a03e0      mov     x0, x26
    // b4: aa0003f3      mov     x19, x0
    // b8: f839dab3      str     x19, [x21, w25, sxtw #3]
    // bc: 34000057      cbz     w23, 0xc4 <_JIT_ENTRY+0xc4>
    // c0: f81f82b8      stur    x24, [x21, #-0x8]
    // c4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c8: f9400000      ldr     x0, [x0]
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // cc: f84107fe      ldr     x30, [sp], #0x10
    // d0: d61f0000      br      x0
    // d4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // d8: f9400000      ldr     x0, [x0]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // dc: f84107fe      ldr     x30, [sp], #0x10
    // e0: d61f0000      br      x0
    // e4: 00 00 00 00
    const unsigned char code_body[232] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x17, 0x01, 0x00, 0x12,
        0x68, 0x00, 0x00, 0x37, 0xf8, 0x03, 0x1f, 0xaa,
        0x02, 0x00, 0x00, 0x14, 0xb8, 0x82, 0x5f, 0xf8,
        0xf9, 0x03, 0x37, 0x2a, 0x09, 0x00, 0x00, 0x90,
        0xb3, 0xda, 0x79, 0xf8, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x00, 0x04, 0x00, 0x54, 0xe8, 0x7a, 0x1e, 0x52,
        0xe0, 0x03, 0x16, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0xa1, 0xda, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x03, 0xf8, 0x37,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x80, 0x02, 0x00, 0xb4,
        0x68, 0x02, 0x40, 0xb9, 0x48, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xfa, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x1a, 0xaa, 0xf3, 0x03, 0x00, 0xaa,
        0xb3, 0xda, 0x39, 0xf8, 0x57, 0x00, 0x00, 0x34,
        0xb8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyTuple_Type+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)&_Py_Check_ArgsIterable);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)&PySequence_Tuple);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&PySequence_Tuple);
    patch_aarch64_21rx(code + 0x9c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xc4, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xd4, (uintptr_t)data + 0x18);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CELL.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 91014293      add     x19, x20, #0x50
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: 92403d17      and     x23, x8, #0xffff
    // 14: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyCell_New
    // 18: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 1c: f9400108      ldr     x8, [x8]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyCell_New
    // 20: d63f0100      blr     x8
    // 24: b40001c0      cbz     x0, 0x5c <_JIT_ENTRY+0x5c>
    // 28: aa0003e8      mov     x8, x0
    // 2c: f8777a60      ldr     x0, [x19, x23, lsl #3]
    // 30: f8377a68      str     x8, [x19, x23, lsl #3]
    // 34: b40000c0      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 38: b9400008      ldr     w8, [x0]
    // 3c: 37f80088      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 40: 71000508      subs    w8, w8, #0x1
    // 44: b9000008      str     w8, [x0]
    // 48: 54000120      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f84107fe      ldr     x30, [sp], #0x10
    // 58: d61f0000      br      x0
    // 5c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 60: f9400000      ldr     x0, [x0]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 64: f84107fe      ldr     x30, [sp], #0x10
    // 68: d61f0000      br      x0
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 7c: f9400000      ldr     x0, [x0]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 80: f84107fe      ldr     x30, [sp], #0x10
    // 84: d61f0000      br      x0
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x93, 0x42, 0x01, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0x17, 0x3d, 0x40, 0x92, 0x08, 0x00, 0x00, 0x90,
        0x60, 0x7a, 0x77, 0xf8, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xc0, 0x01, 0x00, 0xb4,
        0xe8, 0x03, 0x00, 0xaa, 0x60, 0x7a, 0x77, 0xf8,
        0x68, 0x7a, 0x37, 0xf8, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x14, (uintptr_t)&PyCell_New);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)&PyCell_New);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x8);
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_FUNCTION.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyFunction_New
    // 10: f9400e81      ldr     x1, [x20, #0x18]
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyFunction_New
    // 18: aa1303e0      mov     x0, x19
    // 1c: d63f0100      blr     x8
    // 20: f9402295      ldr     x21, [x20, #0x40]
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: aa0003f7      mov     x23, x0
    // 2c: b9400268      ldr     w8, [x19]
    // 30: 37f80088      tbnz    w8, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000268      str     w8, [x19]
    // 3c: 54000180      b.eq    0x6c <_JIT_ENTRY+0x6c>
    // 40: b4000217      cbz     x23, 0x80 <_JIT_ENTRY+0x80>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyFunction_SetVersion
    // 48: b9405e61      ldr     w1, [x19, #0x5c]
    // 4c: aa1703e0      mov     x0, x23
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyFunction_SetVersion
    // 54: d63f0100      blr     x8
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f81f82b7      stur    x23, [x21, #-0x8]
    // 64: f84107fe      ldr     x30, [sp], #0x10
    // 68: d61f0000      br      x0
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: b5fffe57      cbnz    x23, 0x44 <_JIT_ENTRY+0x44>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x81, 0x0e, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x80, 0x01, 0x00, 0x54,
        0x17, 0x02, 0x00, 0xb4, 0x08, 0x00, 0x00, 0x90,
        0x61, 0x5e, 0x40, 0xb9, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb7, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x57, 0xfe, 0xff, 0xb5,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)&PyFunction_New);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&PyFunction_New);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)&_PyFunction_SetVersion);
    patch_aarch64_12x(code + 0x50, (uintptr_t)&_PyFunction_SetVersion);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x8);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_WARM.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_EXECUTOR
    // 4: 52800029      mov     w9, #0x1                // =1
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_EXECUTOR
    // c: 39008d09      strb    w9, [x8, #0x23]
    // 10: 528cc109      mov     w9, #0x6608             // =26120
    // 14: f9400ac8      ldr     x8, [x22, #0x10]
    // 18: 72a00069      movk    w9, #0x3, lsl #16
    // 1c: f869690a      ldr     x10, [x8, x9]
    // 20: f100054a      subs    x10, x10, #0x1
    // 24: f829690a      str     x10, [x8, x9]
    // 28: 54000080      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: d61f0000      br      x0
    // 38: 910062c8      add     x8, x22, #0x18
    // 3c: c85ffd09      ldaxr   x9, [x8]
    // 40: b2790129      orr     x9, x9, #0x80
    // 44: c80afd09      stlxr   w10, x9, [x8]
    // 48: 35ffffaa      cbnz    w10, 0x3c <_JIT_ENTRY+0x3c>
    // 4c: d5033bbf      dmb     ish
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 58: d61f0000      br      x0
    // 5c: 00 00 00 00
    const unsigned char code_body[96] = {
        0x08, 0x00, 0x00, 0x90, 0x29, 0x00, 0x80, 0x52,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x8d, 0x00, 0x39,
        0x09, 0xc1, 0x8c, 0x52, 0xc8, 0x0a, 0x40, 0xf9,
        0x69, 0x00, 0xa0, 0x72, 0x0a, 0x69, 0x69, 0xf8,
        0x4a, 0x05, 0x00, 0xf1, 0x0a, 0x69, 0x29, 0xf8,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0xc8, 0x62, 0x00, 0x91, 0x09, 0xfd, 0x5f, 0xc8,
        0x29, 0x01, 0x79, 0xb2, 0x09, 0xfd, 0x0a, 0xc8,
        0xaa, 0xff, 0xff, 0x35, 0xbf, 0x3b, 0x03, 0xd5,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x8);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAP_ADD.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 92800029      mov     x9, #-0x2               // =-2
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // 14: cb282128      sub     x8, x9, w8, uxth
    // 18: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 1c: f9002295      str     x21, [x20, #0x40]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyDict_SetItem_Take2
    // 24: f9400108      ldr     x8, [x8]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyDict_SetItem_Take2
    // 28: d63f0100      blr     x8
    // 2c: f9402295      ldr     x21, [x20, #0x40]
    // 30: f900229f      str     xzr, [x20, #0x40]
    // 34: 340000a0      cbz     w0, 0x48 <_JIT_ENTRY+0x48>
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    // 48: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4c: d10042b5      sub     x21, x21, #0x10
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f84107fe      ldr     x30, [sp], #0x10
    // 58: d61f0000      br      x0
    // 5c: 00 00 00 00
    const unsigned char code_body[96] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x29, 0x00, 0x80, 0x92, 0x08, 0x01, 0x40, 0xf9,
        0xa1, 0x0a, 0x7f, 0xa9, 0x28, 0x21, 0x28, 0xcb,
        0xa0, 0x7a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xa0, 0x00, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x42, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x10);
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_CLASS.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f6ab8      ldp     x24, x26, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f85e82b9      ldur    x25, [x21, #-0x18]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_MatchClass
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: aa1603e0      mov     x0, x22
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_MatchClass
    // 24: 92403d03      and     x3, x8, #0xffff
    // 28: aa1903e1      mov     x1, x25
    // 2c: aa1803e2      mov     x2, x24
    // 30: aa1a03e4      mov     x4, x26
    // 34: d63f0120      blr     x9
    // 38: f9402293      ldr     x19, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: aa0003f7      mov     x23, x0
    // 44: b9400328      ldr     w8, [x25]
    // 48: 37f80108      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000328      str     w8, [x25]
    // 54: 540000a1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 5c: aa1903e0      mov     x0, x25
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 64: d63f0100      blr     x8
    // 68: b9400308      ldr     w8, [x24]
    // 6c: 37f80108      tbnz    w8, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 70: 71000508      subs    w8, w8, #0x1
    // 74: b9000308      str     w8, [x24]
    // 78: 540000a1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 80: aa1803e0      mov     x0, x24
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: b9400348      ldr     w8, [x26]
    // 90: 37f80088      tbnz    w8, #0x1f, 0xa0 <_JIT_ENTRY+0xa0>
    // 94: 71000508      subs    w8, w8, #0x1
    // 98: b9000348      str     w8, [x26]
    // 9c: 54000100      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // a0: b4000197      cbz     x23, 0xd0 <_JIT_ENTRY+0xd0>
    // a4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a8: d1004275      sub     x21, x19, #0x10
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f81e8277      stur    x23, [x19, #-0x18]
    // b4: f84107fe      ldr     x30, [sp], #0x10
    // b8: d61f0000      br      x0
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: aa1a03e0      mov     x0, x26
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: b5fffed7      cbnz    x23, 0xa4 <_JIT_ENTRY+0xa4>
    // d0: f9403ac8      ldr     x8, [x22, #0x70]
    // d4: b4000108      cbz     x8, 0xf4 <_JIT_ENTRY+0xf4>
    // d8: f9400508      ldr     x8, [x8, #0x8]
    // dc: b40000c8      cbz     x8, 0xf4 <_JIT_ENTRY+0xf4>
    // e0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // e4: aa1303f5      mov     x21, x19
    // e8: f9400000      ldr     x0, [x0]
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // ec: f84107fe      ldr     x30, [sp], #0x10
    // f0: d61f0000      br      x0
    // f4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // f8: f94002f7      ldr     x23, [x23]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // fc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 100: d1004275      sub     x21, x19, #0x10
    // 104: f9400000      ldr     x0, [x0]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 108: f81e8277      stur    x23, [x19, #-0x18]
    // 10c: f84107fe      ldr     x30, [sp], #0x10
    // 110: d61f0000      br      x0
    // 114: 00 00 00 00
    const unsigned char code_body[280] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x6a, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb9, 0x82, 0x5e, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x16, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x03, 0x3d, 0x40, 0x92,
        0xe1, 0x03, 0x19, 0xaa, 0xe2, 0x03, 0x18, 0xaa,
        0xe4, 0x03, 0x1a, 0xaa, 0x20, 0x01, 0x3f, 0xd6,
        0x93, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0xaa, 0x28, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x48, 0x03, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x48, 0x03, 0x00, 0xb9, 0x00, 0x01, 0x00, 0x54,
        0x97, 0x01, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x90,
        0x75, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0x77, 0x82, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x1a, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd7, 0xfe, 0xff, 0xb5,
        0xc8, 0x3a, 0x40, 0xf9, 0x08, 0x01, 0x00, 0xb4,
        0x08, 0x05, 0x40, 0xf9, 0xc8, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0x00, 0x90, 0xf5, 0x03, 0x13, 0xaa,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x17, 0x00, 0x00, 0x90,
        0xf7, 0x02, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x75, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0x77, 0x82, 0x1e, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    // 18: &_Py_NoneStruct+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x14, (uintptr_t)&_PyEval_MatchClass);
    patch_aarch64_12x(code + 0x20, (uintptr_t)&_PyEval_MatchClass);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x84, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xc4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xe0, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xe8, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xfc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x8);
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_KEYS.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f0aa1      ldp     x1, x2, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_MatchKeys
    // c: f9002295      str     x21, [x20, #0x40]
    // 10: aa1603e0      mov     x0, x22
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_MatchKeys
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b40000c0      cbz     x0, 0x3c <_JIT_ENTRY+0x3c>
    // 28: f80086a0      str     x0, [x21], #0x8
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f84107fe      ldr     x30, [sp], #0x10
    // 38: d61f0000      br      x0
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 44: f84107fe      ldr     x30, [sp], #0x10
    // 48: d61f0000      br      x0
    // 4c: 00 00 00 00
    const unsigned char code_body[80] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa1, 0x0a, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyEval_MatchKeys);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&_PyEval_MatchKeys);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x8);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_MAPPING.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10: aa1503e8      mov     x8, x21
    // 14: 910022b5      add     x21, x21, #0x8
    // 18: f9400529      ldr     x9, [x9, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 20: b940a929      ldr     w9, [x9, #0xa8]
    // 24: f940016b      ldr     x11, [x11]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: 721a013f      tst     w9, #0x40
    // 30: 9a8a0169      csel    x9, x11, x10, eq
    // 34: f9000109      str     x9, [x8]
    // 38: d61f0000      br      x0
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xb5, 0x22, 0x00, 0x91,
        0x29, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0xa9, 0x40, 0xb9, 0x6b, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x3f, 0x01, 0x1a, 0x72,
        0x69, 0x01, 0x8a, 0x9a, 0x09, 0x01, 0x00, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x10);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_SEQUENCE.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10: aa1503e8      mov     x8, x21
    // 14: 910022b5      add     x21, x21, #0x8
    // 18: f9400529      ldr     x9, [x9, #0x8]
    // 1c: f940014a      ldr     x10, [x10]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 20: b940a929      ldr     w9, [x9, #0xa8]
    // 24: f940016b      ldr     x11, [x11]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: 721b013f      tst     w9, #0x20
    // 30: 9a8a0169      csel    x9, x11, x10, eq
    // 34: f9000109      str     x9, [x8]
    // 38: d61f0000      br      x0
    // 3c: 00 00 00 00
    const unsigned char code_body[64] = {
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xb5, 0x22, 0x00, 0x91,
        0x29, 0x05, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x29, 0xa9, 0x40, 0xb9, 0x6b, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x3f, 0x01, 0x1b, 0x72,
        0x69, 0x01, 0x8a, 0x9a, 0x09, 0x01, 0x00, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x10);
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 12800028      mov     w8, #-0x2               // =-2
    // c: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 12003d2a      and     w10, w9, #0xffff
    // 18: 4b0a0108      sub     w8, w8, w10
    // 1c: f868daa9      ldr     x9, [x21, w8, sxtw #3]
    // 20: f940052b      ldr     x11, [x9, #0x8]
    // 24: f940018c      ldr     x12, [x12]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 28: eb0c017f      cmp     x11, x12
    // 2c: 540000a0      b.eq    0x40 <_JIT_ENTRY+0x40>
    // 30: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 38: f84107fe      ldr     x30, [sp], #0x10
    // 3c: d61f0000      br      x0
    // 40: 2a2a03ea      mvn     w10, w10
    // 44: f86adaab      ldr     x11, [x21, w10, sxtw #3]
    // 48: b5ffff4b      cbnz    x11, 0x30 <_JIT_ENTRY+0x30>
    // 4c: f9400d2b      ldr     x11, [x9, #0x18]
    // 50: b940016c      ldr     w12, [x11]
    // 54: 37f8006c      tbnz    w12, #0x1f, 0x60 <_JIT_ENTRY+0x60>
    // 58: 1100058c      add     w12, w12, #0x1
    // 5c: b900016c      str     w12, [x11]
    // 60: f82adaab      str     x11, [x21, w10, sxtw #3]
    // 64: f9400929      ldr     x9, [x9, #0x10]
    // 68: f868daa0      ldr     x0, [x21, w8, sxtw #3]
    // 6c: b940012a      ldr     w10, [x9]
    // 70: 37f8006a      tbnz    w10, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 74: 1100054a      add     w10, w10, #0x1
    // 78: b900012a      str     w10, [x9]
    // 7c: f828daa9      str     x9, [x21, w8, sxtw #3]
    // 80: b9400008      ldr     w8, [x0]
    // 84: 37fffd68      tbnz    w8, #0x1f, 0x30 <_JIT_ENTRY+0x30>
    // 88: 71000508      subs    w8, w8, #0x1
    // 8c: b9000008      str     w8, [x0]
    // 90: 54fffd01      b.ne    0x30 <_JIT_ENTRY+0x30>
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a4: f9400000      ldr     x0, [x0]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // a8: f84107fe      ldr     x30, [sp], #0x10
    // ac: d61f0000      br      x0
    const unsigned char code_body[176] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x12, 0x0c, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x3d, 0x00, 0x12,
        0x08, 0x01, 0x0a, 0x4b, 0xa9, 0xda, 0x68, 0xf8,
        0x2b, 0x05, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x7f, 0x01, 0x0c, 0xeb, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0xea, 0x03, 0x2a, 0x2a, 0xab, 0xda, 0x6a, 0xf8,
        0x4b, 0xff, 0xff, 0xb5, 0x2b, 0x0d, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xab, 0xda, 0x2a, 0xf8, 0x29, 0x09, 0x40, 0xf9,
        0xa0, 0xda, 0x68, 0xf8, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0xda, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x68, 0xfd, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x01, 0xfd, 0xff, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)data + 0x10);
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD_KW.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 92800048      mov     x8, #-0x3               // =-3
    // c: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyMethod_Type
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: 92403d2a      and     x10, x9, #0xffff
    // 18: cb0a0108      sub     x8, x8, x10
    // 1c: f8687aa9      ldr     x9, [x21, x8, lsl #3]
    // 20: f940052b      ldr     x11, [x9, #0x8]
    // 24: f940018c      ldr     x12, [x12]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyMethod_Type
    // 28: f85f82b3      ldur    x19, [x21, #-0x8]
    // 2c: eb0c017f      cmp     x11, x12
    // 30: 540000c0      b.eq    0x48 <_JIT_ENTRY+0x48>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f81f82b3      stur    x19, [x21, #-0x8]
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    // 48: 9280002b      mov     x11, #-0x2              // =-2
    // 4c: cb0a016a      sub     x10, x11, x10
    // 50: f86a7aab      ldr     x11, [x21, x10, lsl #3]
    // 54: b5ffff0b      cbnz    x11, 0x34 <_JIT_ENTRY+0x34>
    // 58: f9400d2b      ldr     x11, [x9, #0x18]
    // 5c: aa0903e0      mov     x0, x9
    // 60: b940016c      ldr     w12, [x11]
    // 64: 37f8008c      tbnz    w12, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 68: 1100058c      add     w12, w12, #0x1
    // 6c: b900016c      str     w12, [x11]
    // 70: f8687aa0      ldr     x0, [x21, x8, lsl #3]
    // 74: f82a7aab      str     x11, [x21, x10, lsl #3]
    // 78: f9400929      ldr     x9, [x9, #0x10]
    // 7c: b940012a      ldr     w10, [x9]
    // 80: 37f8006a      tbnz    w10, #0x1f, 0x8c <_JIT_ENTRY+0x8c>
    // 84: 1100054a      add     w10, w10, #0x1
    // 88: b900012a      str     w10, [x9]
    // 8c: f8287aa9      str     x9, [x21, x8, lsl #3]
    // 90: b9400008      ldr     w8, [x0]
    // 94: 37fffd08      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000008      str     w8, [x0]
    // a0: 54fffca1      b.ne    0x34 <_JIT_ENTRY+0x34>
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // b4: f9400000      ldr     x0, [x0]
    // 00000000000000b4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b8: f81f82b3      stur    x19, [x21, #-0x8]
    // bc: f84107fe      ldr     x30, [sp], #0x10
    // c0: d61f0000      br      x0
    // c4: 00 00 00 00
    const unsigned char code_body[200] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x48, 0x00, 0x80, 0x92, 0x0c, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x2a, 0x3d, 0x40, 0x92,
        0x08, 0x01, 0x0a, 0xcb, 0xa9, 0x7a, 0x68, 0xf8,
        0x2b, 0x05, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x7f, 0x01, 0x0c, 0xeb,
        0xc0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x2b, 0x00, 0x80, 0x92, 0x6a, 0x01, 0x0a, 0xcb,
        0xab, 0x7a, 0x6a, 0xf8, 0x0b, 0xff, 0xff, 0xb5,
        0x2b, 0x0d, 0x40, 0xf9, 0xe0, 0x03, 0x09, 0xaa,
        0x6c, 0x01, 0x40, 0xb9, 0x8c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xa0, 0x7a, 0x68, 0xf8, 0xab, 0x7a, 0x2a, 0xf8,
        0x29, 0x09, 0x40, 0xf9, 0x2a, 0x01, 0x40, 0xb9,
        0x6a, 0x00, 0xf8, 0x37, 0x4a, 0x05, 0x00, 0x11,
        0x2a, 0x01, 0x00, 0xb9, 0xa9, 0x7a, 0x28, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x08, 0xfd, 0xff, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa1, 0xfc, 0xff, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xb3, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xa4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xb0, (uintptr_t)data + 0x10);
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _NOP.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 4: f9400000      ldr     x0, [x0]
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8: d61f0000      br      x0
    // c: 00 00 00 00
    const unsigned char code_body[16] = {
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x0, (uintptr_t)data);
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_EXCEPT.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 8: f85f82a8      ldur    x8, [x21, #-0x8]
    // c: f9403ec9      ldr     x9, [x22, #0x78]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: f9400120      ldr     x0, [x9]
    // 1c: eb0a011f      cmp     x8, x10
    // 20: 9a8803e8      csel    x8, xzr, x8, eq
    // 24: f9000128      str     x8, [x9]
    // 28: b4000120      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 2c: b9400008      ldr     w8, [x0]
    // 30: 37f800e8      tbnz    w8, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 34: 71000508      subs    w8, w8, #0x1
    // 38: b9000008      str     w8, [x0]
    // 3c: 54000081      b.ne    0x4c <_JIT_ENTRY+0x4c>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: f9402288      ldr     x8, [x20, #0x40]
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 58: f900229f      str     xzr, [x20, #0x40]
    // 5c: d1002115      sub     x21, x8, #0x8
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0xa8, 0x82, 0x5f, 0xf8, 0xc9, 0x3e, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x20, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x0a, 0xeb,
        0xe8, 0x03, 0x88, 0x9a, 0x28, 0x01, 0x00, 0xf9,
        0x20, 0x01, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x8);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea0      ldr     x0, [x21, #-0x8]!
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f80088      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 34: d63f0100      blr     x8
    // 38: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 3c: f9400000      ldr     x0, [x0]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 40: f84107fe      ldr     x30, [sp], #0x10
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x8e, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)data);
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f800e8      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 24: d63f0100      blr     x8
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 38: f81f82a8      stur    x8, [x21, #-0x8]
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_EXC_INFO.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a9      ldur    x9, [x21, #-0x8]
    // 4: f9403eca      ldr     x10, [x22, #0x78]
    // 8: aa1503e8      mov     x8, x21
    // c: b940012c      ldr     w12, [x9]
    // 10: f940014b      ldr     x11, [x10]
    // 14: 37f8006c      tbnz    w12, #0x1f, 0x20 <_JIT_ENTRY+0x20>
    // 18: 1100058c      add     w12, w12, #0x1
    // 1c: b900012c      str     w12, [x9]
    // 20: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f100017f      cmp     x11, #0x0
    // 2c: f940018c      ldr     x12, [x12]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 34: f9000149      str     x9, [x10]
    // 38: 91002115      add     x21, x8, #0x8
    // 3c: 9a8b018a      csel    x10, x12, x11, eq
    // 40: a93fa50a      stp     x10, x9, [x8, #-0x8]
    // 44: d61f0000      br      x0
    const unsigned char code_body[72] = {
        0xa9, 0x82, 0x5f, 0xf8, 0xca, 0x3e, 0x40, 0xf9,
        0xe8, 0x03, 0x15, 0xaa, 0x2c, 0x01, 0x40, 0xb9,
        0x4b, 0x01, 0x40, 0xf9, 0x6c, 0x00, 0xf8, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x2c, 0x01, 0x00, 0xb9,
        0x0c, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x7f, 0x01, 0x00, 0xf1, 0x8c, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x49, 0x01, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0x91, 0x8a, 0x01, 0x8b, 0x9a,
        0x0a, 0xa5, 0x3f, 0xa9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_FRAME.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: b9402ec9      ldr     w9, [x22, #0x2c]
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10: f90026c8      str     x8, [x22, #0x48]
    // 14: aa0803f4      mov     x20, x8
    // 18: 51000529      sub     w9, w9, #0x1
    // 1c: b9002ec9      str     w9, [x22, #0x2c]
    // 20: f9402115      ldr     x21, [x8, #0x40]
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: f900211f      str     xzr, [x8, #0x40]
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x8e, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0xc9, 0x2e, 0x40, 0xb9, 0x00, 0x00, 0x00, 0x90,
        0xc8, 0x26, 0x00, 0xf9, 0xf4, 0x03, 0x08, 0xaa,
        0x29, 0x05, 0x00, 0x51, 0xc9, 0x2e, 0x00, 0xb9,
        0x15, 0x21, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x1f, 0x21, 0x00, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data);
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_NULL.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f80086bf      str     xzr, [x21], #0x8
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400000      ldr     x0, [x0]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // c: d61f0000      br      x0
    const unsigned char code_body[16] = {
        0xbf, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_GENERAL.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 92800028      mov     x8, #-0x2               // =-2
    // c: aa1f03e2      mov     x2, xzr
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: cb292108      sub     x8, x8, w9, uxth
    // 18: 12003d2a      and     w10, w9, #0xffff
    // 1c: cb292ea9      sub     x9, x21, w9, uxth #3
    // 20: 2a2a03ec      mvn     w12, w10
    // 24: f8687aab      ldr     x11, [x21, x8, lsl #3]
    // 28: f86cdaac      ldr     x12, [x21, w12, sxtw #3]
    // 2c: f940196d      ldr     x13, [x11, #0x30]
    // 30: f100019f      cmp     x12, #0x0
    // 34: 928000ec      mov     x12, #-0x8              // =-8
    // 38: 1a8a0544      cinc    w4, w10, ne
    // 3c: 9a9f118a      csel    x10, x12, xzr, ne
    // 40: 3940c1ad      ldrb    w13, [x13, #0x30]
    // 44: 370000cd      tbnz    w13, #0x0, 0x5c <_JIT_ENTRY+0x5c>
    // 48: f9400962      ldr     x2, [x11, #0x10]
    // 4c: b940004b      ldr     w11, [x2]
    // 50: 37f8006b      tbnz    w11, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 54: 1100056b      add     w11, w11, #0x1
    // 58: b900004b      str     w11, [x2]
    // 5c: d37df113      lsl     x19, x8, #3
    // 60: f9002295      str     x21, [x20, #0x40]
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEvalFramePushAndInit
    // 68: 8b0a0123      add     x3, x9, x10
    // 6c: aa1603e0      mov     x0, x22
    // 70: aa1f03e5      mov     x5, xzr
    // 74: f8736aa1      ldr     x1, [x21, x19]
    // 78: f9400108      ldr     x8, [x8]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEvalFramePushAndInit
    // 7c: aa1403e6      mov     x6, x20
    // 80: d63f0100      blr     x8
    // 84: f9402288      ldr     x8, [x20, #0x40]
    // 88: f900229f      str     xzr, [x20, #0x40]
    // 8c: 8b130115      add     x21, x8, x19
    // 90: b40000c0      cbz     x0, 0xa8 <_JIT_ENTRY+0xa8>
    // 94: f80086a0      str     x0, [x21], #0x8
    // 98: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 9c: f9400000      ldr     x0, [x0]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // a0: f84107fe      ldr     x30, [sp], #0x10
    // a4: d61f0000      br      x0
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x28, 0x00, 0x80, 0x92, 0xe2, 0x03, 0x1f, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x08, 0x21, 0x29, 0xcb,
        0x2a, 0x3d, 0x00, 0x12, 0xa9, 0x2e, 0x29, 0xcb,
        0xec, 0x03, 0x2a, 0x2a, 0xab, 0x7a, 0x68, 0xf8,
        0xac, 0xda, 0x6c, 0xf8, 0x6d, 0x19, 0x40, 0xf9,
        0x9f, 0x01, 0x00, 0xf1, 0xec, 0x00, 0x80, 0x92,
        0x44, 0x05, 0x8a, 0x1a, 0x8a, 0x11, 0x9f, 0x9a,
        0xad, 0xc1, 0x40, 0x39, 0xcd, 0x00, 0x00, 0x37,
        0x62, 0x09, 0x40, 0xf9, 0x4b, 0x00, 0x40, 0xb9,
        0x6b, 0x00, 0xf8, 0x37, 0x6b, 0x05, 0x00, 0x11,
        0x4b, 0x00, 0x00, 0xb9, 0x13, 0xf1, 0x7d, 0xd3,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x23, 0x01, 0x0a, 0x8b, 0xe0, 0x03, 0x16, 0xaa,
        0xe5, 0x03, 0x1f, 0xaa, 0xa1, 0x6a, 0x73, 0xf8,
        0x08, 0x01, 0x40, 0xf9, 0xe6, 0x03, 0x14, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x88, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x15, 0x01, 0x13, 0x8b,
        0xc0, 0x00, 0x00, 0xb4, 0xa0, 0x86, 0x00, 0xf8,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_12x(code + 0x78, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x10);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_KW.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: 92800049      mov     x9, #-0x3               // =-3
    // c: 9280002b      mov     x11, #-0x2              // =-2
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: aa1f03e2      mov     x2, xzr
    // 1c: 92403d0a      and     x10, x8, #0xffff
    // 20: 12003d0c      and     w12, w8, #0xffff
    // 24: b940126d      ldr     w13, [x19, #0x10]
    // 28: cb0a0137      sub     x23, x9, x10
    // 2c: cb0a0168      sub     x8, x11, x10
    // 30: 2a2c03eb      mvn     w11, w12
    // 34: f8777aa9      ldr     x9, [x21, x23, lsl #3]
    // 38: f8687aa8      ldr     x8, [x21, x8, lsl #3]
    // 3c: f940192a      ldr     x10, [x9, #0x30]
    // 40: f100011f      cmp     x8, #0x0
    // 44: 8b2bcea8      add     x8, x21, w11, sxtw #3
    // 48: 3940c14e      ldrb    w14, [x10, #0x30]
    // 4c: 1a8c058a      cinc    w10, w12, ne
    // 50: 928000ec      mov     x12, #-0x8              // =-8
    // 54: 4b0d014b      sub     w11, w10, w13
    // 58: 9a9f118a      csel    x10, x12, xzr, ne
    // 5c: 370000ce      tbnz    w14, #0x0, 0x74 <_JIT_ENTRY+0x74>
    // 60: f9400922      ldr     x2, [x9, #0x10]
    // 64: b9400049      ldr     w9, [x2]
    // 68: 37f80069      tbnz    w9, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 6c: 11000529      add     w9, w9, #0x1
    // 70: b9000049      str     w9, [x2]
    // 74: f9002295      str     x21, [x20, #0x40]
    // 78: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEvalFramePushAndInit
    // 7c: 93407d64      sxtw    x4, w11
    // 80: f8777aa1      ldr     x1, [x21, x23, lsl #3]
    // 84: f9400129      ldr     x9, [x9]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEvalFramePushAndInit
    // 88: 8b0a0103      add     x3, x8, x10
    // 8c: aa1603e0      mov     x0, x22
    // 90: aa1303e5      mov     x5, x19
    // 94: aa1403e6      mov     x6, x20
    // 98: d63f0120      blr     x9
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: b9400268      ldr     w8, [x19]
    // a8: 37f80088      tbnz    w8, #0x1f, 0xb8 <_JIT_ENTRY+0xb8>
    // ac: 71000508      subs    w8, w8, #0x1
    // b0: b9000268      str     w8, [x19]
    // b4: 54000100      b.eq    0xd4 <_JIT_ENTRY+0xd4>
    // b8: 8b170eb5      add     x21, x21, x23, lsl #3
    // bc: b40001c0      cbz     x0, 0xf4 <_JIT_ENTRY+0xf4>
    // c0: f80086a0      str     x0, [x21], #0x8
    // c4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c8: f9400000      ldr     x0, [x0]
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // cc: f84107fe      ldr     x30, [sp], #0x10
    // d0: d61f0000      br      x0
    // d4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // d8: aa0003f8      mov     x24, x0
    // dc: aa1303e0      mov     x0, x19
    // e0: f9400108      ldr     x8, [x8]
    // 00000000000000e0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e4: d63f0100      blr     x8
    // e8: aa1803e0      mov     x0, x24
    // ec: 8b170eb5      add     x21, x21, x23, lsl #3
    // f0: b5fffe98      cbnz    x24, 0xc0 <_JIT_ENTRY+0xc0>
    // f4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // f8: f9400000      ldr     x0, [x0]
    // 00000000000000f8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // fc: f84107fe      ldr     x30, [sp], #0x10
    // 100: d61f0000      br      x0
    // 104: 00 00 00 00
    const unsigned char code_body[264] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x49, 0x00, 0x80, 0x92, 0x2b, 0x00, 0x80, 0x92,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe2, 0x03, 0x1f, 0xaa, 0x0a, 0x3d, 0x40, 0x92,
        0x0c, 0x3d, 0x00, 0x12, 0x6d, 0x12, 0x40, 0xb9,
        0x37, 0x01, 0x0a, 0xcb, 0x68, 0x01, 0x0a, 0xcb,
        0xeb, 0x03, 0x2c, 0x2a, 0xa9, 0x7a, 0x77, 0xf8,
        0xa8, 0x7a, 0x68, 0xf8, 0x2a, 0x19, 0x40, 0xf9,
        0x1f, 0x01, 0x00, 0xf1, 0xa8, 0xce, 0x2b, 0x8b,
        0x4e, 0xc1, 0x40, 0x39, 0x8a, 0x05, 0x8c, 0x1a,
        0xec, 0x00, 0x80, 0x92, 0x4b, 0x01, 0x0d, 0x4b,
        0x8a, 0x11, 0x9f, 0x9a, 0xce, 0x00, 0x00, 0x37,
        0x22, 0x09, 0x40, 0xf9, 0x49, 0x00, 0x40, 0xb9,
        0x69, 0x00, 0xf8, 0x37, 0x29, 0x05, 0x00, 0x11,
        0x49, 0x00, 0x00, 0xb9, 0x95, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x64, 0x7d, 0x40, 0x93,
        0xa1, 0x7a, 0x77, 0xf8, 0x29, 0x01, 0x40, 0xf9,
        0x03, 0x01, 0x0a, 0x8b, 0xe0, 0x03, 0x16, 0xaa,
        0xe5, 0x03, 0x13, 0xaa, 0xe6, 0x03, 0x14, 0xaa,
        0x20, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0x00, 0x01, 0x00, 0x54,
        0xb5, 0x0e, 0x17, 0x8b, 0xc0, 0x01, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf8, 0x03, 0x00, 0xaa, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x18, 0xaa, 0xb5, 0x0e, 0x17, 0x8b,
        0x98, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_12x(code + 0x84, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_aarch64_33rx(code + 0xc4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf4, (uintptr_t)data + 0x10);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _REPLACE_WITH_TRUE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f800e8      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 54000081      b.ne    0x28 <_JIT_ENTRY+0x28>
    // 1c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 20: f9400108      ldr     x8, [x8]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 24: d63f0100      blr     x8
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 34: f9400000      ldr     x0, [x0]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 38: f81f82a8      stur    x8, [x21, #-0x8]
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: 00 00 00 00
    const unsigned char code_body[72] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x8);
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RESUME_CHECK.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f9400289      ldr     x9, [x20]
    // 8: f9405529      ldr     x9, [x9, #0xa8]
    // c: eb09011f      cmp     x8, x9
    // 10: 54000081      b.ne    0x20 <_JIT_ENTRY+0x20>
    // 14: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 18: f9400000      ldr     x0, [x0]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 1c: d61f0000      br      x0
    // 20: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 28: d61f0000      br      x0
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x89, 0x02, 0x40, 0xf9,
        0x29, 0x55, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x81, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x20, (uintptr_t)data + 0x8);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_GENERATOR.o:        file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9002295      str     x21, [x20, #0x40]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_MakeCoro
    // c: f9400a80      ldr     x0, [x20, #0x10]
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_MakeCoro
    // 14: d63f0100      blr     x8
    // 18: f9402295      ldr     x21, [x20, #0x40]
    // 1c: f900229f      str     xzr, [x20, #0x40]
    // 20: b4000840      cbz     x0, 0x128 <_JIT_ENTRY+0x128>
    // 24: f9401e88      ldr     x8, [x20, #0x38]
    // 28: ad400281      ldp     q1, q0, [x20]
    // 2c: 91000908      add     x8, x8, #0x2
    // 30: a903d688      stp     x8, x21, [x20, #0x38]
    // 34: aa1403e8      mov     x8, x20
    // 38: 3c858000      stur    q0, [x0, #0x58]
    // 3c: 3c848001      stur    q1, [x0, #0x48]
    // 40: ad410680      ldp     q0, q1, [x20, #0x20]
    // 44: 3dc01282      ldr     q2, [x20, #0x40]
    // 48: f8450d09      ldr     x9, [x8, #0x50]!
    // 4c: 3c888002      stur    q2, [x0, #0x88]
    // 50: 3c868000      stur    q0, [x0, #0x68]
    // 54: f9004c09      str     x9, [x0, #0x98]
    // 58: 3c878001      stur    q1, [x0, #0x78]
    // 5c: f9402289      ldr     x9, [x20, #0x40]
    // 60: cb080128      sub     x8, x9, x8
    // 64: d343fd09      lsr     x9, x8, #3
    // 68: 8b29cc0a      add     x10, x0, w9, sxtw #3
    // 6c: 7100093f      cmp     w9, #0x2
    // 70: 9102614a      add     x10, x10, #0x98
    // 74: f900440a      str     x10, [x0, #0x88]
    // 78: 5400028b      b.lt    0xc8 <_JIT_ENTRY+0xc8>
    // 7c: d3438508      ubfx    x8, x8, #3, #31
    // 80: d100050a      sub     x10, x8, #0x1
    // 84: f100195f      cmp     x10, #0x6
    // 88: 540000a3      b.lo    0x9c <_JIT_ENTRY+0x9c>
    // 8c: cb140009      sub     x9, x0, x20
    // 90: 91012129      add     x9, x9, #0x48
    // 94: f100813f      cmp     x9, #0x20
    // 98: 54000502      b.hs    0x138 <_JIT_ENTRY+0x138>
    // 9c: 52800029      mov     w9, #0x1                // =1
    // a0: d37df12a      lsl     x10, x9, #3
    // a4: cb080128      sub     x8, x9, x8
    // a8: 8b14014b      add     x11, x10, x20
    // ac: 8b00014a      add     x10, x10, x0
    // b0: 91014169      add     x9, x11, #0x50
    // b4: 9102614a      add     x10, x10, #0x98
    // b8: f840852b      ldr     x11, [x9], #0x8
    // bc: b1000508      adds    x8, x8, #0x1
    // c0: f800854b      str     x11, [x10], #0x8
    // c4: 54ffffa3      b.lo    0xb8 <_JIT_ENTRY+0xb8>
    // c8: 52801fa8      mov     w8, #0xfd               // =253
    // cc: 52800029      mov     w9, #0x1                // =1
    // d0: f900281f      str     xzr, [x0, #0x50]
    // d4: 39010c08      strb    w8, [x0, #0x43]
    // d8: aa0003f7      mov     x23, x0
    // dc: aa1403e1      mov     x1, x20
    // e0: 39024809      strb    w9, [x0, #0x92]
    // e4: aa1603e0      mov     x0, x22
    // e8: b9402ec8      ldr     w8, [x22, #0x2c]
    // ec: 11000508      add     w8, w8, #0x1
    // f0: b9002ec8      str     w8, [x22, #0x2c]
    // f4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyThreadState_PopFrame
    // f8: f9400693      ldr     x19, [x20, #0x8]
    // fc: f9400108      ldr     x8, [x8]
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyThreadState_PopFrame
    // 100: d63f0100      blr     x8
    // 104: f90026d3      str     x19, [x22, #0x48]
    // 108: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000108:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 10c: aa1303f4      mov     x20, x19
    // 110: f9402275      ldr     x21, [x19, #0x40]
    // 114: f9400000      ldr     x0, [x0]
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 118: f900227f      str     xzr, [x19, #0x40]
    // 11c: f80086b7      str     x23, [x21], #0x8
    // 120: f84107fe      ldr     x30, [sp], #0x10
    // 124: d61f0000      br      x0
    // 128: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000128:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 12c: f9400000      ldr     x0, [x0]
    // 000000000000012c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 130: f84107fe      ldr     x30, [sp], #0x10
    // 134: d61f0000      br      x0
    // 138: 927ef54b      and     x11, x10, #0xfffffffffffffffc
    // 13c: 9102c00c      add     x12, x0, #0xb0
    // 140: 9101a28d      add     x13, x20, #0x68
    // 144: b2400169      orr     x9, x11, #0x1
    // 148: aa0b03ee      mov     x14, x11
    // 14c: ad7f85a0      ldp     q0, q1, [x13, #-0x10]
    // 150: f10011ce      subs    x14, x14, #0x4
    // 154: 910081ad      add     x13, x13, #0x20
    // 158: ad3f8580      stp     q0, q1, [x12, #-0x10]
    // 15c: 9100818c      add     x12, x12, #0x20
    // 160: 54ffff61      b.ne    0x14c <_JIT_ENTRY+0x14c>
    // 164: eb0b015f      cmp     x10, x11
    // 168: 54fffb00      b.eq    0xc8 <_JIT_ENTRY+0xc8>
    // 16c: 17ffffcd      b       0xa0 <_JIT_ENTRY+0xa0>
    const unsigned char code_body[368] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x80, 0x0a, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x08, 0x00, 0xb4, 0x88, 0x1e, 0x40, 0xf9,
        0x81, 0x02, 0x40, 0xad, 0x08, 0x09, 0x00, 0x91,
        0x88, 0xd6, 0x03, 0xa9, 0xe8, 0x03, 0x14, 0xaa,
        0x00, 0x80, 0x85, 0x3c, 0x01, 0x80, 0x84, 0x3c,
        0x80, 0x06, 0x41, 0xad, 0x82, 0x12, 0xc0, 0x3d,
        0x09, 0x0d, 0x45, 0xf8, 0x02, 0x80, 0x88, 0x3c,
        0x00, 0x80, 0x86, 0x3c, 0x09, 0x4c, 0x00, 0xf9,
        0x01, 0x80, 0x87, 0x3c, 0x89, 0x22, 0x40, 0xf9,
        0x28, 0x01, 0x08, 0xcb, 0x09, 0xfd, 0x43, 0xd3,
        0x0a, 0xcc, 0x29, 0x8b, 0x3f, 0x09, 0x00, 0x71,
        0x4a, 0x61, 0x02, 0x91, 0x0a, 0x44, 0x00, 0xf9,
        0x8b, 0x02, 0x00, 0x54, 0x08, 0x85, 0x43, 0xd3,
        0x0a, 0x05, 0x00, 0xd1, 0x5f, 0x19, 0x00, 0xf1,
        0xa3, 0x00, 0x00, 0x54, 0x09, 0x00, 0x14, 0xcb,
        0x29, 0x21, 0x01, 0x91, 0x3f, 0x81, 0x00, 0xf1,
        0x02, 0x05, 0x00, 0x54, 0x29, 0x00, 0x80, 0x52,
        0x2a, 0xf1, 0x7d, 0xd3, 0x28, 0x01, 0x08, 0xcb,
        0x4b, 0x01, 0x14, 0x8b, 0x4a, 0x01, 0x00, 0x8b,
        0x69, 0x41, 0x01, 0x91, 0x4a, 0x61, 0x02, 0x91,
        0x2b, 0x85, 0x40, 0xf8, 0x08, 0x05, 0x00, 0xb1,
        0x4b, 0x85, 0x00, 0xf8, 0xa3, 0xff, 0xff, 0x54,
        0xa8, 0x1f, 0x80, 0x52, 0x29, 0x00, 0x80, 0x52,
        0x1f, 0x28, 0x00, 0xf9, 0x08, 0x0c, 0x01, 0x39,
        0xf7, 0x03, 0x00, 0xaa, 0xe1, 0x03, 0x14, 0xaa,
        0x09, 0x48, 0x02, 0x39, 0xe0, 0x03, 0x16, 0xaa,
        0xc8, 0x2e, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x2e, 0x00, 0xb9, 0x08, 0x00, 0x00, 0x90,
        0x93, 0x06, 0x40, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd3, 0x26, 0x00, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0xf4, 0x03, 0x13, 0xaa,
        0x75, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x7f, 0x22, 0x00, 0xf9, 0xb7, 0x86, 0x00, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x4b, 0xf5, 0x7e, 0x92, 0x0c, 0xc0, 0x02, 0x91,
        0x8d, 0xa2, 0x01, 0x91, 0x69, 0x01, 0x40, 0xb2,
        0xee, 0x03, 0x0b, 0xaa, 0xa0, 0x85, 0x7f, 0xad,
        0xce, 0x11, 0x00, 0xf1, 0xad, 0x81, 0x00, 0x91,
        0x80, 0x85, 0x3f, 0xad, 0x8c, 0x81, 0x00, 0x91,
        0x61, 0xff, 0xff, 0x54, 0x5f, 0x01, 0x0b, 0xeb,
        0x00, 0xfb, 0xff, 0x54, 0xcd, 0xff, 0xff, 0x17,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_Py_MakeCoro);
    patch_aarch64_12x(code + 0x10, (uintptr_t)&_Py_MakeCoro);
    patch_aarch64_21rx(code + 0xf4, (uintptr_t)&_PyThreadState_PopFrame);
    patch_aarch64_12x(code + 0xfc, (uintptr_t)&_PyThreadState_PopFrame);
    patch_aarch64_21rx(code + 0x108, (uintptr_t)data);
    patch_aarch64_12x(code + 0x114, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x128, (uintptr_t)data + 0x8);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_VALUE.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8eb3      ldr     x19, [x21, #-0x8]!
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: b9402ec8      ldr     w8, [x22, #0x2c]
    // 10: aa1403e1      mov     x1, x20
    // 14: aa1603e0      mov     x0, x22
    // 18: 11000508      add     w8, w8, #0x1
    // 1c: b9002ec8      str     w8, [x22, #0x2c]
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_FrameClearAndPop
    // 24: f9400694      ldr     x20, [x20, #0x8]
    // 28: f90026d4      str     x20, [x22, #0x48]
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_FrameClearAndPop
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f80086b3      str     x19, [x21], #0x8
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x8e, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0xc8, 0x2e, 0x40, 0xb9,
        0xe1, 0x03, 0x14, 0xaa, 0xe0, 0x03, 0x16, 0xaa,
        0x08, 0x05, 0x00, 0x11, 0xc8, 0x2e, 0x00, 0xb9,
        0x08, 0x00, 0x00, 0x90, 0x94, 0x06, 0x40, 0xf9,
        0xd4, 0x26, 0x00, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xb3, 0x86, 0x00, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x20, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SAVE_RETURN_OFFSET.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f9400000      ldr     x0, [x0]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10: 79009288      strh    w8, [x20, #0x48]
    // 14: d61f0000      br      x0
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x88, 0x92, 0x00, 0x79, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x8);
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SEND_GEN_FRAME.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f02a8      ldur    x8, [x21, #-0x10]
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyGen_Type
    // 8: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyCoro_Type
    // c: f9400509      ldr     x9, [x8, #0x8]
    // 10: f940014a      ldr     x10, [x10]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyGen_Type
    // 14: f940016b      ldr     x11, [x11]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyCoro_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: fa4b1124      ccmp    x9, x11, #0x4, ne
    // 20: 54000061      b.ne    0x2c <_JIT_ENTRY+0x2c>
    // 24: 39c10d09      ldrsb   w9, [x8, #0x43]
    // 28: 37f80089      tbnz    w9, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 30: f9400000      ldr     x0, [x0]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 34: d61f0000      br      x0
    // 38: f85f82a9      ldur    x9, [x21, #-0x8]
    // 3c: f940450a      ldr     x10, [x8, #0x88]
    // 40: 9100a10b      add     x11, x8, #0x28
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9000149      str     x9, [x10]
    // 4c: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 50: f9404509      ldr     x9, [x8, #0x88]
    // 54: 39010d1f      strb    wzr, [x8, #0x43]
    // 58: 91002129      add     x9, x9, #0x8
    // 5c: f9004509      str     x9, [x8, #0x88]
    // 60: f9403ec9      ldr     x9, [x22, #0x78]
    // 64: f940014a      ldr     x10, [x10]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 68: f9001909      str     x9, [x8, #0x30]
    // 6c: 11000949      add     w9, w10, #0x2
    // 70: 9101210a      add     x10, x8, #0x48
    // 74: f9003ecb      str     x11, [x22, #0x78]
    // 78: 79009289      strh    w9, [x20, #0x48]
    // 7c: f9400000      ldr     x0, [x0]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 80: f9002914      str     x20, [x8, #0x50]
    // 84: f81f82aa      stur    x10, [x21, #-0x8]
    // 88: d61f0000      br      x0
    // 8c: 00 00 00 00
    const unsigned char code_body[144] = {
        0xa8, 0x02, 0x5f, 0xf8, 0x0a, 0x00, 0x00, 0x90,
        0x0b, 0x00, 0x00, 0x90, 0x09, 0x05, 0x40, 0xf9,
        0x4a, 0x01, 0x40, 0xf9, 0x6b, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x24, 0x11, 0x4b, 0xfa,
        0x61, 0x00, 0x00, 0x54, 0x09, 0x0d, 0xc1, 0x39,
        0x89, 0x00, 0xf8, 0x37, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0xa9, 0x82, 0x5f, 0xf8, 0x0a, 0x45, 0x40, 0xf9,
        0x0b, 0xa1, 0x00, 0x91, 0x00, 0x00, 0x00, 0x90,
        0x49, 0x01, 0x00, 0xf9, 0x0a, 0x00, 0x00, 0x90,
        0x09, 0x45, 0x40, 0xf9, 0x1f, 0x0d, 0x01, 0x39,
        0x29, 0x21, 0x00, 0x91, 0x09, 0x45, 0x00, 0xf9,
        0xc9, 0x3e, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x09, 0x19, 0x00, 0xf9, 0x49, 0x09, 0x00, 0x11,
        0x0a, 0x21, 0x01, 0x91, 0xcb, 0x3e, 0x00, 0xf9,
        0x89, 0x92, 0x00, 0x79, 0x00, 0x00, 0x40, 0xf9,
        0x14, 0x29, 0x00, 0xf9, 0xaa, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyGen_Type+0x0
    // 8: &PyCoro_Type+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: OPARG
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x18);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SETUP_ANNOTATIONS.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9401680      ldr     x0, [x20, #0x28]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: b40002e0      cbz     x0, 0x68 <_JIT_ENTRY+0x68>
    // 10: 90000013      adrp    x19, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 14: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyMapping_GetOptionalItem
    // 18: 5291a808      mov     w8, #0x8d40             // =36160
    // 1c: f9400273      ldr     x19, [x19]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 20: f9400129      ldr     x9, [x9]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyMapping_GetOptionalItem
    // 24: 910023e2      add     x2, sp, #0x8
    // 28: 8b080261      add     x1, x19, x8
    // 2c: d63f0120      blr     x9
    // 30: f9402295      ldr     x21, [x20, #0x40]
    // 34: f900229f      str     xzr, [x20, #0x40]
    // 38: 37f80740      tbnz    w0, #0x1f, 0x120 <_JIT_ENTRY+0x120>
    // 3c: f94007e0      ldr     x0, [sp, #0x8]
    // 40: b4000320      cbz     x0, 0xa4 <_JIT_ENTRY+0xa4>
    // 44: b9400008      ldr     w8, [x0]
    // 48: 37f80088      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000008      str     w8, [x0]
    // 54: 540006e0      b.eq    0x130 <_JIT_ENTRY+0x130>
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_SystemError
    // 6c: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0CM@CAADNNCE@no?5locals?5found?5when?5setting?5up?5@
    // 70: 91000042      add     x2, x2, #0x0
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0CM@CAADNNCE@no?5locals?5found?5when?5setting?5up?5@
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_SystemError
    // 78: aa1603e0      mov     x0, x22
    // 7c: f9400101      ldr     x1, [x8]
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // 88: d63f0100      blr     x8
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 90: f9402295      ldr     x21, [x20, #0x40]
    // 94: f9400000      ldr     x0, [x0]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 98: f900229f      str     xzr, [x20, #0x40]
    // 9c: f84107fe      ldr     x30, [sp], #0x10
    // a0: d61f0000      br      x0
    // a4: f9002295      str     x21, [x20, #0x40]
    // a8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_New
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_New
    // b0: d63f0100      blr     x8
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: f90007e0      str     x0, [sp, #0x8]
    // c0: b4000300      cbz     x0, 0x120 <_JIT_ENTRY+0x120>
    // c4: f9002295      str     x21, [x20, #0x40]
    // c8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_SetItem
    // cc: aa0003e2      mov     x2, x0
    // d0: f9401680      ldr     x0, [x20, #0x28]
    // d4: 5291a808      mov     w8, #0x8d40             // =36160
    // d8: f9400129      ldr     x9, [x9]
    // 00000000000000d8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_SetItem
    // dc: 8b080261      add     x1, x19, x8
    // e0: d63f0120      blr     x9
    // e4: f94007e8      ldr     x8, [sp, #0x8]
    // e8: f9402295      ldr     x21, [x20, #0x40]
    // ec: f900229f      str     xzr, [x20, #0x40]
    // f0: b9400109      ldr     w9, [x8]
    // f4: 37f80149      tbnz    w9, #0x1f, 0x11c <_JIT_ENTRY+0x11c>
    // f8: 71000529      subs    w9, w9, #0x1
    // fc: b9000109      str     w9, [x8]
    // 100: 540000e1      b.ne    0x11c <_JIT_ENTRY+0x11c>
    // 104: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 108: 2a0003f3      mov     w19, w0
    // 10c: aa0803e0      mov     x0, x8
    // 110: f9400129      ldr     x9, [x9]
    // 0000000000000110:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 114: d63f0120      blr     x9
    // 118: 2a1303e0      mov     w0, w19
    // 11c: 34fff9e0      cbz     w0, 0x58 <_JIT_ENTRY+0x58>
    // 120: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000120:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 124: f9400000      ldr     x0, [x0]
    // 0000000000000124:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 128: f84107fe      ldr     x30, [sp], #0x10
    // 12c: d61f0000      br      x0
    // 130: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000130:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 134: f9400108      ldr     x8, [x8]
    // 0000000000000134:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 138: d63f0100      blr     x8
    // 13c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000013c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 140: f9400000      ldr     x0, [x0]
    // 0000000000000140:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 144: f84107fe      ldr     x30, [sp], #0x10
    // 148: d61f0000      br      x0
    // 14c: 00 00 00 00
    const unsigned char code_body[336] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x80, 0x16, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x02, 0x00, 0xb4,
        0x13, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x08, 0xa8, 0x91, 0x52, 0x73, 0x02, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xe2, 0x23, 0x00, 0x91,
        0x61, 0x02, 0x08, 0x8b, 0x20, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x40, 0x07, 0xf8, 0x37, 0xe0, 0x07, 0x40, 0xf9,
        0x20, 0x03, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe0, 0x06, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x90,
        0x42, 0x00, 0x00, 0x91, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0x07, 0x00, 0xf9,
        0x00, 0x03, 0x00, 0xb4, 0x95, 0x22, 0x00, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0xe2, 0x03, 0x00, 0xaa,
        0x80, 0x16, 0x40, 0xf9, 0x08, 0xa8, 0x91, 0x52,
        0x29, 0x01, 0x40, 0xf9, 0x61, 0x02, 0x08, 0x8b,
        0x20, 0x01, 0x3f, 0xd6, 0xe8, 0x07, 0x40, 0xf9,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x09, 0x01, 0x40, 0xb9, 0x49, 0x01, 0xf8, 0x37,
        0x29, 0x05, 0x00, 0x71, 0x09, 0x01, 0x00, 0xb9,
        0xe1, 0x00, 0x00, 0x54, 0x09, 0x00, 0x00, 0x90,
        0xf3, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x08, 0xaa,
        0x29, 0x01, 0x40, 0xf9, 0x20, 0x01, 0x3f, 0xd6,
        0xe0, 0x03, 0x13, 0x2a, 0xe0, 0xf9, 0xff, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &_PyRuntime+0x0
    // 38: CONTINUE
    // 40: &PyExc_SystemError+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x40, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x14, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x30);
    patch_aarch64_12x(code + 0x20, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x38);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)data);
    patch_aarch64_12(code + 0x70, (uintptr_t)data);
    patch_aarch64_12x(code + 0x74, (uintptr_t)data + 0x40);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)&_PyErr_Format);
    patch_aarch64_21rx(code + 0x8c, (uintptr_t)data + 0x48);
    patch_aarch64_12x(code + 0x94, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)&PyDict_New);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_12x(code + 0xd8, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x110, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x120, (uintptr_t)data + 0x48);
    patch_aarch64_33rx(code + 0x130, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x13c, (uintptr_t)data + 0x38);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_ADD.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: 2a2803e8      mvn     w8, w8
    // 14: aa1303e1      mov     x1, x19
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       PySet_Add
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PySet_Add
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 540000c0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 50: 34000160      cbz     w0, 0x7c <_JIT_ENTRY+0x7c>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: 2a0003f7      mov     w23, w0
    // 6c: aa1303e0      mov     x0, x19
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 35fffef7      cbnz    w23, 0x54 <_JIT_ENTRY+0x54>
    // 7c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 80: d10022b5      sub     x21, x21, #0x8
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe8, 0x03, 0x28, 0x2a, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x60, 0x01, 0x00, 0x34, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf7, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xf7, 0xfe, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&PySet_Add);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x70, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x84, (uintptr_t)data + 0x10);
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_FUNCTION_ATTRIBUTE.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FunctionAttributeOffsets
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FunctionAttributeOffsets
    // 14: f85f8eaa      ldr     x10, [x21, #-0x8]!
    // 18: 92403d08      and     x8, x8, #0xffff
    // 1c: f8687928      ldr     x8, [x9, x8, lsl #3]
    // 20: f85f82a9      ldur    x9, [x21, #-0x8]
    // 24: f9400000      ldr     x0, [x0]
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 28: f8286949      str     x9, [x10, x8]
    // 2c: f81f82aa      stur    x10, [x21, #-0x8]
    // 30: d61f0000      br      x0
    // 34: 00 00 00 00
    const unsigned char code_body[56] = {
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xaa, 0x8e, 0x5f, 0xf8,
        0x08, 0x3d, 0x40, 0x92, 0x28, 0x79, 0x68, 0xf8,
        0xa9, 0x82, 0x5f, 0xf8, 0x00, 0x00, 0x40, 0xf9,
        0x49, 0x69, 0x28, 0xf8, 0xaa, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_FunctionAttributeOffsets+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_FunctionAttributeOffsets);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_IP.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: f9400000      ldr     x0, [x0]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 10: f9001e88      str     x8, [x20, #0x38]
    // 14: d61f0000      br      x0
    const unsigned char code_body[24] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0x88, 0x1e, 0x00, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data + 0x8);
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_UPDATE.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82b3      ldur    x19, [x21, #-0x8]
    // 10: 2a2803e8      mvn     w8, w8
    // 14: aa1303e1      mov     x1, x19
    // 18: 531d7108      lsl     w8, w8, #3
    // 1c: b26db108      orr     x8, x8, #0xfffffffffff80000
    // 20: f8686aa0      ldr     x0, [x21, x8]
    // 24: f9002295      str     x21, [x20, #0x40]
    // 28: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PySet_Update
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PySet_Update
    // 30: d63f0100      blr     x8
    // 34: f9402295      ldr     x21, [x20, #0x40]
    // 38: f900229f      str     xzr, [x20, #0x40]
    // 3c: b9400268      ldr     w8, [x19]
    // 40: 37f80088      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 44: 71000508      subs    w8, w8, #0x1
    // 48: b9000268      str     w8, [x19]
    // 4c: 540000e0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 50: 37f80180      tbnz    w0, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: d10022b5      sub     x21, x21, #0x8
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: 2a0003f7      mov     w23, w0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: 36fffed7      tbz     w23, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    const unsigned char code_body[144] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0xe8, 0x03, 0x28, 0x2a, 0xe1, 0x03, 0x13, 0xaa,
        0x08, 0x71, 0x1d, 0x53, 0x08, 0xb1, 0x6d, 0xb2,
        0xa0, 0x6a, 0x68, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x80, 0x01, 0xf8, 0x37, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xd7, 0xfe, 0xff, 0x36,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x28, (uintptr_t)&_PySet_Update);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _START_EXECUTOR.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f94086c0      ldr     x0, [x22, #0x108]
    // 8: b9400008      ldr     w8, [x0]
    // c: 37f80088      tbnz    w8, #0x1f, 0x1c <_JIT_ENTRY+0x1c>
    // 10: 71000508      subs    w8, w8, #0x1
    // 14: b9000008      str     w8, [x0]
    // 18: 540000c0      b.eq    0x30 <_JIT_ENTRY+0x30>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 24: f90086df      str     xzr, [x22, #0x108]
    // 28: f84107fe      ldr     x30, [sp], #0x10
    // 2c: d61f0000      br      x0
    // 30: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 38: d63f0100      blr     x8
    // 3c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400000      ldr     x0, [x0]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f90086df      str     xzr, [x22, #0x108]
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0000      br      x0
    const unsigned char code_body[80] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xc0, 0x86, 0x40, 0xf9,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xdf, 0x86, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xdf, 0x86, 0x00, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x30, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 18: 8b292d08      add     x8, x8, w9, uxth #3
    // 1c: f9400d01      ldr     x1, [x8, #0x18]
    // 20: f9002295      str     x21, [x20, #0x40]
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_SetAttr
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_SetAttr
    // 2c: aa1303e0      mov     x0, x19
    // 30: aa1803e2      mov     x2, x24
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: 2a0003f7      mov     w23, w0
    // 44: b9400308      ldr     w8, [x24]
    // 48: 37f80108      tbnz    w8, #0x1f, 0x68 <_JIT_ENTRY+0x68>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000308      str     w8, [x24]
    // 54: 540000a1      b.ne    0x68 <_JIT_ENTRY+0x68>
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 5c: aa1803e0      mov     x0, x24
    // 60: f9400108      ldr     x8, [x8]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 64: d63f0100      blr     x8
    // 68: b9400268      ldr     w8, [x19]
    // 6c: 37f80088      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 70: 71000508      subs    w8, w8, #0x1
    // 74: b9000268      str     w8, [x19]
    // 78: 540000c0      b.eq    0x90 <_JIT_ENTRY+0x90>
    // 7c: 34000157      cbz     w23, 0xa4 <_JIT_ENTRY+0xa4>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    // 90: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 94: aa1303e0      mov     x0, x19
    // 98: f9400108      ldr     x8, [x8]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 9c: d63f0100      blr     x8
    // a0: 35ffff17      cbnz    w23, 0x80 <_JIT_ENTRY+0x80>
    // a4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // a8: d10042b5      sub     x21, x21, #0x10
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb8, 0x4e, 0x7f, 0xa9,
        0x08, 0x2d, 0x29, 0x8b, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0xe2, 0x03, 0x18, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0x2a, 0x08, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x57, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x17, 0xff, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)&PyObject_SetAttr);
    patch_aarch64_21rx(code + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x60, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xac, (uintptr_t)data + 0x10);
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_INSTANCE_VALUE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a9ff4ea9      ldp     x9, x19, [x21, #-0x10]!
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 10: 8b282268      add     x8, x19, w8, uxth
    // 14: f9400100      ldr     x0, [x8]
    // 18: f9000109      str     x9, [x8]
    // 1c: b4000140      cbz     x0, 0x44 <_JIT_ENTRY+0x44>
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80288      tbnz    w8, #0x1f, 0x74 <_JIT_ENTRY+0x74>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 54000221      b.ne    0x74 <_JIT_ENTRY+0x74>
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 3c: d63f0100      blr     x8
    // 40: 1400000d      b       0x74 <_JIT_ENTRY+0x74>
    // 44: f9400669      ldr     x9, [x19, #0x8]
    // 48: f9401129      ldr     x9, [x9, #0x20]
    // 4c: 8b090269      add     x9, x19, x9
    // 50: 3940012a      ldrb    w10, [x9]
    // 54: 9100212b      add     x11, x9, #0x8
    // 58: 3940052c      ldrb    w12, [x9, #0x1]
    // 5c: 4b0b0108      sub     w8, w8, w11
    // 60: 8b0a0d6a      add     x10, x11, x10, lsl #3
    // 64: 53037d08      lsr     w8, w8, #3
    // 68: 1100058b      add     w11, w12, #0x1
    // 6c: 3900052b      strb    w11, [x9, #0x1]
    // 70: 382c6948      strb    w8, [x10, x12]
    // 74: b9400268      ldr     w8, [x19]
    // 78: 37f80088      tbnz    w8, #0x1f, 0x88 <_JIT_ENTRY+0x88>
    // 7c: 71000508      subs    w8, w8, #0x1
    // 80: b9000268      str     w8, [x19]
    // 84: 540000a0      b.eq    0x98 <_JIT_ENTRY+0x98>
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 90: f84107fe      ldr     x30, [sp], #0x10
    // 94: d61f0000      br      x0
    // 98: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 9c: aa1303e0      mov     x0, x19
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // a4: d63f0100      blr     x8
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: f84107fe      ldr     x30, [sp], #0x10
    // b4: d61f0000      br      x0
    const unsigned char code_body[184] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa9, 0x4e, 0xff, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x68, 0x22, 0x28, 0x8b, 0x00, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x00, 0xf9, 0x40, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x02, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0x02, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x0d, 0x00, 0x00, 0x14, 0x69, 0x06, 0x40, 0xf9,
        0x29, 0x11, 0x40, 0xf9, 0x69, 0x02, 0x09, 0x8b,
        0x2a, 0x01, 0x40, 0x39, 0x2b, 0x21, 0x00, 0x91,
        0x2c, 0x05, 0x40, 0x39, 0x08, 0x01, 0x0b, 0x4b,
        0x6a, 0x0d, 0x0a, 0x8b, 0x08, 0x7d, 0x03, 0x53,
        0x8b, 0x05, 0x00, 0x11, 0x2b, 0x05, 0x00, 0x39,
        0x48, 0x69, 0x2c, 0x38, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x8);
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_SLOT.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // c: a9ff4ea9      ldp     x9, x19, [x21, #-0x10]!
    // 10: 92403d08      and     x8, x8, #0xffff
    // 14: f8686a60      ldr     x0, [x19, x8]
    // 18: f8286a69      str     x9, [x19, x8]
    // 1c: b4000120      cbz     x0, 0x40 <_JIT_ENTRY+0x40>
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f800e8      tbnz    w8, #0x1f, 0x40 <_JIT_ENTRY+0x40>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 54000081      b.ne    0x40 <_JIT_ENTRY+0x40>
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 38: f9400108      ldr     x8, [x8]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 3c: d63f0100      blr     x8
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000a0      b.eq    0x64 <_JIT_ENTRY+0x64>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: aa1303e0      mov     x0, x19
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 70: d63f0100      blr     x8
    // 74: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 78: f9400000      ldr     x0, [x0]
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 7c: f84107fe      ldr     x30, [sp], #0x10
    // 80: d61f0000      br      x0
    // 84: 00 00 00 00
    const unsigned char code_body[136] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa9, 0x4e, 0xff, 0xa9,
        0x08, 0x3d, 0x40, 0x92, 0x60, 0x6a, 0x68, 0xf8,
        0x69, 0x6a, 0x28, 0xf8, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x74, (uintptr_t)data + 0x8);
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_WITH_HINT.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f85e8262      ldur    x2, [x19, #-0x18]
    // c: b4000302      cbz     x2, 0x6c <_JIT_ENTRY+0x6c>
    // 10: f9401048      ldr     x8, [x2, #0x20]
    // 14: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPERAND0
    // 18: f9400129      ldr     x9, [x9]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPERAND0
    // 1c: f9400d0a      ldr     x10, [x8, #0x18]
    // 20: 92403d29      and     x9, x9, #0xffff
    // 24: eb09015f      cmp     x10, x9
    // 28: 54000229      b.ls    0x6c <_JIT_ENTRY+0x6c>
    // 2c: 3940290a      ldrb    w10, [x8, #0xa]
    // 30: 340001ea      cbz     w10, 0x6c <_JIT_ENTRY+0x6c>
    // 34: 3940250a      ldrb    w10, [x8, #0x9]
    // 38: f940028b      ldr     x11, [x20]
    // 3c: 5280002c      mov     w12, #0x1               // =1
    // 40: 9aca218a      lsl     x10, x12, x10
    // 44: 9000000c      adrp    x12, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 48: f940116b      ldr     x11, [x11, #0x20]
    // 4c: f940018c      ldr     x12, [x12]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 50: 8b0a0108      add     x8, x8, x10
    // 54: 8b2c2d6a      add     x10, x11, w12, uxth #3
    // 58: 8b091119      add     x25, x8, x9, lsl #4
    // 5c: f9400d43      ldr     x3, [x10, #0x18]
    // 60: f8420f28      ldr     x8, [x25, #0x20]!
    // 64: eb03011f      cmp     x8, x3
    // 68: 540000a0      b.eq    0x7c <_JIT_ENTRY+0x7c>
    // 6c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: f9400737      ldr     x23, [x25, #0x8]
    // 80: b4ffff77      cbz     x23, 0x6c <_JIT_ENTRY+0x6c>
    // 84: f85f02b8      ldur    x24, [x21, #-0x10]
    // 88: f9002295      str     x21, [x20, #0x40]
    // 8c: 39406040      ldrb    w0, [x2, #0x18]
    // 90: 340000e0      cbz     w0, 0xac <_JIT_ENTRY+0xac>
    // 94: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyDict_SendEvent
    // 98: 52800021      mov     w1, #0x1                // =1
    // 9c: aa1803e4      mov     x4, x24
    // a0: f9400108      ldr     x8, [x8]
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyDict_SendEvent
    // a4: d63f0100      blr     x8
    // a8: f9402295      ldr     x21, [x20, #0x40]
    // ac: f900229f      str     xzr, [x20, #0x40]
    // b0: f9000738      str     x24, [x25, #0x8]
    // b4: b94002e8      ldr     w8, [x23]
    // b8: 37f80108      tbnz    w8, #0x1f, 0xd8 <_JIT_ENTRY+0xd8>
    // bc: 71000508      subs    w8, w8, #0x1
    // c0: b90002e8      str     w8, [x23]
    // c4: 540000a1      b.ne    0xd8 <_JIT_ENTRY+0xd8>
    // c8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // cc: aa1703e0      mov     x0, x23
    // d0: f9400108      ldr     x8, [x8]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // d4: d63f0100      blr     x8
    // d8: b9400268      ldr     w8, [x19]
    // dc: 37f80108      tbnz    w8, #0x1f, 0xfc <_JIT_ENTRY+0xfc>
    // e0: 71000508      subs    w8, w8, #0x1
    // e4: b9000268      str     w8, [x19]
    // e8: 540000a1      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // ec: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // f0: aa1303e0      mov     x0, x19
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 100: d10042b5      sub     x21, x21, #0x10
    // 104: f9400000      ldr     x0, [x0]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d61f0000      br      x0
    const unsigned char code_body[272] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x62, 0x82, 0x5e, 0xf8, 0x02, 0x03, 0x00, 0xb4,
        0x48, 0x10, 0x40, 0xf9, 0x09, 0x00, 0x00, 0x90,
        0x29, 0x01, 0x40, 0xf9, 0x0a, 0x0d, 0x40, 0xf9,
        0x29, 0x3d, 0x40, 0x92, 0x5f, 0x01, 0x09, 0xeb,
        0x29, 0x02, 0x00, 0x54, 0x0a, 0x29, 0x40, 0x39,
        0xea, 0x01, 0x00, 0x34, 0x0a, 0x25, 0x40, 0x39,
        0x8b, 0x02, 0x40, 0xf9, 0x2c, 0x00, 0x80, 0x52,
        0x8a, 0x21, 0xca, 0x9a, 0x0c, 0x00, 0x00, 0x90,
        0x6b, 0x11, 0x40, 0xf9, 0x8c, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x0a, 0x8b, 0x6a, 0x2d, 0x2c, 0x8b,
        0x19, 0x11, 0x09, 0x8b, 0x43, 0x0d, 0x40, 0xf9,
        0x28, 0x0f, 0x42, 0xf8, 0x1f, 0x01, 0x03, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x37, 0x07, 0x40, 0xf9,
        0x77, 0xff, 0xff, 0xb4, 0xb8, 0x02, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x40, 0x60, 0x40, 0x39,
        0xe0, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x80, 0x52, 0xe4, 0x03, 0x18, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x38, 0x07, 0x00, 0xf9, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x42, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x44, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x94, (uintptr_t)&_PyDict_SendEvent);
    patch_aarch64_12x(code + 0xa0, (uintptr_t)&_PyDict_SendEvent);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xec, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xfc, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x18);
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_DEREF.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: 8b282e88      add     x8, x20, w8, uxth #3
    // 18: f9402908      ldr     x8, [x8, #0x50]
    // 1c: f9400900      ldr     x0, [x8, #0x10]
    // 20: f9000909      str     x9, [x8, #0x10]
    // 24: b4000120      cbz     x0, 0x48 <_JIT_ENTRY+0x48>
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f800e8      tbnz    w8, #0x1f, 0x48 <_JIT_ENTRY+0x48>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 54000081      b.ne    0x48 <_JIT_ENTRY+0x48>
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 44: d63f0100      blr     x8
    // 48: f9402288      ldr     x8, [x20, #0x40]
    // 4c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f900229f      str     xzr, [x20, #0x40]
    // 58: d1002115      sub     x21, x8, #0x8
    // 5c: f84107fe      ldr     x30, [sp], #0x10
    // 60: d61f0000      br      x0
    // 64: 00 00 00 00
    const unsigned char code_body[104] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x88, 0x2e, 0x28, 0x8b,
        0x08, 0x29, 0x40, 0xf9, 0x00, 0x09, 0x40, 0xf9,
        0x09, 0x09, 0x00, 0xf9, 0x20, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x88, 0x22, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x4c, (uintptr_t)data + 0x8);
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f8ea9      ldr     x9, [x21, #-0x8]!
    // 10: 8b282e88      add     x8, x20, w8, uxth #3
    // 14: f9402900      ldr     x0, [x8, #0x50]
    // 18: f9002909      str     x9, [x8, #0x50]
    // 1c: b40000c0      cbz     x0, 0x34 <_JIT_ENTRY+0x34>
    // 20: b9400008      ldr     w8, [x0]
    // 24: 37f80088      tbnz    w8, #0x1f, 0x34 <_JIT_ENTRY+0x34>
    // 28: 71000508      subs    w8, w8, #0x1
    // 2c: b9000008      str     w8, [x0]
    // 30: 540000a0      b.eq    0x44 <_JIT_ENTRY+0x44>
    // 34: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 38: f9400000      ldr     x0, [x0]
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 3c: f84107fe      ldr     x30, [sp], #0x10
    // 40: d61f0000      br      x0
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 58: f84107fe      ldr     x30, [sp], #0x10
    // 5c: d61f0000      br      x0
    const unsigned char code_body[96] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa9, 0x8e, 0x5f, 0xf8,
        0x88, 0x2e, 0x28, 0x8b, 0x00, 0x29, 0x40, 0xf9,
        0x09, 0x29, 0x00, 0xf9, 0xc0, 0x00, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x34, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x8);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_0.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9402a80      ldr     x0, [x20, #0x50]
    // c: f9002a88      str     x8, [x20, #0x50]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x2a, 0x40, 0xf9, 0x88, 0x2a, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_1.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9402e80      ldr     x0, [x20, #0x58]
    // c: f9002e88      str     x8, [x20, #0x58]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x2e, 0x40, 0xf9, 0x88, 0x2e, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_2.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9403280      ldr     x0, [x20, #0x60]
    // c: f9003288      str     x8, [x20, #0x60]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x32, 0x40, 0xf9, 0x88, 0x32, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_3.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9403680      ldr     x0, [x20, #0x68]
    // c: f9003688      str     x8, [x20, #0x68]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x36, 0x40, 0xf9, 0x88, 0x36, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_4.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9403a80      ldr     x0, [x20, #0x70]
    // c: f9003a88      str     x8, [x20, #0x70]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x3a, 0x40, 0xf9, 0x88, 0x3a, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_5.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9403e80      ldr     x0, [x20, #0x78]
    // c: f9003e88      str     x8, [x20, #0x78]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x3e, 0x40, 0xf9, 0x88, 0x3e, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_6.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9404280      ldr     x0, [x20, #0x80]
    // c: f9004288      str     x8, [x20, #0x80]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x42, 0x40, 0xf9, 0x88, 0x42, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_7.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f8ea8      ldr     x8, [x21, #-0x8]!
    // 8: f9404680      ldr     x0, [x20, #0x88]
    // c: f9004688      str     x8, [x20, #0x88]
    // 10: b40000c0      cbz     x0, 0x28 <_JIT_ENTRY+0x28>
    // 14: b9400008      ldr     w8, [x0]
    // 18: 37f80088      tbnz    w8, #0x1f, 0x28 <_JIT_ENTRY+0x28>
    // 1c: 71000508      subs    w8, w8, #0x1
    // 20: b9000008      str     w8, [x0]
    // 24: 540000a0      b.eq    0x38 <_JIT_ENTRY+0x38>
    // 28: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f84107fe      ldr     x30, [sp], #0x10
    // 34: d61f0000      br      x0
    // 38: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000038:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 3c: f9400108      ldr     x8, [x8]
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 40: d63f0100      blr     x8
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f84107fe      ldr     x30, [sp], #0x10
    // 50: d61f0000      br      x0
    // 54: 00 00 00 00
    const unsigned char code_body[88] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa8, 0x8e, 0x5f, 0xf8,
        0x80, 0x46, 0x40, 0xf9, 0x88, 0x46, 0x00, 0xf9,
        0xc0, 0x00, 0x00, 0xb4, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xa0, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0x28, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x38, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data);
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_GLOBAL.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f82b3      ldur    x19, [x21, #-0x8]
    // 18: f9400e80      ldr     x0, [x20, #0x18]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: aa1303e2      mov     x2, x19
    // 24: f9400d01      ldr     x1, [x8, #0x18]
    // 28: f9002295      str     x21, [x20, #0x40]
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_SetItem
    // 30: f9400108      ldr     x8, [x8]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_SetItem
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 540000c0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 54: 34000160      cbz     w0, 0x80 <_JIT_ENTRY+0x80>
    // 58: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 5c: f9400000      ldr     x0, [x0]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: 2a0003f7      mov     w23, w0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: 35fffef7      cbnz    w23, 0x58 <_JIT_ENTRY+0x58>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: d10022b5      sub     x21, x21, #0x8
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0xb3, 0x82, 0x5f, 0xf8,
        0x80, 0x0e, 0x40, 0xf9, 0x08, 0x2d, 0x29, 0x8b,
        0xe2, 0x03, 0x13, 0xaa, 0x01, 0x0d, 0x40, 0xf9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0xfe, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x22, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: ERROR_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x2c, (uintptr_t)&PyDict_SetItem);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x88, (uintptr_t)data + 0x10);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_NAME.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f9400288      ldr     x8, [x20]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // c: f9401108      ldr     x8, [x8, #0x20]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f9401680      ldr     x0, [x20, #0x28]
    // 18: f85f82b3      ldur    x19, [x21, #-0x8]
    // 1c: 8b292d08      add     x8, x8, w9, uxth #3
    // 20: f9400d03      ldr     x3, [x8, #0x18]
    // 24: b4000140      cbz     x0, 0x4c <_JIT_ENTRY+0x4c>
    // 28: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // 2c: f9400408      ldr     x8, [x0, #0x8]
    // 30: f9400129      ldr     x9, [x9]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 34: f9002295      str     x21, [x20, #0x40]
    // 38: eb09011f      cmp     x8, x9
    // 3c: 54000320      b.eq    0xa0 <_JIT_ENTRY+0xa0>
    // 40: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_SetItem
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_SetItem
    // 48: 14000018      b       0xa8 <_JIT_ENTRY+0xa8>
    // 4c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyExc_SystemError
    // 50: 90000002      adrp    x2, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       ??_C@_0CA@PHPKHPGD@no?5locals?5found?5when?5storing?5?$CFR?$AA@
    // 54: 91000042      add     x2, x2, #0x0
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12A       ??_C@_0CA@PHPKHPGD@no?5locals?5found?5when?5storing?5?$CFR?$AA@
    // 58: f9400108      ldr     x8, [x8]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyExc_SystemError
    // 5c: f9002295      str     x21, [x20, #0x40]
    // 60: aa1603e0      mov     x0, x22
    // 64: f9400101      ldr     x1, [x8]
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyErr_Format
    // 6c: f9400108      ldr     x8, [x8]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyErr_Format
    // 70: d63f0100      blr     x8
    // 74: f9402295      ldr     x21, [x20, #0x40]
    // 78: f900229f      str     xzr, [x20, #0x40]
    // 7c: b9400268      ldr     w8, [x19]
    // 80: 37f80088      tbnz    w8, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // 84: 71000508      subs    w8, w8, #0x1
    // 88: b9000268      str     w8, [x19]
    // 8c: 540003c0      b.eq    0x104 <_JIT_ENTRY+0x104>
    // 90: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 94: f9400000      ldr     x0, [x0]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 98: f84107fe      ldr     x30, [sp], #0x10
    // 9c: d61f0000      br      x0
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyDict_SetItem
    // a4: f9400108      ldr     x8, [x8]
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyDict_SetItem
    // a8: aa0303e1      mov     x1, x3
    // ac: aa1303e2      mov     x2, x19
    // b0: d63f0100      blr     x8
    // b4: f9402295      ldr     x21, [x20, #0x40]
    // b8: f900229f      str     xzr, [x20, #0x40]
    // bc: b9400268      ldr     w8, [x19]
    // c0: 37f80088      tbnz    w8, #0x1f, 0xd0 <_JIT_ENTRY+0xd0>
    // c4: 71000508      subs    w8, w8, #0x1
    // c8: b9000268      str     w8, [x19]
    // cc: 540000e0      b.eq    0xe8 <_JIT_ENTRY+0xe8>
    // d0: 35fffe00      cbnz    w0, 0x90 <_JIT_ENTRY+0x90>
    // d4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d8: d10022b5      sub     x21, x21, #0x8
    // dc: f9400000      ldr     x0, [x0]
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // e0: f84107fe      ldr     x30, [sp], #0x10
    // e4: d61f0000      br      x0
    // e8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000e8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // ec: 2a0003f7      mov     w23, w0
    // f0: aa1303e0      mov     x0, x19
    // f4: f9400108      ldr     x8, [x8]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // f8: d63f0100      blr     x8
    // fc: 35fffcb7      cbnz    w23, 0x90 <_JIT_ENTRY+0x90>
    // 100: 17fffff5      b       0xd4 <_JIT_ENTRY+0xd4>
    // 104: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 108: aa1303e0      mov     x0, x19
    // 10c: f9400108      ldr     x8, [x8]
    // 000000000000010c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 110: d63f0100      blr     x8
    // 114: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000114:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 118: f9400000      ldr     x0, [x0]
    // 0000000000000118:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 11c: f84107fe      ldr     x30, [sp], #0x10
    // 120: d61f0000      br      x0
    // 124: 00 00 00 00
    const unsigned char code_body[296] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x88, 0x02, 0x40, 0xf9,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x11, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x80, 0x16, 0x40, 0xf9,
        0xb3, 0x82, 0x5f, 0xf8, 0x08, 0x2d, 0x29, 0x8b,
        0x03, 0x0d, 0x40, 0xf9, 0x40, 0x01, 0x00, 0xb4,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x04, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x20, 0x03, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x18, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x90,
        0x02, 0x00, 0x00, 0x90, 0x42, 0x00, 0x00, 0x91,
        0x08, 0x01, 0x40, 0xf9, 0x95, 0x22, 0x00, 0xf9,
        0xe0, 0x03, 0x16, 0xaa, 0x01, 0x01, 0x40, 0xf9,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x03, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x03, 0xaa, 0xe2, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0x00, 0xfe, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0xb5, 0x22, 0x00, 0xd1, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb7, 0xfc, 0xff, 0x35,
        0xf5, 0xff, 0xff, 0x17, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: OPARG
    // 28: &PyDict_Type+0x0
    // 30: &PyExc_SystemError+0x0
    // 38: ERROR_TARGET
    // 40: CONTINUE
    const unsigned char data_body[72] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x40, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data + 0x20);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x28);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x40, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_21rx(code + 0x4c, (uintptr_t)data + 0x30);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data);
    patch_aarch64_12(code + 0x54, (uintptr_t)data);
    patch_aarch64_12x(code + 0x58, (uintptr_t)data + 0x30);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)&_PyErr_Format);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)data + 0x38);
    patch_aarch64_33rx(code + 0xa0, (uintptr_t)&PyDict_SetItem);
    patch_aarch64_21rx(code + 0xd4, (uintptr_t)data + 0x40);
    patch_aarch64_12x(code + 0xdc, (uintptr_t)data + 0x40);
    patch_aarch64_21rx(code + 0xe8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xf4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x104, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x10c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x114, (uintptr_t)data + 0x38);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SLICE.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f06a0      ldp     x0, x1, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyBuildSlice_ConsumeRefs
    // c: a97e4eb7      ldp     x23, x19, [x21, #-0x20]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyBuildSlice_ConsumeRefs
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: aa0003f8      mov     x24, x0
    // 24: f900229f      str     xzr, [x20, #0x40]
    // 28: b4000320      cbz     x0, 0x8c <_JIT_ENTRY+0x8c>
    // 2c: d10042a8      sub     x8, x21, #0x10
    // 30: aa1303e0      mov     x0, x19
    // 34: aa1803e1      mov     x1, x24
    // 38: f9002288      str     x8, [x20, #0x40]
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_SetItem
    // 40: aa1703e2      mov     x2, x23
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_SetItem
    // 48: d63f0100      blr     x8
    // 4c: f9402295      ldr     x21, [x20, #0x40]
    // 50: f900229f      str     xzr, [x20, #0x40]
    // 54: b9400308      ldr     w8, [x24]
    // 58: 37f80148      tbnz    w8, #0x1f, 0x80 <_JIT_ENTRY+0x80>
    // 5c: 71000508      subs    w8, w8, #0x1
    // 60: b9000308      str     w8, [x24]
    // 64: 540000e1      b.ne    0x80 <_JIT_ENTRY+0x80>
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: 2a0003f9      mov     w25, w0
    // 70: aa1803e0      mov     x0, x24
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: 2a1903e0      mov     w0, w25
    // 80: 7100001f      cmp     w0, #0x0
    // 84: 910042b5      add     x21, x21, #0x10
    // 88: 1a9f17f8      cset    w24, eq
    // 8c: b94002e8      ldr     w8, [x23]
    // 90: 37f80108      tbnz    w8, #0x1f, 0xb0 <_JIT_ENTRY+0xb0>
    // 94: 71000508      subs    w8, w8, #0x1
    // 98: b90002e8      str     w8, [x23]
    // 9c: 540000a1      b.ne    0xb0 <_JIT_ENTRY+0xb0>
    // a0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a4: aa1703e0      mov     x0, x23
    // a8: f9400108      ldr     x8, [x8]
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // ac: d63f0100      blr     x8
    // b0: b9400268      ldr     w8, [x19]
    // b4: 37f80088      tbnz    w8, #0x1f, 0xc4 <_JIT_ENTRY+0xc4>
    // b8: 71000508      subs    w8, w8, #0x1
    // bc: b9000268      str     w8, [x19]
    // c0: 540000e0      b.eq    0xdc <_JIT_ENTRY+0xdc>
    // c4: 36000178      tbz     w24, #0x0, 0xf0 <_JIT_ENTRY+0xf0>
    // c8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // cc: d10082b5      sub     x21, x21, #0x20
    // d0: f9400000      ldr     x0, [x0]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d4: f84107fe      ldr     x30, [sp], #0x10
    // d8: d61f0000      br      x0
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e0: aa1303e0      mov     x0, x19
    // e4: f9400108      ldr     x8, [x8]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e8: d63f0100      blr     x8
    // ec: 3707fef8      tbnz    w24, #0x0, 0xc8 <_JIT_ENTRY+0xc8>
    // f0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // f4: f9400000      ldr     x0, [x0]
    // 00000000000000f4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // f8: f84107fe      ldr     x30, [sp], #0x10
    // fc: d61f0000      br      x0
    const unsigned char code_body[256] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x06, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb7, 0x4e, 0x7e, 0xa9,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0xf8, 0x03, 0x00, 0xaa, 0x9f, 0x22, 0x00, 0xf9,
        0x20, 0x03, 0x00, 0xb4, 0xa8, 0x42, 0x00, 0xd1,
        0xe0, 0x03, 0x13, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0x88, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xe2, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x08, 0x03, 0x40, 0xb9,
        0x48, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x03, 0x00, 0xb9, 0xe1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xf9, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x19, 0x2a,
        0x1f, 0x00, 0x00, 0x71, 0xb5, 0x42, 0x00, 0x91,
        0xf8, 0x17, 0x9f, 0x1a, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xe0, 0x00, 0x00, 0x54, 0x78, 0x01, 0x00, 0x36,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x82, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xf8, 0xfe, 0x07, 0x37,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_12x(code + 0x44, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xa0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xa8, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xc8, (uintptr_t)data);
    patch_aarch64_12x(code + 0xd0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xf0, (uintptr_t)data + 0x8);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: a97f4eb8      ldp     x24, x19, [x21, #-0x10]
    // 8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_SetItem
    // c: f85e82b9      ldur    x25, [x21, #-0x18]
    // 10: f9002295      str     x21, [x20, #0x40]
    // 14: f9400108      ldr     x8, [x8]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_SetItem
    // 18: aa1803e0      mov     x0, x24
    // 1c: aa1303e1      mov     x1, x19
    // 20: aa1903e2      mov     x2, x25
    // 24: d63f0100      blr     x8
    // 28: f9402295      ldr     x21, [x20, #0x40]
    // 2c: f900229f      str     xzr, [x20, #0x40]
    // 30: 2a0003f7      mov     w23, w0
    // 34: b9400328      ldr     w8, [x25]
    // 38: 37f80108      tbnz    w8, #0x1f, 0x58 <_JIT_ENTRY+0x58>
    // 3c: 71000508      subs    w8, w8, #0x1
    // 40: b9000328      str     w8, [x25]
    // 44: 540000a1      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 48: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 4c: aa1903e0      mov     x0, x25
    // 50: f9400108      ldr     x8, [x8]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 54: d63f0100      blr     x8
    // 58: b9400308      ldr     w8, [x24]
    // 5c: 37f80108      tbnz    w8, #0x1f, 0x7c <_JIT_ENTRY+0x7c>
    // 60: 71000508      subs    w8, w8, #0x1
    // 64: b9000308      str     w8, [x24]
    // 68: 540000a1      b.ne    0x7c <_JIT_ENTRY+0x7c>
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 70: aa1803e0      mov     x0, x24
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: b9400268      ldr     w8, [x19]
    // 80: 37f80088      tbnz    w8, #0x1f, 0x90 <_JIT_ENTRY+0x90>
    // 84: 71000508      subs    w8, w8, #0x1
    // 88: b9000268      str     w8, [x19]
    // 8c: 540000c0      b.eq    0xa4 <_JIT_ENTRY+0xa4>
    // 90: 34000157      cbz     w23, 0xb8 <_JIT_ENTRY+0xb8>
    // 94: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 98: f9400000      ldr     x0, [x0]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 9c: f84107fe      ldr     x30, [sp], #0x10
    // a0: d61f0000      br      x0
    // a4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000a4:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // a8: aa1303e0      mov     x0, x19
    // ac: f9400108      ldr     x8, [x8]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // b0: d63f0100      blr     x8
    // b4: 35ffff17      cbnz    w23, 0x94 <_JIT_ENTRY+0x94>
    // b8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // bc: d10062b5      sub     x21, x21, #0x18
    // c0: f9400000      ldr     x0, [x0]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // c4: f84107fe      ldr     x30, [sp], #0x10
    // c8: d61f0000      br      x0
    // cc: 00 00 00 00
    const unsigned char code_body[208] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb8, 0x4e, 0x7f, 0xa9,
        0x08, 0x00, 0x00, 0x90, 0xb9, 0x82, 0x5e, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x01, 0x40, 0xf9,
        0xe0, 0x03, 0x18, 0xaa, 0xe1, 0x03, 0x13, 0xaa,
        0xe2, 0x03, 0x19, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xf7, 0x03, 0x00, 0x2a, 0x28, 0x03, 0x40, 0xb9,
        0x08, 0x01, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x28, 0x03, 0x00, 0xb9, 0xa1, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x19, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x03, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x03, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x18, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xc0, 0x00, 0x00, 0x54,
        0x57, 0x01, 0x00, 0x34, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x17, 0xff, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x62, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: ERROR_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_12x(code + 0x14, (uintptr_t)&PyObject_SetItem);
    patch_aarch64_21rx(code + 0x48, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x94, (uintptr_t)data);
    patch_aarch64_21rx(code + 0xa4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xac, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)data + 0x8);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_DICT.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f02b3      ldur    x19, [x21, #-0x10]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyDict_Type
    // c: f9400668      ldr     x8, [x19, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyDict_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: f85e82a2      ldur    x2, [x21, #-0x18]
    // 30: f85f82a1      ldur    x1, [x21, #-0x8]
    // 34: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyDict_SetItem_Take2
    // 38: f9002295      str     x21, [x20, #0x40]
    // 3c: aa1303e0      mov     x0, x19
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyDict_SetItem_Take2
    // 44: d63f0100      blr     x8
    // 48: f9402295      ldr     x21, [x20, #0x40]
    // 4c: f900229f      str     xzr, [x20, #0x40]
    // 50: b9400268      ldr     w8, [x19]
    // 54: 37f80088      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000268      str     w8, [x19]
    // 60: 540000c0      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 64: 34000160      cbz     w0, 0x90 <_JIT_ENTRY+0x90>
    // 68: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 6c: f9400000      ldr     x0, [x0]
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: 2a0003f7      mov     w23, w0
    // 80: aa1303e0      mov     x0, x19
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: 35fffef7      cbnz    w23, 0x68 <_JIT_ENTRY+0x68>
    // 90: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 94: d10062b5      sub     x21, x21, #0x18
    // 98: f9400000      ldr     x0, [x0]
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 9c: f84107fe      ldr     x30, [sp], #0x10
    // a0: d61f0000      br      x0
    // a4: 00 00 00 00
    const unsigned char code_body[168] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x02, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x68, 0x06, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0xa2, 0x82, 0x5e, 0xf8,
        0xa1, 0x82, 0x5f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x00, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xc0, 0x00, 0x00, 0x54, 0x60, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xf7, 0xfe, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x90, 0xb5, 0x62, 0x00, 0xd1,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: ERROR_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x34, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_aarch64_12x(code + 0x40, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_aarch64_33rx(code + 0x68, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x84, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x90, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x98, (uintptr_t)data + 0x18);
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_LIST_INT.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: f85e8ea9      ldr     x9, [x21, #-0x18]!
    // c: f9400ab7      ldr     x23, [x21, #0x10]
    // 10: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // 14: f94006ea      ldr     x10, [x23, #0x8]
    // 18: f940016b      ldr     x11, [x11]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 1c: eb0b015f      cmp     x10, x11
    // 20: 540006e1      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // 24: f94006b3      ldr     x19, [x21, #0x8]
    // 28: 9000000b      adrp    x11, 0x0 <_JIT_ENTRY>
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyList_Type
    // 2c: f940066a      ldr     x10, [x19, #0x8]
    // 30: f940016b      ldr     x11, [x11]
    // 0000000000000030:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyList_Type
    // 34: eb0b015f      cmp     x10, x11
    // 38: 54000621      b.ne    0xfc <_JIT_ENTRY+0xfc>
    // 3c: f9400aea      ldr     x10, [x23, #0x10]
    // 40: f100255f      cmp     x10, #0x9
    // 44: 540005c2      b.hs    0xfc <_JIT_ENTRY+0xfc>
    // 48: b9401aea      ldr     w10, [x23, #0x18]
    // 4c: f9400a6b      ldr     x11, [x19, #0x10]
    // 50: eb0a017f      cmp     x11, x10
    // 54: 5400054d      b.le    0xfc <_JIT_ENTRY+0xfc>
    // 58: f9400e68      ldr     x8, [x19, #0x18]
    // 5c: f86a7900      ldr     x0, [x8, x10, lsl #3]
    // 60: f82a7909      str     x9, [x8, x10, lsl #3]
    // 64: b9400008      ldr     w8, [x0]
    // 68: 37f800e8      tbnz    w8, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 6c: 71000508      subs    w8, w8, #0x1
    // 70: b9000008      str     w8, [x0]
    // 74: 54000081      b.ne    0x84 <_JIT_ENTRY+0x84>
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 80: d63f0100      blr     x8
    // 84: b94002e8      ldr     w8, [x23]
    // 88: 37f80208      tbnz    w8, #0x1f, 0xc8 <_JIT_ENTRY+0xc8>
    // 8c: 71000508      subs    w8, w8, #0x1
    // 90: b90002e8      str     w8, [x23]
    // 94: 540001a1      b.ne    0xc8 <_JIT_ENTRY+0xc8>
    // 98: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000098:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 9c: f9400129      ldr     x9, [x9]
    // 000000000000009c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // a0: f9528d28      ldr     x8, [x9, #0x2518]
    // a4: b40000a8      cbz     x8, 0xb8 <_JIT_ENTRY+0xb8>
    // a8: f9529122      ldr     x2, [x9, #0x2520]
    // ac: aa1703e0      mov     x0, x23
    // b0: 52800021      mov     w1, #0x1                // =1
    // b4: d63f0100      blr     x8
    // b8: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000b8:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyLong_ExactDealloc
    // bc: aa1703e0      mov     x0, x23
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyLong_ExactDealloc
    // c4: d63f0100      blr     x8
    // c8: b9400268      ldr     w8, [x19]
    // cc: 37f80108      tbnz    w8, #0x1f, 0xec <_JIT_ENTRY+0xec>
    // d0: 71000508      subs    w8, w8, #0x1
    // d4: b9000268      str     w8, [x19]
    // d8: 540000a1      b.ne    0xec <_JIT_ENTRY+0xec>
    // dc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000dc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // e0: aa1303e0      mov     x0, x19
    // e4: f9400108      ldr     x8, [x8]
    // 00000000000000e4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // e8: d63f0100      blr     x8
    // ec: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ec:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // f0: f9400000      ldr     x0, [x0]
    // 00000000000000f0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // f4: f84107fe      ldr     x30, [sp], #0x10
    // f8: d61f0000      br      x0
    // fc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000fc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 100: aa0803f5      mov     x21, x8
    // 104: f9400000      ldr     x0, [x0]
    // 0000000000000104:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 108: f84107fe      ldr     x30, [sp], #0x10
    // 10c: d61f0000      br      x0
    const unsigned char code_body[272] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xe8, 0x03, 0x15, 0xaa,
        0xa9, 0x8e, 0x5e, 0xf8, 0xb7, 0x0a, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0xea, 0x06, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0xe1, 0x06, 0x00, 0x54, 0xb3, 0x06, 0x40, 0xf9,
        0x0b, 0x00, 0x00, 0x90, 0x6a, 0x06, 0x40, 0xf9,
        0x6b, 0x01, 0x40, 0xf9, 0x5f, 0x01, 0x0b, 0xeb,
        0x21, 0x06, 0x00, 0x54, 0xea, 0x0a, 0x40, 0xf9,
        0x5f, 0x25, 0x00, 0xf1, 0xc2, 0x05, 0x00, 0x54,
        0xea, 0x1a, 0x40, 0xb9, 0x6b, 0x0a, 0x40, 0xf9,
        0x7f, 0x01, 0x0a, 0xeb, 0x4d, 0x05, 0x00, 0x54,
        0x68, 0x0e, 0x40, 0xf9, 0x00, 0x79, 0x6a, 0xf8,
        0x09, 0x79, 0x2a, 0xf8, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe8, 0x02, 0x40, 0xb9,
        0x08, 0x02, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0xe8, 0x02, 0x00, 0xb9, 0xa1, 0x01, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x29, 0x01, 0x40, 0xf9,
        0x28, 0x8d, 0x52, 0xf9, 0xa8, 0x00, 0x00, 0xb4,
        0x22, 0x91, 0x52, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x21, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xe0, 0x03, 0x17, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x68, 0x02, 0x40, 0xb9, 0x08, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0xa1, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0xf5, 0x03, 0x08, 0xaa, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x10, (uintptr_t)data);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x30, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x98, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0xb8, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_12x(code + 0xc0, (uintptr_t)&_PyLong_ExactDealloc);
    patch_aarch64_21rx(code + 0xdc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0xe4, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xec, (uintptr_t)data + 0x18);
    patch_aarch64_21rx(code + 0xfc, (uintptr_t)data + 0x20);
    patch_aarch64_12x(code + 0x104, (uintptr_t)data + 0x20);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SWAP.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f85f82a9      ldur    x9, [x21, #-0x8]
    // 10: cb282ea8      sub     x8, x21, w8, uxth #3
    // 14: f940010a      ldr     x10, [x8]
    // 18: f9000109      str     x9, [x8]
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: f81f82aa      stur    x10, [x21, #-0x8]
    // 24: d61f0000      br      x0
    const unsigned char code_body[40] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xa9, 0x82, 0x5f, 0xf8,
        0xa8, 0x2e, 0x28, 0xcb, 0x0a, 0x01, 0x40, 0xf9,
        0x09, 0x01, 0x00, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xaa, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x1c, (uintptr_t)data + 0x8);
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TIER2_RESUME_CHECK.o:      file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f9400ec8      ldr     x8, [x22, #0x18]
    // 4: f2401d1f      tst     x8, #0xff
    // 8: 54000080      b.eq    0x18 <_JIT_ENTRY+0x18>
    // c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 10: f9400000      ldr     x0, [x0]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 14: d61f0000      br      x0
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 20: d61f0000      br      x0
    // 24: 00 00 00 00
    const unsigned char code_body[40] = {
        0xc8, 0x0e, 0x40, 0xf9, 0x1f, 0x1d, 0x40, 0xf2,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_IsTrue
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_IsTrue
    // 14: aa1303e0      mov     x0, x19
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b9400268      ldr     w8, [x19]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000268      str     w8, [x19]
    // 34: 540001a0      b.eq    0x68 <_JIT_ENTRY+0x68>
    // 38: 37f80260      tbnz    w0, #0x1f, 0x84 <_JIT_ENTRY+0x84>
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 40: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 44: 7100001f      cmp     w0, #0x0
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 4c: f9400129      ldr     x9, [x9]
    // 000000000000004c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 50: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 54: f9400000      ldr     x0, [x0]
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 58: 9a880128      csel    x8, x9, x8, eq
    // 5c: f81f82a8      stur    x8, [x21, #-0x8]
    // 60: f84107fe      ldr     x30, [sp], #0x10
    // 64: d61f0000      br      x0
    // 68: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 6c: 2a0003f7      mov     w23, w0
    // 70: aa1303e0      mov     x0, x19
    // 74: f9400108      ldr     x8, [x8]
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 78: d63f0100      blr     x8
    // 7c: 2a1703e0      mov     w0, w23
    // 80: 36fffdf7      tbz     w23, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xa0, 0x01, 0x00, 0x54,
        0x60, 0x02, 0xf8, 0x37, 0x08, 0x00, 0x00, 0x90,
        0x09, 0x00, 0x00, 0x90, 0x1f, 0x00, 0x00, 0x71,
        0x08, 0x01, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x28, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0x2a,
        0xf7, 0xfd, 0xff, 0x36, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&PyObject_IsTrue);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x40, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x48, (uintptr_t)data);
    patch_aarch64_12x(code + 0x4c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x68, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x18);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_BOOL.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f85f82a8      ldur    x8, [x21, #-0x8]
    // 4: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyBool_Type
    // 8: f9400508      ldr     x8, [x8, #0x8]
    // c: f9400129      ldr     x9, [x9]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyBool_Type
    // 10: eb09011f      cmp     x8, x9
    // 14: 54000080      b.eq    0x24 <_JIT_ENTRY+0x24>
    // 18: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 1c: f9400000      ldr     x0, [x0]
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 20: d61f0000      br      x0
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400000      ldr     x0, [x0]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 2c: d61f0000      br      x0
    const unsigned char code_body[48] = {
        0xa8, 0x82, 0x5f, 0xf8, 0x09, 0x00, 0x00, 0x90,
        0x08, 0x05, 0x40, 0xf9, 0x29, 0x01, 0x40, 0xf9,
        0x1f, 0x01, 0x09, 0xeb, 0x80, 0x00, 0x00, 0x54,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyBool_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x18, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x24, (uintptr_t)data + 0x10);
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_INT.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyLong_Type
    // c: f9400408      ldr     x8, [x0, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyLong_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: f9400808      ldr     x8, [x0, #0x10]
    // 30: 92400508      and     x8, x8, #0x3
    // 34: f100051f      cmp     x8, #0x1
    // 38: 54000101      b.ne    0x58 <_JIT_ENTRY+0x58>
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 40: f9400108      ldr     x8, [x8]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 44: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 48: f9400000      ldr     x0, [x0]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 4c: f81f82a8      stur    x8, [x21, #-0x8]
    // 50: f84107fe      ldr     x30, [sp], #0x10
    // 54: d61f0000      br      x0
    // 58: b9400008      ldr     w8, [x0]
    // 5c: 37f800e8      tbnz    w8, #0x1f, 0x78 <_JIT_ENTRY+0x78>
    // 60: 71000508      subs    w8, w8, #0x1
    // 64: b9000008      str     w8, [x0]
    // 68: 54000081      b.ne    0x78 <_JIT_ENTRY+0x78>
    // 6c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 70: f9400108      ldr     x8, [x8]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 74: d63f0100      blr     x8
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 7c: f9400108      ldr     x8, [x8]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 88: f81f82a8      stur    x8, [x21, #-0x8]
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: 00 00 00 00
    const unsigned char code_body[152] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x04, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x08, 0x40, 0xf9,
        0x08, 0x05, 0x40, 0x92, 0x1f, 0x05, 0x00, 0xf1,
        0x01, 0x01, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x78, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x18);
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_LIST.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyList_Type
    // c: f9400408      ldr     x8, [x0, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyList_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: b9400008      ldr     w8, [x0]
    // 30: f9400813      ldr     x19, [x0, #0x10]
    // 34: 37f800e8      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 38: 71000508      subs    w8, w8, #0x1
    // 3c: b9000008      str     w8, [x0]
    // 40: 54000081      b.ne    0x50 <_JIT_ENTRY+0x50>
    // 44: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 48: f9400108      ldr     x8, [x8]
    // 0000000000000048:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 4c: d63f0100      blr     x8
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 54: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 58: f100027f      cmp     x19, #0x0
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 60: f9400129      ldr     x9, [x9]
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 64: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: 9a880128      csel    x8, x9, x8, eq
    // 70: f81f82a8      stur    x8, [x21, #-0x8]
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x04, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x40, 0xb9,
        0x13, 0x08, 0x40, 0xf9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x09, 0x00, 0x00, 0x90,
        0x7f, 0x02, 0x00, 0xf1, 0x08, 0x01, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x28, 0x01, 0x88, 0x9a,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyList_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_TrueStruct+0x0
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x44, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x54, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x60, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x20);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_NONE.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 4: f85f82a8      ldur    x8, [x21, #-0x8]
    // 8: f9400129      ldr     x9, [x9]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // c: eb09011f      cmp     x8, x9
    // 10: 54000080      b.eq    0x20 <_JIT_ENTRY+0x20>
    // 14: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 18: f9400000      ldr     x0, [x0]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 1c: d61f0000      br      x0
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 24: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 2c: f9400000      ldr     x0, [x0]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 30: f81f82a8      stur    x8, [x21, #-0x8]
    // 34: d61f0000      br      x0
    const unsigned char code_body[56] = {
        0x09, 0x00, 0x00, 0x90, 0xa8, 0x82, 0x5f, 0xf8,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x10);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)data + 0x18);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)data + 0x18);
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_STR.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyUnicode_Type
    // c: f9400408      ldr     x8, [x0, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyUnicode_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540000a0      b.eq    0x2c <_JIT_ENTRY+0x2c>
    // 1c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000001c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 20: f9400000      ldr     x0, [x0]
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 24: f84107fe      ldr     x30, [sp], #0x10
    // 28: d61f0000      br      x0
    // 2c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__PyRuntime
    // 30: 5290d809      mov     w9, #0x86c0             // =34496
    // 34: f9400108      ldr     x8, [x8]
    // 0000000000000034:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__PyRuntime
    // 38: 8b090108      add     x8, x8, x9
    // 3c: eb08001f      cmp     x0, x8
    // 40: 54000200      b.eq    0x80 <_JIT_ENTRY+0x80>
    // 44: b9400008      ldr     w8, [x0]
    // 48: 37f800e8      tbnz    w8, #0x1f, 0x64 <_JIT_ENTRY+0x64>
    // 4c: 71000508      subs    w8, w8, #0x1
    // 50: b9000008      str     w8, [x0]
    // 54: 54000081      b.ne    0x64 <_JIT_ENTRY+0x64>
    // 58: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 60: d63f0100      blr     x8
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 6c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 74: f81f82a8      stur    x8, [x21, #-0x8]
    // 78: f84107fe      ldr     x30, [sp], #0x10
    // 7c: d61f0000      br      x0
    // 80: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 88: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8c: f9400000      ldr     x0, [x0]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 90: f81f82a8      stur    x8, [x21, #-0x8]
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x04, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x09, 0xd8, 0x90, 0x52, 0x08, 0x01, 0x40, 0xf9,
        0x08, 0x01, 0x09, 0x8b, 0x1f, 0x00, 0x08, 0xeb,
        0x00, 0x02, 0x00, 0x54, 0x08, 0x00, 0x40, 0xb9,
        0xe8, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00, 0x54,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xa8, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xa8, 0x82, 0x1f, 0xf8, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_PyRuntime+0x0
    // 18: &_Py_TrueStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_FalseStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x1c, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x2c, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0x34, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x20);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x28);
    patch_aarch64_33rx(code + 0x88, (uintptr_t)data + 0x20);
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_INVERT.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyNumber_Invert
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyNumber_Invert
    // 14: aa1303e0      mov     x0, x19
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b9400268      ldr     w8, [x19]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000268      str     w8, [x19]
    // 34: 540000e0      b.eq    0x50 <_JIT_ENTRY+0x50>
    // 38: b40001a0      cbz     x0, 0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400021      ldr     x1, [x1]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f81f82a0      stur    x0, [x21, #-0x8]
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0020      br      x1
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: aa0003f7      mov     x23, x0
    // 58: aa1303e0      mov     x0, x19
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 60: d63f0100      blr     x8
    // 64: aa1703e0      mov     x0, x23
    // 68: b5fffeb7      cbnz    x23, 0x3c <_JIT_ENTRY+0x3c>
    // 6c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa0, 0x01, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0xa0, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xb7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&PyNumber_Invert);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NEGATIVE.o:  file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82b3      ldur    x19, [x21, #-0x8]
    // 8: f9002295      str     x21, [x20, #0x40]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyNumber_Negative
    // 10: f9400108      ldr     x8, [x8]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyNumber_Negative
    // 14: aa1303e0      mov     x0, x19
    // 18: d63f0100      blr     x8
    // 1c: f9402295      ldr     x21, [x20, #0x40]
    // 20: f900229f      str     xzr, [x20, #0x40]
    // 24: b9400268      ldr     w8, [x19]
    // 28: 37f80088      tbnz    w8, #0x1f, 0x38 <_JIT_ENTRY+0x38>
    // 2c: 71000508      subs    w8, w8, #0x1
    // 30: b9000268      str     w8, [x19]
    // 34: 540000e0      b.eq    0x50 <_JIT_ENTRY+0x50>
    // 38: b40001a0      cbz     x0, 0x6c <_JIT_ENTRY+0x6c>
    // 3c: 90000001      adrp    x1, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 40: f9400021      ldr     x1, [x1]
    // 0000000000000040:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 44: f81f82a0      stur    x0, [x21, #-0x8]
    // 48: f84107fe      ldr     x30, [sp], #0x10
    // 4c: d61f0020      br      x1
    // 50: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 54: aa0003f7      mov     x23, x0
    // 58: aa1303e0      mov     x0, x19
    // 5c: f9400108      ldr     x8, [x8]
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 60: d63f0100      blr     x8
    // 64: aa1703e0      mov     x0, x23
    // 68: b5fffeb7      cbnz    x23, 0x3c <_JIT_ENTRY+0x3c>
    // 6c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000006c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 70: f9400000      ldr     x0, [x0]
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 74: f84107fe      ldr     x30, [sp], #0x10
    // 78: d61f0000      br      x0
    // 7c: 00 00 00 00
    const unsigned char code_body[128] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xb3, 0x82, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x13, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x68, 0x02, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa0, 0x01, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x90,
        0x21, 0x00, 0x40, 0xf9, 0xa0, 0x82, 0x1f, 0xf8,
        0xfe, 0x07, 0x41, 0xf8, 0x20, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf7, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x17, 0xaa,
        0xb7, 0xfe, 0xff, 0xb5, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_33rx(code + 0xc, (uintptr_t)&PyNumber_Negative);
    patch_aarch64_33rx(code + 0x3c, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x50, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x5c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x6c, (uintptr_t)data + 0x8);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NOT.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_FalseStruct
    // 4: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_TrueStruct
    // 8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_FalseStruct
    // 10: f85f82a9      ldur    x9, [x21, #-0x8]
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_TrueStruct
    // 18: f9400000      ldr     x0, [x0]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 1c: eb08013f      cmp     x9, x8
    // 20: 9a880148      csel    x8, x10, x8, eq
    // 24: f81f82a8      stur    x8, [x21, #-0x8]
    // 28: d61f0000      br      x0
    // 2c: 00 00 00 00
    const unsigned char code_body[48] = {
        0x08, 0x00, 0x00, 0x90, 0x0a, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0xa9, 0x82, 0x5f, 0xf8, 0x4a, 0x01, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x3f, 0x01, 0x08, 0xeb,
        0x48, 0x01, 0x88, 0x9a, 0xa8, 0x82, 0x1f, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data + 0x10);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x18, (uintptr_t)data + 0x10);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_EX.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1603e0      mov     x0, x22
    // c: f9400108      ldr     x8, [x8]
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 10: f85f82b7      ldur    x23, [x21, #-0x8]
    // 14: f9002295      str     x21, [x20, #0x40]
    // 18: 12001d13      and     w19, w8, #0xff
    // 1c: 53083d18      ubfx    w24, w8, #8, #8
    // 20: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_UnpackIterableStackRef
    // 24: 8b334ea9      add     x9, x21, w19, uxtw #3
    // 28: f9400108      ldr     x8, [x8]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_UnpackIterableStackRef
    // 2c: aa1703e1      mov     x1, x23
    // 30: 2a1303e2      mov     w2, w19
    // 34: 2a1803e3      mov     w3, w24
    // 38: 8b384d24      add     x4, x9, w24, uxtw #3
    // 3c: d63f0100      blr     x8
    // 40: f9402295      ldr     x21, [x20, #0x40]
    // 44: f900229f      str     xzr, [x20, #0x40]
    // 48: b94002e8      ldr     w8, [x23]
    // 4c: 37f80088      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 50: 71000508      subs    w8, w8, #0x1
    // 54: b90002e8      str     w8, [x23]
    // 58: 54000100      b.eq    0x78 <_JIT_ENTRY+0x78>
    // 5c: 340001a0      cbz     w0, 0x90 <_JIT_ENTRY+0x90>
    // 60: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000060:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 64: 0b180268      add     w8, w19, w24
    // 68: f9400000      ldr     x0, [x0]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 6c: 8b284eb5      add     x21, x21, w8, uxtw #3
    // 70: f84107fe      ldr     x30, [sp], #0x10
    // 74: d61f0000      br      x0
    // 78: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000078:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 7c: 2a0003f9      mov     w25, w0
    // 80: aa1703e0      mov     x0, x23
    // 84: f9400108      ldr     x8, [x8]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 88: d63f0100      blr     x8
    // 8c: 35fffeb9      cbnz    w25, 0x60 <_JIT_ENTRY+0x60>
    // 90: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 94: f9400000      ldr     x0, [x0]
    // 0000000000000094:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 98: f84107fe      ldr     x30, [sp], #0x10
    // 9c: d61f0000      br      x0
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x08, 0x00, 0x00, 0x90,
        0xe0, 0x03, 0x16, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0xb7, 0x82, 0x5f, 0xf8, 0x95, 0x22, 0x00, 0xf9,
        0x13, 0x1d, 0x00, 0x12, 0x18, 0x3d, 0x08, 0x53,
        0x08, 0x00, 0x00, 0x90, 0xa9, 0x4e, 0x33, 0x8b,
        0x08, 0x01, 0x40, 0xf9, 0xe1, 0x03, 0x17, 0xaa,
        0xe2, 0x03, 0x13, 0x2a, 0xe3, 0x03, 0x18, 0x2a,
        0x24, 0x4d, 0x38, 0x8b, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0xe8, 0x02, 0x00, 0xb9,
        0x00, 0x01, 0x00, 0x54, 0xa0, 0x01, 0x00, 0x34,
        0x00, 0x00, 0x00, 0x90, 0x68, 0x02, 0x18, 0x0b,
        0x00, 0x00, 0x40, 0xf9, 0xb5, 0x4e, 0x28, 0x8b,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0xf9, 0x03, 0x00, 0x2a,
        0xe0, 0x03, 0x17, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xb9, 0xfe, 0xff, 0x35,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0xc, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_aarch64_12x(code + 0x28, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_aarch64_21rx(code + 0x60, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x68, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x78, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x84, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x90, (uintptr_t)data + 0x10);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE.o: file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: 90000017      adrp    x23, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 8: aa1503e8      mov     x8, x21
    // c: aa1603e0      mov     x0, x22
    // 10: f94002f7      ldr     x23, [x23]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 14: f85f8d13      ldr     x19, [x8, #-0x8]!
    // 18: f9002295      str     x21, [x20, #0x40]
    // 1c: 12800003      mov     w3, #-0x1               // =-1
    // 20: 8b372d04      add     x4, x8, w23, uxth #3
    // 24: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000024:  IMAGE_REL_ARM64_PAGEBASE_REL21       _PyEval_UnpackIterableStackRef
    // 28: 12003ee2      and     w2, w23, #0xffff
    // 2c: f9400108      ldr     x8, [x8]
    // 000000000000002c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _PyEval_UnpackIterableStackRef
    // 30: aa1303e1      mov     x1, x19
    // 34: d63f0100      blr     x8
    // 38: f9402295      ldr     x21, [x20, #0x40]
    // 3c: f900229f      str     xzr, [x20, #0x40]
    // 40: b9400268      ldr     w8, [x19]
    // 44: 37f80088      tbnz    w8, #0x1f, 0x54 <_JIT_ENTRY+0x54>
    // 48: 71000508      subs    w8, w8, #0x1
    // 4c: b9000268      str     w8, [x19]
    // 50: 54000120      b.eq    0x74 <_JIT_ENTRY+0x74>
    // 54: 340001c0      cbz     w0, 0x8c <_JIT_ENTRY+0x8c>
    // 58: 92403ee8      and     x8, x23, #0xffff
    // 5c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000005c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 60: 8b080ea8      add     x8, x21, x8, lsl #3
    // 64: f9400000      ldr     x0, [x0]
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 68: d1002115      sub     x21, x8, #0x8
    // 6c: f84107fe      ldr     x30, [sp], #0x10
    // 70: d61f0000      br      x0
    // 74: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000074:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 78: 2a0003f8      mov     w24, w0
    // 7c: aa1303e0      mov     x0, x19
    // 80: f9400108      ldr     x8, [x8]
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 84: d63f0100      blr     x8
    // 88: 35fffe98      cbnz    w24, 0x58 <_JIT_ENTRY+0x58>
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // 90: f9400000      ldr     x0, [x0]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0x17, 0x00, 0x00, 0x90,
        0xe8, 0x03, 0x15, 0xaa, 0xe0, 0x03, 0x16, 0xaa,
        0xf7, 0x02, 0x40, 0xf9, 0x13, 0x8d, 0x5f, 0xf8,
        0x95, 0x22, 0x00, 0xf9, 0x03, 0x00, 0x80, 0x12,
        0x04, 0x2d, 0x37, 0x8b, 0x08, 0x00, 0x00, 0x90,
        0xe2, 0x3e, 0x00, 0x12, 0x08, 0x01, 0x40, 0xf9,
        0xe1, 0x03, 0x13, 0xaa, 0x00, 0x01, 0x3f, 0xd6,
        0x95, 0x22, 0x40, 0xf9, 0x9f, 0x22, 0x00, 0xf9,
        0x68, 0x02, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x68, 0x02, 0x00, 0xb9,
        0x20, 0x01, 0x00, 0x54, 0xc0, 0x01, 0x00, 0x34,
        0xe8, 0x3e, 0x40, 0x92, 0x00, 0x00, 0x00, 0x90,
        0xa8, 0x0e, 0x08, 0x8b, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0xf8, 0x03, 0x00, 0x2a, 0xe0, 0x03, 0x13, 0xaa,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x98, 0xfe, 0xff, 0x35, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x24, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_aarch64_12x(code + 0x2c, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_aarch64_21rx(code + 0x5c, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x64, (uintptr_t)data + 0x8);
    patch_aarch64_21rx(code + 0x74, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x80, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x10);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_LIST.o:    file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyList_Type
    // c: f85f8d00      ldr     x0, [x8, #-0x8]!
    // 10: f9400409      ldr     x9, [x0, #0x8]
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyList_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000341      b.ne    0x84 <_JIT_ENTRY+0x84>
    // 20: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 24: f9400813      ldr     x19, [x0, #0x10]
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 2c: eb29227f      cmp     x19, w9, uxth
    // 30: 540002a1      b.ne    0x84 <_JIT_ENTRY+0x84>
    // 34: 72003d3f      tst     w9, #0xffff
    // 38: 540002e0      b.eq    0x94 <_JIT_ENTRY+0x94>
    // 3c: f9400c09      ldr     x9, [x0, #0x18]
    // 40: 8b130d2a      add     x10, x9, x19, lsl #3
    // 44: 91000669      add     x9, x19, #0x1
    // 48: d100214a      sub     x10, x10, #0x8
    // 4c: 14000008      b       0x6c <_JIT_ENTRY+0x6c>
    // 50: d1000529      sub     x9, x9, #0x1
    // 54: 9100210c      add     x12, x8, #0x8
    // 58: f900010b      str     x11, [x8]
    // 5c: f100053f      cmp     x9, #0x1
    // 60: d100214a      sub     x10, x10, #0x8
    // 64: aa0c03e8      mov     x8, x12
    // 68: 54000169      b.ls    0x94 <_JIT_ENTRY+0x94>
    // 6c: f940014b      ldr     x11, [x10]
    // 70: b940016c      ldr     w12, [x11]
    // 74: 37fffeec      tbnz    w12, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 78: 1100058c      add     w12, w12, #0x1
    // 7c: b900016c      str     w12, [x11]
    // 80: 17fffff4      b       0x50 <_JIT_ENTRY+0x50>
    // 84: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 88: f9400000      ldr     x0, [x0]
    // 0000000000000088:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 8c: f84107fe      ldr     x30, [sp], #0x10
    // 90: d61f0000      br      x0
    // 94: b9400008      ldr     w8, [x0]
    // 98: 37f80088      tbnz    w8, #0x1f, 0xa8 <_JIT_ENTRY+0xa8>
    // 9c: 71000508      subs    w8, w8, #0x1
    // a0: b9000008      str     w8, [x0]
    // a4: 540000e0      b.eq    0xc0 <_JIT_ENTRY+0xc0>
    // a8: 8b130ea8      add     x8, x21, x19, lsl #3
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // b0: f9400000      ldr     x0, [x0]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b4: d1002115      sub     x21, x8, #0x8
    // b8: f84107fe      ldr     x30, [sp], #0x10
    // bc: d61f0000      br      x0
    // c0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c4: f9400108      ldr     x8, [x8]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c8: d63f0100      blr     x8
    // cc: 8b130ea8      add     x8, x21, x19, lsl #3
    // d0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d4: f9400000      ldr     x0, [x0]
    // 00000000000000d4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d8: d1002115      sub     x21, x8, #0x8
    // dc: f84107fe      ldr     x30, [sp], #0x10
    // e0: d61f0000      br      x0
    // e4: 00 00 00 00
    const unsigned char code_body[232] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xe8, 0x03, 0x15, 0xaa,
        0x0a, 0x00, 0x00, 0x90, 0x00, 0x8d, 0x5f, 0xf8,
        0x09, 0x04, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x41, 0x03, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x13, 0x08, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x7f, 0x22, 0x29, 0xeb,
        0xa1, 0x02, 0x00, 0x54, 0x3f, 0x3d, 0x00, 0x72,
        0xe0, 0x02, 0x00, 0x54, 0x09, 0x0c, 0x40, 0xf9,
        0x2a, 0x0d, 0x13, 0x8b, 0x69, 0x06, 0x00, 0x91,
        0x4a, 0x21, 0x00, 0xd1, 0x08, 0x00, 0x00, 0x14,
        0x29, 0x05, 0x00, 0xd1, 0x0c, 0x21, 0x00, 0x91,
        0x0b, 0x01, 0x00, 0xf9, 0x3f, 0x05, 0x00, 0xf1,
        0x4a, 0x21, 0x00, 0xd1, 0xe8, 0x03, 0x0c, 0xaa,
        0x69, 0x01, 0x00, 0x54, 0x4b, 0x01, 0x40, 0xf9,
        0x6c, 0x01, 0x40, 0xb9, 0xec, 0xfe, 0xff, 0x37,
        0x8c, 0x05, 0x00, 0x11, 0x6c, 0x01, 0x00, 0xb9,
        0xf4, 0xff, 0xff, 0x17, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x40, 0xb9,
        0x88, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x71,
        0x08, 0x00, 0x00, 0xb9, 0xe0, 0x00, 0x00, 0x54,
        0xa8, 0x0e, 0x13, 0x8b, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x00, 0x90, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xa8, 0x0e, 0x13, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyList_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x84, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xd0, (uintptr_t)data + 0x18);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TUPLE.o:   file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: aa1503e8      mov     x8, x21
    // 8: 9000000a      adrp    x10, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTuple_Type
    // c: f85f8d00      ldr     x0, [x8, #-0x8]!
    // 10: f9400409      ldr     x9, [x0, #0x8]
    // 14: f940014a      ldr     x10, [x10]
    // 0000000000000014:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTuple_Type
    // 18: eb0a013f      cmp     x9, x10
    // 1c: 54000321      b.ne    0x80 <_JIT_ENTRY+0x80>
    // 20: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000020:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 24: f9400813      ldr     x19, [x0, #0x10]
    // 28: f9400129      ldr     x9, [x9]
    // 0000000000000028:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // 2c: eb29227f      cmp     x19, w9, uxth
    // 30: 54000281      b.ne    0x80 <_JIT_ENTRY+0x80>
    // 34: 72003d3f      tst     w9, #0xffff
    // 38: 540002c0      b.eq    0x90 <_JIT_ENTRY+0x90>
    // 3c: 8b130c0a      add     x10, x0, x19, lsl #3
    // 40: 91000669      add     x9, x19, #0x1
    // 44: 9100414a      add     x10, x10, #0x10
    // 48: 14000008      b       0x68 <_JIT_ENTRY+0x68>
    // 4c: d1000529      sub     x9, x9, #0x1
    // 50: 9100210c      add     x12, x8, #0x8
    // 54: f900010b      str     x11, [x8]
    // 58: f100053f      cmp     x9, #0x1
    // 5c: d100214a      sub     x10, x10, #0x8
    // 60: aa0c03e8      mov     x8, x12
    // 64: 54000169      b.ls    0x90 <_JIT_ENTRY+0x90>
    // 68: f940014b      ldr     x11, [x10]
    // 6c: b940016c      ldr     w12, [x11]
    // 70: 37fffeec      tbnz    w12, #0x1f, 0x4c <_JIT_ENTRY+0x4c>
    // 74: 1100058c      add     w12, w12, #0x1
    // 78: b900016c      str     w12, [x11]
    // 7c: 17fffff4      b       0x4c <_JIT_ENTRY+0x4c>
    // 80: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000080:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 84: f9400000      ldr     x0, [x0]
    // 0000000000000084:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 88: f84107fe      ldr     x30, [sp], #0x10
    // 8c: d61f0000      br      x0
    // 90: b9400008      ldr     w8, [x0]
    // 94: 37f80088      tbnz    w8, #0x1f, 0xa4 <_JIT_ENTRY+0xa4>
    // 98: 71000508      subs    w8, w8, #0x1
    // 9c: b9000008      str     w8, [x0]
    // a0: 540000e0      b.eq    0xbc <_JIT_ENTRY+0xbc>
    // a4: 8b130ea8      add     x8, x21, x19, lsl #3
    // a8: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000a8:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // ac: f9400000      ldr     x0, [x0]
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b0: d1002115      sub     x21, x8, #0x8
    // b4: f84107fe      ldr     x30, [sp], #0x10
    // b8: d61f0000      br      x0
    // bc: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 00000000000000bc:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // c0: f9400108      ldr     x8, [x8]
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // c4: d63f0100      blr     x8
    // c8: 8b130ea8      add     x8, x21, x19, lsl #3
    // cc: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000cc:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // d0: f9400000      ldr     x0, [x0]
    // 00000000000000d0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // d4: d1002115      sub     x21, x8, #0x8
    // d8: f84107fe      ldr     x30, [sp], #0x10
    // dc: d61f0000      br      x0
    const unsigned char code_body[224] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xe8, 0x03, 0x15, 0xaa,
        0x0a, 0x00, 0x00, 0x90, 0x00, 0x8d, 0x5f, 0xf8,
        0x09, 0x04, 0x40, 0xf9, 0x4a, 0x01, 0x40, 0xf9,
        0x3f, 0x01, 0x0a, 0xeb, 0x21, 0x03, 0x00, 0x54,
        0x09, 0x00, 0x00, 0x90, 0x13, 0x08, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x7f, 0x22, 0x29, 0xeb,
        0x81, 0x02, 0x00, 0x54, 0x3f, 0x3d, 0x00, 0x72,
        0xc0, 0x02, 0x00, 0x54, 0x0a, 0x0c, 0x13, 0x8b,
        0x69, 0x06, 0x00, 0x91, 0x4a, 0x41, 0x00, 0x91,
        0x08, 0x00, 0x00, 0x14, 0x29, 0x05, 0x00, 0xd1,
        0x0c, 0x21, 0x00, 0x91, 0x0b, 0x01, 0x00, 0xf9,
        0x3f, 0x05, 0x00, 0xf1, 0x4a, 0x21, 0x00, 0xd1,
        0xe8, 0x03, 0x0c, 0xaa, 0x69, 0x01, 0x00, 0x54,
        0x4b, 0x01, 0x40, 0xf9, 0x6c, 0x01, 0x40, 0xb9,
        0xec, 0xfe, 0xff, 0x37, 0x8c, 0x05, 0x00, 0x11,
        0x6c, 0x01, 0x00, 0xb9, 0xf4, 0xff, 0xff, 0x17,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0xe0, 0x00, 0x00, 0x54, 0xa8, 0x0e, 0x13, 0x8b,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0x15, 0x21, 0x00, 0xd1, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0xa8, 0x0e, 0x13, 0x8b, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0x15, 0x21, 0x00, 0xd1,
        0xfe, 0x07, 0x41, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: &PyTuple_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x14, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x20, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x28, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x80, (uintptr_t)data + 0x10);
    patch_aarch64_33rx(code + 0xa8, (uintptr_t)data + 0x18);
    patch_aarch64_33rx(code + 0xbc, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0xcc, (uintptr_t)data + 0x18);
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: f81f0ffe      str     x30, [sp, #-0x10]!
    // 4: f85f82a0      ldur    x0, [x21, #-0x8]
    // 8: 90000009      adrp    x9, 0x0 <_JIT_ENTRY>
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp_PyTuple_Type
    // c: f9400408      ldr     x8, [x0, #0x8]
    // 10: f9400129      ldr     x9, [x9]
    // 0000000000000010:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp_PyTuple_Type
    // 14: eb09011f      cmp     x8, x9
    // 18: 540003a1      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 1c: f9400808      ldr     x8, [x0, #0x10]
    // 20: f100091f      cmp     x8, #0x2
    // 24: 54000341      b.ne    0x8c <_JIT_ENTRY+0x8c>
    // 28: f9400c13      ldr     x19, [x0, #0x18]
    // 2c: b9400268      ldr     w8, [x19]
    // 30: 37f80068      tbnz    w8, #0x1f, 0x3c <_JIT_ENTRY+0x3c>
    // 34: 11000508      add     w8, w8, #0x1
    // 38: b9000268      str     w8, [x19]
    // 3c: f9401017      ldr     x23, [x0, #0x20]
    // 40: b94002e8      ldr     w8, [x23]
    // 44: 37f80068      tbnz    w8, #0x1f, 0x50 <_JIT_ENTRY+0x50>
    // 48: 11000508      add     w8, w8, #0x1
    // 4c: b90002e8      str     w8, [x23]
    // 50: b9400008      ldr     w8, [x0]
    // 54: 37f800e8      tbnz    w8, #0x1f, 0x70 <_JIT_ENTRY+0x70>
    // 58: 71000508      subs    w8, w8, #0x1
    // 5c: b9000008      str     w8, [x0]
    // 60: 54000081      b.ne    0x70 <_JIT_ENTRY+0x70>
    // 64: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000064:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 68: f9400108      ldr     x8, [x8]
    // 0000000000000068:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 6c: d63f0100      blr     x8
    // 70: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000070:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 74: aa1503e8      mov     x8, x21
    // 78: 910022b5      add     x21, x21, #0x8
    // 7c: f9400000      ldr     x0, [x0]
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 80: a93fcd17      stp     x23, x19, [x8, #-0x8]
    // 84: f84107fe      ldr     x30, [sp], #0x10
    // 88: d61f0000      br      x0
    // 8c: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_JUMP_TARGET
    // 90: f9400000      ldr     x0, [x0]
    // 0000000000000090:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_JUMP_TARGET
    // 94: f84107fe      ldr     x30, [sp], #0x10
    // 98: d61f0000      br      x0
    // 9c: 00 00 00 00
    const unsigned char code_body[160] = {
        0xfe, 0x0f, 0x1f, 0xf8, 0xa0, 0x82, 0x5f, 0xf8,
        0x09, 0x00, 0x00, 0x90, 0x08, 0x04, 0x40, 0xf9,
        0x29, 0x01, 0x40, 0xf9, 0x1f, 0x01, 0x09, 0xeb,
        0xa1, 0x03, 0x00, 0x54, 0x08, 0x08, 0x40, 0xf9,
        0x1f, 0x09, 0x00, 0xf1, 0x41, 0x03, 0x00, 0x54,
        0x13, 0x0c, 0x40, 0xf9, 0x68, 0x02, 0x40, 0xb9,
        0x68, 0x00, 0xf8, 0x37, 0x08, 0x05, 0x00, 0x11,
        0x68, 0x02, 0x00, 0xb9, 0x17, 0x10, 0x40, 0xf9,
        0xe8, 0x02, 0x40, 0xb9, 0x68, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x11, 0xe8, 0x02, 0x00, 0xb9,
        0x08, 0x00, 0x40, 0xb9, 0xe8, 0x00, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x81, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x00, 0x01, 0x3f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0xe8, 0x03, 0x15, 0xaa,
        0xb5, 0x22, 0x00, 0x91, 0x00, 0x00, 0x40, 0xf9,
        0x17, 0xcd, 0x3f, 0xa9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x07, 0x41, 0xf8,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x10, (uintptr_t)data);
    patch_aarch64_33rx(code + 0x64, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_21rx(code + 0x70, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x7c, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0x8c, (uintptr_t)data + 0x10);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _WITH_EXCEPT_START.o:       file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: d10103ff      sub     sp, sp, #0x40
    // 4: f85f82b7      ldur    x23, [x21, #-0x8]
    // 8: f9001bfe      str     x30, [sp, #0x30]
    // c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000000c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyException_GetTraceback
    // 10: a97de6b3      ldp     x19, x25, [x21, #-0x28]
    // 14: f94006fa      ldr     x26, [x23, #0x8]
    // 18: f9400108      ldr     x8, [x8]
    // 0000000000000018:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyException_GetTraceback
    // 1c: aa1703e0      mov     x0, x23
    // 20: d63f0100      blr     x8
    // 24: b4000180      cbz     x0, 0x54 <_JIT_ENTRY+0x54>
    // 28: b9400008      ldr     w8, [x0]
    // 2c: 37f80188      tbnz    w8, #0x1f, 0x5c <_JIT_ENTRY+0x5c>
    // 30: 71000508      subs    w8, w8, #0x1
    // 34: b9000008      str     w8, [x0]
    // 38: 54000121      b.ne    0x5c <_JIT_ENTRY+0x5c>
    // 3c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000003c:  IMAGE_REL_ARM64_PAGEBASE_REL21       _Py_Dealloc
    // 40: aa0003f8      mov     x24, x0
    // 44: f9400108      ldr     x8, [x8]
    // 0000000000000044:  IMAGE_REL_ARM64_PAGEOFFSET_12L       _Py_Dealloc
    // 48: d63f0100      blr     x8
    // 4c: aa1803e0      mov     x0, x24
    // 50: 14000003      b       0x5c <_JIT_ENTRY+0x5c>
    // 54: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000054:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__Py_NoneStruct
    // 58: f9400000      ldr     x0, [x0]
    // 0000000000000058:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__Py_NoneStruct
    // 5c: 910023e8      add     x8, sp, #0x8
    // 60: f100033f      cmp     x25, #0x0
    // 64: a900e7ff      stp     xzr, x25, [sp, #0x8]
    // 68: 91004108      add     x8, x8, #0x10
    // 6c: da9f03e9      csetm   x9, ne
    // 70: a901dffa      stp     x26, x23, [sp, #0x18]
    // 74: f90017e0      str     x0, [sp, #0x28]
    // 78: 8b090d01      add     x1, x8, x9, lsl #3
    // 7c: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 000000000000007c:  IMAGE_REL_ARM64_PAGEBASE_REL21       PyObject_Vectorcall
    // 80: f9002295      str     x21, [x20, #0x40]
    // 84: b2410bea      mov     x10, #-0x7ffffffffffffffd // =-9223372036854775805
    // 88: aa1303e0      mov     x0, x19
    // 8c: f9400108      ldr     x8, [x8]
    // 000000000000008c:  IMAGE_REL_ARM64_PAGEOFFSET_12L       PyObject_Vectorcall
    // 90: 9a8a0542      cinc    x2, x10, ne
    // 94: aa1f03e3      mov     x3, xzr
    // 98: d63f0100      blr     x8
    // 9c: f9402295      ldr     x21, [x20, #0x40]
    // a0: f900229f      str     xzr, [x20, #0x40]
    // a4: b40000e0      cbz     x0, 0xc0 <_JIT_ENTRY+0xc0>
    // a8: f80086a0      str     x0, [x21], #0x8
    // ac: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000ac:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // b0: f9400000      ldr     x0, [x0]
    // 00000000000000b0:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // b4: f9401bfe      ldr     x30, [sp, #0x30]
    // b8: 910103ff      add     sp, sp, #0x40
    // bc: d61f0000      br      x0
    // c0: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 00000000000000c0:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_ERROR_TARGET
    // c4: f9400000      ldr     x0, [x0]
    // 00000000000000c4:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_ERROR_TARGET
    // c8: f9401bfe      ldr     x30, [sp, #0x30]
    // cc: 910103ff      add     sp, sp, #0x40
    // d0: d61f0000      br      x0
    // d4: 00 00 00 00
    const unsigned char code_body[216] = {
        0xff, 0x03, 0x01, 0xd1, 0xb7, 0x82, 0x5f, 0xf8,
        0xfe, 0x1b, 0x00, 0xf9, 0x08, 0x00, 0x00, 0x90,
        0xb3, 0xe6, 0x7d, 0xa9, 0xfa, 0x06, 0x40, 0xf9,
        0x08, 0x01, 0x40, 0xf9, 0xe0, 0x03, 0x17, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x80, 0x01, 0x00, 0xb4,
        0x08, 0x00, 0x40, 0xb9, 0x88, 0x01, 0xf8, 0x37,
        0x08, 0x05, 0x00, 0x71, 0x08, 0x00, 0x00, 0xb9,
        0x21, 0x01, 0x00, 0x54, 0x08, 0x00, 0x00, 0x90,
        0xf8, 0x03, 0x00, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x00, 0x01, 0x3f, 0xd6, 0xe0, 0x03, 0x18, 0xaa,
        0x03, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xe8, 0x23, 0x00, 0x91,
        0x3f, 0x03, 0x00, 0xf1, 0xff, 0xe7, 0x00, 0xa9,
        0x08, 0x41, 0x00, 0x91, 0xe9, 0x03, 0x9f, 0xda,
        0xfa, 0xdf, 0x01, 0xa9, 0xe0, 0x17, 0x00, 0xf9,
        0x01, 0x0d, 0x09, 0x8b, 0x08, 0x00, 0x00, 0x90,
        0x95, 0x22, 0x00, 0xf9, 0xea, 0x0b, 0x41, 0xb2,
        0xe0, 0x03, 0x13, 0xaa, 0x08, 0x01, 0x40, 0xf9,
        0x42, 0x05, 0x8a, 0x9a, 0xe3, 0x03, 0x1f, 0xaa,
        0x00, 0x01, 0x3f, 0xd6, 0x95, 0x22, 0x40, 0xf9,
        0x9f, 0x22, 0x00, 0xf9, 0xe0, 0x00, 0x00, 0xb4,
        0xa0, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x90,
        0x00, 0x00, 0x40, 0xf9, 0xfe, 0x1b, 0x40, 0xf9,
        0xff, 0x03, 0x01, 0x91, 0x00, 0x00, 0x1f, 0xd6,
        0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x40, 0xf9,
        0xfe, 0x1b, 0x40, 0xf9, 0xff, 0x03, 0x01, 0x91,
        0x00, 0x00, 0x1f, 0xd6, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0xc, (uintptr_t)&PyException_GetTraceback);
    patch_aarch64_12x(code + 0x18, (uintptr_t)&PyException_GetTraceback);
    patch_aarch64_21rx(code + 0x3c, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_12x(code + 0x44, (uintptr_t)&_Py_Dealloc);
    patch_aarch64_33rx(code + 0x54, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x7c, (uintptr_t)&PyObject_Vectorcall);
    patch_aarch64_12x(code + 0x8c, (uintptr_t)&PyObject_Vectorcall);
    patch_aarch64_33rx(code + 0xac, (uintptr_t)data + 0x8);
    patch_aarch64_33rx(code + 0xc0, (uintptr_t)data + 0x10);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _YIELD_VALUE.o:     file format coff-arm64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 90000008      adrp    x8, 0x0 <_JIT_ENTRY>
    // 0000000000000000:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_OPARG
    // 4: 90000000      adrp    x0, 0x0 <_JIT_ENTRY>
    // 0000000000000004:  IMAGE_REL_ARM64_PAGEBASE_REL21       __imp__JIT_CONTINUE
    // 8: f9400108      ldr     x8, [x8]
    // 0000000000000008:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_OPARG
    // c: f9401e89      ldr     x9, [x20, #0x38]
    // 10: f85f8eaa      ldr     x10, [x21, #-0x8]!
    // 14: 51000908      sub     w8, w8, #0x2
    // 18: 91000929      add     x9, x9, #0x2
    // 1c: 381fb288      sturb   w8, [x20, #-0x5]
    // 20: f85e8288      ldur    x8, [x20, #-0x18]
    // 24: a903d689      stp     x9, x21, [x20, #0x38]
    // 28: f9003ec8      str     x8, [x22, #0x78]
    // 2c: f81e829f      stur    xzr, [x20, #-0x18]
    // 30: b9402ec8      ldr     w8, [x22, #0x2c]
    // 34: 11000508      add     w8, w8, #0x1
    // 38: b9002ec8      str     w8, [x22, #0x2c]
    // 3c: f9400688      ldr     x8, [x20, #0x8]
    // 40: f90026c8      str     x8, [x22, #0x48]
    // 44: f900069f      str     xzr, [x20, #0x8]
    // 48: aa0803f4      mov     x20, x8
    // 4c: f9402115      ldr     x21, [x8, #0x40]
    // 50: f9400000      ldr     x0, [x0]
    // 0000000000000050:  IMAGE_REL_ARM64_PAGEOFFSET_12L       __imp__JIT_CONTINUE
    // 54: f900211f      str     xzr, [x8, #0x40]
    // 58: f80086aa      str     x10, [x21], #0x8
    // 5c: d61f0000      br      x0
    const unsigned char code_body[96] = {
        0x08, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x90,
        0x08, 0x01, 0x40, 0xf9, 0x89, 0x1e, 0x40, 0xf9,
        0xaa, 0x8e, 0x5f, 0xf8, 0x08, 0x09, 0x00, 0x51,
        0x29, 0x09, 0x00, 0x91, 0x88, 0xb2, 0x1f, 0x38,
        0x88, 0x82, 0x5e, 0xf8, 0x89, 0xd6, 0x03, 0xa9,
        0xc8, 0x3e, 0x00, 0xf9, 0x9f, 0x82, 0x1e, 0xf8,
        0xc8, 0x2e, 0x40, 0xb9, 0x08, 0x05, 0x00, 0x11,
        0xc8, 0x2e, 0x00, 0xb9, 0x88, 0x06, 0x40, 0xf9,
        0xc8, 0x26, 0x00, 0xf9, 0x9f, 0x06, 0x00, 0xf9,
        0xf4, 0x03, 0x08, 0xaa, 0x15, 0x21, 0x40, 0xf9,
        0x00, 0x00, 0x40, 0xf9, 0x1f, 0x21, 0x00, 0xf9,
        0xaa, 0x86, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xd6,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_aarch64_21rx(code + 0x0, (uintptr_t)data);
    patch_aarch64_21rx(code + 0x4, (uintptr_t)data + 0x8);
    patch_aarch64_12x(code + 0x8, (uintptr_t)data);
    patch_aarch64_12x(code + 0x50, (uintptr_t)data + 0x8);
}

static_assert(SYMBOL_MASK_WORDS >= 1, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 200, 16, {0}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 184, 32, {0}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 88, 16, {0}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 224, 24, {0}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 224, 24, {0}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 240, 40, {0}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 88, 16, {0}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 224, 24, {0}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 88, 16, {0}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 224, 24, {0}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 232, 16, {0}},
    [_BINARY_SUBSCR] = {emit__BINARY_SUBSCR, 168, 16, {0}},
    [_BINARY_SUBSCR_CHECK_FUNC] = {emit__BINARY_SUBSCR_CHECK_FUNC, 96, 16, {0}},
    [_BINARY_SUBSCR_DICT] = {emit__BINARY_SUBSCR_DICT, 256, 32, {0}},
    [_BINARY_SUBSCR_INIT_CALL] = {emit__BINARY_SUBSCR_INIT_CALL, 200, 8, {0}},
    [_BINARY_SUBSCR_LIST_INT] = {emit__BINARY_SUBSCR_LIST_INT, 256, 40, {0}},
    [_BINARY_SUBSCR_STR_INT] = {emit__BINARY_SUBSCR_STR_INT, 400, 40, {0}},
    [_BINARY_SUBSCR_TUPLE_INT] = {emit__BINARY_SUBSCR_TUPLE_INT, 256, 40, {0}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 96, 24, {0}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 224, 24, {0}},
    [_BUILD_SET] = {emit__BUILD_SET, 376, 24, {0}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 272, 24, {0}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 192, 32, {0}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 96, 24, {0}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 280, 32, {0}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 312, 40, {0}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 320, 40, {0}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 328, 40, {0}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 152, 32, {0}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 192, 32, {0}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 336, 48, {0}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 312, 24, {0}},
    [_CALL_LEN] = {emit__CALL_LEN, 320, 40, {0}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 264, 24, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 312, 40, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 320, 40, {0}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 328, 40, {0}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 368, 40, {0}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 248, 24, {0}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 176, 32, {0}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 176, 32, {0}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 160, 24, {0}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 248, 48, {0}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 64, 24, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 48, 24, {0}},
    [_CHECK_ATTR_MODULE_PUSH_KEYS] = {emit__CHECK_ATTR_MODULE_PUSH_KEYS, 88, 32, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 40, 16, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 80, 32, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 384, 24, {0}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 232, 32, {0}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 48, 24, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 80, 24, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 88, 40, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 56, 32, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 88, 40, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 80, 40, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 80, 40, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 48, 16, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 128, 48, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 128, 48, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 40, 16, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 80, 16, {0}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 96, 24, {0}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 88, 24, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 72, 24, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 40, 24, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 56, 32, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 320, 40, {0}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 240, 40, {0}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 296, 48, {0}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 240, 40, {0}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 200, 40, {0}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 240, 56, {0}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 256, 64, {0}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 144, 32, {0}},
    [_COPY] = {emit__COPY, 48, 16, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 112, 16, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 272, 40, {0}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 144, 24, {0}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 160, 24, {0}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 184, 112, {0}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 176, 64, {0}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 216, 96, {0}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 160, 16, {0}},
    [_DEOPT] = {emit__DEOPT, 40, 16, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 256, 24, {0}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 312, 80, {0}},
    [_DYNAMIC_EXIT] = {emit__DYNAMIC_EXIT, 272, 16, {0}},
    [_END_SEND] = {emit__END_SEND, 88, 8, {0}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 64, 24, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 120, 80, {0}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 416, 16, {0}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 152, 16, {0}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 152, 16, {0}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 40, 40, {0}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 152, 24, {0}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 168, 16, {0}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 136, 40, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 200, 32, {0}},
    [_GET_AITER] = {emit__GET_AITER, 376, 184, {0}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 72, 16, {0}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 136, 24, {0}},
    [_GET_ITER] = {emit__GET_ITER, 128, 16, {0}},
    [_GET_LEN] = {emit__GET_LEN, 88, 16, {0}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 280, 112, {0}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 64, 24, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 64, 24, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 64, 24, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 80, 32, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 56, 16, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 48, 16, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 72, 32, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 80, 32, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 48, 24, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 104, 24, {0}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 112, 24, {0}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 48, 24, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 56, 24, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 48, 24, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 48, 24, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 72, 16, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 40, 16, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 56, 16, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 48, 24, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 48, 24, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 56, 24, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 104, 24, {0}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 200, 24, {0}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 152, 16, {0}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 376, 16, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 176, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 192, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 200, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 208, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 216, 8, {0}},
    [_INTERNAL_INCREMENT_OPT_COUNTER] = {emit__INTERNAL_INCREMENT_OPT_COUNTER, 32, 8, {0}},
    [_IS_NONE] = {emit__IS_NONE, 112, 32, {0}},
    [_IS_OP] = {emit__IS_OP, 152, 32, {0}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 48, 24, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 48, 24, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 48, 24, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 56, 8, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 88, 16, {0}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 56, 8, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 16, 8, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 144, 24, {0}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 352, 80, {0}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 288, 24, {0}},
    [_LOAD_ATTR_CLASS_0] = {emit__LOAD_ATTR_CLASS_0, 104, 16, {0}},
    [_LOAD_ATTR_CLASS_1] = {emit__LOAD_ATTR_CLASS_1, 120, 16, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE_0] = {emit__LOAD_ATTR_INSTANCE_VALUE_0, 136, 24, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE_1] = {emit__LOAD_ATTR_INSTANCE_VALUE_1, 120, 24, {0}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 56, 16, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 56, 16, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 56, 16, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 184, 32, {0}},
    [_LOAD_ATTR_MODULE_FROM_KEYS] = {emit__LOAD_ATTR_MODULE_FROM_KEYS, 184, 32, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 88, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 88, 16, {0}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 248, 24, {0}},
    [_LOAD_ATTR_SLOT_0] = {emit__LOAD_ATTR_SLOT_0, 136, 24, {0}},
    [_LOAD_ATTR_SLOT_1] = {emit__LOAD_ATTR_SLOT_1, 120, 24, {0}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 224, 32, {0}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 168, 64, {0}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 56, 32, {0}},
    [_LOAD_CONST] = {emit__LOAD_CONST, 56, 16, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 40, 16, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 40, 16, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 24, 16, {0}},
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = {emit__LOAD_CONST_INLINE_BORROW_WITH_NULL, 32, 16, {0}},
    [_LOAD_CONST_INLINE_WITH_NULL] = {emit__LOAD_CONST_INLINE_WITH_NULL, 48, 16, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 128, 24, {0}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 48, 16, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 40, 8, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 40, 8, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 40, 8, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 40, 8, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 40, 8, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 40, 8, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 40, 8, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 40, 8, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 40, 16, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 152, 112, {0}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 288, 24, {0}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 136, 24, {0}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 120, 32, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 120, 32, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 120, 32, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 120, 32, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 112, 40, {0}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 104, 24, {0}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 48, 24, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 32, 16, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 32, 16, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 32, 16, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 32, 16, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 208, 40, {0}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 288, 40, {0}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 384, 48, {0}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 232, 32, {0}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 136, 24, {0}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 144, 16, {0}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 96, 16, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 96, 24, {0}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 280, 32, {0}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 80, 16, {0}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 64, 24, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 64, 24, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 176, 24, {0}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 200, 24, {0}},
    [_NOP] = {emit__NOP, 16, 8, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 104, 16, {0}},
    [_POP_TOP] = {emit__POP_TOP, 72, 8, {0}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 72, 16, {0}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 72, 16, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 48, 8, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 16, 8, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 184, 24, {0}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 264, 24, {0}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 72, 16, {0}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 48, 16, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 368, 16, {0}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 80, 8, {0}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 24, 16, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 144, 40, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 336, 80, {0}},
    [_SET_ADD] = {emit__SET_ADD, 144, 24, {0}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 56, 24, {0}},
    [_SET_IP] = {emit__SET_IP, 24, 16, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 144, 24, {0}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 80, 8, {0}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 184, 24, {0}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 184, 16, {0}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 136, 16, {0}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 272, 32, {0}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 104, 16, {0}},
    [_STORE_FAST] = {emit__STORE_FAST, 96, 16, {0}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 88, 8, {0}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 88, 8, {0}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 88, 8, {0}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 88, 8, {0}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 88, 8, {0}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 88, 8, {0}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 88, 8, {0}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 88, 8, {0}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 152, 24, {0}},
    [_STORE_NAME] = {emit__STORE_NAME, 296, 72, {0}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 256, 16, {0}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 208, 16, {0}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 168, 32, {0}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 272, 40, {0}},
    [_SWAP] = {emit__SWAP, 40, 16, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 40, 16, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 152, 32, {0}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 48, 24, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 152, 40, {0}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 128, 40, {0}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 56, 32, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 160, 48, {0}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 128, 16, {0}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 128, 16, {0}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 48, 24, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 160, 24, {0}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 160, 24, {0}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 232, 32, {0}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 224, 32, {0}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 160, 24, {0}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 216, 24, {0}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 96, 16, {0}},
};

static const void * const symbols_map[1] = {
    0
};
