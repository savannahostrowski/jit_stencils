name: JIT Stencil Aggregation

on:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  collect-stencils:
    name: JIT Compilation and Stencil Collection
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-pc-windows-msvc/msvc
          - x86_64-pc-windows-msvc/msvc
          - aarch64-pc-windows-msvc/msvc
          - x86_64-apple-darwin/clang
          - aarch64-apple-darwin/clang
          - x86_64-unknown-linux-gnu/gcc
          - aarch64-unknown-linux-gnu/gcc
        include:
          - target: i686-pc-windows-msvc/msvc
            architecture: Win32
            runner: windows-latest
          - target: x86_64-pc-windows-msvc/msvc
            architecture: x64
            runner: windows-latest
          - target: aarch64-pc-windows-msvc/msvc
            architecture: ARM64
            runner: windows-latest
          - target: x86_64-apple-darwin/clang
            architecture: x86_64
            runner: macos-13
          - target: aarch64-apple-darwin/clang
            architecture: aarch64
            runner: macos-14
          - target: x86_64-unknown-linux-gnu/gcc
            architecture: x86_64
            runner: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu/gcc
            architecture: aarch64
            runner: ubuntu-24.04
    steps:
      - name: Checkout CPython repository
        uses: actions/checkout@v4
        with:
          repository: python/cpython
          path: cpython

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        
      - name: Install LLVM on Windows
        if: runner.os == 'Windows'
        run: |
            choco install llvm --allow-downgrade --no-progress --version 19.1.0

      - name: Install dependencies (Linux macOS)
        if: runner.os == 'macOS'
        run: |
            brew update
            brew install llvm@19

      - name: Install dependencies (Linux)
        if: runner.os == 'ubuntu-24.04'
        run: |
            sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh 19
            export PATH="$(llvm-config-19 --bindir):$PATH"

      - name: Build Python with JIT enabled
        run: |
          cd cpython
          ./configure --enable-experimental-jit --with-pydebug
          make all --jobs 4

      - name: Run JIT executable
        run: |
          cd cpython
          ./python Tools/jit/build.py ${{ matrix.target }}

      - name: Collect JIT stencils
        run: |
          mkdir -p stencils
          cp cpython/Tools/jit/jit_stencils.h stencils/jit_stencils_${{ matrix.target }}.h

  aggregate-and-create-pr:
    name: Aggregate Stencils and Open PR
    needs: collect-stencils
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Aggregate stencils
        run: |
          mkdir -p stencils
          cp -r ../collect-stencils/stencils/* ./stencils/

      - name: Create PR
        uses: actions/github-script@v6
        with:
         script: |
            const branchName = "add-jit-stencils";
            const commitMessage = "Add aggregated JIT stencils";
            const title = "Add aggregated JIT stencils";
            const body = "This PR includes the aggregated JIT stencil files from all targets.";
    
            // Get the default branch
            const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            });
            const defaultBranch = repo.default_branch;
    
            // Create a new branch from the default branch
            const { data: ref } = await github.rest.git.getRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${defaultBranch}`,
            });
    
            await github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/heads/${branchName}`,
            sha: ref.object.sha,
            });
    
            // Get the current tree
            const { data: currentTree } = await github.rest.git.getTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tree_sha: ref.object.sha,
            });
    
            // Add new files to the tree
            const filesToAdd = ["stencils"]; // Adjust paths as needed
            const tree = filesToAdd.map(file => ({
            path: file,
            mode: "100644", // Standard file mode
            type: "blob",
            content: require("fs").readFileSync(file, "utf8"),
            }));
    
            const { data: newTree } = await github.rest.git.createTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base_tree: currentTree.sha,
            tree,
            });
    
            // Create a commit
            const { data: newCommit } = await github.rest.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: commitMessage,
            tree: newTree.sha,
            parents: [ref.object.sha],
            });
    
            // Update the branch to point to the new commit
            await github.rest.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `heads/${branchName}`,
            sha: newCommit.sha,
            force: true,
            });
    
            // Create a pull request
            const { data: pullRequest } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: branchName,
            base: defaultBranch,
            title,
            body,
            });
    
            core.info(`Pull request created: ${pullRequest.html_url}`);
    
