name: JIT
on:
  pull_request:
    branches:
        - main
  push:
    branches:
        - main
  workflow_dispatch:

permissions:
  contents: write

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  jit:
    name: ${{ matrix.target }} 
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        target:
          - i686-pc-windows-msvc/msvc
          - x86_64-pc-windows-msvc/msvc
          - aarch64-pc-windows-msvc/msvc
          - x86_64-apple-darwin/clang
          - aarch64-apple-darwin/clang
          - x86_64-unknown-linux-gnu/gcc
          - aarch64-unknown-linux-gnu/gcc
        llvm:
          - 19
        include:
          - target: i686-pc-windows-msvc/msvc
            architecture: Win32
            runner: windows-latest
          - target: x86_64-pc-windows-msvc/msvc
            architecture: x64
            runner: windows-latest
          - target: aarch64-pc-windows-msvc/msvc
            architecture: ARM64
            runner: windows-latest
          - target: x86_64-apple-darwin/clang
            architecture: x86_64
            runner: macos-13
          - target: aarch64-apple-darwin/clang
            architecture: aarch64
            runner: macos-14
          - target: x86_64-unknown-linux-gnu/gcc
            architecture: x86_64
            runner: ubuntu-24.04
          - target: aarch64-unknown-linux-gnu/gcc
            architecture: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
            repository: python/cpython
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

    
      - name: Native Windows
        if: runner.os == 'Windows' && matrix.architecture != 'ARM64'
        run: |
          choco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}.1.0
          ./PCbuild/build.bat --experimental-jit -p ${{ matrix.architecture }}
          stripped_target=$(echo ${{ matrix.target }} | cut -d'/' -f1)
          find PCbuild -name "*jit_stencils.h" > jit_stencils_${stripped_target}.h

      - name: Emulated Windows
        if: runner.os == 'Windows' && matrix.architecture == 'ARM64'
        run: |
          choco install llvm --allow-downgrade --no-progress --version ${{ matrix.llvm }}.1.0
          ./PCbuild/build.bat --experimental-jit -p ${{ matrix.architecture }}
          stripped_target=$(echo ${{ matrix.target }} | cut -d'/' -f1)
          find PCbuild -name "*jit_stencils.h" > jit_stencils_${stripped_target}.h

        # The `find` line is required as a result of https://github.com/actions/runner-images/issues/9966.
        # This is a bug in the macOS runner image where the pre-installed Python is installed in the same
        # directory as the Homebrew Python, which causes the build to fail for macos-13. This line removes
        # the symlink to the pre-installed Python so that the Homebrew Python is used instead.
      - name: Native macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          brew install llvm@${{ matrix.llvm }}
          export SDKROOT="$(xcrun --show-sdk-path)"
          ./configure --enable-experimental-jit
          make all --jobs 4
          stripped_target=$(echo ${{ matrix.target }} | cut -d'/' -f1)
          cp jit_stencils.h jit_stencils_${stripped_target}.h

      - name: Native Linux
        if: runner.os == 'Linux' && (matrix.architecture == 'x86_64')
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
          export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
          ./configure --enable-experimental-jit
          make all --jobs 4
          stripped_target=$(echo ${{ matrix.target }} | cut -d'/' -f1)
          cp jit_stencils.h jit_stencils_${stripped_target}.h

      - name: Emulated Linux
        if: runner.os == 'Linux' && matrix.architecture != 'x86_64'
        # The --ignorefile on ./python -m test is used to exclude tests known to fail when running on an emulated Linux.
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
          export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
          ./configure --prefix="$(pwd)/../build"
          make install --jobs 4
          make clean --jobs 4
          export HOST=${{ matrix.architecture }}-linux-gnu
          sudo apt install --yes "gcc-$HOST" qemu-user
          export QEMU_LD_PREFIX="/usr/$HOST"
          CC="$HOST-gcc" \
            CPP="$HOST-gcc --preprocess" \
            HOSTRUNNER=qemu-${{ matrix.architecture }} \
            ./configure --enable-experimental-jit --build=x86_64-linux-gnu --host="$HOST" --with-build-python=../build/bin/python3 --with-pkg-config=no ac_cv_buggy_getaddrinfo=no ac_cv_file__dev_ptc=no ac_cv_file__dev_ptmx=yes
          make all --jobs 4
          stripped_target=$(echo ${{ matrix.target }} | cut -d'/' -f1)
          cp jit_stencils.h jit_stencils_${stripped_target}.h
    
      - name: Upload stencils
        uses: actions/upload-artifact@v3
        with:
            name: stencils
            path: jit_stencils_*.h

          
  aggregate-and-push:
    name: Aggregate and Push Stencils
    needs: jit
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download stencils
        uses: actions/download-artifact@v3
        with:
          name: stencils

      - name: Push commit
        run: |
          git config --global user.name 'Savannah Ostrowski'
          git config --global user.email 'savannahostrowski@users.noreply.github.com'
          git add .
          git commit -m "Update stencils"
          git push
