// ae551452831e81b7c038c8a5a1ead8c32bc61fa812da2c5948451a422bad949b
// $ python.exe 'D:\a\jit_stencils\jit_stencils\Tools\jit\build.py' x86_64-pc-windows-msvc

void
emit_shim(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // shim.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 41 57                         pushq   %r15
    // 2: 41 56                         pushq   %r14
    // 4: 41 55                         pushq   %r13
    // 6: 41 54                         pushq   %r12
    // 8: 56                            pushq   %rsi
    // 9: 57                            pushq   %rdi
    // a: 55                            pushq   %rbp
    // b: 53                            pushq   %rbx
    // c: 48 81 ec c8 00 00 00          subq    $0xc8, %rsp
    // 13: 44 0f 29 bc 24 b0 00 00 00    movaps  %xmm15, 0xb0(%rsp)
    // 1c: 44 0f 29 b4 24 a0 00 00 00    movaps  %xmm14, 0xa0(%rsp)
    // 25: 44 0f 29 ac 24 90 00 00 00    movaps  %xmm13, 0x90(%rsp)
    // 2e: 44 0f 29 a4 24 80 00 00 00    movaps  %xmm12, 0x80(%rsp)
    // 37: 44 0f 29 5c 24 70             movaps  %xmm11, 0x70(%rsp)
    // 3d: 44 0f 29 54 24 60             movaps  %xmm10, 0x60(%rsp)
    // 43: 44 0f 29 4c 24 50             movaps  %xmm9, 0x50(%rsp)
    // 49: 44 0f 29 44 24 40             movaps  %xmm8, 0x40(%rsp)
    // 4f: 0f 29 7c 24 30                movaps  %xmm7, 0x30(%rsp)
    // 54: 0f 29 74 24 20                movaps  %xmm6, 0x20(%rsp)
    // 59: 4c 89 c5                      movq    %r8, %rbp
    // 5c: 4c 8b 05 00 00 00 00          movq    (%rip), %r8             # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 63: 41 8b 00                      movl    (%r8), %eax
    // 66: 85 c0                         testl   %eax, %eax
    // 68: 78 05                         js      0x6f <_JIT_ENTRY+0x6f>
    // 6a: ff c0                         incl    %eax
    // 6c: 41 89 00                      movl    %eax, (%r8)
    // 6f: 49 89 cc                      movq    %rcx, %r12
    // 72: 49 89 d5                      movq    %rdx, %r13
    // 75: 49 89 ee                      movq    %rbp, %r14
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 7e: 48 8b 8d 08 01 00 00          movq    0x108(%rbp), %rcx
    // 85: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x8c <_JIT_ENTRY+0x8c>
    // 0000000000000088:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 8c: 48 89 95 08 01 00 00          movq    %rdx, 0x108(%rbp)
    // 93: 8b 11                         movl    (%rcx), %edx
    // 95: 85 d2                         testl   %edx, %edx
    // 97: 78 12                         js      0xab <_JIT_ENTRY+0xab>
    // 99: ff ca                         decl    %edx
    // 9b: 89 11                         movl    %edx, (%rcx)
    // 9d: 75 0c                         jne     0xab <_JIT_ENTRY+0xab>
    // 9f: 48 89 c6                      movq    %rax, %rsi
    // a2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a4:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a8: 48 89 f0                      movq    %rsi, %rax
    // ab: 0f 28 74 24 20                movaps  0x20(%rsp), %xmm6
    // b0: 0f 28 7c 24 30                movaps  0x30(%rsp), %xmm7
    // b5: 44 0f 28 44 24 40             movaps  0x40(%rsp), %xmm8
    // bb: 44 0f 28 4c 24 50             movaps  0x50(%rsp), %xmm9
    // c1: 44 0f 28 54 24 60             movaps  0x60(%rsp), %xmm10
    // c7: 44 0f 28 5c 24 70             movaps  0x70(%rsp), %xmm11
    // cd: 44 0f 28 a4 24 80 00 00 00    movaps  0x80(%rsp), %xmm12
    // d6: 44 0f 28 ac 24 90 00 00 00    movaps  0x90(%rsp), %xmm13
    // df: 44 0f 28 b4 24 a0 00 00 00    movaps  0xa0(%rsp), %xmm14
    // e8: 44 0f 28 bc 24 b0 00 00 00    movaps  0xb0(%rsp), %xmm15
    // f1: 48 81 c4 c8 00 00 00          addq    $0xc8, %rsp
    // f8: 5b                            popq    %rbx
    // f9: 5d                            popq    %rbp
    // fa: 5f                            popq    %rdi
    // fb: 5e                            popq    %rsi
    // fc: 41 5c                         popq    %r12
    // fe: 41 5d                         popq    %r13
    // 100: 41 5e                         popq    %r14
    // 102: 41 5f                         popq    %r15
    // 104: c3                            retq
    const unsigned char code_body[261] = {
        0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54,
        0x56, 0x57, 0x55, 0x53, 0x48, 0x81, 0xec, 0xc8,
        0x00, 0x00, 0x00, 0x44, 0x0f, 0x29, 0xbc, 0x24,
        0xb0, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x29, 0xb4,
        0x24, 0xa0, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x29,
        0xac, 0x24, 0x90, 0x00, 0x00, 0x00, 0x44, 0x0f,
        0x29, 0xa4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x44,
        0x0f, 0x29, 0x5c, 0x24, 0x70, 0x44, 0x0f, 0x29,
        0x54, 0x24, 0x60, 0x44, 0x0f, 0x29, 0x4c, 0x24,
        0x50, 0x44, 0x0f, 0x29, 0x44, 0x24, 0x40, 0x0f,
        0x29, 0x7c, 0x24, 0x30, 0x0f, 0x29, 0x74, 0x24,
        0x20, 0x4c, 0x89, 0xc5, 0x4c, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x8b, 0x00, 0x85, 0xc0,
        0x78, 0x05, 0xff, 0xc0, 0x41, 0x89, 0x00, 0x49,
        0x89, 0xcc, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xee,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x8d, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x95, 0x08,
        0x01, 0x00, 0x00, 0x8b, 0x11, 0x85, 0xd2, 0x78,
        0x12, 0xff, 0xca, 0x89, 0x11, 0x75, 0x0c, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf0, 0x0f, 0x28, 0x74, 0x24, 0x20,
        0x0f, 0x28, 0x7c, 0x24, 0x30, 0x44, 0x0f, 0x28,
        0x44, 0x24, 0x40, 0x44, 0x0f, 0x28, 0x4c, 0x24,
        0x50, 0x44, 0x0f, 0x28, 0x54, 0x24, 0x60, 0x44,
        0x0f, 0x28, 0x5c, 0x24, 0x70, 0x44, 0x0f, 0x28,
        0xa4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x44, 0x0f,
        0x28, 0xac, 0x24, 0x90, 0x00, 0x00, 0x00, 0x44,
        0x0f, 0x28, 0xb4, 0x24, 0xa0, 0x00, 0x00, 0x00,
        0x44, 0x0f, 0x28, 0xbc, 0x24, 0xb0, 0x00, 0x00,
        0x00, 0x48, 0x81, 0xc4, 0xc8, 0x00, 0x00, 0x00,
        0x5b, 0x5d, 0x5f, 0x5e, 0x41, 0x5c, 0x41, 0x5d,
        0x41, 0x5e, 0x41, 0x5f, 0xc3,
    };
    // 0: EXECUTOR
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa4, (uintptr_t)data + 0xc);
}

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 18: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__PyEval_BinaryOps
    // 1f: 48 89 d9                      movq    %rbx, %rcx
    // 22: 48 89 f2                      movq    %rsi, %rdx
    // 25: ff 14 c7                      callq   *(%rdi,%rax,8)
    // 28: 48 89 c7                      movq    %rax, %rdi
    // 2b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 30: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 39: 8b 03                         movl    (%rbx), %eax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 0f                         js      0x4e <_JIT_ENTRY+0x4e>
    // 3f: ff c8                         decl    %eax
    // 41: 89 03                         movl    %eax, (%rbx)
    // 43: 75 09                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 45: 48 89 d9                      movq    %rbx, %rcx
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4e: 8b 06                         movl    (%rsi), %eax
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 78 06                         js      0x5a <_JIT_ENTRY+0x5a>
    // 54: ff c8                         decl    %eax
    // 56: 89 06                         movl    %eax, (%rsi)
    // 58: 74 18                         je      0x72 <_JIT_ENTRY+0x72>
    // 5a: 48 85 ff                      testq   %rdi, %rdi
    // 5d: 74 21                         je      0x80 <_JIT_ENTRY+0x80>
    // 5f: 49 89 7d f0                   movq    %rdi, -0x10(%r13)
    // 63: 49 83 c5 f8                   addq    $-0x8, %r13
    // 67: 48 83 c4 28                   addq    $0x28, %rsp
    // 6b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 72: 48 89 f1                      movq    %rsi, %rcx
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7b: 48 85 ff                      testq   %rdi, %rdi
    // 7e: 75 df                         jne     0x5f <_JIT_ENTRY+0x5f>
    // 80: 48 83 c4 28                   addq    $0x28, %rsp
    // 84: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8b <_JIT_ENTRY+0x8b>
    // 0000000000000087:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[139] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xd9, 0x48, 0x89, 0xf2, 0xff, 0x14, 0xc7,
        0x48, 0x89, 0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xd9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x18, 0x48, 0x85, 0xff, 0x74, 0x21, 0x49,
        0x89, 0x7d, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x75, 0xdf,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_BinaryOps+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x87, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_FLOAT.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 8: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c: f2 0f 10 51 10                movsd   0x10(%rcx), %xmm2
    // 11: f2 0f 58 52 10                addsd   0x10(%rdx), %xmm2
    // 16: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__PyFloat_FromDouble_ConsumeInputs
    // 1c: 48 85 c0                      testq   %rax, %rax
    // 1f: 74 13                         je      0x34 <_JIT_ENTRY+0x34>
    // 21: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 34: 48 83 c4 28                   addq    $0x28, %rsp
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf0,
        0x49, 0x8b, 0x55, 0xf8, 0xf2, 0x0f, 0x10, 0x51,
        0x10, 0xf2, 0x0f, 0x58, 0x52, 0x10, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x13, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_INT.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 48 89 f9                      movq    %rdi, %rcx
    // f: 48 89 da                      movq    %rbx, %rdx
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__PyLong_Add
    // 18: 48 89 c6                      movq    %rax, %rsi
    // 1b: 8b 03                         movl    (%rbx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 33                         js      0x54 <_JIT_ENTRY+0x54>
    // 21: ff c8                         decl    %eax
    // 23: 89 03                         movl    %eax, (%rbx)
    // 25: 75 2d                         jne     0x54 <_JIT_ENTRY+0x54>
    // 27: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2e: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 35: 48 85 c0                      testq   %rax, %rax
    // 38: 74 11                         je      0x4b <_JIT_ENTRY+0x4b>
    // 3a: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 41: 48 89 d9                      movq    %rbx, %rcx
    // 44: ba 01 00 00 00                movl    $0x1, %edx
    // 49: ff d0                         callq   *%rax
    // 4b: 48 89 d9                      movq    %rbx, %rcx
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 54: 8b 07                         movl    (%rdi), %eax
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 78 06                         js      0x60 <_JIT_ENTRY+0x60>
    // 5a: ff c8                         decl    %eax
    // 5c: 89 07                         movl    %eax, (%rdi)
    // 5e: 74 18                         je      0x78 <_JIT_ENTRY+0x78>
    // 60: 48 85 f6                      testq   %rsi, %rsi
    // 63: 74 45                         je      0xaa <_JIT_ENTRY+0xaa>
    // 65: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 7f: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <_JIT_ENTRY+0x9c>
    // 8b: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 92: 48 89 f9                      movq    %rdi, %rcx
    // 95: ba 01 00 00 00                movl    $0x1, %edx
    // 9a: ff d0                         callq   *%rax
    // 9c: 48 89 f9                      movq    %rdi, %rcx
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // a5: 48 85 f6                      testq   %rsi, %rsi
    // a8: 75 bb                         jne     0x65 <_JIT_ENTRY+0x65>
    // aa: 48 83 c4 28                   addq    $0x28, %rsp
    // ae: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[181] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xf9, 0x48,
        0x89, 0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00,
        0x00, 0x48, 0x89, 0xd9, 0xba, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18,
        0x48, 0x85, 0xf6, 0x74, 0x45, 0x49, 0x89, 0x75,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xf6,
        0x75, 0xbb, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Add+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Add);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_ADD_UNICODE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 48 89 d9                      movq    %rbx, %rcx
    // f: 48 89 fa                      movq    %rdi, %rdx
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Concat
    // 18: 48 89 c6                      movq    %rax, %rsi
    // 1b: 8b 03                         movl    (%rbx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 33                         js      0x54 <_JIT_ENTRY+0x54>
    // 21: ff c8                         decl    %eax
    // 23: 89 03                         movl    %eax, (%rbx)
    // 25: 75 2d                         jne     0x54 <_JIT_ENTRY+0x54>
    // 27: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2e: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 35: 48 85 c0                      testq   %rax, %rax
    // 38: 74 11                         je      0x4b <_JIT_ENTRY+0x4b>
    // 3a: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 41: 48 89 d9                      movq    %rbx, %rcx
    // 44: ba 01 00 00 00                movl    $0x1, %edx
    // 49: ff d0                         callq   *%rax
    // 4b: 48 89 d9                      movq    %rbx, %rcx
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_ExactDealloc
    // 54: 8b 07                         movl    (%rdi), %eax
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 78 06                         js      0x60 <_JIT_ENTRY+0x60>
    // 5a: ff c8                         decl    %eax
    // 5c: 89 07                         movl    %eax, (%rdi)
    // 5e: 74 18                         je      0x78 <_JIT_ENTRY+0x78>
    // 60: 48 85 f6                      testq   %rsi, %rsi
    // 63: 74 45                         je      0xaa <_JIT_ENTRY+0xaa>
    // 65: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 7f: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <_JIT_ENTRY+0x9c>
    // 8b: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 92: 48 89 f9                      movq    %rdi, %rcx
    // 95: ba 01 00 00 00                movl    $0x1, %edx
    // 9a: ff d0                         callq   *%rax
    // 9c: 48 89 f9                      movq    %rdi, %rcx
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_ExactDealloc
    // a5: 48 85 f6                      testq   %rsi, %rsi
    // a8: 75 bb                         jne     0x65 <_JIT_ENTRY+0x65>
    // aa: 48 83 c4 28                   addq    $0x28, %rsp
    // ae: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[181] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x89, 0xd9, 0x48,
        0x89, 0xfa, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00,
        0x00, 0x48, 0x89, 0xd9, 0xba, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18,
        0x48, 0x85, 0xf6, 0x74, 0x45, 0x49, 0x89, 0x75,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xf6,
        0x75, 0xbb, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Concat+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Concat);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_INPLACE_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_INPLACE_ADD_UNICODE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 8: 48 63 3d 00 00 00 00          movslq  (%rip), %rdi            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 49 39 4c fc 50                cmpq    %rcx, 0x50(%r12,%rdi,8)
    // 14: 74 0b                         je      0x21 <_JIT_ENTRY+0x21>
    // 16: 48 83 c4 28                   addq    $0x28, %rsp
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 21: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 25: 8b 01                         movl    (%rcx), %eax
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 78 0c                         js      0x37 <_JIT_ENTRY+0x37>
    // 2b: ff c8                         decl    %eax
    // 2d: 89 01                         movl    %eax, (%rcx)
    // 2f: 75 06                         jne     0x37 <_JIT_ENTRY+0x37>
    // 31: ff 15 00 00 00 00             callq   *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 37: 49 8b 44 fc 50                movq    0x50(%r12,%rdi,8), %rax
    // 3c: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 41: 48 8d 4c 24 20                leaq    0x20(%rsp), %rcx
    // 46: 48 89 f2                      movq    %rsi, %rdx
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Append
    // 4f: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 54: 49 89 44 fc 50                movq    %rax, 0x50(%r12,%rdi,8)
    // 59: 8b 0e                         movl    (%rsi), %ecx
    // 5b: 85 c9                         testl   %ecx, %ecx
    // 5d: 78 38                         js      0x97 <_JIT_ENTRY+0x97>
    // 5f: ff c9                         decl    %ecx
    // 61: 89 0e                         movl    %ecx, (%rsi)
    // 63: 75 2d                         jne     0x92 <_JIT_ENTRY+0x92>
    // 65: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 6c: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 73: 48 85 c0                      testq   %rax, %rax
    // 76: 74 11                         je      0x89 <_JIT_ENTRY+0x89>
    // 78: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 7f: 48 89 f1                      movq    %rsi, %rcx
    // 82: ba 01 00 00 00                movl    $0x1, %edx
    // 87: ff d0                         callq   *%rax
    // 89: 48 89 f1                      movq    %rsi, %rcx
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_ExactDealloc
    // 92: 49 8b 44 fc 50                movq    0x50(%r12,%rdi,8), %rax
    // 97: 48 85 c0                      testq   %rax, %rax
    // 9a: 74 0f                         je      0xab <_JIT_ENTRY+0xab>
    // 9c: 49 83 c5 f0                   addq    $-0x10, %r13
    // a0: 48 83 c4 28                   addq    $0x28, %rsp
    // a4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xab <_JIT_ENTRY+0xab>
    // 00000000000000a7:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // ab: 48 83 c4 28                   addq    $0x28, %rsp
    // af: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb6 <_JIT_ENTRY+0xb6>
    // 00000000000000b2:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[182] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf0,
        0x48, 0x63, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x39, 0x4c, 0xfc, 0x50, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf8, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x44, 0xfc, 0x50, 0x48, 0x89, 0x44, 0x24,
        0x20, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x48, 0x89,
        0xf2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x44, 0x24, 0x20, 0x49, 0x89, 0x44, 0xfc,
        0x50, 0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x38, 0xff,
        0xc9, 0x89, 0x0e, 0x75, 0x2d, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x18,
        0x25, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00, 0x00, 0x48,
        0x89, 0xf1, 0xba, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x44, 0xfc, 0x50, 0x48,
        0x85, 0xc0, 0x74, 0x0f, 0x49, 0x83, 0xc5, 0xf0,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    // 10: &_Py_Dealloc+0x0
    // 18: &PyUnicode_Append+0x0
    // 20: &_PyRuntime+0x0
    // 28: &_PyUnicode_ExactDealloc+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyUnicode_Append);
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + 0x34);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_FLOAT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 8: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c: f2 0f 10 51 10                movsd   0x10(%rcx), %xmm2
    // 11: f2 0f 59 52 10                mulsd   0x10(%rdx), %xmm2
    // 16: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__PyFloat_FromDouble_ConsumeInputs
    // 1c: 48 85 c0                      testq   %rax, %rax
    // 1f: 74 13                         je      0x34 <_JIT_ENTRY+0x34>
    // 21: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 34: 48 83 c4 28                   addq    $0x28, %rsp
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf0,
        0x49, 0x8b, 0x55, 0xf8, 0xf2, 0x0f, 0x10, 0x51,
        0x10, 0xf2, 0x0f, 0x59, 0x52, 0x10, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x13, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_MULTIPLY_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 48 89 f9                      movq    %rdi, %rcx
    // f: 48 89 da                      movq    %rbx, %rdx
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__PyLong_Multiply
    // 18: 48 89 c6                      movq    %rax, %rsi
    // 1b: 8b 03                         movl    (%rbx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 33                         js      0x54 <_JIT_ENTRY+0x54>
    // 21: ff c8                         decl    %eax
    // 23: 89 03                         movl    %eax, (%rbx)
    // 25: 75 2d                         jne     0x54 <_JIT_ENTRY+0x54>
    // 27: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2e: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 35: 48 85 c0                      testq   %rax, %rax
    // 38: 74 11                         je      0x4b <_JIT_ENTRY+0x4b>
    // 3a: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 41: 48 89 d9                      movq    %rbx, %rcx
    // 44: ba 01 00 00 00                movl    $0x1, %edx
    // 49: ff d0                         callq   *%rax
    // 4b: 48 89 d9                      movq    %rbx, %rcx
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 54: 8b 07                         movl    (%rdi), %eax
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 78 06                         js      0x60 <_JIT_ENTRY+0x60>
    // 5a: ff c8                         decl    %eax
    // 5c: 89 07                         movl    %eax, (%rdi)
    // 5e: 74 18                         je      0x78 <_JIT_ENTRY+0x78>
    // 60: 48 85 f6                      testq   %rsi, %rsi
    // 63: 74 45                         je      0xaa <_JIT_ENTRY+0xaa>
    // 65: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 7f: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <_JIT_ENTRY+0x9c>
    // 8b: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 92: 48 89 f9                      movq    %rdi, %rcx
    // 95: ba 01 00 00 00                movl    $0x1, %edx
    // 9a: ff d0                         callq   *%rax
    // 9c: 48 89 f9                      movq    %rdi, %rcx
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // a5: 48 85 f6                      testq   %rsi, %rsi
    // a8: 75 bb                         jne     0x65 <_JIT_ENTRY+0x65>
    // aa: 48 83 c4 28                   addq    $0x28, %rsp
    // ae: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[181] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xf9, 0x48,
        0x89, 0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00,
        0x00, 0x48, 0x89, 0xd9, 0xba, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18,
        0x48, 0x85, 0xf6, 0x74, 0x45, 0x49, 0x89, 0x75,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xf6,
        0x75, 0xbb, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Multiply+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Multiply);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_FLOAT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 8: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c: f2 0f 10 51 10                movsd   0x10(%rcx), %xmm2
    // 11: f2 0f 5c 52 10                subsd   0x10(%rdx), %xmm2
    // 16: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__PyFloat_FromDouble_ConsumeInputs
    // 1c: 48 85 c0                      testq   %rax, %rax
    // 1f: 74 13                         je      0x34 <_JIT_ENTRY+0x34>
    // 21: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 25: 49 83 c5 f8                   addq    $-0x8, %r13
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 34: 48 83 c4 28                   addq    $0x28, %rsp
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf0,
        0x49, 0x8b, 0x55, 0xf8, 0xf2, 0x0f, 0x10, 0x51,
        0x10, 0xf2, 0x0f, 0x5c, 0x52, 0x10, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x13, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyFloat_FromDouble_ConsumeInputs+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyFloat_FromDouble_ConsumeInputs);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_OP_SUBTRACT_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // c: 48 89 f9                      movq    %rdi, %rcx
    // f: 48 89 da                      movq    %rbx, %rdx
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__PyLong_Subtract
    // 18: 48 89 c6                      movq    %rax, %rsi
    // 1b: 8b 03                         movl    (%rbx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 33                         js      0x54 <_JIT_ENTRY+0x54>
    // 21: ff c8                         decl    %eax
    // 23: 89 03                         movl    %eax, (%rbx)
    // 25: 75 2d                         jne     0x54 <_JIT_ENTRY+0x54>
    // 27: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2e: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 35: 48 85 c0                      testq   %rax, %rax
    // 38: 74 11                         je      0x4b <_JIT_ENTRY+0x4b>
    // 3a: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 41: 48 89 d9                      movq    %rbx, %rcx
    // 44: ba 01 00 00 00                movl    $0x1, %edx
    // 49: ff d0                         callq   *%rax
    // 4b: 48 89 d9                      movq    %rbx, %rcx
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 54: 8b 07                         movl    (%rdi), %eax
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 78 06                         js      0x60 <_JIT_ENTRY+0x60>
    // 5a: ff c8                         decl    %eax
    // 5c: 89 07                         movl    %eax, (%rdi)
    // 5e: 74 18                         je      0x78 <_JIT_ENTRY+0x78>
    // 60: 48 85 f6                      testq   %rsi, %rsi
    // 63: 74 45                         je      0xaa <_JIT_ENTRY+0xaa>
    // 65: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 7f: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <_JIT_ENTRY+0x9c>
    // 8b: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 92: 48 89 f9                      movq    %rdi, %rcx
    // 95: ba 01 00 00 00                movl    $0x1, %edx
    // 9a: ff d0                         callq   *%rax
    // 9c: 48 89 f9                      movq    %rdi, %rcx
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // a5: 48 85 f6                      testq   %rsi, %rsi
    // a8: 75 bb                         jne     0x65 <_JIT_ENTRY+0x65>
    // aa: 48 83 c4 28                   addq    $0x28, %rsp
    // ae: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[181] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xf9, 0x48,
        0x89, 0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00,
        0x00, 0x48, 0x89, 0xd9, 0xba, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18,
        0x48, 0x85, 0xf6, 0x74, 0x45, 0x49, 0x89, 0x75,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xf6,
        0x75, 0xbb, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyLong_Subtract+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Subtract);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SLICE.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 8: 49 8b 75 e8                   movq    -0x18(%r13), %rsi
    // c: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__PyBuildSlice_ConsumeRefs
    // 1b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 20: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 29: 48 85 c0                      testq   %rax, %rax
    // 2c: 74 4a                         je      0x78 <_JIT_ENTRY+0x78>
    // 2e: 48 89 c3                      movq    %rax, %rbx
    // 31: 49 83 c5 f0                   addq    $-0x10, %r13
    // 35: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 3a: 48 89 f1                      movq    %rsi, %rcx
    // 3d: 48 89 c2                      movq    %rax, %rdx
    // 40: ff 15 00 00 00 00             callq   *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GetItem
    // 46: 48 89 c7                      movq    %rax, %rdi
    // 49: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 57: 8b 03                         movl    (%rbx), %eax
    // 59: 85 c0                         testl   %eax, %eax
    // 5b: 78 0f                         js      0x6c <_JIT_ENTRY+0x6c>
    // 5d: ff c8                         decl    %eax
    // 5f: 89 03                         movl    %eax, (%rbx)
    // 61: 75 09                         jne     0x6c <_JIT_ENTRY+0x6c>
    // 63: 48 89 d9                      movq    %rbx, %rcx
    // 66: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 6c: 49 83 c5 10                   addq    $0x10, %r13
    // 70: 8b 06                         movl    (%rsi), %eax
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 79 0a                         jns     0x80 <_JIT_ENTRY+0x80>
    // 76: eb 0e                         jmp     0x86 <_JIT_ENTRY+0x86>
    // 78: 31 ff                         xorl    %edi, %edi
    // 7a: 8b 06                         movl    (%rsi), %eax
    // 7c: 85 c0                         testl   %eax, %eax
    // 7e: 78 06                         js      0x86 <_JIT_ENTRY+0x86>
    // 80: ff c8                         decl    %eax
    // 82: 89 06                         movl    %eax, (%rsi)
    // 84: 74 18                         je      0x9e <_JIT_ENTRY+0x9e>
    // 86: 48 85 ff                      testq   %rdi, %rdi
    // 89: 74 21                         je      0xac <_JIT_ENTRY+0xac>
    // 8b: 49 89 7d e8                   movq    %rdi, -0x18(%r13)
    // 8f: 49 83 c5 f0                   addq    $-0x10, %r13
    // 93: 48 83 c4 28                   addq    $0x28, %rsp
    // 97: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9e <_JIT_ENTRY+0x9e>
    // 000000000000009a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 9e: 48 89 f1                      movq    %rsi, %rcx
    // a1: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa7 <_JIT_ENTRY+0xa7>
    // 00000000000000a3:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a7: 48 85 ff                      testq   %rdi, %rdi
    // aa: 75 df                         jne     0x8b <_JIT_ENTRY+0x8b>
    // ac: 48 83 c4 28                   addq    $0x28, %rsp
    // b0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb7 <_JIT_ENTRY+0xb7>
    // 00000000000000b3:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[183] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x55, 0xf8,
        0x49, 0x8b, 0x75, 0xe8, 0x49, 0x8b, 0x4d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x4a, 0x48, 0x89,
        0xc3, 0x49, 0x83, 0xc5, 0xf0, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xc2,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89,
        0x03, 0x75, 0x09, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0x10,
        0x8b, 0x06, 0x85, 0xc0, 0x79, 0x0a, 0xeb, 0x0e,
        0x31, 0xff, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x18, 0x48, 0x85,
        0xff, 0x74, 0x21, 0x49, 0x89, 0x7d, 0xe8, 0x49,
        0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xff, 0x75, 0xdf, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_GetItem+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x9a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 89 d9                      movq    %rbx, %rcx
    // 14: 48 89 fa                      movq    %rdi, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GetItem
    // 1d: 48 89 c6                      movq    %rax, %rsi
    // 20: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 25: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2e: 8b 03                         movl    (%rbx), %eax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 0f                         js      0x43 <_JIT_ENTRY+0x43>
    // 34: ff c8                         decl    %eax
    // 36: 89 03                         movl    %eax, (%rbx)
    // 38: 75 09                         jne     0x43 <_JIT_ENTRY+0x43>
    // 3a: 48 89 d9                      movq    %rbx, %rcx
    // 3d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 43: 8b 07                         movl    (%rdi), %eax
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 78 06                         js      0x4f <_JIT_ENTRY+0x4f>
    // 49: ff c8                         decl    %eax
    // 4b: 89 07                         movl    %eax, (%rdi)
    // 4d: 74 18                         je      0x67 <_JIT_ENTRY+0x67>
    // 4f: 48 85 f6                      testq   %rsi, %rsi
    // 52: 74 21                         je      0x75 <_JIT_ENTRY+0x75>
    // 54: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 58: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5c: 48 83 c4 28                   addq    $0x28, %rsp
    // 60: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 67: 48 89 f9                      movq    %rdi, %rcx
    // 6a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 70: 48 85 f6                      testq   %rsi, %rsi
    // 73: 75 df                         jne     0x54 <_JIT_ENTRY+0x54>
    // 75: 48 83 c4 28                   addq    $0x28, %rsp
    // 79: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[128] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xd9, 0x48, 0x89, 0xfa, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc6,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18, 0x48,
        0x85, 0xf6, 0x74, 0x21, 0x49, 0x89, 0x75, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xf6, 0x75, 0xdf, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_GetItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + 0x14);
}

void
emit__BINARY_SUBSCR_CHECK_FUNC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_CHECK_FUNC.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: f6 81 a9 00 00 00 02          testb   $0x2, 0xa9(%rcx)
    // f: 74 48                         je      0x59 <_JIT_ENTRY+0x59>
    // 11: 48 8b 81 90 03 00 00          movq    0x390(%rcx), %rax
    // 18: 48 85 c0                      testq   %rax, %rax
    // 1b: 74 3c                         je      0x59 <_JIT_ENTRY+0x59>
    // 1d: 8b 90 90 00 00 00             movl    0x90(%rax), %edx
    // 23: 3b 91 98 03 00 00             cmpl    0x398(%rcx), %edx
    // 29: 75 2e                         jne     0x59 <_JIT_ENTRY+0x59>
    // 2b: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 32: 48 85 c9                      testq   %rcx, %rcx
    // 35: 74 22                         je      0x59 <_JIT_ENTRY+0x59>
    // 37: 48 8b 40 30                   movq    0x30(%rax), %rax
    // 3b: 48 63 40 4c                   movslq  0x4c(%rax), %rax
    // 3f: 49 8b 96 f0 00 00 00          movq    0xf0(%r14), %rdx
    // 46: 48 29 ca                      subq    %rcx, %rdx
    // 49: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 4d: 48 39 c2                      cmpq    %rax, %rdx
    // 50: 7e 07                         jle     0x59 <_JIT_ENTRY+0x59>
    // 52: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 59: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[96] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x48, 0x08,
        0xf6, 0x81, 0xa9, 0x00, 0x00, 0x00, 0x02, 0x74,
        0x48, 0x48, 0x8b, 0x81, 0x90, 0x03, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x3c, 0x8b, 0x90, 0x90,
        0x00, 0x00, 0x00, 0x3b, 0x91, 0x98, 0x03, 0x00,
        0x00, 0x75, 0x2e, 0x49, 0x8b, 0x8e, 0xe8, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0x22, 0x48,
        0x8b, 0x40, 0x30, 0x48, 0x63, 0x40, 0x4c, 0x49,
        0x8b, 0x96, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x29,
        0xca, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xc2,
        0x7e, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x4);
}

void
emit__BINARY_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_DICT.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 24: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 29: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 2e: 48 89 d9                      movq    %rbx, %rcx
    // 31: 48 89 f2                      movq    %rsi, %rdx
    // 34: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp_PyDict_GetItemRef
    // 3a: 89 c7                         movl    %eax, %edi
    // 3c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 41: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 75 1c                         jne     0x6a <_JIT_ENTRY+0x6a>
    // 4e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 53: 48 89 f1                      movq    %rsi, %rcx
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  IMAGE_REL_AMD64_REL32        __imp__PyErr_SetKeyError
    // 5c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 61: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6a: 8b 03                         movl    (%rbx), %eax
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 78 0f                         js      0x7f <_JIT_ENTRY+0x7f>
    // 70: ff c8                         decl    %eax
    // 72: 89 03                         movl    %eax, (%rbx)
    // 74: 75 09                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 76: 48 89 d9                      movq    %rbx, %rcx
    // 79: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7f: 8b 06                         movl    (%rsi), %eax
    // 81: 85 c0                         testl   %eax, %eax
    // 83: 78 06                         js      0x8b <_JIT_ENTRY+0x8b>
    // 85: ff c8                         decl    %eax
    // 87: 89 06                         movl    %eax, (%rsi)
    // 89: 74 1c                         je      0xa7 <_JIT_ENTRY+0xa7>
    // 8b: 85 ff                         testl   %edi, %edi
    // 8d: 7e 25                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 8f: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 94: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 98: 49 83 c5 f8                   addq    $-0x8, %r13
    // 9c: 48 83 c4 28                   addq    $0x28, %rsp
    // a0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xa7 <_JIT_ENTRY+0xa7>
    // 00000000000000a3:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // a7: 48 89 f1                      movq    %rsi, %rcx
    // aa: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b0: 85 ff                         testl   %edi, %edi
    // b2: 7f db                         jg      0x8f <_JIT_ENTRY+0x8f>
    // b4: 48 83 c4 28                   addq    $0x28, %rsp
    // b8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbf <_JIT_ENTRY+0xbf>
    // 00000000000000bb:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[191] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x89,
        0xd9, 0x48, 0x89, 0xf2, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xc7, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x75, 0x1c, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x06, 0x74, 0x1c, 0x85, 0xff, 0x7e, 0x25, 0x48,
        0x8b, 0x44, 0x24, 0x20, 0x49, 0x89, 0x45, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xff, 0x7f, 0xdb, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyDict_GetItemRef+0x0
    // 18: &_PyErr_SetKeyError+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyDict_GetItemRef);
    patch_64(data + 0x18, (uintptr_t)&_PyErr_SetKeyError);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x2c);
}

void
emit__BINARY_SUBSCR_INIT_CALL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_INIT_CALL.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 41 0f 10 45 f0                movups  -0x10(%r13), %xmm0
    // 5: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 9: 48 8b 40 08                   movq    0x8(%rax), %rax
    // d: 48 8b 90 90 03 00 00          movq    0x390(%rax), %rdx
    // 14: 8b 02                         movl    (%rdx), %eax
    // 16: 85 c0                         testl   %eax, %eax
    // 18: 78 04                         js      0x1e <_JIT_ENTRY+0x1e>
    // 1a: ff c0                         incl    %eax
    // 1c: 89 02                         movl    %eax, (%rdx)
    // 1e: 48 8b 4a 30                   movq    0x30(%rdx), %rcx
    // 22: 49 8b 86 e8 00 00 00          movq    0xe8(%r14), %rax
    // 29: 48 63 71 4c                   movslq  0x4c(%rcx), %rsi
    // 2d: 48 8d 34 f0                   leaq    (%rax,%rsi,8), %rsi
    // 31: 49 89 b6 e8 00 00 00          movq    %rsi, 0xe8(%r14)
    // 38: 4c 89 60 08                   movq    %r12, 0x8(%rax)
    // 3c: 48 89 50 10                   movq    %rdx, 0x10(%rax)
    // 40: 8b 31                         movl    (%rcx), %esi
    // 42: 85 f6                         testl   %esi, %esi
    // 44: 78 04                         js      0x4a <_JIT_ENTRY+0x4a>
    // 46: ff c6                         incl    %esi
    // 48: 89 31                         movl    %esi, (%rcx)
    // 4a: 48 89 08                      movq    %rcx, (%rax)
    // 4d: 48 8b 72 18                   movq    0x18(%rdx), %rsi
    // 51: 48 89 70 20                   movq    %rsi, 0x20(%rax)
    // 55: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 59: 48 89 50 18                   movq    %rdx, 0x18(%rax)
    // 5d: 48 c7 40 28 00 00 00 00       movq    $0x0, 0x28(%rax)
    // 65: 48 63 51 48                   movslq  0x48(%rcx), %rdx
    // 69: 48 8d 54 d0 50                leaq    0x50(%rax,%rdx,8), %rdx
    // 6e: 48 89 50 40                   movq    %rdx, 0x40(%rax)
    // 72: 48 c7 40 30 00 00 00 00       movq    $0x0, 0x30(%rax)
    // 7a: 48 8d 91 d0 00 00 00          leaq    0xd0(%rcx), %rdx
    // 81: 48 89 50 38                   movq    %rdx, 0x38(%rax)
    // 85: c7 40 48 00 00 00 00          movl    $0x0, 0x48(%rax)
    // 8c: 83 79 48 03                   cmpl    $0x3, 0x48(%rcx)
    // 90: 7c 2a                         jl      0xbc <_JIT_ENTRY+0xbc>
    // 92: ba 0c 00 00 00                movl    $0xc, %edx
    // 97: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // a0: 48 c7 04 d0 00 00 00 00       movq    $0x0, (%rax,%rdx,8)
    // a8: 48 63 71 48                   movslq  0x48(%rcx), %rsi
    // ac: 48 8d 7a 01                   leaq    0x1(%rdx), %rdi
    // b0: 48 83 c2 f7                   addq    $-0x9, %rdx
    // b4: 48 39 f2                      cmpq    %rsi, %rdx
    // b7: 48 89 fa                      movq    %rdi, %rdx
    // ba: 7c e4                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // bc: 0f 11 40 50                   movups  %xmm0, 0x50(%rax)
    // c0: 66 41 c7 44 24 48 02 00       movw    $0x2, 0x48(%r12)
    // c8: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // cc: 49 83 c5 f8                   addq    $-0x8, %r13
    // d0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd7 <_JIT_ENTRY+0xd7>
    // 00000000000000d3:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[208] = {
        0x41, 0x0f, 0x10, 0x45, 0xf0, 0x49, 0x8b, 0x45,
        0xf0, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x90,
        0x90, 0x03, 0x00, 0x00, 0x8b, 0x02, 0x85, 0xc0,
        0x78, 0x04, 0xff, 0xc0, 0x89, 0x02, 0x48, 0x8b,
        0x4a, 0x30, 0x49, 0x8b, 0x86, 0xe8, 0x00, 0x00,
        0x00, 0x48, 0x63, 0x71, 0x4c, 0x48, 0x8d, 0x34,
        0xf0, 0x49, 0x89, 0xb6, 0xe8, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x60, 0x08, 0x48, 0x89, 0x50, 0x10,
        0x8b, 0x31, 0x85, 0xf6, 0x78, 0x04, 0xff, 0xc6,
        0x89, 0x31, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x72,
        0x18, 0x48, 0x89, 0x70, 0x20, 0x48, 0x8b, 0x52,
        0x10, 0x48, 0x89, 0x50, 0x18, 0x48, 0xc7, 0x40,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63, 0x51,
        0x48, 0x48, 0x8d, 0x54, 0xd0, 0x50, 0x48, 0x89,
        0x50, 0x40, 0x48, 0xc7, 0x40, 0x30, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x91, 0xd0, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x50, 0x38, 0xc7, 0x40, 0x48,
        0x00, 0x00, 0x00, 0x00, 0x83, 0x79, 0x48, 0x03,
        0x7c, 0x2a, 0xba, 0x0c, 0x00, 0x00, 0x00, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x04, 0xd0, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x63, 0x71, 0x48, 0x48, 0x8d, 0x7a, 0x01,
        0x48, 0x83, 0xc2, 0xf7, 0x48, 0x39, 0xf2, 0x48,
        0x89, 0xfa, 0x7c, 0xe4, 0x0f, 0x11, 0x40, 0x50,
        0x66, 0x41, 0xc7, 0x44, 0x24, 0x48, 0x02, 0x00,
        0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__BINARY_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_LIST_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 13: 0f 85 9b 00 00 00             jne     0xb4 <_JIT_ENTRY+0xb4>
    // 19: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 1d: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 21: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp_PyList_Type
    // 28: 0f 85 86 00 00 00             jne     0xb4 <_JIT_ENTRY+0xb4>
    // 2e: 48 83 7f 10 09                cmpq    $0x9, 0x10(%rdi)
    // 33: 73 7f                         jae     0xb4 <_JIT_ENTRY+0xb4>
    // 35: 8b 47 18                      movl    0x18(%rdi), %eax
    // 38: 48 39 46 10                   cmpq    %rax, 0x10(%rsi)
    // 3c: 7e 76                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 3e: 48 8b 4e 18                   movq    0x18(%rsi), %rcx
    // 42: 48 8b 1c c1                   movq    (%rcx,%rax,8), %rbx
    // 46: 8b 03                         movl    (%rbx), %eax
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 04                         js      0x50 <_JIT_ENTRY+0x50>
    // 4c: ff c0                         incl    %eax
    // 4e: 89 03                         movl    %eax, (%rbx)
    // 50: 8b 07                         movl    (%rdi), %eax
    // 52: 85 c0                         testl   %eax, %eax
    // 54: 78 33                         js      0x89 <_JIT_ENTRY+0x89>
    // 56: ff c8                         decl    %eax
    // 58: 89 07                         movl    %eax, (%rdi)
    // 5a: 75 2d                         jne     0x89 <_JIT_ENTRY+0x89>
    // 5c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 63: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 6a: 48 85 c0                      testq   %rax, %rax
    // 6d: 74 11                         je      0x80 <_JIT_ENTRY+0x80>
    // 6f: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 76: 48 89 f9                      movq    %rdi, %rcx
    // 79: ba 01 00 00 00                movl    $0x1, %edx
    // 7e: ff d0                         callq   *%rax
    // 80: 48 89 f9                      movq    %rdi, %rcx
    // 83: ff 15 00 00 00 00             callq   *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 89: 49 8d 7d f8                   leaq    -0x8(%r13), %rdi
    // 8d: 8b 06                         movl    (%rsi), %eax
    // 8f: 85 c0                         testl   %eax, %eax
    // 91: 78 0f                         js      0xa2 <_JIT_ENTRY+0xa2>
    // 93: ff c8                         decl    %eax
    // 95: 89 06                         movl    %eax, (%rsi)
    // 97: 75 09                         jne     0xa2 <_JIT_ENTRY+0xa2>
    // 99: 48 89 f1                      movq    %rsi, %rcx
    // 9c: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa2 <_JIT_ENTRY+0xa2>
    // 000000000000009e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a2: 49 89 5d f0                   movq    %rbx, -0x10(%r13)
    // a6: 49 89 fd                      movq    %rdi, %r13
    // a9: 48 83 c4 28                   addq    $0x28, %rsp
    // ad: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b4: 48 83 c4 28                   addq    $0x28, %rsp
    // b8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbf <_JIT_ENTRY+0xbf>
    // 00000000000000bb:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[191] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x85, 0x9b, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0x86, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x7f, 0x10, 0x09, 0x73, 0x7f, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x46, 0x10, 0x7e, 0x76, 0x48, 0x8b,
        0x4e, 0x18, 0x48, 0x8b, 0x1c, 0xc1, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x03,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x33, 0xff, 0xc8,
        0x89, 0x07, 0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x18, 0x25,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x4c,
        0x8b, 0x81, 0x20, 0x25, 0x00, 0x00, 0x48, 0x89,
        0xf9, 0xba, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0,
        0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8d, 0x7d, 0xf8, 0x8b, 0x06, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x06, 0x75,
        0x09, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x5d, 0xf0, 0x49, 0x89,
        0xfd, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9e, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x2c);
}

void
emit__BINARY_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_STR_INT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 13: 0f 85 bb 00 00 00             jne     0xd4 <_JIT_ENTRY+0xd4>
    // 19: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 1d: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 21: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // 28: 0f 85 a6 00 00 00             jne     0xd4 <_JIT_ENTRY+0xd4>
    // 2e: 48 83 7f 10 09                cmpq    $0x9, 0x10(%rdi)
    // 33: 0f 83 9b 00 00 00             jae     0xd4 <_JIT_ENTRY+0xd4>
    // 39: 8b 47 18                      movl    0x18(%rdi), %eax
    // 3c: 48 39 46 10                   cmpq    %rax, 0x10(%rsi)
    // 40: 0f 8e 8e 00 00 00             jle     0xd4 <_JIT_ENTRY+0xd4>
    // 46: 8b 4e 20                      movl    0x20(%rsi), %ecx
    // 49: 89 ca                         movl    %ecx, %edx
    // 4b: c1 ea 02                      shrl    $0x2, %edx
    // 4e: 83 e2 07                      andl    $0x7, %edx
    // 51: 83 fa 02                      cmpl    $0x2, %edx
    // 54: 74 14                         je      0x6a <_JIT_ENTRY+0x6a>
    // 56: 83 fa 01                      cmpl    $0x1, %edx
    // 59: 75 1e                         jne     0x79 <_JIT_ENTRY+0x79>
    // 5b: f6 c1 20                      testb   $0x20, %cl
    // 5e: 75 24                         jne     0x84 <_JIT_ENTRY+0x84>
    // 60: 48 8b 4e 38                   movq    0x38(%rsi), %rcx
    // 64: 0f b6 1c 01                   movzbl  (%rcx,%rax), %ebx
    // 68: eb 62                         jmp     0xcc <_JIT_ENTRY+0xcc>
    // 6a: f6 c1 20                      testb   $0x20, %cl
    // 6d: 75 2e                         jne     0x9d <_JIT_ENTRY+0x9d>
    // 6f: 48 8b 4e 38                   movq    0x38(%rsi), %rcx
    // 73: 0f b7 1c 41                   movzwl  (%rcx,%rax,2), %ebx
    // 77: eb 53                         jmp     0xcc <_JIT_ENTRY+0xcc>
    // 79: f6 c1 20                      testb   $0x20, %cl
    // 7c: 75 38                         jne     0xb6 <_JIT_ENTRY+0xb6>
    // 7e: 48 8b 4e 38                   movq    0x38(%rsi), %rcx
    // 82: eb 45                         jmp     0xc9 <_JIT_ENTRY+0xc9>
    // 84: 31 d2                         xorl    %edx, %edx
    // 86: f6 c1 40                      testb   $0x40, %cl
    // 89: 0f 94 c2                      sete    %dl
    // 8c: c1 e2 04                      shll    $0x4, %edx
    // 8f: 48 8d 0c 16                   leaq    (%rsi,%rdx), %rcx
    // 93: 48 83 c1 28                   addq    $0x28, %rcx
    // 97: 0f b6 1c 01                   movzbl  (%rcx,%rax), %ebx
    // 9b: eb 2f                         jmp     0xcc <_JIT_ENTRY+0xcc>
    // 9d: 31 d2                         xorl    %edx, %edx
    // 9f: f6 c1 40                      testb   $0x40, %cl
    // a2: 0f 94 c2                      sete    %dl
    // a5: c1 e2 04                      shll    $0x4, %edx
    // a8: 48 8d 0c 16                   leaq    (%rsi,%rdx), %rcx
    // ac: 48 83 c1 28                   addq    $0x28, %rcx
    // b0: 0f b7 1c 41                   movzwl  (%rcx,%rax,2), %ebx
    // b4: eb 16                         jmp     0xcc <_JIT_ENTRY+0xcc>
    // b6: 31 d2                         xorl    %edx, %edx
    // b8: f6 c1 40                      testb   $0x40, %cl
    // bb: 0f 94 c2                      sete    %dl
    // be: c1 e2 04                      shll    $0x4, %edx
    // c1: 48 8d 0c 16                   leaq    (%rsi,%rdx), %rcx
    // c5: 48 83 c1 28                   addq    $0x28, %rcx
    // c9: 8b 1c 81                      movl    (%rcx,%rax,4), %ebx
    // cc: 81 fb 80 00 00 00             cmpl    $0x80, %ebx
    // d2: 72 0b                         jb      0xdf <_JIT_ENTRY+0xdf>
    // d4: 48 83 c4 28                   addq    $0x28, %rsp
    // d8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // df: 8b 07                         movl    (%rdi), %eax
    // e1: 85 c0                         testl   %eax, %eax
    // e3: 78 33                         js      0x118 <_JIT_ENTRY+0x118>
    // e5: ff c8                         decl    %eax
    // e7: 89 07                         movl    %eax, (%rdi)
    // e9: 75 2d                         jne     0x118 <_JIT_ENTRY+0x118>
    // eb: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xf2 <_JIT_ENTRY+0xf2>
    // 00000000000000ee:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // f2: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // f9: 48 85 c0                      testq   %rax, %rax
    // fc: 74 11                         je      0x10f <_JIT_ENTRY+0x10f>
    // fe: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 105: 48 89 f9                      movq    %rdi, %rcx
    // 108: ba 01 00 00 00                movl    $0x1, %edx
    // 10d: ff d0                         callq   *%rax
    // 10f: 48 89 f9                      movq    %rdi, %rcx
    // 112: ff 15 00 00 00 00             callq   *(%rip)                 # 0x118 <_JIT_ENTRY+0x118>
    // 0000000000000114:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 118: 49 8d 7d f8                   leaq    -0x8(%r13), %rdi
    // 11c: 8b 06                         movl    (%rsi), %eax
    // 11e: 85 c0                         testl   %eax, %eax
    // 120: 78 0f                         js      0x131 <_JIT_ENTRY+0x131>
    // 122: ff c8                         decl    %eax
    // 124: 89 06                         movl    %eax, (%rsi)
    // 126: 75 09                         jne     0x131 <_JIT_ENTRY+0x131>
    // 128: 48 89 f1                      movq    %rsi, %rcx
    // 12b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x131 <_JIT_ENTRY+0x131>
    // 000000000000012d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 131: 89 d8                         movl    %ebx, %eax
    // 133: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
    // 137: 48 c1 e0 04                   shlq    $0x4, %rax
    // 13b: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x142 <_JIT_ENTRY+0x142>
    // 000000000000013e:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 142: 48 01 c8                      addq    %rcx, %rax
    // 145: 48 05 08 20 01 00             addq    $0x12008, %rax          # imm = 0x12008
    // 14b: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 14f: 49 89 fd                      movq    %rdi, %r13
    // 152: 48 83 c4 28                   addq    $0x28, %rsp
    // 156: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x15d <_JIT_ENTRY+0x15d>
    // 0000000000000159:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[342] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x85, 0xbb, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xa6, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x7f, 0x10, 0x09, 0x0f, 0x83, 0x9b, 0x00, 0x00,
        0x00, 0x8b, 0x47, 0x18, 0x48, 0x39, 0x46, 0x10,
        0x0f, 0x8e, 0x8e, 0x00, 0x00, 0x00, 0x8b, 0x4e,
        0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2,
        0x07, 0x83, 0xfa, 0x02, 0x74, 0x14, 0x83, 0xfa,
        0x01, 0x75, 0x1e, 0xf6, 0xc1, 0x20, 0x75, 0x24,
        0x48, 0x8b, 0x4e, 0x38, 0x0f, 0xb6, 0x1c, 0x01,
        0xeb, 0x62, 0xf6, 0xc1, 0x20, 0x75, 0x2e, 0x48,
        0x8b, 0x4e, 0x38, 0x0f, 0xb7, 0x1c, 0x41, 0xeb,
        0x53, 0xf6, 0xc1, 0x20, 0x75, 0x38, 0x48, 0x8b,
        0x4e, 0x38, 0xeb, 0x45, 0x31, 0xd2, 0xf6, 0xc1,
        0x40, 0x0f, 0x94, 0xc2, 0xc1, 0xe2, 0x04, 0x48,
        0x8d, 0x0c, 0x16, 0x48, 0x83, 0xc1, 0x28, 0x0f,
        0xb6, 0x1c, 0x01, 0xeb, 0x2f, 0x31, 0xd2, 0xf6,
        0xc1, 0x40, 0x0f, 0x94, 0xc2, 0xc1, 0xe2, 0x04,
        0x48, 0x8d, 0x0c, 0x16, 0x48, 0x83, 0xc1, 0x28,
        0x0f, 0xb7, 0x1c, 0x41, 0xeb, 0x16, 0x31, 0xd2,
        0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0xc1, 0xe2,
        0x04, 0x48, 0x8d, 0x0c, 0x16, 0x48, 0x83, 0xc1,
        0x28, 0x8b, 0x1c, 0x81, 0x81, 0xfb, 0x80, 0x00,
        0x00, 0x00, 0x72, 0x0b, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x33, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x81, 0x18, 0x25, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x4c, 0x8b,
        0x81, 0x20, 0x25, 0x00, 0x00, 0x48, 0x89, 0xf9,
        0xba, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48,
        0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8d, 0x7d, 0xf8, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x0f, 0xff, 0xc8, 0x89, 0x06, 0x75, 0x09,
        0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x48, 0x8d, 0x04, 0x40, 0x48,
        0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0x08,
        0x20, 0x01, 0x00, 0x49, 0x89, 0x45, 0xf0, 0x49,
        0x89, 0xfd, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyUnicode_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_PyRuntime+0x0
    // 20: &_PyLong_ExactDealloc+0x0
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xee, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x114, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x12d, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x13e, (uintptr_t)data + 0x14);
}

void
emit__BINARY_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BINARY_SUBSCR_TUPLE_INT.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 13: 0f 85 98 00 00 00             jne     0xb1 <_JIT_ENTRY+0xb1>
    // 19: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 1d: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 21: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_Type
    // 28: 0f 85 83 00 00 00             jne     0xb1 <_JIT_ENTRY+0xb1>
    // 2e: 48 83 7f 10 09                cmpq    $0x9, 0x10(%rdi)
    // 33: 73 7c                         jae     0xb1 <_JIT_ENTRY+0xb1>
    // 35: 8b 47 18                      movl    0x18(%rdi), %eax
    // 38: 48 39 46 10                   cmpq    %rax, 0x10(%rsi)
    // 3c: 7e 73                         jle     0xb1 <_JIT_ENTRY+0xb1>
    // 3e: 48 8b 5c c6 18                movq    0x18(%rsi,%rax,8), %rbx
    // 43: 8b 03                         movl    (%rbx), %eax
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 78 04                         js      0x4d <_JIT_ENTRY+0x4d>
    // 49: ff c0                         incl    %eax
    // 4b: 89 03                         movl    %eax, (%rbx)
    // 4d: 8b 07                         movl    (%rdi), %eax
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 78 33                         js      0x86 <_JIT_ENTRY+0x86>
    // 53: ff c8                         decl    %eax
    // 55: 89 07                         movl    %eax, (%rdi)
    // 57: 75 2d                         jne     0x86 <_JIT_ENTRY+0x86>
    // 59: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 60: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 67: 48 85 c0                      testq   %rax, %rax
    // 6a: 74 11                         je      0x7d <_JIT_ENTRY+0x7d>
    // 6c: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 73: 48 89 f9                      movq    %rdi, %rcx
    // 76: ba 01 00 00 00                movl    $0x1, %edx
    // 7b: ff d0                         callq   *%rax
    // 7d: 48 89 f9                      movq    %rdi, %rcx
    // 80: ff 15 00 00 00 00             callq   *(%rip)                 # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 86: 49 8d 7d f8                   leaq    -0x8(%r13), %rdi
    // 8a: 8b 06                         movl    (%rsi), %eax
    // 8c: 85 c0                         testl   %eax, %eax
    // 8e: 78 0f                         js      0x9f <_JIT_ENTRY+0x9f>
    // 90: ff c8                         decl    %eax
    // 92: 89 06                         movl    %eax, (%rsi)
    // 94: 75 09                         jne     0x9f <_JIT_ENTRY+0x9f>
    // 96: 48 89 f1                      movq    %rsi, %rcx
    // 99: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 9f: 49 89 5d f0                   movq    %rbx, -0x10(%r13)
    // a3: 49 89 fd                      movq    %rdi, %r13
    // a6: 48 83 c4 28                   addq    $0x28, %rsp
    // aa: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb1 <_JIT_ENTRY+0xb1>
    // 00000000000000ad:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b1: 48 83 c4 28                   addq    $0x28, %rsp
    // b5: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000b8:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[188] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x85, 0x98, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0x83, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x7f, 0x10, 0x09, 0x73, 0x7c, 0x8b, 0x47, 0x18,
        0x48, 0x39, 0x46, 0x10, 0x7e, 0x73, 0x48, 0x8b,
        0x5c, 0xc6, 0x18, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x03, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x33, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20,
        0x25, 0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01,
        0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d,
        0x7d, 0xf8, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x06, 0x75, 0x09, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x5d, 0xf0, 0x49, 0x89, 0xfd, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyTuple_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyLong_ExactDealloc+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)data + 0x2c);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_LIST.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 0f b7 d7                      movzwl  %di, %edx
    // e: 8d 04 d5 00 00 00 00          leal    (,%rdx,8), %eax
    // 15: 4c 89 ee                      movq    %r13, %rsi
    // 18: 48 29 c6                      subq    %rax, %rsi
    // 1b: 48 89 f1                      movq    %rsi, %rcx
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp__PyList_FromStackRefSteal
    // 24: 48 85 c0                      testq   %rax, %rax
    // 27: 74 1f                         je      0x48 <_JIT_ENTRY+0x48>
    // 29: 0f b7 cf                      movzwl  %di, %ecx
    // 2c: 48 89 06                      movq    %rax, (%rsi)
    // 2f: b8 01 00 00 00                movl    $0x1, %eax
    // 34: 29 c8                         subl    %ecx, %eax
    // 36: 48 98                         cltq
    // 38: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 3d: 48 83 c4 28                   addq    $0x28, %rsp
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 48: 48 83 c4 28                   addq    $0x28, %rsp
    // 4c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[83] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd7, 0x8d, 0x04,
        0xd5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee,
        0x48, 0x29, 0xc6, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x1f, 0x0f, 0xb7, 0xcf, 0x48, 0x89, 0x06, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98,
        0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyList_FromStackRefSteal+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyList_FromStackRefSteal);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x14);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_MAP.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 4c 89 74 24 28                movq    %r14, 0x28(%rsp)
    // a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 11: 0f b7 d8                      movzwl  %ax, %ebx
    // 14: 01 db                         addl    %ebx, %ebx
    // 16: 89 d9                         movl    %ebx, %ecx
    // 18: f7 d9                         negl    %ecx
    // 1a: 4c 63 f9                      movslq  %ecx, %r15
    // 1d: 4a 8d 34 fd 00 00 00 00       leaq    (,%r15,8), %rsi
    // 25: 4c 01 ee                      addq    %r13, %rsi
    // 28: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2d: 0f b7 f8                      movzwl  %ax, %edi
    // 30: 4f 8d 44 fd 08                leaq    0x8(%r13,%r15,8), %r8
    // 35: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
    // 3a: ba 02 00 00 00                movl    $0x2, %edx
    // 3f: 41 b9 02 00 00 00             movl    $0x2, %r9d
    // 45: 48 89 f1                      movq    %rsi, %rcx
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__PyDict_FromItems
    // 4e: 49 89 c6                      movq    %rax, %r14
    // 51: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 56: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5f: 66 85 ff                      testw   %di, %di
    // 62: 74 3a                         je      0x9e <_JIT_ENTRY+0x9e>
    // 64: 48 8d 2c 7d 01 00 00 00       leaq    0x1(,%rdi,2), %rbp
    // 6c: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x73 <_JIT_ENTRY+0x73>
    // 000000000000006f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 73: eb 14                         jmp     0x89 <_JIT_ENTRY+0x89>
    // 75: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
    // 80: 48 ff cd                      decq    %rbp
    // 83: 48 83 fd 01                   cmpq    $0x1, %rbp
    // 87: 76 15                         jbe     0x9e <_JIT_ENTRY+0x9e>
    // 89: 48 8b 4c ee f0                movq    -0x10(%rsi,%rbp,8), %rcx
    // 8e: 8b 01                         movl    (%rcx), %eax
    // 90: 85 c0                         testl   %eax, %eax
    // 92: 78 ec                         js      0x80 <_JIT_ENTRY+0x80>
    // 94: ff c8                         decl    %eax
    // 96: 89 01                         movl    %eax, (%rcx)
    // 98: 75 e6                         jne     0x80 <_JIT_ENTRY+0x80>
    // 9a: ff d7                         callq   *%rdi
    // 9c: eb e2                         jmp     0x80 <_JIT_ENTRY+0x80>
    // 9e: 4d 85 f6                      testq   %r14, %r14
    // a1: 74 24                         je      0xc7 <_JIT_ENTRY+0xc7>
    // a3: 4f 89 74 fd 00                movq    %r14, (%r13,%r15,8)
    // a8: b8 01 00 00 00                movl    $0x1, %eax
    // ad: 29 d8                         subl    %ebx, %eax
    // af: 48 98                         cltq
    // b1: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // b6: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
    // bb: 48 83 c4 30                   addq    $0x30, %rsp
    // bf: 5d                            popq    %rbp
    // c0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc7 <_JIT_ENTRY+0xc7>
    // 00000000000000c3:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c7: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
    // cc: 48 83 c4 30                   addq    $0x30, %rsp
    // d0: 5d                            popq    %rbp
    // d1: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d4:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[216] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x4c, 0x89, 0x74,
        0x24, 0x28, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xd8, 0x01, 0xdb, 0x89, 0xd9,
        0xf7, 0xd9, 0x4c, 0x63, 0xf9, 0x4a, 0x8d, 0x34,
        0xfd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x0f, 0xb7, 0xf8,
        0x4f, 0x8d, 0x44, 0xfd, 0x08, 0x48, 0x89, 0x7c,
        0x24, 0x20, 0xba, 0x02, 0x00, 0x00, 0x00, 0x41,
        0xb9, 0x02, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xff, 0x74, 0x3a, 0x48, 0x8d, 0x2c, 0x7d,
        0x01, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x14, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x76,
        0x15, 0x48, 0x8b, 0x4c, 0xee, 0xf0, 0x8b, 0x01,
        0x85, 0xc0, 0x78, 0xec, 0xff, 0xc8, 0x89, 0x01,
        0x75, 0xe6, 0xff, 0xd7, 0xeb, 0xe2, 0x4d, 0x85,
        0xf6, 0x74, 0x24, 0x4f, 0x89, 0x74, 0xfd, 0x00,
        0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd8, 0x48,
        0x98, 0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x4c, 0x8b,
        0x74, 0x24, 0x28, 0x48, 0x83, 0xc4, 0x30, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8b, 0x74, 0x24, 0x28, 0x48, 0x83, 0xc4, 0x30,
        0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyDict_FromItems+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_FromItems);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc3, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SET.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 4c 89 ee                      movq    %r13, %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 31 c9                         xorl    %ecx, %ecx
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  IMAGE_REL_AMD64_REL32        __imp_PySet_New
    // 15: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 23: 48 85 c0                      testq   %rax, %rax
    // 26: 0f 84 ab 00 00 00             je      0xd7 <_JIT_ENTRY+0xd7>
    // 2c: 48 89 c7                      movq    %rax, %rdi
    // 2f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 36: 0f b7 e9                      movzwl  %cx, %ebp
    // 39: 48 f7 dd                      negq    %rbp
    // 3c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 43: 66 85 c0                      testw   %ax, %ax
    // 46: 0f 84 e0 00 00 00             je      0x12c <_JIT_ENTRY+0x12c>
    // 4c: 31 db                         xorl    %ebx, %ebx
    // 4e: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp_PySet_Add
    // 55: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
    // 5a: eb 09                         jmp     0x65 <_JIT_ENTRY+0x65>
    // 5c: 0f 1f 40 00                   nopl    (%rax)
    // 60: 48 ff c5                      incq    %rbp
    // 63: 74 52                         je      0xb7 <_JIT_ENTRY+0xb7>
    // 65: 85 db                         testl   %ebx, %ebx
    // 67: 74 17                         je      0x80 <_JIT_ENTRY+0x80>
    // 69: 48 8b 0c ee                   movq    (%rsi,%rbp,8), %rcx
    // 6d: 8b 01                         movl    (%rcx), %eax
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 79 36                         jns     0xa9 <_JIT_ENTRY+0xa9>
    // 73: eb eb                         jmp     0x60 <_JIT_ENTRY+0x60>
    // 75: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
    // 80: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 85: 48 8b 14 ee                   movq    (%rsi,%rbp,8), %rdx
    // 89: 48 89 f9                      movq    %rdi, %rcx
    // 8c: 41 ff d7                      callq   *%r15
    // 8f: 89 c3                         movl    %eax, %ebx
    // 91: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 96: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9f: 48 8b 0c ee                   movq    (%rsi,%rbp,8), %rcx
    // a3: 8b 01                         movl    (%rcx), %eax
    // a5: 85 c0                         testl   %eax, %eax
    // a7: 78 b7                         js      0x60 <_JIT_ENTRY+0x60>
    // a9: ff c8                         decl    %eax
    // ab: 89 01                         movl    %eax, (%rcx)
    // ad: 75 b1                         jne     0x60 <_JIT_ENTRY+0x60>
    // af: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b5: eb a9                         jmp     0x60 <_JIT_ENTRY+0x60>
    // b7: 85 db                         testl   %ebx, %ebx
    // b9: 74 65                         je      0x120 <_JIT_ENTRY+0x120>
    // bb: 8b 07                         movl    (%rdi), %eax
    // bd: 85 c0                         testl   %eax, %eax
    // bf: 78 0a                         js      0xcb <_JIT_ENTRY+0xcb>
    // c1: ff c8                         decl    %eax
    // c3: 89 07                         movl    %eax, (%rdi)
    // c5: 0f 84 84 00 00 00             je      0x14f <_JIT_ENTRY+0x14f>
    // cb: 48 83 c4 30                   addq    $0x30, %rsp
    // cf: 5d                            popq    %rbp
    // d0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd7 <_JIT_ENTRY+0xd7>
    // 00000000000000d3:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // d7: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xde <_JIT_ENTRY+0xde>
    // 00000000000000da:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // de: 66 85 c0                      testw   %ax, %ax
    // e1: 74 e8                         je      0xcb <_JIT_ENTRY+0xcb>
    // e3: 0f b7 3d 00 00 00 00          movzwl  (%rip), %edi            # 0xea <_JIT_ENTRY+0xea>
    // 00000000000000e6:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // ea: 48 ff c7                      incq    %rdi
    // ed: 48 83 c6 f8                   addq    $-0x8, %rsi
    // f1: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0xf8 <_JIT_ENTRY+0xf8>
    // 00000000000000f4:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // f8: eb 13                         jmp     0x10d <_JIT_ENTRY+0x10d>
    // fa: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
    // 100: 48 ff cf                      decq    %rdi
    // 103: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 107: 48 83 ff 01                   cmpq    $0x1, %rdi
    // 10b: 76 be                         jbe     0xcb <_JIT_ENTRY+0xcb>
    // 10d: 48 8b 0e                      movq    (%rsi), %rcx
    // 110: 8b 01                         movl    (%rcx), %eax
    // 112: 85 c0                         testl   %eax, %eax
    // 114: 78 ea                         js      0x100 <_JIT_ENTRY+0x100>
    // 116: ff c8                         decl    %eax
    // 118: 89 01                         movl    %eax, (%rcx)
    // 11a: 75 e4                         jne     0x100 <_JIT_ENTRY+0x100>
    // 11c: ff d3                         callq   *%rbx
    // 11e: eb e0                         jmp     0x100 <_JIT_ENTRY+0x100>
    // 120: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x127 <_JIT_ENTRY+0x127>
    // 0000000000000123:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 127: 48 8b 6c 24 28                movq    0x28(%rsp), %rbp
    // 12c: 0f b7 c1                      movzwl  %cx, %eax
    // 12f: 49 89 7c ed 00                movq    %rdi, (%r13,%rbp,8)
    // 134: b9 01 00 00 00                movl    $0x1, %ecx
    // 139: 29 c1                         subl    %eax, %ecx
    // 13b: 48 63 c1                      movslq  %ecx, %rax
    // 13e: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 143: 48 83 c4 30                   addq    $0x30, %rsp
    // 147: 5d                            popq    %rbp
    // 148: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x14f <_JIT_ENTRY+0x14f>
    // 000000000000014b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 14f: 48 89 f9                      movq    %rdi, %rcx
    // 152: ff 15 00 00 00 00             callq   *(%rip)                 # 0x158 <_JIT_ENTRY+0x158>
    // 0000000000000154:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 158: 48 83 c4 30                   addq    $0x30, %rsp
    // 15c: 5d                            popq    %rbp
    // 15d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x164 <_JIT_ENTRY+0x164>
    // 0000000000000160:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[356] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x4c, 0x89, 0xee,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x31, 0xc9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84,
        0xab, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xe9, 0x48, 0xf7, 0xdd, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84,
        0xe0, 0x00, 0x00, 0x00, 0x31, 0xdb, 0x4c, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x6c,
        0x24, 0x28, 0xeb, 0x09, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xff, 0xc5, 0x74, 0x52, 0x85, 0xdb, 0x74,
        0x17, 0x48, 0x8b, 0x0c, 0xee, 0x8b, 0x01, 0x85,
        0xc0, 0x79, 0x36, 0xeb, 0xeb, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x14,
        0xee, 0x48, 0x89, 0xf9, 0x41, 0xff, 0xd7, 0x89,
        0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0c, 0xee, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0xb7, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xb1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xa9, 0x85,
        0xdb, 0x74, 0x65, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x0a, 0xff, 0xc8, 0x89, 0x07, 0x0f, 0x84, 0x84,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x30, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85,
        0xc0, 0x74, 0xe8, 0x0f, 0xb7, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0xff, 0xc7, 0x48, 0x83, 0xc6,
        0xf8, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x13, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x48, 0xff, 0xcf, 0x48, 0x83, 0xc6, 0xf8, 0x48,
        0x83, 0xff, 0x01, 0x76, 0xbe, 0x48, 0x8b, 0x0e,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0xea, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0xe4, 0xff, 0xd3, 0xeb, 0xe0,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x6c, 0x24, 0x28, 0x0f, 0xb7, 0xc1, 0x49,
        0x89, 0x7c, 0xed, 0x00, 0xb9, 0x01, 0x00, 0x00,
        0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d,
        0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4, 0x30, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySet_New+0x0
    // 8: OPARG
    // 10: &PySet_Add+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    // 28: CONTINUE
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySet_New);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&PySet_Add);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd3, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xe6, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x123, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x14b, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x154, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x160, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_SLICE.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 4c 89 74 24 28                movq    %r14, 0x28(%rsp)
    // a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 11: 66 83 f8 03                   cmpw    $0x3, %ax
    // 15: 75 0d                         jne     0x24 <_JIT_ENTRY+0x24>
    // 17: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 1b: 49 c7 c6 fd ff ff ff          movq    $-0x3, %r14
    // 22: eb 09                         jmp     0x2d <_JIT_ENTRY+0x2d>
    // 24: 49 c7 c6 fe ff ff ff          movq    $-0x2, %r14
    // 2b: 31 f6                         xorl    %esi, %esi
    // 2d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 34: 31 ed                         xorl    %ebp, %ebp
    // 36: 66 83 f8 03                   cmpw    $0x3, %ax
    // 3a: 40 0f 94 c5                   sete    %bpl
    // 3e: 48 f7 d5                      notq    %rbp
    // 41: 49 8b 5c ed 00                movq    (%r13,%rbp,8), %rbx
    // 46: 4f 8b 7c f5 00                movq    (%r13,%r14,8), %r15
    // 4b: 4c 89 f9                      movq    %r15, %rcx
    // 4e: 48 89 da                      movq    %rbx, %rdx
    // 51: 49 89 f0                      movq    %rsi, %r8
    // 54: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp_PySlice_New
    // 5a: 48 89 c7                      movq    %rax, %rdi
    // 5d: 41 8b 07                      movl    (%r15), %eax
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 78 10                         js      0x74 <_JIT_ENTRY+0x74>
    // 64: ff c8                         decl    %eax
    // 66: 41 89 07                      movl    %eax, (%r15)
    // 69: 75 09                         jne     0x74 <_JIT_ENTRY+0x74>
    // 6b: 4c 89 f9                      movq    %r15, %rcx
    // 6e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x74 <_JIT_ENTRY+0x74>
    // 0000000000000070:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 74: 8b 03                         movl    (%rbx), %eax
    // 76: 85 c0                         testl   %eax, %eax
    // 78: 78 0f                         js      0x89 <_JIT_ENTRY+0x89>
    // 7a: ff c8                         decl    %eax
    // 7c: 89 03                         movl    %eax, (%rbx)
    // 7e: 75 09                         jne     0x89 <_JIT_ENTRY+0x89>
    // 80: 48 89 d9                      movq    %rbx, %rcx
    // 83: ff 15 00 00 00 00             callq   *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 89: 48 85 f6                      testq   %rsi, %rsi
    // 8c: 74 0c                         je      0x9a <_JIT_ENTRY+0x9a>
    // 8e: 8b 06                         movl    (%rsi), %eax
    // 90: 85 c0                         testl   %eax, %eax
    // 92: 78 06                         js      0x9a <_JIT_ENTRY+0x9a>
    // 94: ff c8                         decl    %eax
    // 96: 89 06                         movl    %eax, (%rsi)
    // 98: 74 29                         je      0xc3 <_JIT_ENTRY+0xc3>
    // 9a: 48 85 ff                      testq   %rdi, %rdi
    // 9d: 74 32                         je      0xd1 <_JIT_ENTRY+0xd1>
    // 9f: 48 8d 04 ed 00 00 00 00       leaq    (,%rbp,8), %rax
    // a7: 4c 01 e8                      addq    %r13, %rax
    // aa: 4b 89 7c f5 00                movq    %rdi, (%r13,%r14,8)
    // af: 49 89 c5                      movq    %rax, %r13
    // b2: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
    // b7: 48 83 c4 30                   addq    $0x30, %rsp
    // bb: 5d                            popq    %rbp
    // bc: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc3 <_JIT_ENTRY+0xc3>
    // 00000000000000bf:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c3: 48 89 f1                      movq    %rsi, %rcx
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cc: 48 85 ff                      testq   %rdi, %rdi
    // cf: 75 ce                         jne     0x9f <_JIT_ENTRY+0x9f>
    // d1: 4c 8b 74 24 28                movq    0x28(%rsp), %r14
    // d6: 48 83 c4 30                   addq    $0x30, %rsp
    // da: 5d                            popq    %rbp
    // db: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[226] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x4c, 0x89, 0x74,
        0x24, 0x28, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x0d, 0x49,
        0x8b, 0x75, 0xf8, 0x49, 0xc7, 0xc6, 0xfd, 0xff,
        0xff, 0xff, 0xeb, 0x09, 0x49, 0xc7, 0xc6, 0xfe,
        0xff, 0xff, 0xff, 0x31, 0xf6, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x31, 0xed, 0x66, 0x83,
        0xf8, 0x03, 0x40, 0x0f, 0x94, 0xc5, 0x48, 0xf7,
        0xd5, 0x49, 0x8b, 0x5c, 0xed, 0x00, 0x4f, 0x8b,
        0x7c, 0xf5, 0x00, 0x4c, 0x89, 0xf9, 0x48, 0x89,
        0xda, 0x49, 0x89, 0xf0, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xc7, 0x41, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x10, 0xff, 0xc8, 0x41, 0x89,
        0x07, 0x75, 0x09, 0x4c, 0x89, 0xf9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x09,
        0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xf6, 0x74, 0x0c, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x29, 0x48, 0x85, 0xff, 0x74, 0x32, 0x48,
        0x8d, 0x04, 0xed, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x01, 0xe8, 0x4b, 0x89, 0x7c, 0xf5, 0x00, 0x49,
        0x89, 0xc5, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x48,
        0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x75,
        0xce, 0x4c, 0x8b, 0x74, 0x24, 0x28, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PySlice_New+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySlice_New);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbf, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_STRING.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 20                   subq    $0x20, %rsp
    // 5: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 0f b7 d8                      movzwl  %ax, %ebx
    // f: 8d 04 dd 00 00 00 00          leal    (,%rbx,8), %eax
    // 16: 4c 89 ee                      movq    %r13, %rsi
    // 19: 48 29 c6                      subq    %rax, %rsi
    // 1c: b9 c0 86 00 00                movl    $0x86c0, %ecx           # imm = 0x86C0
    // 21: 48 03 0d 00 00 00 00          addq    (%rip), %rcx            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 28: 48 89 f2                      movq    %rsi, %rdx
    // 2b: 49 89 d8                      movq    %rbx, %r8
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_JoinArray
    // 34: 48 89 c7                      movq    %rax, %rdi
    // 37: 66 85 db                      testw   %bx, %bx
    // 3a: 74 36                         je      0x72 <_JIT_ENTRY+0x72>
    // 3c: 48 ff c3                      incq    %rbx
    // 3f: 49 8d 6d f8                   leaq    -0x8(%r13), %rbp
    // 43: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4a: eb 11                         jmp     0x5d <_JIT_ENTRY+0x5d>
    // 4c: 0f 1f 40 00                   nopl    (%rax)
    // 50: 48 ff cb                      decq    %rbx
    // 53: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 57: 48 83 fb 01                   cmpq    $0x1, %rbx
    // 5b: 76 15                         jbe     0x72 <_JIT_ENTRY+0x72>
    // 5d: 48 8b 4d 00                   movq    (%rbp), %rcx
    // 61: 8b 01                         movl    (%rcx), %eax
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 78 e9                         js      0x50 <_JIT_ENTRY+0x50>
    // 67: ff c8                         decl    %eax
    // 69: 89 01                         movl    %eax, (%rcx)
    // 6b: 75 e3                         jne     0x50 <_JIT_ENTRY+0x50>
    // 6d: 41 ff d7                      callq   *%r15
    // 70: eb de                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 72: 48 85 ff                      testq   %rdi, %rdi
    // 75: 74 28                         je      0x9f <_JIT_ENTRY+0x9f>
    // 77: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7e: 0f b7 c0                      movzwl  %ax, %eax
    // 81: 48 89 3e                      movq    %rdi, (%rsi)
    // 84: b9 01 00 00 00                movl    $0x1, %ecx
    // 89: 29 c1                         subl    %eax, %ecx
    // 8b: 48 63 c1                      movslq  %ecx, %rax
    // 8e: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 93: 48 83 c4 20                   addq    $0x20, %rsp
    // 97: 5d                            popq    %rbp
    // 98: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 9f: 48 83 c4 20                   addq    $0x20, %rsp
    // a3: 5d                            popq    %rbp
    // a4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xab <_JIT_ENTRY+0xab>
    // 00000000000000a7:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[171] = {
        0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x8d,
        0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xee, 0x48, 0x29, 0xc6, 0xb9, 0xc0, 0x86, 0x00,
        0x00, 0x48, 0x03, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf2, 0x49, 0x89, 0xd8, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x66,
        0x85, 0xdb, 0x74, 0x36, 0x48, 0xff, 0xc3, 0x49,
        0x8d, 0x6d, 0xf8, 0x4c, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x11, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xff, 0xcb, 0x48, 0x83, 0xc5, 0xf8, 0x48,
        0x83, 0xfb, 0x01, 0x76, 0x15, 0x48, 0x8b, 0x4d,
        0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0xe9, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0xe3, 0x41, 0xff, 0xd7,
        0xeb, 0xde, 0x48, 0x85, 0xff, 0x74, 0x28, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc0, 0x48, 0x89, 0x3e, 0xb9, 0x01, 0x00, 0x00,
        0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d,
        0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4, 0x20, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_JoinArray+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_JoinArray);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + 0x24);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _BUILD_TUPLE.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 0f b7 d7                      movzwl  %di, %edx
    // e: 8d 04 d5 00 00 00 00          leal    (,%rdx,8), %eax
    // 15: 4c 89 ee                      movq    %r13, %rsi
    // 18: 48 29 c6                      subq    %rax, %rsi
    // 1b: 48 89 f1                      movq    %rsi, %rcx
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp__PyTuple_FromStackRefSteal
    // 24: 48 85 c0                      testq   %rax, %rax
    // 27: 74 1f                         je      0x48 <_JIT_ENTRY+0x48>
    // 29: 0f b7 cf                      movzwl  %di, %ecx
    // 2c: 48 89 06                      movq    %rax, (%rsi)
    // 2f: b8 01 00 00 00                movl    $0x1, %eax
    // 34: 29 c8                         subl    %ecx, %eax
    // 36: 48 98                         cltq
    // 38: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 3d: 48 83 c4 28                   addq    $0x28, %rsp
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 48: 48 83 c4 28                   addq    $0x28, %rsp
    // 4c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[83] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd7, 0x8d, 0x04,
        0xd5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee,
        0x48, 0x29, 0xc6, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x1f, 0x0f, 0xb7, 0xcf, 0x48, 0x89, 0x06, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98,
        0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyTuple_FromStackRefSteal+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyTuple_FromStackRefSteal);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x14);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_CLASS.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 48 63 e9                      movslq  %ecx, %rbp
    // 13: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 18: 29 c1                         subl    %eax, %ecx
    // 1a: 48 63 f1                      movslq  %ecx, %rsi
    // 1d: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // 22: 31 d2                         xorl    %edx, %edx
    // 24: 31 ff                         xorl    %edi, %edi
    // 26: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
    // 2c: 0f 94 c3                      sete    %bl
    // 2f: 41 0f 95 c0                   setne   %r8b
    // 33: 4c 8b 49 08                   movq    0x8(%rcx), %r9
    // 37: 41 83 b9 a8 00 00 00 00       cmpl    $0x0, 0xa8(%r9)
    // 3f: 78 0c                         js      0x4d <_JIT_ENTRY+0x4d>
    // 41: 48 83 c4 30                   addq    $0x30, %rsp
    // 45: 5d                            popq    %rbp
    // 46: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 4d: 48 83 b9 90 01 00 00 00       cmpq    $0x0, 0x190(%rcx)
    // 55: 74 ea                         je      0x41 <_JIT_ENTRY+0x41>
    // 57: 44 8d 0c c5 00 00 00 00       leal    (,%rax,8), %r9d
    // 5f: 4d 89 ea                      movq    %r13, %r10
    // 62: 4d 29 ca                      subq    %r9, %r10
    // 65: 44 88 c7                      movb    %r8b, %dil
    // 68: 01 c7                         addl    %eax, %edi
    // 6a: 88 da                         movb    %bl, %dl
    // 6c: 49 8d 1c d2                   leaq    (%r10,%rdx,8), %rbx
    // 70: 48 83 c3 f8                   addq    $-0x8, %rbx
    // 74: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 79: 41 89 ff                      movl    %edi, %r15d
    // 7c: 48 89 da                      movq    %rbx, %rdx
    // 7f: 4d 89 f8                      movq    %r15, %r8
    // 82: 45 31 c9                      xorl    %r9d, %r9d
    // 85: ff 91 90 01 00 00             callq   *0x190(%rcx)
    // 8b: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // 90: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 95: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 9a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a3: 85 ff                         testl   %edi, %edi
    // a5: 74 29                         je      0xd0 <_JIT_ENTRY+0xd0>
    // a7: 31 ff                         xorl    %edi, %edi
    // a9: eb 0d                         jmp     0xb8 <_JIT_ENTRY+0xb8>
    // ab: 0f 1f 44 00 00                nopl    (%rax,%rax)
    // b0: 48 ff c7                      incq    %rdi
    // b3: 49 39 ff                      cmpq    %rdi, %r15
    // b6: 74 18                         je      0xd0 <_JIT_ENTRY+0xd0>
    // b8: 48 8b 0c fb                   movq    (%rbx,%rdi,8), %rcx
    // bc: 8b 01                         movl    (%rcx), %eax
    // be: 85 c0                         testl   %eax, %eax
    // c0: 78 ee                         js      0xb0 <_JIT_ENTRY+0xb0>
    // c2: ff c8                         decl    %eax
    // c4: 89 01                         movl    %eax, (%rcx)
    // c6: 75 e8                         jne     0xb0 <_JIT_ENTRY+0xb0>
    // c8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xce <_JIT_ENTRY+0xce>
    // 00000000000000ca:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ce: eb e0                         jmp     0xb0 <_JIT_ENTRY+0xb0>
    // d0: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // d5: 8b 01                         movl    (%rcx), %eax
    // d7: 85 c0                         testl   %eax, %eax
    // d9: 78 06                         js      0xe1 <_JIT_ENTRY+0xe1>
    // db: ff c8                         decl    %eax
    // dd: 89 01                         movl    %eax, (%rcx)
    // df: 74 23                         je      0x104 <_JIT_ENTRY+0x104>
    // e1: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // e6: 48 85 c9                      testq   %rcx, %rcx
    // e9: 74 29                         je      0x114 <_JIT_ENTRY+0x114>
    // eb: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // f0: 48 89 0c f0                   movq    %rcx, (%rax,%rsi,8)
    // f4: 4c 8d 2c e8                   leaq    (%rax,%rbp,8), %r13
    // f8: 48 83 c4 30                   addq    $0x30, %rsp
    // fc: 5d                            popq    %rbp
    // fd: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x104 <_JIT_ENTRY+0x104>
    // 0000000000000100:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 104: ff 15 00 00 00 00             callq   *(%rip)                 # 0x10a <_JIT_ENTRY+0x10a>
    // 0000000000000106:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 10a: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // 10f: 48 85 c9                      testq   %rcx, %rcx
    // 112: 75 d7                         jne     0xeb <_JIT_ENTRY+0xeb>
    // 114: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // 119: 48 83 c4 30                   addq    $0x30, %rsp
    // 11d: 5d                            popq    %rbp
    // 11e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x125 <_JIT_ENTRY+0x125>
    // 0000000000000121:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[293] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x48, 0x63, 0xe9, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x48, 0x63, 0xf1, 0x49, 0x8b, 0x4c,
        0xf5, 0x00, 0x31, 0xd2, 0x31, 0xff, 0x49, 0x83,
        0x7c, 0xed, 0x00, 0x00, 0x0f, 0x94, 0xc3, 0x41,
        0x0f, 0x95, 0xc0, 0x4c, 0x8b, 0x49, 0x08, 0x41,
        0x83, 0xb9, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x78,
        0x0c, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xb9,
        0x90, 0x01, 0x00, 0x00, 0x00, 0x74, 0xea, 0x44,
        0x8d, 0x0c, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0xea, 0x4d, 0x29, 0xca, 0x44, 0x88, 0xc7,
        0x01, 0xc7, 0x88, 0xda, 0x49, 0x8d, 0x1c, 0xd2,
        0x48, 0x83, 0xc3, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x41, 0x89, 0xff, 0x48, 0x89, 0xda, 0x4d,
        0x89, 0xf8, 0x45, 0x31, 0xc9, 0xff, 0x91, 0x90,
        0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x28,
        0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44,
        0x24, 0x20, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xff, 0x74, 0x29, 0x31,
        0xff, 0xeb, 0x0d, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x49, 0x39, 0xff, 0x74, 0x18,
        0x48, 0x8b, 0x0c, 0xfb, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0xee, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xe8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xe0,
        0x49, 0x8b, 0x4c, 0xf5, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74,
        0x23, 0x48, 0x8b, 0x4c, 0x24, 0x28, 0x48, 0x85,
        0xc9, 0x74, 0x29, 0x48, 0x8b, 0x44, 0x24, 0x20,
        0x48, 0x89, 0x0c, 0xf0, 0x4c, 0x8d, 0x2c, 0xe8,
        0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x28, 0x48,
        0x85, 0xc9, 0x75, 0xd7, 0x4c, 0x8b, 0x6c, 0x24,
        0x20, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xca, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x100, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x106, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x121, (uintptr_t)data + 0x1c);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c8                         movl    %ecx, %eax
    // e: f7 d0                         notl    %eax
    // 10: 48 63 e8                      movslq  %eax, %rbp
    // 13: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 18: 29 c8                         subl    %ecx, %eax
    // 1a: 48 63 f0                      movslq  %eax, %rsi
    // 1d: 49 8b 44 f5 00                movq    (%r13,%rsi,8), %rax
    // 22: 31 d2                         xorl    %edx, %edx
    // 24: 31 db                         xorl    %ebx, %ebx
    // 26: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
    // 2c: 40 0f 94 c7                   sete    %dil
    // 30: 41 0f 95 c1                   setne   %r9b
    // 34: 4c 8b 40 08                   movq    0x8(%rax), %r8
    // 38: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp_PyCFunction_Type
    // 3f: 75 48                         jne     0x89 <_JIT_ENTRY+0x89>
    // 41: 4c 8b 40 10                   movq    0x10(%rax), %r8
    // 45: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
    // 4d: 75 3a                         jne     0x89 <_JIT_ENTRY+0x89>
    // 4f: 44 8d 14 cd 00 00 00 00       leal    (,%rcx,8), %r10d
    // 57: 4d 89 eb                      movq    %r13, %r11
    // 5a: 4d 29 d3                      subq    %r10, %r11
    // 5d: 44 88 cb                      movb    %r9b, %bl
    // 60: 01 cb                         addl    %ecx, %ebx
    // 62: 40 88 fa                      movb    %dil, %dl
    // 65: 49 8d 3c d3                   leaq    (%r11,%rdx,8), %rdi
    // 69: 48 83 c7 f8                   addq    $-0x8, %rdi
    // 6d: 4d 8b 48 08                   movq    0x8(%r8), %r9
    // 71: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 76: 41 89 df                      movl    %ebx, %r15d
    // 79: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 7d: f6 41 10 20                   testb   $0x20, 0x10(%rcx)
    // 81: 75 12                         jne     0x95 <_JIT_ENTRY+0x95>
    // 83: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 87: eb 0e                         jmp     0x97 <_JIT_ENTRY+0x97>
    // 89: 48 83 c4 30                   addq    $0x30, %rsp
    // 8d: 5d                            popq    %rbp
    // 8e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x95 <_JIT_ENTRY+0x95>
    // 0000000000000091:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 95: 31 c9                         xorl    %ecx, %ecx
    // 97: 48 89 fa                      movq    %rdi, %rdx
    // 9a: 4d 89 f8                      movq    %r15, %r8
    // 9d: 41 ff d1                      callq   *%r9
    // a0: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // a5: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // aa: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // af: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b8: 85 db                         testl   %ebx, %ebx
    // ba: 74 24                         je      0xe0 <_JIT_ENTRY+0xe0>
    // bc: 31 db                         xorl    %ebx, %ebx
    // be: eb 08                         jmp     0xc8 <_JIT_ENTRY+0xc8>
    // c0: 48 ff c3                      incq    %rbx
    // c3: 49 39 df                      cmpq    %rbx, %r15
    // c6: 74 18                         je      0xe0 <_JIT_ENTRY+0xe0>
    // c8: 48 8b 0c df                   movq    (%rdi,%rbx,8), %rcx
    // cc: 8b 01                         movl    (%rcx), %eax
    // ce: 85 c0                         testl   %eax, %eax
    // d0: 78 ee                         js      0xc0 <_JIT_ENTRY+0xc0>
    // d2: ff c8                         decl    %eax
    // d4: 89 01                         movl    %eax, (%rcx)
    // d6: 75 e8                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xde <_JIT_ENTRY+0xde>
    // 00000000000000da:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // de: eb e0                         jmp     0xc0 <_JIT_ENTRY+0xc0>
    // e0: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // e5: 8b 01                         movl    (%rcx), %eax
    // e7: 85 c0                         testl   %eax, %eax
    // e9: 78 0c                         js      0xf7 <_JIT_ENTRY+0xf7>
    // eb: ff c8                         decl    %eax
    // ed: 89 01                         movl    %eax, (%rcx)
    // ef: 75 06                         jne     0xf7 <_JIT_ENTRY+0xf7>
    // f1: ff 15 00 00 00 00             callq   *(%rip)                 # 0xf7 <_JIT_ENTRY+0xf7>
    // 00000000000000f3:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // f7: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // fc: 48 85 c9                      testq   %rcx, %rcx
    // ff: 74 19                         je      0x11a <_JIT_ENTRY+0x11a>
    // 101: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 106: 48 89 0c f0                   movq    %rcx, (%rax,%rsi,8)
    // 10a: 4c 8d 2c e8                   leaq    (%rax,%rbp,8), %r13
    // 10e: 48 83 c4 30                   addq    $0x30, %rsp
    // 112: 5d                            popq    %rbp
    // 113: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x11a <_JIT_ENTRY+0x11a>
    // 0000000000000116:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 11a: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // 11f: 48 83 c4 30                   addq    $0x30, %rsp
    // 123: 5d                            popq    %rbp
    // 124: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x12b <_JIT_ENTRY+0x12b>
    // 0000000000000127:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[299] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc8, 0xf7, 0xd0,
        0x48, 0x63, 0xe8, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc8, 0x48, 0x63, 0xf0, 0x49, 0x8b, 0x44,
        0xf5, 0x00, 0x31, 0xd2, 0x31, 0xdb, 0x49, 0x83,
        0x7c, 0xed, 0x00, 0x00, 0x40, 0x0f, 0x94, 0xc7,
        0x41, 0x0f, 0x95, 0xc1, 0x4c, 0x8b, 0x40, 0x08,
        0x4c, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x48, 0x4c, 0x8b, 0x40, 0x10, 0x41, 0x81, 0x78,
        0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x3a, 0x44,
        0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0xeb, 0x4d, 0x29, 0xd3, 0x44, 0x88, 0xcb,
        0x01, 0xcb, 0x40, 0x88, 0xfa, 0x49, 0x8d, 0x3c,
        0xd3, 0x48, 0x83, 0xc7, 0xf8, 0x4d, 0x8b, 0x48,
        0x08, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x41, 0x89,
        0xdf, 0x48, 0x8b, 0x48, 0x10, 0xf6, 0x41, 0x10,
        0x20, 0x75, 0x12, 0x48, 0x8b, 0x48, 0x18, 0xeb,
        0x0e, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc9, 0x48,
        0x89, 0xfa, 0x4d, 0x89, 0xf8, 0x41, 0xff, 0xd1,
        0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8b, 0x44,
        0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xdb, 0x74, 0x24, 0x31, 0xdb, 0xeb, 0x08,
        0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x18,
        0x48, 0x8b, 0x0c, 0xdf, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0xee, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xe8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xe0,
        0x49, 0x8b, 0x4c, 0xf5, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4c, 0x24, 0x28, 0x48, 0x85, 0xc9, 0x74,
        0x19, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x89,
        0x0c, 0xf0, 0x4c, 0x8d, 0x2c, 0xe8, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48,
        0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xf3, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x116, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x127, (uintptr_t)data + 0x24);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c8                         movl    %ecx, %eax
    // e: f7 d0                         notl    %eax
    // 10: 48 63 e8                      movslq  %eax, %rbp
    // 13: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 18: 29 c8                         subl    %ecx, %eax
    // 1a: 48 63 f8                      movslq  %eax, %rdi
    // 1d: 49 8b 44 fd 00                movq    (%r13,%rdi,8), %rax
    // 22: 31 d2                         xorl    %edx, %edx
    // 24: 31 db                         xorl    %ebx, %ebx
    // 26: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
    // 2c: 40 0f 94 c6                   sete    %sil
    // 30: 41 0f 95 c0                   setne   %r8b
    // 34: 4c 8b 48 08                   movq    0x8(%rax), %r9
    // 38: 4c 3b 0d 00 00 00 00          cmpq    (%rip), %r9             # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp_PyCFunction_Type
    // 3f: 75 48                         jne     0x89 <_JIT_ENTRY+0x89>
    // 41: 4c 8b 48 10                   movq    0x10(%rax), %r9
    // 45: 41 81 79 10 82 00 00 00       cmpl    $0x82, 0x10(%r9)
    // 4d: 75 3a                         jne     0x89 <_JIT_ENTRY+0x89>
    // 4f: 44 8d 0c cd 00 00 00 00       leal    (,%rcx,8), %r9d
    // 57: 4d 89 ea                      movq    %r13, %r10
    // 5a: 4d 29 ca                      subq    %r9, %r10
    // 5d: 44 88 c3                      movb    %r8b, %bl
    // 60: 01 cb                         addl    %ecx, %ebx
    // 62: 40 88 f2                      movb    %sil, %dl
    // 65: 49 8d 34 d2                   leaq    (%r10,%rdx,8), %rsi
    // 69: 48 83 c6 f8                   addq    $-0x8, %rsi
    // 6d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 72: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 76: 4c 8b 51 08                   movq    0x8(%rcx), %r10
    // 7a: 41 89 df                      movl    %ebx, %r15d
    // 7d: f6 41 10 20                   testb   $0x20, 0x10(%rcx)
    // 81: 75 12                         jne     0x95 <_JIT_ENTRY+0x95>
    // 83: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 87: eb 0e                         jmp     0x97 <_JIT_ENTRY+0x97>
    // 89: 48 83 c4 30                   addq    $0x30, %rsp
    // 8d: 5d                            popq    %rbp
    // 8e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x95 <_JIT_ENTRY+0x95>
    // 0000000000000091:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 95: 31 c9                         xorl    %ecx, %ecx
    // 97: 48 89 f2                      movq    %rsi, %rdx
    // 9a: 4d 89 f8                      movq    %r15, %r8
    // 9d: 45 31 c9                      xorl    %r9d, %r9d
    // a0: 41 ff d2                      callq   *%r10
    // a3: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // a8: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // ad: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // b2: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // bb: 85 db                         testl   %ebx, %ebx
    // bd: 74 31                         je      0xf0 <_JIT_ENTRY+0xf0>
    // bf: 31 db                         xorl    %ebx, %ebx
    // c1: eb 15                         jmp     0xd8 <_JIT_ENTRY+0xd8>
    // c3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // d0: 48 ff c3                      incq    %rbx
    // d3: 49 39 df                      cmpq    %rbx, %r15
    // d6: 74 18                         je      0xf0 <_JIT_ENTRY+0xf0>
    // d8: 48 8b 0c de                   movq    (%rsi,%rbx,8), %rcx
    // dc: 8b 01                         movl    (%rcx), %eax
    // de: 85 c0                         testl   %eax, %eax
    // e0: 78 ee                         js      0xd0 <_JIT_ENTRY+0xd0>
    // e2: ff c8                         decl    %eax
    // e4: 89 01                         movl    %eax, (%rcx)
    // e6: 75 e8                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // e8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xee <_JIT_ENTRY+0xee>
    // 00000000000000ea:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ee: eb e0                         jmp     0xd0 <_JIT_ENTRY+0xd0>
    // f0: 49 8b 4c fd 00                movq    (%r13,%rdi,8), %rcx
    // f5: 8b 01                         movl    (%rcx), %eax
    // f7: 85 c0                         testl   %eax, %eax
    // f9: 78 0c                         js      0x107 <_JIT_ENTRY+0x107>
    // fb: ff c8                         decl    %eax
    // fd: 89 01                         movl    %eax, (%rcx)
    // ff: 75 06                         jne     0x107 <_JIT_ENTRY+0x107>
    // 101: ff 15 00 00 00 00             callq   *(%rip)                 # 0x107 <_JIT_ENTRY+0x107>
    // 0000000000000103:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 107: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // 10c: 48 85 c9                      testq   %rcx, %rcx
    // 10f: 74 19                         je      0x12a <_JIT_ENTRY+0x12a>
    // 111: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 116: 48 89 0c f8                   movq    %rcx, (%rax,%rdi,8)
    // 11a: 4c 8d 2c e8                   leaq    (%rax,%rbp,8), %r13
    // 11e: 48 83 c4 30                   addq    $0x30, %rsp
    // 122: 5d                            popq    %rbp
    // 123: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x12a <_JIT_ENTRY+0x12a>
    // 0000000000000126:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 12a: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // 12f: 48 83 c4 30                   addq    $0x30, %rsp
    // 133: 5d                            popq    %rbp
    // 134: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13b <_JIT_ENTRY+0x13b>
    // 0000000000000137:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[315] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc8, 0xf7, 0xd0,
        0x48, 0x63, 0xe8, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc8, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x44,
        0xfd, 0x00, 0x31, 0xd2, 0x31, 0xdb, 0x49, 0x83,
        0x7c, 0xed, 0x00, 0x00, 0x40, 0x0f, 0x94, 0xc6,
        0x41, 0x0f, 0x95, 0xc0, 0x4c, 0x8b, 0x48, 0x08,
        0x4c, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x48, 0x4c, 0x8b, 0x48, 0x10, 0x41, 0x81, 0x79,
        0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x3a, 0x44,
        0x8d, 0x0c, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0xea, 0x4d, 0x29, 0xca, 0x44, 0x88, 0xc3,
        0x01, 0xcb, 0x40, 0x88, 0xf2, 0x49, 0x8d, 0x34,
        0xd2, 0x48, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x48, 0x10, 0x4c, 0x8b,
        0x51, 0x08, 0x41, 0x89, 0xdf, 0xf6, 0x41, 0x10,
        0x20, 0x75, 0x12, 0x48, 0x8b, 0x48, 0x18, 0xeb,
        0x0e, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc9, 0x48,
        0x89, 0xf2, 0x4d, 0x89, 0xf8, 0x45, 0x31, 0xc9,
        0x41, 0xff, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x28,
        0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44,
        0x24, 0x20, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xdb, 0x74, 0x31, 0x31,
        0xdb, 0xeb, 0x15, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc3, 0x49, 0x39, 0xdf, 0x74, 0x18,
        0x48, 0x8b, 0x0c, 0xde, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0xee, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xe8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0xe0,
        0x49, 0x8b, 0x4c, 0xfd, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4c, 0x24, 0x28, 0x48, 0x85, 0xc9, 0x74,
        0x19, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x89,
        0x0c, 0xf8, 0x4c, 0x8d, 0x2c, 0xe8, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48,
        0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xea, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x103, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x126, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x137, (uintptr_t)data + 0x24);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_BUILTIN_O.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 20                   subq    $0x20, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 4c 63 f9                      movslq  %ecx, %r15
    // 13: 31 c9                         xorl    %ecx, %ecx
    // 15: 31 f6                         xorl    %esi, %esi
    // 17: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 1d: 0f 94 c2                      sete    %dl
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 01 c6                         addl    %eax, %esi
    // 26: 83 fe 01                      cmpl    $0x1, %esi
    // 29: 75 64                         jne     0x8f <_JIT_ENTRY+0x8f>
    // 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 30: 29 c6                         subl    %eax, %esi
    // 32: 48 63 ee                      movslq  %esi, %rbp
    // 35: 49 8b 74 ed 00                movq    (%r13,%rbp,8), %rsi
    // 3a: 48 8b 7e 08                   movq    0x8(%rsi), %rdi
    // 3e: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  IMAGE_REL_AMD64_REL32        __imp_PyCFunction_Type
    // 45: 75 48                         jne     0x8f <_JIT_ENTRY+0x8f>
    // 47: 48 8b 7e 10                   movq    0x10(%rsi), %rdi
    // 4b: 83 7f 10 08                   cmpl    $0x8, 0x10(%rdi)
    // 4f: 75 3e                         jne     0x8f <_JIT_ENTRY+0x8f>
    // 51: 41 8b 5e 34                   movl    0x34(%r14), %ebx
    // 55: 85 db                         testl   %ebx, %ebx
    // 57: 7e 36                         jle     0x8f <_JIT_ENTRY+0x8f>
    // 59: c1 e0 03                      shll    $0x3, %eax
    // 5c: 4d 89 e8                      movq    %r13, %r8
    // 5f: 49 29 c0                      subq    %rax, %r8
    // 62: 88 d1                         movb    %dl, %cl
    // 64: 48 8d 0c cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rcx
    // 6c: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 70: 49 8b 3c 08                   movq    (%r8,%rcx), %rdi
    // 74: ff cb                         decl    %ebx
    // 76: 41 89 5e 34                   movl    %ebx, 0x34(%r14)
    // 7a: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7f: 48 8b 4e 10                   movq    0x10(%rsi), %rcx
    // 83: f6 41 10 20                   testb   $0x20, 0x10(%rcx)
    // 87: 75 12                         jne     0x9b <_JIT_ENTRY+0x9b>
    // 89: 48 8b 4e 18                   movq    0x18(%rsi), %rcx
    // 8d: eb 0e                         jmp     0x9d <_JIT_ENTRY+0x9d>
    // 8f: 48 83 c4 20                   addq    $0x20, %rsp
    // 93: 5d                            popq    %rbp
    // 94: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 9b: 31 c9                         xorl    %ecx, %ecx
    // 9d: 48 89 fa                      movq    %rdi, %rdx
    // a0: ff d0                         callq   *%rax
    // a2: 49 8b 74 24 40                movq    0x40(%r12), %rsi
    // a7: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b0: 41 ff 46 34                   incl    0x34(%r14)
    // b4: 48 89 c3                      movq    %rax, %rbx
    // b7: 8b 07                         movl    (%rdi), %eax
    // b9: 85 c0                         testl   %eax, %eax
    // bb: 78 0f                         js      0xcc <_JIT_ENTRY+0xcc>
    // bd: ff c8                         decl    %eax
    // bf: 89 07                         movl    %eax, (%rdi)
    // c1: 75 09                         jne     0xcc <_JIT_ENTRY+0xcc>
    // c3: 48 89 f9                      movq    %rdi, %rcx
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cc: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // d1: 8b 01                         movl    (%rcx), %eax
    // d3: 85 c0                         testl   %eax, %eax
    // d5: 78 0c                         js      0xe3 <_JIT_ENTRY+0xe3>
    // d7: ff c8                         decl    %eax
    // d9: 89 01                         movl    %eax, (%rcx)
    // db: 75 06                         jne     0xe3 <_JIT_ENTRY+0xe3>
    // dd: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // e3: 48 85 db                      testq   %rbx, %rbx
    // e6: 74 14                         je      0xfc <_JIT_ENTRY+0xfc>
    // e8: 48 89 1c ee                   movq    %rbx, (%rsi,%rbp,8)
    // ec: 4e 8d 2c fe                   leaq    (%rsi,%r15,8), %r13
    // f0: 48 83 c4 20                   addq    $0x20, %rsp
    // f4: 5d                            popq    %rbp
    // f5: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xfc <_JIT_ENTRY+0xfc>
    // 00000000000000f8:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // fc: 49 89 f5                      movq    %rsi, %r13
    // ff: 48 83 c4 20                   addq    $0x20, %rsp
    // 103: 5d                            popq    %rbp
    // 104: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x10b <_JIT_ENTRY+0x10b>
    // 0000000000000107:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[267] = {
        0x55, 0x48, 0x83, 0xec, 0x20, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x4c, 0x63, 0xf9, 0x31, 0xc9, 0x31, 0xf6, 0x4b,
        0x83, 0x7c, 0xfd, 0x00, 0x00, 0x0f, 0x94, 0xc2,
        0x40, 0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe,
        0x01, 0x75, 0x64, 0xbe, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc6, 0x48, 0x63, 0xee, 0x49, 0x8b, 0x74,
        0xed, 0x00, 0x48, 0x8b, 0x7e, 0x08, 0x48, 0x3b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x75, 0x48, 0x48,
        0x8b, 0x7e, 0x10, 0x83, 0x7f, 0x10, 0x08, 0x75,
        0x3e, 0x41, 0x8b, 0x5e, 0x34, 0x85, 0xdb, 0x7e,
        0x36, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xe8, 0x49,
        0x29, 0xc0, 0x88, 0xd1, 0x48, 0x8d, 0x0c, 0xcd,
        0xf8, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x47, 0x08,
        0x49, 0x8b, 0x3c, 0x08, 0xff, 0xcb, 0x41, 0x89,
        0x5e, 0x34, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x8b, 0x4e, 0x10, 0xf6, 0x41, 0x10, 0x20, 0x75,
        0x12, 0x48, 0x8b, 0x4e, 0x18, 0xeb, 0x0e, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x31, 0xc9, 0x48, 0x89, 0xfa,
        0xff, 0xd0, 0x49, 0x8b, 0x74, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x41, 0xff, 0x46, 0x34, 0x48, 0x89, 0xc3, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x09, 0x48, 0x89, 0xf9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0xed,
        0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xdb, 0x74, 0x14,
        0x48, 0x89, 0x1c, 0xee, 0x4e, 0x8d, 0x2c, 0xfe,
        0x48, 0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf5, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xf8, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x107, (uintptr_t)data + 0x24);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_1.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 14: c1 e0 04                      shll    $0x4, %eax
    // 17: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__PyIntrinsics_UnaryFunctions
    // 1e: 4c 89 f1                      movq    %r14, %rcx
    // 21: 48 89 f2                      movq    %rsi, %rdx
    // 24: ff 14 07                      callq   *(%rdi,%rax)
    // 27: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 35: 8b 0e                         movl    (%rsi), %ecx
    // 37: 85 c9                         testl   %ecx, %ecx
    // 39: 78 06                         js      0x41 <_JIT_ENTRY+0x41>
    // 3b: ff c9                         decl    %ecx
    // 3d: 89 0e                         movl    %ecx, (%rsi)
    // 3f: 74 14                         je      0x55 <_JIT_ENTRY+0x55>
    // 41: 48 85 c0                      testq   %rax, %rax
    // 44: 74 23                         je      0x69 <_JIT_ENTRY+0x69>
    // 46: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 4a: 48 83 c4 28                   addq    $0x28, %rsp
    // 4e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 55: 48 89 f1                      movq    %rsi, %rcx
    // 58: 48 89 c6                      movq    %rax, %rsi
    // 5b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 61: 48 89 f0                      movq    %rsi, %rax
    // 64: 48 85 c0                      testq   %rax, %rax
    // 67: 75 dd                         jne     0x46 <_JIT_ENTRY+0x46>
    // 69: 48 83 c4 28                   addq    $0x28, %rsp
    // 6d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x74 <_JIT_ENTRY+0x74>
    // 0000000000000070:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[116] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48,
        0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf1, 0x48, 0x89, 0xf2, 0xff, 0x14, 0x07, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74,
        0x14, 0x48, 0x85, 0xc0, 0x74, 0x23, 0x49, 0x89,
        0x45, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0x48, 0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf0, 0x48, 0x85, 0xc0, 0x75,
        0xdd, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_UnaryFunctions+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + 0x1c);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_INTRINSIC_2.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 18: c1 e0 04                      shll    $0x4, %eax
    // 1b: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  IMAGE_REL_AMD64_REL32        __imp__PyIntrinsics_BinaryFunctions
    // 22: 4c 89 f1                      movq    %r14, %rcx
    // 25: 48 89 da                      movq    %rbx, %rdx
    // 28: 49 89 f0                      movq    %rsi, %r8
    // 2b: ff 14 07                      callq   *(%rdi,%rax)
    // 2e: 48 89 c7                      movq    %rax, %rdi
    // 31: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 36: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3f: 8b 03                         movl    (%rbx), %eax
    // 41: 85 c0                         testl   %eax, %eax
    // 43: 78 0f                         js      0x54 <_JIT_ENTRY+0x54>
    // 45: ff c8                         decl    %eax
    // 47: 89 03                         movl    %eax, (%rbx)
    // 49: 75 09                         jne     0x54 <_JIT_ENTRY+0x54>
    // 4b: 48 89 d9                      movq    %rbx, %rcx
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 54: 8b 06                         movl    (%rsi), %eax
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 78 06                         js      0x60 <_JIT_ENTRY+0x60>
    // 5a: ff c8                         decl    %eax
    // 5c: 89 06                         movl    %eax, (%rsi)
    // 5e: 74 18                         je      0x78 <_JIT_ENTRY+0x78>
    // 60: 48 85 ff                      testq   %rdi, %rdi
    // 63: 74 21                         je      0x86 <_JIT_ENTRY+0x86>
    // 65: 49 89 7d f0                   movq    %rdi, -0x10(%r13)
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 89 f1                      movq    %rsi, %rcx
    // 7b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 81: 48 85 ff                      testq   %rdi, %rdi
    // 84: 75 df                         jne     0x65 <_JIT_ENTRY+0x65>
    // 86: 48 83 c4 28                   addq    $0x28, %rsp
    // 8a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[145] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xf1, 0x48, 0x89, 0xda,
        0x49, 0x89, 0xf0, 0xff, 0x14, 0x07, 0x48, 0x89,
        0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89,
        0x03, 0x75, 0x09, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x18,
        0x48, 0x85, 0xff, 0x74, 0x21, 0x49, 0x89, 0x7d,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xff, 0x75, 0xdf, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPARG
    // 8: &_PyIntrinsics_BinaryFunctions+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0x1c);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_ISINSTANCE.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 20                   subq    $0x20, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 48 63 e9                      movslq  %ecx, %rbp
    // 13: 31 c9                         xorl    %ecx, %ecx
    // 15: 31 f6                         xorl    %esi, %esi
    // 17: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
    // 1d: 0f 94 c2                      sete    %dl
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 01 c6                         addl    %eax, %esi
    // 26: 83 fe 02                      cmpl    $0x2, %esi
    // 29: 75 1c                         jne     0x47 <_JIT_ENTRY+0x47>
    // 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 30: 29 c6                         subl    %eax, %esi
    // 32: 48 63 f6                      movslq  %esi, %rsi
    // 35: 49 8b 7e 10                   movq    0x10(%r14), %rdi
    // 39: 48 8b bf d8 65 03 00          movq    0x365d8(%rdi), %rdi
    // 40: 49 3b 7c f5 00                cmpq    (%r13,%rsi,8), %rdi
    // 45: 74 0c                         je      0x53 <_JIT_ENTRY+0x53>
    // 47: 48 83 c4 20                   addq    $0x20, %rsp
    // 4b: 5d                            popq    %rbp
    // 4c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 53: c1 e0 03                      shll    $0x3, %eax
    // 56: 4c 89 ef                      movq    %r13, %rdi
    // 59: 48 29 c7                      subq    %rax, %rdi
    // 5c: 88 d1                         movb    %dl, %cl
    // 5e: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 66: 4c 8b 3c 07                   movq    (%rdi,%rax), %r15
    // 6a: 48 8b 5c 07 08                movq    0x8(%rdi,%rax), %rbx
    // 6f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 74: 4c 89 f9                      movq    %r15, %rcx
    // 77: 48 89 da                      movq    %rbx, %rdx
    // 7a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp_PyObject_IsInstance
    // 80: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // 85: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8e: 85 c0                         testl   %eax, %eax
    // 90: 78 64                         js      0xf6 <_JIT_ENTRY+0xf6>
    // 92: 89 c7                         movl    %eax, %edi
    // 94: 41 8b 07                      movl    (%r15), %eax
    // 97: 85 c0                         testl   %eax, %eax
    // 99: 78 16                         js      0xb1 <_JIT_ENTRY+0xb1>
    // 9b: ff c8                         decl    %eax
    // 9d: 41 89 07                      movl    %eax, (%r15)
    // a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
    // a2: 4c 89 f9                      movq    %r15, %rcx
    // a5: 49 89 d7                      movq    %rdx, %r15
    // a8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xae <_JIT_ENTRY+0xae>
    // 00000000000000aa:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ae: 4c 89 fa                      movq    %r15, %rdx
    // b1: 8b 03                         movl    (%rbx), %eax
    // b3: 85 c0                         testl   %eax, %eax
    // b5: 78 15                         js      0xcc <_JIT_ENTRY+0xcc>
    // b7: ff c8                         decl    %eax
    // b9: 89 03                         movl    %eax, (%rbx)
    // bb: 75 0f                         jne     0xcc <_JIT_ENTRY+0xcc>
    // bd: 48 89 d9                      movq    %rbx, %rcx
    // c0: 48 89 d3                      movq    %rdx, %rbx
    // c3: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c9: 48 89 da                      movq    %rbx, %rdx
    // cc: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // d1: 8b 01                         movl    (%rcx), %eax
    // d3: 85 c0                         testl   %eax, %eax
    // d5: 78 12                         js      0xe9 <_JIT_ENTRY+0xe9>
    // d7: ff c8                         decl    %eax
    // d9: 89 01                         movl    %eax, (%rcx)
    // db: 75 0c                         jne     0xe9 <_JIT_ENTRY+0xe9>
    // dd: 48 89 d3                      movq    %rdx, %rbx
    // e0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe6 <_JIT_ENTRY+0xe6>
    // 00000000000000e2:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // e6: 48 89 da                      movq    %rbx, %rdx
    // e9: 85 ff                         testl   %edi, %edi
    // eb: 75 18                         jne     0x105 <_JIT_ENTRY+0x105>
    // ed: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f0:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // f4: eb 16                         jmp     0x10c <_JIT_ENTRY+0x10c>
    // f6: 49 89 d5                      movq    %rdx, %r13
    // f9: 48 83 c4 20                   addq    $0x20, %rsp
    // fd: 5d                            popq    %rbp
    // fe: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x105 <_JIT_ENTRY+0x105>
    // 0000000000000101:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 105: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x10c <_JIT_ENTRY+0x10c>
    // 0000000000000108:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 10c: 48 89 04 f2                   movq    %rax, (%rdx,%rsi,8)
    // 110: 4c 8d 2c ea                   leaq    (%rdx,%rbp,8), %r13
    // 114: 48 83 c4 20                   addq    $0x20, %rsp
    // 118: 5d                            popq    %rbp
    // 119: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x120 <_JIT_ENTRY+0x120>
    // 000000000000011c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[281] = {
        0x55, 0x48, 0x83, 0xec, 0x20, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x48, 0x63, 0xe9, 0x31, 0xc9, 0x31, 0xf6, 0x49,
        0x83, 0x7c, 0xed, 0x00, 0x00, 0x0f, 0x94, 0xc2,
        0x40, 0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe,
        0x02, 0x75, 0x1c, 0xbe, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc6, 0x48, 0x63, 0xf6, 0x49, 0x8b, 0x7e,
        0x10, 0x48, 0x8b, 0xbf, 0xd8, 0x65, 0x03, 0x00,
        0x49, 0x3b, 0x7c, 0xf5, 0x00, 0x74, 0x0c, 0x48,
        0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x03, 0x4c, 0x89,
        0xef, 0x48, 0x29, 0xc7, 0x88, 0xd1, 0x48, 0x8d,
        0x04, 0xcd, 0xf8, 0xff, 0xff, 0xff, 0x4c, 0x8b,
        0x3c, 0x07, 0x48, 0x8b, 0x5c, 0x07, 0x08, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf9, 0x48,
        0x89, 0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x54, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x78, 0x64, 0x89, 0xc7, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x16, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x0f, 0x4c, 0x89, 0xf9, 0x49, 0x89, 0xd7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xfa, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x15, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x0f, 0x48, 0x89, 0xd9,
        0x48, 0x89, 0xd3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xda, 0x49, 0x8b, 0x4c, 0xf5,
        0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x12, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0x0c, 0x48, 0x89, 0xd3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xda, 0x85, 0xff, 0x75, 0x18, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x16, 0x49, 0x89,
        0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x04, 0xf2,
        0x4c, 0x8d, 0x2c, 0xea, 0x48, 0x83, 0xc4, 0x20,
        0x5d,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &PyObject_IsInstance+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: &_Py_FalseStruct+0x0
    // 28: ERROR_TARGET
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_IsInstance);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xe2, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xf0, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x101, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x108, (uintptr_t)data + 0x2c);
}

void
emit__CALL_KW_NON_PY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_KW_NON_PY.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 40                   subq    $0x40, %rsp
    // 5: 4c 89 74 24 30                movq    %r14, 0x30(%rsp)
    // a: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 11: 4d 8b 7d f8                   movq    -0x8(%r13), %r15
    // 15: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 1a: 29 c1                         subl    %eax, %ecx
    // 1c: 48 63 f1                      movslq  %ecx, %rsi
    // 1f: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       # imm = 0xFFFFFFFD
    // 24: 29 c1                         subl    %eax, %ecx
    // 26: 31 d2                         xorl    %edx, %edx
    // 28: 45 31 f6                      xorl    %r14d, %r14d
    // 2b: 48 89 74 24 38                movq    %rsi, 0x38(%rsp)
    // 30: 49 83 7c f5 00 00             cmpq    $0x0, (%r13,%rsi,8)
    // 36: 0f 94 c2                      sete    %dl
    // 39: 41 0f 95 c6                   setne   %r14b
    // 3d: 41 01 c6                      addl    %eax, %r14d
    // 40: f7 d0                         notl    %eax
    // 42: 48 98                         cltq
    // 44: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 4c: 4c 01 e8                      addq    %r13, %rax
    // 4f: 48 63 e9                      movslq  %ecx, %rbp
    // 52: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // 57: 48 8d 1c d0                   leaq    (%rax,%rdx,8), %rbx
    // 5b: 48 83 c3 f8                   addq    $-0x8, %rbx
    // 5f: 44 89 f0                      movl    %r14d, %eax
    // 62: 41 2b 47 10                   subl    0x10(%r15), %eax
    // 66: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 6b: 48 98                         cltq
    // 6d: 49 b8 00 00 00 00 00 00 00 80 movabsq $-0x8000000000000000, %r8 # imm = 0x8000000000000000
    // 77: 49 09 c0                      orq     %rax, %r8
    // 7a: 48 89 da                      movq    %rbx, %rdx
    // 7d: 4d 89 f9                      movq    %r15, %r9
    // 80: ff 15 00 00 00 00             callq   *(%rip)                 # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Vectorcall
    // 86: 48 89 c7                      movq    %rax, %rdi
    // 89: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 8e: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // 93: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9c: 41 8b 07                      movl    (%r15), %eax
    // 9f: 85 c0                         testl   %eax, %eax
    // a1: 78 10                         js      0xb3 <_JIT_ENTRY+0xb3>
    // a3: ff c8                         decl    %eax
    // a5: 41 89 07                      movl    %eax, (%r15)
    // a8: 75 09                         jne     0xb3 <_JIT_ENTRY+0xb3>
    // aa: 4c 89 f9                      movq    %r15, %rcx
    // ad: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb3 <_JIT_ENTRY+0xb3>
    // 00000000000000af:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b3: 45 85 f6                      testl   %r14d, %r14d
    // b6: 74 34                         je      0xec <_JIT_ENTRY+0xec>
    // b8: 45 89 f6                      movl    %r14d, %r14d
    // bb: 45 31 ff                      xorl    %r15d, %r15d
    // be: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xc5 <_JIT_ENTRY+0xc5>
    // 00000000000000c1:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c5: eb 11                         jmp     0xd8 <_JIT_ENTRY+0xd8>
    // c7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // d0: 49 ff c7                      incq    %r15
    // d3: 4d 39 fe                      cmpq    %r15, %r14
    // d6: 74 14                         je      0xec <_JIT_ENTRY+0xec>
    // d8: 4a 8b 0c fb                   movq    (%rbx,%r15,8), %rcx
    // dc: 8b 01                         movl    (%rcx), %eax
    // de: 85 c0                         testl   %eax, %eax
    // e0: 78 ee                         js      0xd0 <_JIT_ENTRY+0xd0>
    // e2: ff c8                         decl    %eax
    // e4: 89 01                         movl    %eax, (%rcx)
    // e6: 75 e8                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // e8: ff d6                         callq   *%rsi
    // ea: eb e4                         jmp     0xd0 <_JIT_ENTRY+0xd0>
    // ec: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // f1: 8b 01                         movl    (%rcx), %eax
    // f3: 85 c0                         testl   %eax, %eax
    // f5: 78 06                         js      0xfd <_JIT_ENTRY+0xfd>
    // f7: ff c8                         decl    %eax
    // f9: 89 01                         movl    %eax, (%rcx)
    // fb: 74 28                         je      0x125 <_JIT_ENTRY+0x125>
    // fd: 48 85 ff                      testq   %rdi, %rdi
    // 100: 74 2e                         je      0x130 <_JIT_ENTRY+0x130>
    // 102: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // 107: 48 89 3c e9                   movq    %rdi, (%rcx,%rbp,8)
    // 10b: 48 8b 44 24 38                movq    0x38(%rsp), %rax
    // 110: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 114: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
    // 119: 48 83 c4 40                   addq    $0x40, %rsp
    // 11d: 5d                            popq    %rbp
    // 11e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x125 <_JIT_ENTRY+0x125>
    // 0000000000000121:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 125: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12b <_JIT_ENTRY+0x12b>
    // 0000000000000127:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 12b: 48 85 ff                      testq   %rdi, %rdi
    // 12e: 75 d2                         jne     0x102 <_JIT_ENTRY+0x102>
    // 130: 4c 8b 6c 24 28                movq    0x28(%rsp), %r13
    // 135: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
    // 13a: 48 83 c4 40                   addq    $0x40, %rsp
    // 13e: 5d                            popq    %rbp
    // 13f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x146 <_JIT_ENTRY+0x146>
    // 0000000000000142:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[326] = {
        0x55, 0x48, 0x83, 0xec, 0x40, 0x4c, 0x89, 0x74,
        0x24, 0x30, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x7d, 0xf8, 0xb9, 0xfe, 0xff,
        0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xf1, 0xb9,
        0xfd, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x31, 0xd2,
        0x45, 0x31, 0xf6, 0x48, 0x89, 0x74, 0x24, 0x38,
        0x49, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x0f, 0x94,
        0xc2, 0x41, 0x0f, 0x95, 0xc6, 0x41, 0x01, 0xc6,
        0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8d, 0x04, 0xc5,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48,
        0x63, 0xe9, 0x49, 0x8b, 0x4c, 0xed, 0x00, 0x48,
        0x8d, 0x1c, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x44,
        0x89, 0xf0, 0x41, 0x2b, 0x47, 0x10, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x98, 0x49, 0xb8, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x49,
        0x09, 0xc0, 0x48, 0x89, 0xda, 0x4d, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xc7, 0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89,
        0x44, 0x24, 0x28, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x10, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x09, 0x4c, 0x89, 0xf9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x74, 0x34,
        0x45, 0x89, 0xf6, 0x45, 0x31, 0xff, 0x48, 0x8b,
        0x35, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x11, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x74, 0x14,
        0x4a, 0x8b, 0x0c, 0xfb, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0xee, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xe8,
        0xff, 0xd6, 0xeb, 0xe4, 0x49, 0x8b, 0x4c, 0xed,
        0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x28, 0x48, 0x85, 0xff,
        0x74, 0x2e, 0x48, 0x8b, 0x4c, 0x24, 0x28, 0x48,
        0x89, 0x3c, 0xe9, 0x48, 0x8b, 0x44, 0x24, 0x38,
        0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x74, 0x24,
        0x30, 0x48, 0x83, 0xc4, 0x40, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x75, 0xd2,
        0x4c, 0x8b, 0x6c, 0x24, 0x28, 0x4c, 0x8b, 0x74,
        0x24, 0x30, 0x48, 0x83, 0xc4, 0x40, 0x5d, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_Vectorcall+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc1, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x121, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x127, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x142, (uintptr_t)data + 0x1c);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LEN.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 d9                      movslq  %ecx, %rbx
    // 12: 31 c9                         xorl    %ecx, %ecx
    // 14: 31 f6                         xorl    %esi, %esi
    // 16: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
    // 1c: 0f 94 c2                      sete    %dl
    // 1f: 40 0f 95 c6                   setne   %sil
    // 23: 01 c6                         addl    %eax, %esi
    // 25: 83 fe 01                      cmpl    $0x1, %esi
    // 28: 75 1c                         jne     0x46 <_JIT_ENTRY+0x46>
    // 2a: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 2f: 29 c6                         subl    %eax, %esi
    // 31: 4c 63 fe                      movslq  %esi, %r15
    // 34: 49 8b 76 10                   movq    0x10(%r14), %rsi
    // 38: 48 8b b6 e0 65 03 00          movq    0x365e0(%rsi), %rsi
    // 3f: 4b 3b 74 fd 00                cmpq    (%r13,%r15,8), %rsi
    // 44: 74 0b                         je      0x51 <_JIT_ENTRY+0x51>
    // 46: 48 83 c4 28                   addq    $0x28, %rsp
    // 4a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x51 <_JIT_ENTRY+0x51>
    // 000000000000004d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 51: c1 e0 03                      shll    $0x3, %eax
    // 54: 4c 89 ee                      movq    %r13, %rsi
    // 57: 48 29 c6                      subq    %rax, %rsi
    // 5a: 88 d1                         movb    %dl, %cl
    // 5c: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 64: 48 8b 3c 06                   movq    (%rsi,%rax), %rdi
    // 68: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 6d: 48 89 f9                      movq    %rdi, %rcx
    // 70: ff 15 00 00 00 00             callq   *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Size
    // 76: 49 8b 74 24 40                movq    0x40(%r12), %rsi
    // 7b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 84: 48 85 c0                      testq   %rax, %rax
    // 87: 78 59                         js      0xe2 <_JIT_ENTRY+0xe2>
    // 89: 48 89 c1                      movq    %rax, %rcx
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  IMAGE_REL_AMD64_REL32        __imp_PyLong_FromSsize_t
    // 92: 48 85 c0                      testq   %rax, %rax
    // 95: 74 59                         je      0xf0 <_JIT_ENTRY+0xf0>
    // 97: 4b 8b 4c fd 00                movq    (%r13,%r15,8), %rcx
    // 9c: 8b 11                         movl    (%rcx), %edx
    // 9e: 85 d2                         testl   %edx, %edx
    // a0: 78 12                         js      0xb4 <_JIT_ENTRY+0xb4>
    // a2: ff ca                         decl    %edx
    // a4: 89 11                         movl    %edx, (%rcx)
    // a6: 75 0c                         jne     0xb4 <_JIT_ENTRY+0xb4>
    // a8: 49 89 c5                      movq    %rax, %r13
    // ab: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb1 <_JIT_ENTRY+0xb1>
    // 00000000000000ad:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b1: 4c 89 e8                      movq    %r13, %rax
    // b4: 8b 0f                         movl    (%rdi), %ecx
    // b6: 85 c9                         testl   %ecx, %ecx
    // b8: 78 15                         js      0xcf <_JIT_ENTRY+0xcf>
    // ba: ff c9                         decl    %ecx
    // bc: 89 0f                         movl    %ecx, (%rdi)
    // be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
    // c0: 48 89 f9                      movq    %rdi, %rcx
    // c3: 48 89 c7                      movq    %rax, %rdi
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cc: 48 89 f8                      movq    %rdi, %rax
    // cf: 4a 89 04 fe                   movq    %rax, (%rsi,%r15,8)
    // d3: 4c 8d 2c de                   leaq    (%rsi,%rbx,8), %r13
    // d7: 48 83 c4 28                   addq    $0x28, %rsp
    // db: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // e2: 49 89 f5                      movq    %rsi, %r13
    // e5: 48 83 c4 28                   addq    $0x28, %rsp
    // e9: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf0 <_JIT_ENTRY+0xf0>
    // 00000000000000ec:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // f0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xf7 <_JIT_ENTRY+0xf7>
    // 00000000000000f3:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // f7: 49 89 86 08 01 00 00          movq    %rax, 0x108(%r14)
    // fe: 49 89 74 24 40                movq    %rsi, 0x40(%r12)
    // 103: 31 c0                         xorl    %eax, %eax
    // 105: 48 83 c4 28                   addq    $0x28, %rsp
    // 109: c3                            retq
    const unsigned char code_body[266] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xd9, 0x31, 0xc9, 0x31, 0xf6, 0x49, 0x83,
        0x7c, 0xdd, 0x00, 0x00, 0x0f, 0x94, 0xc2, 0x40,
        0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe, 0x01,
        0x75, 0x1c, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc6, 0x4c, 0x63, 0xfe, 0x49, 0x8b, 0x76, 0x10,
        0x48, 0x8b, 0xb6, 0xe0, 0x65, 0x03, 0x00, 0x4b,
        0x3b, 0x74, 0xfd, 0x00, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xee, 0x48,
        0x29, 0xc6, 0x88, 0xd1, 0x48, 0x8d, 0x04, 0xcd,
        0xf8, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x3c, 0x06,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x74, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x78,
        0x59, 0x48, 0x89, 0xc1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x59, 0x4b,
        0x8b, 0x4c, 0xfd, 0x00, 0x8b, 0x11, 0x85, 0xd2,
        0x78, 0x12, 0xff, 0xca, 0x89, 0x11, 0x75, 0x0c,
        0x49, 0x89, 0xc5, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xe8, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x15, 0xff, 0xc9, 0x89, 0x0f, 0x75, 0x0f,
        0x48, 0x89, 0xf9, 0x48, 0x89, 0xc7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf8, 0x4a,
        0x89, 0x04, 0xfe, 0x4c, 0x8d, 0x2c, 0xde, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xf5, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x86, 0x08, 0x01, 0x00, 0x00, 0x49, 0x89,
        0x74, 0x24, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4,
        0x28, 0xc3,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &PyObject_Size+0x0
    // 18: &PyLong_FromSsize_t+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    // 38: EXECUTOR
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x18, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x38, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xec, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xf3, (uintptr_t)data + 0x34);
}

void
emit__CALL_LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_LIST_APPEND.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 e8                   movq    -0x18(%r13), %rsi
    // 8: 49 8b 46 10                   movq    0x10(%r14), %rax
    // c: 48 39 b0 e8 65 03 00          cmpq    %rsi, 0x365e8(%rax)
    // 13: 75 11                         jne     0x26 <_JIT_ENTRY+0x26>
    // 15: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 19: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 1d: f6 80 ab 00 00 00 02          testb   $0x2, 0xab(%rax)
    // 24: 75 0b                         jne     0x31 <_JIT_ENTRY+0x31>
    // 26: 48 83 c4 28                   addq    $0x28, %rsp
    // 2a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 31: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 35: 48 8b 47 10                   movq    0x10(%rdi), %rax
    // 39: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
    // 3d: 7e 19                         jle     0x58 <_JIT_ENTRY+0x58>
    // 3f: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
    // 43: 48 89 14 c1                   movq    %rdx, (%rcx,%rax,8)
    // 47: 48 ff c0                      incq    %rax
    // 4a: 48 89 47 10                   movq    %rax, 0x10(%rdi)
    // 4e: b3 01                         movb    $0x1, %bl
    // 50: 8b 07                         movl    (%rdi), %eax
    // 52: 85 c0                         testl   %eax, %eax
    // 54: 79 16                         jns     0x6c <_JIT_ENTRY+0x6c>
    // 56: eb 23                         jmp     0x7b <_JIT_ENTRY+0x7b>
    // 58: 48 89 f9                      movq    %rdi, %rcx
    // 5b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__PyList_AppendTakeRefListResize
    // 61: 85 c0                         testl   %eax, %eax
    // 63: 0f 94 c3                      sete    %bl
    // 66: 8b 07                         movl    (%rdi), %eax
    // 68: 85 c0                         testl   %eax, %eax
    // 6a: 78 0f                         js      0x7b <_JIT_ENTRY+0x7b>
    // 6c: ff c8                         decl    %eax
    // 6e: 89 07                         movl    %eax, (%rdi)
    // 70: 75 09                         jne     0x7b <_JIT_ENTRY+0x7b>
    // 72: 48 89 f9                      movq    %rdi, %rcx
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7b: 8b 06                         movl    (%rsi), %eax
    // 7d: 85 c0                         testl   %eax, %eax
    // 7f: 78 06                         js      0x87 <_JIT_ENTRY+0x87>
    // 81: ff c8                         decl    %eax
    // 83: 89 06                         movl    %eax, (%rsi)
    // 85: 74 13                         je      0x9a <_JIT_ENTRY+0x9a>
    // 87: 84 db                         testb   %bl, %bl
    // 89: 74 1c                         je      0xa7 <_JIT_ENTRY+0xa7>
    // 8b: 49 83 c5 e8                   addq    $-0x18, %r13
    // 8f: 48 83 c4 28                   addq    $0x28, %rsp
    // 93: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 9a: 48 89 f1                      movq    %rsi, %rcx
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a3: 84 db                         testb   %bl, %bl
    // a5: 75 e4                         jne     0x8b <_JIT_ENTRY+0x8b>
    // a7: 48 83 c4 28                   addq    $0x28, %rsp
    // ab: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[178] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xe8,
        0x49, 0x8b, 0x46, 0x10, 0x48, 0x39, 0xb0, 0xe8,
        0x65, 0x03, 0x00, 0x75, 0x11, 0x49, 0x8b, 0x7d,
        0xf0, 0x48, 0x8b, 0x47, 0x08, 0xf6, 0x80, 0xab,
        0x00, 0x00, 0x00, 0x02, 0x75, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x55, 0xf8, 0x48, 0x8b, 0x47,
        0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x19, 0x48,
        0x8b, 0x4f, 0x18, 0x48, 0x89, 0x14, 0xc1, 0x48,
        0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xb3, 0x01,
        0x8b, 0x07, 0x85, 0xc0, 0x79, 0x16, 0xeb, 0x23,
        0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0x09, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x13, 0x84,
        0xdb, 0x74, 0x1c, 0x49, 0x83, 0xc5, 0xe8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x84, 0xdb, 0x75, 0xe4, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: JUMP_TARGET
    // 8: &_PyList_AppendTakeRefListResize+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x1c);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 48 63 d9                      movslq  %ecx, %rbx
    // 13: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 18: 29 c1                         subl    %eax, %ecx
    // 1a: 4c 63 f9                      movslq  %ecx, %r15
    // 1d: 4b 8b 54 fd 00                movq    (%r13,%r15,8), %rdx
    // 22: 31 c9                         xorl    %ecx, %ecx
    // 24: 31 f6                         xorl    %esi, %esi
    // 26: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
    // 2c: 41 0f 94 c1                   sete    %r9b
    // 30: 41 0f 95 c0                   setne   %r8b
    // 34: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 38: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp_PyMethodDescr_Type
    // 3f: 75 34                         jne     0x75 <_JIT_ENTRY+0x75>
    // 41: 48 8b 7a 28                   movq    0x28(%rdx), %rdi
    // 45: 81 7f 10 80 00 00 00          cmpl    $0x80, 0x10(%rdi)
    // 4c: 75 27                         jne     0x75 <_JIT_ENTRY+0x75>
    // 4e: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 56: 4d 89 eb                      movq    %r13, %r11
    // 59: 4d 29 d3                      subq    %r10, %r11
    // 5c: 44 88 c9                      movb    %r9b, %cl
    // 5f: 49 8d 2c cb                   leaq    (%r11,%rcx,8), %rbp
    // 63: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 67: 48 8b 4d 00                   movq    (%rbp), %rcx
    // 6b: 4c 8b 49 08                   movq    0x8(%rcx), %r9
    // 6f: 4c 3b 4a 10                   cmpq    0x10(%rdx), %r9
    // 73: 74 0c                         je      0x81 <_JIT_ENTRY+0x81>
    // 75: 48 83 c4 30                   addq    $0x30, %rsp
    // 79: 5d                            popq    %rbp
    // 7a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 81: 44 88 c6                      movb    %r8b, %sil
    // 84: 01 c6                         addl    %eax, %esi
    // 86: 8d 46 ff                      leal    -0x1(%rsi), %eax
    // 89: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 8e: 4c 63 c0                      movslq  %eax, %r8
    // 91: 48 8d 55 08                   leaq    0x8(%rbp), %rdx
    // 95: ff 57 08                      callq   *0x8(%rdi)
    // 98: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // 9d: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // a2: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // a7: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b0: 83 fe 01                      cmpl    $0x1, %esi
    // b3: 73 3a                         jae     0xef <_JIT_ENTRY+0xef>
    // b5: 4b 8b 4c fd 00                movq    (%r13,%r15,8), %rcx
    // ba: 8b 01                         movl    (%rcx), %eax
    // bc: 85 c0                         testl   %eax, %eax
    // be: 78 0c                         js      0xcc <_JIT_ENTRY+0xcc>
    // c0: ff c8                         decl    %eax
    // c2: 89 01                         movl    %eax, (%rcx)
    // c4: 75 06                         jne     0xcc <_JIT_ENTRY+0xcc>
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cc: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // d1: 48 85 c9                      testq   %rcx, %rcx
    // d4: 74 4b                         je      0x121 <_JIT_ENTRY+0x121>
    // d6: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // db: 4a 89 0c f8                   movq    %rcx, (%rax,%r15,8)
    // df: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // e3: 48 83 c4 30                   addq    $0x30, %rsp
    // e7: 5d                            popq    %rbp
    // e8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xef <_JIT_ENTRY+0xef>
    // 00000000000000eb:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // ef: 89 f6                         movl    %esi, %esi
    // f1: 31 ff                         xorl    %edi, %edi
    // f3: eb 13                         jmp     0x108 <_JIT_ENTRY+0x108>
    // f5: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
    // 100: 48 ff c7                      incq    %rdi
    // 103: 48 39 fe                      cmpq    %rdi, %rsi
    // 106: 74 ad                         je      0xb5 <_JIT_ENTRY+0xb5>
    // 108: 48 8b 4c fd 00                movq    (%rbp,%rdi,8), %rcx
    // 10d: 8b 01                         movl    (%rcx), %eax
    // 10f: 85 c0                         testl   %eax, %eax
    // 111: 78 ed                         js      0x100 <_JIT_ENTRY+0x100>
    // 113: ff c8                         decl    %eax
    // 115: 89 01                         movl    %eax, (%rcx)
    // 117: 75 e7                         jne     0x100 <_JIT_ENTRY+0x100>
    // 119: ff 15 00 00 00 00             callq   *(%rip)                 # 0x11f <_JIT_ENTRY+0x11f>
    // 000000000000011b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 11f: eb df                         jmp     0x100 <_JIT_ENTRY+0x100>
    // 121: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // 126: 48 83 c4 30                   addq    $0x30, %rsp
    // 12a: 5d                            popq    %rbp
    // 12b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x132 <_JIT_ENTRY+0x132>
    // 000000000000012e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[306] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x48, 0x63, 0xd9, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4b, 0x8b, 0x54,
        0xfd, 0x00, 0x31, 0xc9, 0x31, 0xf6, 0x49, 0x83,
        0x7c, 0xdd, 0x00, 0x00, 0x41, 0x0f, 0x94, 0xc1,
        0x41, 0x0f, 0x95, 0xc0, 0x48, 0x8b, 0x7a, 0x08,
        0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x34, 0x48, 0x8b, 0x7a, 0x28, 0x81, 0x7f, 0x10,
        0x80, 0x00, 0x00, 0x00, 0x75, 0x27, 0x44, 0x8d,
        0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0xeb, 0x4d, 0x29, 0xd3, 0x44, 0x88, 0xc9, 0x49,
        0x8d, 0x2c, 0xcb, 0x48, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x4d, 0x00, 0x4c, 0x8b, 0x49, 0x08, 0x4c,
        0x3b, 0x4a, 0x10, 0x74, 0x0c, 0x48, 0x83, 0xc4,
        0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x44, 0x88, 0xc6, 0x01, 0xc6, 0x8d, 0x46,
        0xff, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x63,
        0xc0, 0x48, 0x8d, 0x55, 0x08, 0xff, 0x57, 0x08,
        0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8b, 0x44,
        0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xfe, 0x01, 0x73, 0x3a, 0x4b, 0x8b, 0x4c,
        0xfd, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24,
        0x28, 0x48, 0x85, 0xc9, 0x74, 0x4b, 0x48, 0x8b,
        0x44, 0x24, 0x20, 0x4a, 0x89, 0x0c, 0xf8, 0x4c,
        0x8d, 0x2c, 0xd8, 0x48, 0x83, 0xc4, 0x30, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf6, 0x31, 0xff, 0xeb, 0x13, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x74, 0xad,
        0x48, 0x8b, 0x4c, 0xfd, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0xed, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0xdf, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xeb, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x11b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x12e, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 48 63 d9                      movslq  %ecx, %rbx
    // 13: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 18: 29 c1                         subl    %eax, %ecx
    // 1a: 4c 63 f9                      movslq  %ecx, %r15
    // 1d: 4b 8b 54 fd 00                movq    (%r13,%r15,8), %rdx
    // 22: 31 c9                         xorl    %ecx, %ecx
    // 24: 31 f6                         xorl    %esi, %esi
    // 26: 49 83 7c dd 00 00             cmpq    $0x0, (%r13,%rbx,8)
    // 2c: 41 0f 94 c1                   sete    %r9b
    // 30: 41 0f 95 c0                   setne   %r8b
    // 34: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 38: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp_PyMethodDescr_Type
    // 3f: 75 34                         jne     0x75 <_JIT_ENTRY+0x75>
    // 41: 48 8b 7a 28                   movq    0x28(%rdx), %rdi
    // 45: 81 7f 10 82 00 00 00          cmpl    $0x82, 0x10(%rdi)
    // 4c: 75 27                         jne     0x75 <_JIT_ENTRY+0x75>
    // 4e: 44 8d 14 c5 00 00 00 00       leal    (,%rax,8), %r10d
    // 56: 4d 89 eb                      movq    %r13, %r11
    // 59: 4d 29 d3                      subq    %r10, %r11
    // 5c: 44 88 c9                      movb    %r9b, %cl
    // 5f: 49 8d 2c cb                   leaq    (%r11,%rcx,8), %rbp
    // 63: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 67: 48 8b 4d 00                   movq    (%rbp), %rcx
    // 6b: 4c 8b 49 08                   movq    0x8(%rcx), %r9
    // 6f: 4c 3b 4a 10                   cmpq    0x10(%rdx), %r9
    // 73: 74 0c                         je      0x81 <_JIT_ENTRY+0x81>
    // 75: 48 83 c4 30                   addq    $0x30, %rsp
    // 79: 5d                            popq    %rbp
    // 7a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 81: 44 88 c6                      movb    %r8b, %sil
    // 84: 01 c6                         addl    %eax, %esi
    // 86: 8d 46 ff                      leal    -0x1(%rsi), %eax
    // 89: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 8e: 4c 63 c0                      movslq  %eax, %r8
    // 91: 48 8d 55 08                   leaq    0x8(%rbp), %rdx
    // 95: 45 31 c9                      xorl    %r9d, %r9d
    // 98: ff 57 08                      callq   *0x8(%rdi)
    // 9b: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // a0: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // a5: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // aa: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b3: 83 fe 01                      cmpl    $0x1, %esi
    // b6: 73 3a                         jae     0xf2 <_JIT_ENTRY+0xf2>
    // b8: 4b 8b 4c fd 00                movq    (%r13,%r15,8), %rcx
    // bd: 8b 01                         movl    (%rcx), %eax
    // bf: 85 c0                         testl   %eax, %eax
    // c1: 78 0c                         js      0xcf <_JIT_ENTRY+0xcf>
    // c3: ff c8                         decl    %eax
    // c5: 89 01                         movl    %eax, (%rcx)
    // c7: 75 06                         jne     0xcf <_JIT_ENTRY+0xcf>
    // c9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcf <_JIT_ENTRY+0xcf>
    // 00000000000000cb:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cf: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // d4: 48 85 c9                      testq   %rcx, %rcx
    // d7: 74 48                         je      0x121 <_JIT_ENTRY+0x121>
    // d9: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // de: 4a 89 0c f8                   movq    %rcx, (%rax,%r15,8)
    // e2: 4c 8d 2c d8                   leaq    (%rax,%rbx,8), %r13
    // e6: 48 83 c4 30                   addq    $0x30, %rsp
    // ea: 5d                            popq    %rbp
    // eb: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf2 <_JIT_ENTRY+0xf2>
    // 00000000000000ee:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // f2: 89 f6                         movl    %esi, %esi
    // f4: 31 ff                         xorl    %edi, %edi
    // f6: eb 10                         jmp     0x108 <_JIT_ENTRY+0x108>
    // f8: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
    // 100: 48 ff c7                      incq    %rdi
    // 103: 48 39 fe                      cmpq    %rdi, %rsi
    // 106: 74 b0                         je      0xb8 <_JIT_ENTRY+0xb8>
    // 108: 48 8b 4c fd 00                movq    (%rbp,%rdi,8), %rcx
    // 10d: 8b 01                         movl    (%rcx), %eax
    // 10f: 85 c0                         testl   %eax, %eax
    // 111: 78 ed                         js      0x100 <_JIT_ENTRY+0x100>
    // 113: ff c8                         decl    %eax
    // 115: 89 01                         movl    %eax, (%rcx)
    // 117: 75 e7                         jne     0x100 <_JIT_ENTRY+0x100>
    // 119: ff 15 00 00 00 00             callq   *(%rip)                 # 0x11f <_JIT_ENTRY+0x11f>
    // 000000000000011b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 11f: eb df                         jmp     0x100 <_JIT_ENTRY+0x100>
    // 121: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // 126: 48 83 c4 30                   addq    $0x30, %rsp
    // 12a: 5d                            popq    %rbp
    // 12b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x132 <_JIT_ENTRY+0x132>
    // 000000000000012e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[306] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x48, 0x63, 0xd9, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x4c, 0x63, 0xf9, 0x4b, 0x8b, 0x54,
        0xfd, 0x00, 0x31, 0xc9, 0x31, 0xf6, 0x49, 0x83,
        0x7c, 0xdd, 0x00, 0x00, 0x41, 0x0f, 0x94, 0xc1,
        0x41, 0x0f, 0x95, 0xc0, 0x48, 0x8b, 0x7a, 0x08,
        0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x34, 0x48, 0x8b, 0x7a, 0x28, 0x81, 0x7f, 0x10,
        0x82, 0x00, 0x00, 0x00, 0x75, 0x27, 0x44, 0x8d,
        0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0xeb, 0x4d, 0x29, 0xd3, 0x44, 0x88, 0xc9, 0x49,
        0x8d, 0x2c, 0xcb, 0x48, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x4d, 0x00, 0x4c, 0x8b, 0x49, 0x08, 0x4c,
        0x3b, 0x4a, 0x10, 0x74, 0x0c, 0x48, 0x83, 0xc4,
        0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x44, 0x88, 0xc6, 0x01, 0xc6, 0x8d, 0x46,
        0xff, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x63,
        0xc0, 0x48, 0x8d, 0x55, 0x08, 0x45, 0x31, 0xc9,
        0xff, 0x57, 0x08, 0x48, 0x89, 0x44, 0x24, 0x28,
        0x49, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44,
        0x24, 0x20, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xfe, 0x01, 0x73, 0x3a,
        0x4b, 0x8b, 0x4c, 0xfd, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4c, 0x24, 0x28, 0x48, 0x85, 0xc9, 0x74,
        0x48, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4a, 0x89,
        0x0c, 0xf8, 0x4c, 0x8d, 0x2c, 0xd8, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf6, 0x31, 0xff, 0xeb, 0x10,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x74, 0xb0,
        0x48, 0x8b, 0x4c, 0xfd, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0xed, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0xdf, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x83,
        0xc4, 0x30, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xee, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x11b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x12e, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 20                   subq    $0x20, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 4c 63 f9                      movslq  %ecx, %r15
    // 13: 31 c9                         xorl    %ecx, %ecx
    // 15: 31 f6                         xorl    %esi, %esi
    // 17: 4b 83 7c fd 00 00             cmpq    $0x0, (%r13,%r15,8)
    // 1d: 0f 94 c2                      sete    %dl
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 01 c6                         addl    %eax, %esi
    // 26: 83 fe 01                      cmpl    $0x1, %esi
    // 29: 0f 85 c7 00 00 00             jne     0xf6 <_JIT_ENTRY+0xf6>
    // 2f: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 34: 29 c6                         subl    %eax, %esi
    // 36: 48 63 ee                      movslq  %esi, %rbp
    // 39: 49 8b 74 ed 00                movq    (%r13,%rbp,8), %rsi
    // 3e: 48 8b 7e 08                   movq    0x8(%rsi), %rdi
    // 42: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp_PyMethodDescr_Type
    // 49: 0f 85 a7 00 00 00             jne     0xf6 <_JIT_ENTRY+0xf6>
    // 4f: c1 e0 03                      shll    $0x3, %eax
    // 52: 4c 89 ef                      movq    %r13, %rdi
    // 55: 48 29 c7                      subq    %rax, %rdi
    // 58: 88 d1                         movb    %dl, %cl
    // 5a: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 62: 48 8b 3c 07                   movq    (%rdi,%rax), %rdi
    // 66: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 6a: 48 3b 46 10                   cmpq    0x10(%rsi), %rax
    // 6e: 0f 85 82 00 00 00             jne     0xf6 <_JIT_ENTRY+0xf6>
    // 74: 48 8b 46 28                   movq    0x28(%rsi), %rax
    // 78: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
    // 7c: 75 78                         jne     0xf6 <_JIT_ENTRY+0xf6>
    // 7e: 41 8b 4e 34                   movl    0x34(%r14), %ecx
    // 82: 85 c9                         testl   %ecx, %ecx
    // 84: 7e 70                         jle     0xf6 <_JIT_ENTRY+0xf6>
    // 86: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8a: ff c9                         decl    %ecx
    // 8c: 41 89 4e 34                   movl    %ecx, 0x34(%r14)
    // 90: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 95: 48 89 f9                      movq    %rdi, %rcx
    // 98: 31 d2                         xorl    %edx, %edx
    // 9a: ff d0                         callq   *%rax
    // 9c: 49 8b 74 24 40                movq    0x40(%r12), %rsi
    // a1: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // aa: 41 ff 46 34                   incl    0x34(%r14)
    // ae: 48 89 c3                      movq    %rax, %rbx
    // b1: 8b 07                         movl    (%rdi), %eax
    // b3: 85 c0                         testl   %eax, %eax
    // b5: 78 0f                         js      0xc6 <_JIT_ENTRY+0xc6>
    // b7: ff c8                         decl    %eax
    // b9: 89 07                         movl    %eax, (%rdi)
    // bb: 75 09                         jne     0xc6 <_JIT_ENTRY+0xc6>
    // bd: 48 89 f9                      movq    %rdi, %rcx
    // c0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c6: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // cb: 8b 01                         movl    (%rcx), %eax
    // cd: 85 c0                         testl   %eax, %eax
    // cf: 78 0c                         js      0xdd <_JIT_ENTRY+0xdd>
    // d1: ff c8                         decl    %eax
    // d3: 89 01                         movl    %eax, (%rcx)
    // d5: 75 06                         jne     0xdd <_JIT_ENTRY+0xdd>
    // d7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdd <_JIT_ENTRY+0xdd>
    // 00000000000000d9:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // dd: 48 85 db                      testq   %rbx, %rbx
    // e0: 74 20                         je      0x102 <_JIT_ENTRY+0x102>
    // e2: 48 89 1c ee                   movq    %rbx, (%rsi,%rbp,8)
    // e6: 4e 8d 2c fe                   leaq    (%rsi,%r15,8), %r13
    // ea: 48 83 c4 20                   addq    $0x20, %rsp
    // ee: 5d                            popq    %rbp
    // ef: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf6 <_JIT_ENTRY+0xf6>
    // 00000000000000f2:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // f6: 48 83 c4 20                   addq    $0x20, %rsp
    // fa: 5d                            popq    %rbp
    // fb: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x102 <_JIT_ENTRY+0x102>
    // 00000000000000fe:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 102: 49 89 f5                      movq    %rsi, %r13
    // 105: 48 83 c4 20                   addq    $0x20, %rsp
    // 109: 5d                            popq    %rbp
    // 10a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x111 <_JIT_ENTRY+0x111>
    // 000000000000010d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[273] = {
        0x55, 0x48, 0x83, 0xec, 0x20, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x4c, 0x63, 0xf9, 0x31, 0xc9, 0x31, 0xf6, 0x4b,
        0x83, 0x7c, 0xfd, 0x00, 0x00, 0x0f, 0x94, 0xc2,
        0x40, 0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe,
        0x01, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0xbe,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc6, 0x48, 0x63,
        0xee, 0x49, 0x8b, 0x74, 0xed, 0x00, 0x48, 0x8b,
        0x7e, 0x08, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x85, 0xa7, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x03, 0x4c, 0x89, 0xef, 0x48, 0x29, 0xc7,
        0x88, 0xd1, 0x48, 0x8d, 0x04, 0xcd, 0xf8, 0xff,
        0xff, 0xff, 0x48, 0x8b, 0x3c, 0x07, 0x48, 0x8b,
        0x47, 0x08, 0x48, 0x3b, 0x46, 0x10, 0x0f, 0x85,
        0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x46, 0x28,
        0x83, 0x78, 0x10, 0x04, 0x75, 0x78, 0x41, 0x8b,
        0x4e, 0x34, 0x85, 0xc9, 0x7e, 0x70, 0x48, 0x8b,
        0x40, 0x08, 0xff, 0xc9, 0x41, 0x89, 0x4e, 0x34,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf9,
        0x31, 0xd2, 0xff, 0xd0, 0x49, 0x8b, 0x74, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0xff, 0x46, 0x34, 0x48, 0x89,
        0xc3, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x09, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x4c, 0xed, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75, 0x06, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xdb,
        0x74, 0x20, 0x48, 0x89, 0x1c, 0xee, 0x4e, 0x8d,
        0x2c, 0xfe, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x20, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xf5, 0x48, 0x83, 0xc4,
        0x20, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd9, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xf2, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xfe, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x10d, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_METHOD_DESCRIPTOR_O.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 20                   subq    $0x20, %rsp
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 89 c1                         movl    %eax, %ecx
    // e: f7 d1                         notl    %ecx
    // 10: 48 63 e9                      movslq  %ecx, %rbp
    // 13: 31 c9                         xorl    %ecx, %ecx
    // 15: 31 f6                         xorl    %esi, %esi
    // 17: 49 83 7c ed 00 00             cmpq    $0x0, (%r13,%rbp,8)
    // 1d: 0f 94 c2                      sete    %dl
    // 20: 40 0f 95 c6                   setne   %sil
    // 24: 01 c6                         addl    %eax, %esi
    // 26: 83 fe 02                      cmpl    $0x2, %esi
    // 29: 75 51                         jne     0x7c <_JIT_ENTRY+0x7c>
    // 2b: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 30: 29 c6                         subl    %eax, %esi
    // 32: 48 63 f6                      movslq  %esi, %rsi
    // 35: 49 8b 7c f5 00                movq    (%r13,%rsi,8), %rdi
    // 3a: 4c 8b 47 08                   movq    0x8(%rdi), %r8
    // 3e: 4c 3b 05 00 00 00 00          cmpq    (%rip), %r8             # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  IMAGE_REL_AMD64_REL32        __imp_PyMethodDescr_Type
    // 45: 75 35                         jne     0x7c <_JIT_ENTRY+0x7c>
    // 47: 4c 8b 47 28                   movq    0x28(%rdi), %r8
    // 4b: 41 83 78 10 08                cmpl    $0x8, 0x10(%r8)
    // 50: 75 2a                         jne     0x7c <_JIT_ENTRY+0x7c>
    // 52: 45 8b 4e 34                   movl    0x34(%r14), %r9d
    // 56: 45 85 c9                      testl   %r9d, %r9d
    // 59: 7e 21                         jle     0x7c <_JIT_ENTRY+0x7c>
    // 5b: c1 e0 03                      shll    $0x3, %eax
    // 5e: 4d 89 ea                      movq    %r13, %r10
    // 61: 49 29 c2                      subq    %rax, %r10
    // 64: 88 d1                         movb    %dl, %cl
    // 66: 48 8d 04 cd f8 ff ff ff       leaq    -0x8(,%rcx,8), %rax
    // 6e: 4d 8b 3c 02                   movq    (%r10,%rax), %r15
    // 72: 49 8b 4f 08                   movq    0x8(%r15), %rcx
    // 76: 48 3b 4f 10                   cmpq    0x10(%rdi), %rcx
    // 7a: 74 0c                         je      0x88 <_JIT_ENTRY+0x88>
    // 7c: 48 83 c4 20                   addq    $0x20, %rsp
    // 80: 5d                            popq    %rbp
    // 81: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x88 <_JIT_ENTRY+0x88>
    // 0000000000000084:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 88: 49 8b 5c 02 08                movq    0x8(%r10,%rax), %rbx
    // 8d: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 91: 41 ff c9                      decl    %r9d
    // 94: 45 89 4e 34                   movl    %r9d, 0x34(%r14)
    // 98: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 9d: 4c 89 f9                      movq    %r15, %rcx
    // a0: 48 89 da                      movq    %rbx, %rdx
    // a3: ff d0                         callq   *%rax
    // a5: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // aa: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b3: 41 ff 46 34                   incl    0x34(%r14)
    // b7: 48 89 c7                      movq    %rax, %rdi
    // ba: 41 8b 07                      movl    (%r15), %eax
    // bd: 85 c0                         testl   %eax, %eax
    // bf: 78 16                         js      0xd7 <_JIT_ENTRY+0xd7>
    // c1: ff c8                         decl    %eax
    // c3: 41 89 07                      movl    %eax, (%r15)
    // c6: 75 0f                         jne     0xd7 <_JIT_ENTRY+0xd7>
    // c8: 4c 89 f9                      movq    %r15, %rcx
    // cb: 49 89 d7                      movq    %rdx, %r15
    // ce: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd4 <_JIT_ENTRY+0xd4>
    // 00000000000000d0:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // d4: 4c 89 fa                      movq    %r15, %rdx
    // d7: 8b 03                         movl    (%rbx), %eax
    // d9: 85 c0                         testl   %eax, %eax
    // db: 78 15                         js      0xf2 <_JIT_ENTRY+0xf2>
    // dd: ff c8                         decl    %eax
    // df: 89 03                         movl    %eax, (%rbx)
    // e1: 75 0f                         jne     0xf2 <_JIT_ENTRY+0xf2>
    // e3: 48 89 d9                      movq    %rbx, %rcx
    // e6: 48 89 d3                      movq    %rdx, %rbx
    // e9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xef <_JIT_ENTRY+0xef>
    // 00000000000000eb:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ef: 48 89 da                      movq    %rbx, %rdx
    // f2: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // f7: 8b 01                         movl    (%rcx), %eax
    // f9: 85 c0                         testl   %eax, %eax
    // fb: 78 12                         js      0x10f <_JIT_ENTRY+0x10f>
    // fd: ff c8                         decl    %eax
    // ff: 89 01                         movl    %eax, (%rcx)
    // 101: 75 0c                         jne     0x10f <_JIT_ENTRY+0x10f>
    // 103: 48 89 d3                      movq    %rdx, %rbx
    // 106: ff 15 00 00 00 00             callq   *(%rip)                 # 0x10c <_JIT_ENTRY+0x10c>
    // 0000000000000108:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 10c: 48 89 da                      movq    %rbx, %rdx
    // 10f: 48 85 ff                      testq   %rdi, %rdi
    // 112: 74 14                         je      0x128 <_JIT_ENTRY+0x128>
    // 114: 48 89 3c f2                   movq    %rdi, (%rdx,%rsi,8)
    // 118: 4c 8d 2c ea                   leaq    (%rdx,%rbp,8), %r13
    // 11c: 48 83 c4 20                   addq    $0x20, %rsp
    // 120: 5d                            popq    %rbp
    // 121: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x128 <_JIT_ENTRY+0x128>
    // 0000000000000124:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 128: 49 89 d5                      movq    %rdx, %r13
    // 12b: 48 83 c4 20                   addq    $0x20, %rsp
    // 12f: 5d                            popq    %rbp
    // 130: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x137 <_JIT_ENTRY+0x137>
    // 0000000000000133:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[311] = {
        0x55, 0x48, 0x83, 0xec, 0x20, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1,
        0x48, 0x63, 0xe9, 0x31, 0xc9, 0x31, 0xf6, 0x49,
        0x83, 0x7c, 0xed, 0x00, 0x00, 0x0f, 0x94, 0xc2,
        0x40, 0x0f, 0x95, 0xc6, 0x01, 0xc6, 0x83, 0xfe,
        0x02, 0x75, 0x51, 0xbe, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc6, 0x48, 0x63, 0xf6, 0x49, 0x8b, 0x7c,
        0xf5, 0x00, 0x4c, 0x8b, 0x47, 0x08, 0x4c, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x75, 0x35, 0x4c,
        0x8b, 0x47, 0x28, 0x41, 0x83, 0x78, 0x10, 0x08,
        0x75, 0x2a, 0x45, 0x8b, 0x4e, 0x34, 0x45, 0x85,
        0xc9, 0x7e, 0x21, 0xc1, 0xe0, 0x03, 0x4d, 0x89,
        0xea, 0x49, 0x29, 0xc2, 0x88, 0xd1, 0x48, 0x8d,
        0x04, 0xcd, 0xf8, 0xff, 0xff, 0xff, 0x4d, 0x8b,
        0x3c, 0x02, 0x49, 0x8b, 0x4f, 0x08, 0x48, 0x3b,
        0x4f, 0x10, 0x74, 0x0c, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x5c, 0x02, 0x08, 0x49, 0x8b, 0x40,
        0x08, 0x41, 0xff, 0xc9, 0x45, 0x89, 0x4e, 0x34,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf9,
        0x48, 0x89, 0xda, 0xff, 0xd0, 0x49, 0x8b, 0x54,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x41, 0xff, 0x46, 0x34, 0x48,
        0x89, 0xc7, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x16, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x0f,
        0x4c, 0x89, 0xf9, 0x49, 0x89, 0xd7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x15, 0xff, 0xc8, 0x89,
        0x03, 0x75, 0x0f, 0x48, 0x89, 0xd9, 0x48, 0x89,
        0xd3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xda, 0x49, 0x8b, 0x4c, 0xf5, 0x00, 0x8b,
        0x01, 0x85, 0xc0, 0x78, 0x12, 0xff, 0xc8, 0x89,
        0x01, 0x75, 0x0c, 0x48, 0x89, 0xd3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0x48,
        0x85, 0xff, 0x74, 0x14, 0x48, 0x89, 0x3c, 0xf2,
        0x4c, 0x8d, 0x2c, 0xea, 0x48, 0x83, 0xc4, 0x20,
        0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x5d,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd0, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xeb, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x108, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x124, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x133, (uintptr_t)data + 0x24);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_NON_PY_GENERAL.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 40                   subq    $0x40, %rsp
    // 5: 4c 89 74 24 30                movq    %r14, 0x30(%rsp)
    // a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 11: 0f b7 d0                      movzwl  %ax, %edx
    // 14: 0f b7 d8                      movzwl  %ax, %ebx
    // 17: 8d 04 dd 00 00 00 00          leal    (,%rbx,8), %eax
    // 1e: 4c 89 ef                      movq    %r13, %rdi
    // 21: 48 29 c7                      subq    %rax, %rdi
    // 24: 89 d0                         movl    %edx, %eax
    // 26: f7 d0                         notl    %eax
    // 28: 48 63 f0                      movslq  %eax, %rsi
    // 2b: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 30: 29 d0                         subl    %edx, %eax
    // 32: 48 63 e8                      movslq  %eax, %rbp
    // 35: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // 3a: 48 89 74 24 38                movq    %rsi, 0x38(%rsp)
    // 3f: 4d 8b 7c f5 00                movq    (%r13,%rsi,8), %r15
    // 44: 45 31 f6                      xorl    %r14d, %r14d
    // 47: 31 f6                         xorl    %esi, %esi
    // 49: 4d 85 ff                      testq   %r15, %r15
    // 4c: 41 0f 94 c6                   sete    %r14b
    // 50: 40 0f 95 c6                   setne   %sil
    // 54: 01 d6                         addl    %edx, %esi
    // 56: 4a 8d 14 f7                   leaq    (%rdi,%r14,8), %rdx
    // 5a: 48 83 c2 f8                   addq    $-0x8, %rdx
    // 5e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 63: 49 b8 00 00 00 00 00 00 00 80 movabsq $-0x8000000000000000, %r8 # imm = 0x8000000000000000
    // 6d: 49 09 f0                      orq     %rsi, %r8
    // 70: 45 31 c9                      xorl    %r9d, %r9d
    // 73: ff 15 00 00 00 00             callq   *(%rip)                 # 0x79 <_JIT_ENTRY+0x79>
    // 0000000000000075:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Vectorcall
    // 79: 48 89 c7                      movq    %rax, %rdi
    // 7c: 49 8b 44 24 40                movq    0x40(%r12), %rax
    // 81: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // 86: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8f: 49 8b 4c ed 00                movq    (%r13,%rbp,8), %rcx
    // 94: 8b 01                         movl    (%rcx), %eax
    // 96: 85 c0                         testl   %eax, %eax
    // 98: 78 0c                         js      0xa6 <_JIT_ENTRY+0xa6>
    // 9a: ff c8                         decl    %eax
    // 9c: 89 01                         movl    %eax, (%rcx)
    // 9e: 75 06                         jne     0xa6 <_JIT_ENTRY+0xa6>
    // a0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a6: 85 f6                         testl   %esi, %esi
    // a8: 74 44                         je      0xee <_JIT_ENTRY+0xee>
    // aa: 48 f7 db                      negq    %rbx
    // ad: 4a 8d 04 f5 f8 ff ff ff       leaq    -0x8(,%r14,8), %rax
    // b5: 31 f6                         xorl    %esi, %esi
    // b7: 4d 85 ff                      testq   %r15, %r15
    // ba: 40 0f 95 c6                   setne   %sil
    // be: 49 01 c5                      addq    %rax, %r13
    // c1: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0xc8 <_JIT_ENTRY+0xc8>
    // 00000000000000c4:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c8: eb 0e                         jmp     0xd8 <_JIT_ENTRY+0xd8>
    // ca: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
    // d0: 48 ff c3                      incq    %rbx
    // d3: 48 39 de                      cmpq    %rbx, %rsi
    // d6: 74 16                         je      0xee <_JIT_ENTRY+0xee>
    // d8: 49 8b 4c dd 00                movq    (%r13,%rbx,8), %rcx
    // dd: 8b 01                         movl    (%rcx), %eax
    // df: 85 c0                         testl   %eax, %eax
    // e1: 78 ed                         js      0xd0 <_JIT_ENTRY+0xd0>
    // e3: ff c8                         decl    %eax
    // e5: 89 01                         movl    %eax, (%rcx)
    // e7: 75 e7                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // e9: 41 ff d6                      callq   *%r14
    // ec: eb e2                         jmp     0xd0 <_JIT_ENTRY+0xd0>
    // ee: 48 85 ff                      testq   %rdi, %rdi
    // f1: 74 23                         je      0x116 <_JIT_ENTRY+0x116>
    // f3: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // f8: 48 89 3c e9                   movq    %rdi, (%rcx,%rbp,8)
    // fc: 48 8b 44 24 38                movq    0x38(%rsp), %rax
    // 101: 4c 8d 2c c1                   leaq    (%rcx,%rax,8), %r13
    // 105: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
    // 10a: 48 83 c4 40                   addq    $0x40, %rsp
    // 10e: 5d                            popq    %rbp
    // 10f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x116 <_JIT_ENTRY+0x116>
    // 0000000000000112:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 116: 4c 8b 6c 24 28                movq    0x28(%rsp), %r13
    // 11b: 4c 8b 74 24 30                movq    0x30(%rsp), %r14
    // 120: 48 83 c4 40                   addq    $0x40, %rsp
    // 124: 5d                            popq    %rbp
    // 125: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x12c <_JIT_ENTRY+0x12c>
    // 0000000000000128:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[300] = {
        0x55, 0x48, 0x83, 0xec, 0x40, 0x4c, 0x89, 0x74,
        0x24, 0x30, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7, 0xd8, 0x8d,
        0x04, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xef, 0x48, 0x29, 0xc7, 0x89, 0xd0, 0xf7, 0xd0,
        0x48, 0x63, 0xf0, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xd0, 0x48, 0x63, 0xe8, 0x49, 0x8b, 0x4c,
        0xed, 0x00, 0x48, 0x89, 0x74, 0x24, 0x38, 0x4d,
        0x8b, 0x7c, 0xf5, 0x00, 0x45, 0x31, 0xf6, 0x31,
        0xf6, 0x4d, 0x85, 0xff, 0x41, 0x0f, 0x94, 0xc6,
        0x40, 0x0f, 0x95, 0xc6, 0x01, 0xd6, 0x4a, 0x8d,
        0x14, 0xf7, 0x48, 0x83, 0xc2, 0xf8, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x49, 0xb8, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0x49, 0x09, 0xf0,
        0x45, 0x31, 0xc9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xc7, 0x49, 0x8b, 0x44, 0x24,
        0x40, 0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x4c, 0xed, 0x00, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xf6,
        0x74, 0x44, 0x48, 0xf7, 0xdb, 0x4a, 0x8d, 0x04,
        0xf5, 0xf8, 0xff, 0xff, 0xff, 0x31, 0xf6, 0x4d,
        0x85, 0xff, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x01,
        0xc5, 0x4c, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x0e, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x48, 0xff, 0xc3, 0x48, 0x39, 0xde, 0x74, 0x16,
        0x49, 0x8b, 0x4c, 0xdd, 0x00, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0xed, 0xff, 0xc8, 0x89, 0x01, 0x75,
        0xe7, 0x41, 0xff, 0xd6, 0xeb, 0xe2, 0x48, 0x85,
        0xff, 0x74, 0x23, 0x48, 0x8b, 0x4c, 0x24, 0x28,
        0x48, 0x89, 0x3c, 0xe9, 0x48, 0x8b, 0x44, 0x24,
        0x38, 0x4c, 0x8d, 0x2c, 0xc1, 0x4c, 0x8b, 0x74,
        0x24, 0x30, 0x48, 0x83, 0xc4, 0x40, 0x5d, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b,
        0x6c, 0x24, 0x28, 0x4c, 0x8b, 0x74, 0x24, 0x30,
        0x48, 0x83, 0xc4, 0x40, 0x5d, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_Vectorcall+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc4, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x112, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x128, (uintptr_t)data + 0x1c);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_STR_1.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 9: 75 0d                         jne     0x18 <_JIT_ENTRY+0x18>
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // 16: 74 0b                         je      0x23 <_JIT_ENTRY+0x23>
    // 18: 48 83 c4 28                   addq    $0x28, %rsp
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 23: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 48 89 f1                      movq    %rsi, %rcx
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Str
    // 35: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 43: 8b 0e                         movl    (%rsi), %ecx
    // 45: 85 c9                         testl   %ecx, %ecx
    // 47: 78 15                         js      0x5e <_JIT_ENTRY+0x5e>
    // 49: ff c9                         decl    %ecx
    // 4b: 89 0e                         movl    %ecx, (%rsi)
    // 4d: 75 0f                         jne     0x5e <_JIT_ENTRY+0x5e>
    // 4f: 48 89 f1                      movq    %rsi, %rcx
    // 52: 48 89 c6                      movq    %rax, %rsi
    // 55: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5b: 48 89 f0                      movq    %rsi, %rax
    // 5e: 48 85 c0                      testq   %rax, %rax
    // 61: 74 13                         je      0x76 <_JIT_ENTRY+0x76>
    // 63: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // 67: 49 83 c5 f0                   addq    $-0x10, %r13
    // 6b: 48 83 c4 28                   addq    $0x28, %rsp
    // 6f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 76: 48 83 c4 28                   addq    $0x28, %rsp
    // 7a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[129] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x83, 0x7d, 0xf0,
        0x00, 0x75, 0x0d, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0b,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x15, 0xff, 0xc9, 0x89, 0x0e, 0x75, 0x0f, 0x48,
        0x89, 0xf1, 0x48, 0x89, 0xc6, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf0, 0x48, 0x85,
        0xc0, 0x74, 0x13, 0x49, 0x89, 0x45, 0xe8, 0x49,
        0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyObject_Str+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Str);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x24);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TUPLE_1.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 9: 75 0d                         jne     0x18 <_JIT_ENTRY+0x18>
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_Type
    // 16: 74 0b                         je      0x23 <_JIT_ENTRY+0x23>
    // 18: 48 83 c4 28                   addq    $0x28, %rsp
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 23: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 48 89 f1                      movq    %rsi, %rcx
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp_PySequence_Tuple
    // 35: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 43: 8b 0e                         movl    (%rsi), %ecx
    // 45: 85 c9                         testl   %ecx, %ecx
    // 47: 78 15                         js      0x5e <_JIT_ENTRY+0x5e>
    // 49: ff c9                         decl    %ecx
    // 4b: 89 0e                         movl    %ecx, (%rsi)
    // 4d: 75 0f                         jne     0x5e <_JIT_ENTRY+0x5e>
    // 4f: 48 89 f1                      movq    %rsi, %rcx
    // 52: 48 89 c6                      movq    %rax, %rsi
    // 55: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5b: 48 89 f0                      movq    %rsi, %rax
    // 5e: 48 85 c0                      testq   %rax, %rax
    // 61: 74 13                         je      0x76 <_JIT_ENTRY+0x76>
    // 63: 49 89 45 e8                   movq    %rax, -0x18(%r13)
    // 67: 49 83 c5 f0                   addq    $-0x10, %r13
    // 6b: 48 83 c4 28                   addq    $0x28, %rsp
    // 6f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 76: 48 83 c4 28                   addq    $0x28, %rsp
    // 7a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[129] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x83, 0x7d, 0xf0,
        0x00, 0x75, 0x0d, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0b,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x15, 0xff, 0xc9, 0x89, 0x0e, 0x75, 0x0f, 0x48,
        0x89, 0xf1, 0x48, 0x89, 0xc6, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf0, 0x48, 0x85,
        0xc0, 0x74, 0x13, 0x49, 0x89, 0x45, 0xe8, 0x49,
        0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyTuple_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PySequence_Tuple+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x24);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CALL_TYPE_1.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 83 7d f0 00                cmpq    $0x0, -0x10(%r13)
    // 9: 75 0d                         jne     0x18 <_JIT_ENTRY+0x18>
    // b: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // f: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyType_Type
    // 16: 74 0b                         je      0x23 <_JIT_ENTRY+0x23>
    // 18: 48 83 c4 28                   addq    $0x28, %rsp
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 23: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 27: 48 8b 79 08                   movq    0x8(%rcx), %rdi
    // 2b: 8b 07                         movl    (%rdi), %eax
    // 2d: 85 c0                         testl   %eax, %eax
    // 2f: 78 04                         js      0x35 <_JIT_ENTRY+0x35>
    // 31: ff c0                         incl    %eax
    // 33: 89 07                         movl    %eax, (%rdi)
    // 35: 49 8d 75 f0                   leaq    -0x10(%r13), %rsi
    // 39: 8b 01                         movl    (%rcx), %eax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 06                         js      0x45 <_JIT_ENTRY+0x45>
    // 3f: ff c8                         decl    %eax
    // 41: 89 01                         movl    %eax, (%rcx)
    // 43: 74 12                         je      0x57 <_JIT_ENTRY+0x57>
    // 45: 49 89 7d e8                   movq    %rdi, -0x18(%r13)
    // 49: 49 89 f5                      movq    %rsi, %r13
    // 4c: 48 83 c4 28                   addq    $0x28, %rsp
    // 50: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 57: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5d: 49 89 7d e8                   movq    %rdi, -0x18(%r13)
    // 61: 49 89 f5                      movq    %rsi, %r13
    // 64: 48 83 c4 28                   addq    $0x28, %rsp
    // 68: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[104] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x83, 0x7d, 0xf0,
        0x00, 0x75, 0x0d, 0x49, 0x8b, 0x45, 0xe8, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x0b,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d, 0xf8, 0x48,
        0x8b, 0x79, 0x08, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x07, 0x49, 0x8d, 0x75,
        0xf0, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x12, 0x49, 0x89, 0x7d,
        0xe8, 0x49, 0x89, 0xf5, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x7d,
        0xe8, 0x49, 0x89, 0xf5, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyType_Type+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyType_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x14);
}

void
emit__CHECK_AND_ALLOCATE_OBJECT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_AND_ALLOCATE_OBJECT.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 89 c1                         movl    %eax, %ecx
    // d: f7 d1                         notl    %ecx
    // f: 48 63 f9                      movslq  %ecx, %rdi
    // 12: 49 83 7c fd 00 00             cmpq    $0x0, (%r13,%rdi,8)
    // 18: 0f 85 ab 00 00 00             jne     0xc9 <_JIT_ENTRY+0xc9>
    // 1e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 23: 29 c1                         subl    %eax, %ecx
    // 25: 48 63 f1                      movslq  %ecx, %rsi
    // 28: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // 2d: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // 31: 83 b8 a8 00 00 00 00          cmpl    $0x0, 0xa8(%rax)
    // 38: 0f 89 8b 00 00 00             jns     0xc9 <_JIT_ENTRY+0xc9>
    // 3e: 8b 81 80 01 00 00             movl    0x180(%rcx), %eax
    // 44: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 4a: 75 7d                         jne     0xc9 <_JIT_ENTRY+0xc9>
    // 4c: 49 8b 86 e8 00 00 00          movq    0xe8(%r14), %rax
    // 53: 48 85 c0                      testq   %rax, %rax
    // 56: 74 71                         je      0xc9 <_JIT_ENTRY+0xc9>
    // 58: 48 8b 99 a0 03 00 00          movq    0x3a0(%rcx), %rbx
    // 5f: 48 8b 53 30                   movq    0x30(%rbx), %rdx
    // 63: 48 63 52 4c                   movslq  0x4c(%rdx), %rdx
    // 67: 4c 8b 05 00 00 00 00          movq    (%rip), %r8             # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__Py_InitCleanup
    // 6e: 4d 63 40 4c                   movslq  0x4c(%r8), %r8
    // 72: 49 01 d0                      addq    %rdx, %r8
    // 75: 49 8b 96 f0 00 00 00          movq    0xf0(%r14), %rdx
    // 7c: 48 29 c2                      subq    %rax, %rdx
    // 7f: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 83: 4c 39 c2                      cmpq    %r8, %rdx
    // 86: 7e 41                         jle     0xc9 <_JIT_ENTRY+0xc9>
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  IMAGE_REL_AMD64_REL32        __imp__PyType_NewManagedObject
    // 8e: 48 85 c0                      testq   %rax, %rax
    // 91: 74 41                         je      0xd4 <_JIT_ENTRY+0xd4>
    // 93: 49 89 44 fd 00                movq    %rax, (%r13,%rdi,8)
    // 98: 49 8b 4c f5 00                movq    (%r13,%rsi,8), %rcx
    // 9d: 8b 03                         movl    (%rbx), %eax
    // 9f: 85 c0                         testl   %eax, %eax
    // a1: 78 04                         js      0xa7 <_JIT_ENTRY+0xa7>
    // a3: ff c0                         incl    %eax
    // a5: 89 03                         movl    %eax, (%rbx)
    // a7: 49 89 5c f5 00                movq    %rbx, (%r13,%rsi,8)
    // ac: 8b 01                         movl    (%rcx), %eax
    // ae: 85 c0                         testl   %eax, %eax
    // b0: 78 0c                         js      0xbe <_JIT_ENTRY+0xbe>
    // b2: ff c8                         decl    %eax
    // b4: 89 01                         movl    %eax, (%rcx)
    // b6: 75 06                         jne     0xbe <_JIT_ENTRY+0xbe>
    // b8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbe <_JIT_ENTRY+0xbe>
    // 00000000000000ba:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // be: 48 83 c4 28                   addq    $0x28, %rsp
    // c2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c9: 48 83 c4 28                   addq    $0x28, %rsp
    // cd: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd4 <_JIT_ENTRY+0xd4>
    // 00000000000000d0:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // d4: 48 83 c4 28                   addq    $0x28, %rsp
    // d8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[223] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc1, 0xf7, 0xd1, 0x48,
        0x63, 0xf9, 0x49, 0x83, 0x7c, 0xfd, 0x00, 0x00,
        0x0f, 0x85, 0xab, 0x00, 0x00, 0x00, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xf1,
        0x49, 0x8b, 0x4c, 0xf5, 0x00, 0x48, 0x8b, 0x41,
        0x08, 0x83, 0xb8, 0xa8, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x89, 0x8b, 0x00, 0x00, 0x00, 0x8b, 0x81,
        0x80, 0x01, 0x00, 0x00, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x7d, 0x49, 0x8b, 0x86, 0xe8,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x71,
        0x48, 0x8b, 0x99, 0xa0, 0x03, 0x00, 0x00, 0x48,
        0x8b, 0x53, 0x30, 0x48, 0x63, 0x52, 0x4c, 0x4c,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x63,
        0x40, 0x4c, 0x49, 0x01, 0xd0, 0x49, 0x8b, 0x96,
        0xf0, 0x00, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48,
        0xc1, 0xfa, 0x03, 0x4c, 0x39, 0xc2, 0x7e, 0x41,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x41, 0x49, 0x89, 0x44, 0xfd, 0x00,
        0x49, 0x8b, 0x4c, 0xf5, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x03, 0x49,
        0x89, 0x5c, 0xf5, 0x00, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01, 0x75, 0x06,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: OPERAND0
    // 10: &_Py_InitCleanup+0x0
    // 18: &_PyType_NewManagedObject+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x18, (uintptr_t)&_PyType_NewManagedObject);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xd0, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)data + 0x34);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_CLASS.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 83 b9 a8 00 00 00 00          cmpl    $0x0, 0xa8(%rcx)
    // f: 79 15                         jns     0x26 <_JIT_ENTRY+0x26>
    // 11: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // 17: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1d: 75 07                         jne     0x26 <_JIT_ENTRY+0x26>
    // 1f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[45] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x83, 0xb9, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x79,
        0x15, 0x8b, 0x80, 0x80, 0x01, 0x00, 0x00, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x75, 0x07, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_METHOD_LAZY_DICT.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // b: 48 83 7c 08 e8 00             cmpq    $0x0, -0x18(%rax,%rcx)
    // 11: 74 07                         je      0x1a <_JIT_ENTRY+0x1a>
    // 13: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[26] = {
        0x49, 0x8b, 0x45, 0xf8, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x08, 0xe8,
        0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
}

void
emit__CHECK_ATTR_MODULE_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_MODULE_PUSH_KEYS.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 8b 89 90 00 00 00          movq    0x90(%rcx), %rcx
    // f: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyModule_Type
    // 16: 48 3b 8a 90 00 00 00          cmpq    0x90(%rdx), %rcx
    // 1d: 75 22                         jne     0x41 <_JIT_ENTRY+0x41>
    // 1f: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 23: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 27: 8b 48 0c                      movl    0xc(%rax), %ecx
    // 2a: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 30: 75 0f                         jne     0x41 <_JIT_ENTRY+0x41>
    // 32: 49 89 45 00                   movq    %rax, (%r13)
    // 36: 49 83 c5 08                   addq    $0x8, %r13
    // 3a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[72] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x8b, 0x89, 0x90, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x3b,
        0x8a, 0x90, 0x00, 0x00, 0x00, 0x75, 0x22, 0x48,
        0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x8b,
        0x48, 0x0c, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x0f, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyModule_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyModule_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x14);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_ATTR_WITH_HINT.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 83 78 e8 00                cmpq    $0x0, -0x18(%rax)
    // 9: 74 07                         je      0x12 <_JIT_ENTRY+0x12>
    // b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 12: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[25] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0x78, 0xe8,
        0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 89 c1                         movl    %eax, %ecx
    // 9: f7 d1                         notl    %ecx
    // b: 48 63 c9                      movslq  %ecx, %rcx
    // e: 49 83 7c cd 00 00             cmpq    $0x0, (%r13,%rcx,8)
    // 14: 75 1c                         jne     0x32 <_JIT_ENTRY+0x32>
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 c1                      movslq  %ecx, %rax
    // 20: 49 8b 44 c5 00                movq    (%r13,%rax,8), %rax
    // 25: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 29: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 30: 74 07                         je      0x39 <_JIT_ENTRY+0x39>
    // 32: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 39: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[57] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x49, 0x83,
        0x7c, 0xcd, 0x00, 0x00, 0x75, 0x1c, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1,
        0x49, 0x8b, 0x44, 0xc5, 0x00, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EG_MATCH.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f1                      movq    %r14, %rcx
    // 14: 48 89 f2                      movq    %rsi, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__PyEval_CheckExceptStarTypeValid
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 0f 88 c2 00 00 00             js      0xf5 <_JIT_ENTRY+0xf5>
    // 33: 48 c7 44 24 28 00 00 00 00    movq    $0x0, 0x28(%rsp)
    // 3c: 48 c7 44 24 30 00 00 00 00    movq    $0x0, 0x30(%rsp)
    // 45: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4a: 4c 8d 44 24 28                leaq    0x28(%rsp), %r8
    // 4f: 4c 8d 4c 24 30                leaq    0x30(%rsp), %r9
    // 54: 48 89 f9                      movq    %rdi, %rcx
    // 57: 48 89 f2                      movq    %rsi, %rdx
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__PyEval_ExceptionGroupMatch
    // 60: 89 c3                         movl    %eax, %ebx
    // 62: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 67: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 70: 8b 07                         movl    (%rdi), %eax
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 78 0f                         js      0x85 <_JIT_ENTRY+0x85>
    // 76: ff c8                         decl    %eax
    // 78: 89 07                         movl    %eax, (%rdi)
    // 7a: 75 09                         jne     0x85 <_JIT_ENTRY+0x85>
    // 7c: 48 89 f9                      movq    %rdi, %rcx
    // 7f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x85 <_JIT_ENTRY+0x85>
    // 0000000000000081:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 85: 8b 06                         movl    (%rsi), %eax
    // 87: 85 c0                         testl   %eax, %eax
    // 89: 78 0a                         js      0x95 <_JIT_ENTRY+0x95>
    // 8b: ff c8                         decl    %eax
    // 8d: 89 06                         movl    %eax, (%rsi)
    // 8f: 0f 84 8c 00 00 00             je      0x121 <_JIT_ENTRY+0x121>
    // 95: 85 db                         testl   %ebx, %ebx
    // 97: 0f 88 95 00 00 00             js      0x132 <_JIT_ENTRY+0x132>
    // 9d: 48 8b 4c 24 28                movq    0x28(%rsp), %rcx
    // a2: 48 85 c9                      testq   %rcx, %rcx
    // a5: 0f 84 87 00 00 00             je      0x132 <_JIT_ENTRY+0x132>
    // ab: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // b2: 48 39 c1                      cmpq    %rax, %rcx
    // b5: 74 26                         je      0xdd <_JIT_ENTRY+0xdd>
    // b7: 49 83 c5 f0                   addq    $-0x10, %r13
    // bb: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // c0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  IMAGE_REL_AMD64_REL32        __imp_PyErr_SetHandledException
    // c6: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // cb: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // d4: 49 83 c5 10                   addq    $0x10, %r13
    // d8: 48 8b 44 24 28                movq    0x28(%rsp), %rax
    // dd: 48 8b 4c 24 30                movq    0x30(%rsp), %rcx
    // e2: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // e6: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // ea: 48 83 c4 38                   addq    $0x38, %rsp
    // ee: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf5 <_JIT_ENTRY+0xf5>
    // 00000000000000f1:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // f5: 8b 07                         movl    (%rdi), %eax
    // f7: 85 c0                         testl   %eax, %eax
    // f9: 78 0f                         js      0x10a <_JIT_ENTRY+0x10a>
    // fb: ff c8                         decl    %eax
    // fd: 89 07                         movl    %eax, (%rdi)
    // ff: 75 09                         jne     0x10a <_JIT_ENTRY+0x10a>
    // 101: 48 89 f9                      movq    %rdi, %rcx
    // 104: ff 15 00 00 00 00             callq   *(%rip)                 # 0x10a <_JIT_ENTRY+0x10a>
    // 0000000000000106:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 10a: 8b 06                         movl    (%rsi), %eax
    // 10c: 85 c0                         testl   %eax, %eax
    // 10e: 78 06                         js      0x116 <_JIT_ENTRY+0x116>
    // 110: ff c8                         decl    %eax
    // 112: 89 06                         movl    %eax, (%rsi)
    // 114: 74 27                         je      0x13d <_JIT_ENTRY+0x13d>
    // 116: 48 83 c4 38                   addq    $0x38, %rsp
    // 11a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x121 <_JIT_ENTRY+0x121>
    // 000000000000011d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 121: 48 89 f1                      movq    %rsi, %rcx
    // 124: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12a <_JIT_ENTRY+0x12a>
    // 0000000000000126:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 12a: 85 db                         testl   %ebx, %ebx
    // 12c: 0f 89 6b ff ff ff             jns     0x9d <_JIT_ENTRY+0x9d>
    // 132: 48 83 c4 38                   addq    $0x38, %rsp
    // 136: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13d <_JIT_ENTRY+0x13d>
    // 0000000000000139:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 13d: 48 89 f1                      movq    %rsi, %rcx
    // 140: ff 15 00 00 00 00             callq   *(%rip)                 # 0x146 <_JIT_ENTRY+0x146>
    // 0000000000000142:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 146: 48 83 c4 38                   addq    $0x38, %rsp
    // 14a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x151 <_JIT_ENTRY+0x151>
    // 000000000000014d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[337] = {
        0x48, 0x83, 0xec, 0x38, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0x48, 0x89, 0xf2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xc2,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24,
        0x30, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x4c, 0x8d, 0x44, 0x24, 0x28, 0x4c,
        0x8d, 0x4c, 0x24, 0x30, 0x48, 0x89, 0xf9, 0x48,
        0x89, 0xf2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8,
        0x89, 0x07, 0x75, 0x09, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85,
        0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89, 0x06, 0x0f,
        0x84, 0x8c, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x0f,
        0x88, 0x95, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c,
        0x24, 0x28, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x87,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x39, 0xc1, 0x74, 0x26, 0x49,
        0x83, 0xc5, 0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0x10,
        0x48, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x4c,
        0x24, 0x30, 0x49, 0x89, 0x4d, 0xf0, 0x49, 0x89,
        0x45, 0xf8, 0x48, 0x83, 0xc4, 0x38, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x09, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x27, 0x48, 0x83,
        0xc4, 0x38, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xdb, 0x0f, 0x89, 0x6b, 0xff,
        0xff, 0xff, 0x48, 0x83, 0xc4, 0x38, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x38, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_PyEval_CheckExceptStarTypeValid+0x0
    // 8: &_PyEval_ExceptionGroupMatch+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_NoneStruct+0x0
    // 20: &PyErr_SetHandledException+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x20, (uintptr_t)&PyErr_SetHandledException);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xf1, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x106, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x11d, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x126, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x139, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x142, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x14d, (uintptr_t)data + 0x2c);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_EXC_MATCH.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f1                      movq    %r14, %rcx
    // 14: 48 89 f2                      movq    %rsi, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__PyEval_CheckExceptTypeValid
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 78 45                         js      0x74 <_JIT_ENTRY+0x74>
    // 2f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 34: 48 89 f9                      movq    %rdi, %rcx
    // 37: 48 89 f2                      movq    %rsi, %rdx
    // 3a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp_PyErr_GivenExceptionMatches
    // 40: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 45: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4e: 8b 0e                         movl    (%rsi), %ecx
    // 50: 85 c9                         testl   %ecx, %ecx
    // 52: 78 06                         js      0x5a <_JIT_ENTRY+0x5a>
    // 54: ff c9                         decl    %ecx
    // 56: 89 0e                         movl    %ecx, (%rsi)
    // 58: 74 31                         je      0x8b <_JIT_ENTRY+0x8b>
    // 5a: 85 c0                         testl   %eax, %eax
    // 5c: 75 3e                         jne     0x9c <_JIT_ENTRY+0x9c>
    // 5e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 65: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 69: 48 83 c4 28                   addq    $0x28, %rsp
    // 6d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x74 <_JIT_ENTRY+0x74>
    // 0000000000000070:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 74: 8b 06                         movl    (%rsi), %eax
    // 76: 85 c0                         testl   %eax, %eax
    // 78: 78 06                         js      0x80 <_JIT_ENTRY+0x80>
    // 7a: ff c8                         decl    %eax
    // 7c: 89 06                         movl    %eax, (%rsi)
    // 7e: 74 32                         je      0xb2 <_JIT_ENTRY+0xb2>
    // 80: 48 83 c4 28                   addq    $0x28, %rsp
    // 84: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8b <_JIT_ENTRY+0x8b>
    // 0000000000000087:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 8b: 48 89 f1                      movq    %rsi, %rcx
    // 8e: 89 c6                         movl    %eax, %esi
    // 90: ff 15 00 00 00 00             callq   *(%rip)                 # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 96: 89 f0                         movl    %esi, %eax
    // 98: 85 c0                         testl   %eax, %eax
    // 9a: 74 c2                         je      0x5e <_JIT_ENTRY+0x5e>
    // 9c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // a3: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // a7: 48 83 c4 28                   addq    $0x28, %rsp
    // ab: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b2: 48 89 f1                      movq    %rsi, %rcx
    // b5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbb <_JIT_ENTRY+0xbb>
    // 00000000000000b7:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // bb: 48 83 c4 28                   addq    $0x28, %rsp
    // bf: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[198] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0x48, 0x89, 0xf2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x45, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf9, 0x48,
        0x89, 0xf2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e,
        0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e,
        0x74, 0x31, 0x85, 0xc0, 0x75, 0x3e, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x32,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x85, 0xc0, 0x74, 0xc2, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_CheckExceptTypeValid+0x0
    // 8: &PyErr_GivenExceptionMatches+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    // 28: &_Py_Dealloc+0x0
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    patch_64(data + 0x8, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x87, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb7, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 10                movq    0x10(%r12), %rax
    // 5: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // b: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 11: 75 07                         jne     0x1a <_JIT_ENTRY+0x1a>
    // 13: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x44, 0x24, 0x10, 0x8b, 0x80, 0x90,
        0x00, 0x00, 0x00, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0xc);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_EXACT_ARGS.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 89 c1                         movl    %eax, %ecx
    // 9: f7 d1                         notl    %ecx
    // b: 48 63 c9                      movslq  %ecx, %rcx
    // e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 13: 29 c2                         subl    %eax, %edx
    // 15: 48 63 d2                      movslq  %edx, %rdx
    // 18: 49 8b 54 d5 00                movq    (%r13,%rdx,8), %rdx
    // 1d: 48 8b 52 30                   movq    0x30(%rdx), %rdx
    // 21: 49 83 7c cd 00 01             cmpq    $0x1, (%r13,%rcx,8)
    // 27: 83 d8 ff                      sbbl    $-0x1, %eax
    // 2a: 39 42 34                      cmpl    %eax, 0x34(%rdx)
    // 2d: 75 07                         jne     0x36 <_JIT_ENTRY+0x36>
    // 2f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[61] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0xba, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc2, 0x48, 0x63, 0xd2,
        0x49, 0x8b, 0x54, 0xd5, 0x00, 0x48, 0x8b, 0x52,
        0x30, 0x49, 0x83, 0x7c, 0xcd, 0x00, 0x01, 0x83,
        0xd8, 0xff, 0x39, 0x42, 0x34, 0x75, 0x07, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0xc);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 16: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 1a: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 21: 75 15                         jne     0x38 <_JIT_ENTRY+0x38>
    // 23: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // 29: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 2f: 75 07                         jne     0x38 <_JIT_ENTRY+0x38>
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[63] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x49, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x48, 0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x15, 0x8b, 0x80, 0x90, 0x00, 0x00,
        0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_FUNCTION_VERSION_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_INLINE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND1
    // 7: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // d: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 13: 75 07                         jne     0x1c <_JIT_ENTRY+0x1c>
    // 15: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[35] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x80, 0x90, 0x00, 0x00, 0x00, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x07, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPERAND1
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand1);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x14);
}

void
emit__CHECK_FUNCTION_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_FUNCTION_VERSION_KW.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 48 c7 c1 fd ff ff ff          movq    $-0x3, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 16: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 1a: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 21: 75 15                         jne     0x38 <_JIT_ENTRY+0x38>
    // 23: 8b 80 90 00 00 00             movl    0x90(%rax), %eax
    // 29: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 2f: 75 07                         jne     0x38 <_JIT_ENTRY+0x38>
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[63] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfd, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x49, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x48, 0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x15, 0x8b, 0x80, 0x90, 0x00, 0x00,
        0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand0);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 16: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1a: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 21: 74 10                         je      0x33 <_JIT_ENTRY+0x33>
    // 23: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 2a: 74 07                         je      0x33 <_JIT_ENTRY+0x33>
    // 2c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 33: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x49, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x40, 0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x10, 0x48, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_IS_NOT_PY_CALLABLE_KW.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 48 c7 c1 fd ff ff ff          movq    $-0x3, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 49 8b 44 cd 00                movq    (%r13,%rcx,8), %rax
    // 16: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1a: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 21: 74 10                         je      0x33 <_JIT_ENTRY+0x33>
    // 23: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 2a: 74 07                         je      0x33 <_JIT_ENTRY+0x33>
    // 2c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 33: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[58] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfd, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x49, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x40, 0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x10, 0x48, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // c: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 11: 74 07                         je      0x1a <_JIT_ENTRY+0x1a>
    // 13: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x8b, 0x49, 0x20, 0x80, 0x7c, 0x08, 0x03,
        0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // c: 29 c1                         subl    %eax, %ecx
    // e: 48 63 c9                      movslq  %ecx, %rcx
    // 11: 49 8b 4c cd 00                movq    (%r13,%rcx,8), %rcx
    // 16: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1a: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 21: 75 2b                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 23: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 27: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 2b: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 32: 75 1a                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 34: 8b 89 90 00 00 00             movl    0x90(%rcx), %ecx
    // 3a: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 40: 75 0c                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 42: f7 d0                         notl    %eax
    // 44: 48 98                         cltq
    // 46: 49 83 7c c5 00 00             cmpq    $0x0, (%r13,%rax,8)
    // 4c: 74 07                         je      0x55 <_JIT_ENTRY+0x55>
    // 4e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 55: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[85] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xc9, 0x49, 0x8b, 0x4c, 0xcd, 0x00, 0x48, 0x8b,
        0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x2b, 0x48, 0x8b, 0x49, 0x10, 0x48,
        0x8b, 0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x1a, 0x8b, 0x89, 0x90, 0x00,
        0x00, 0x00, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x0c, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x83,
        0x7c, 0xc5, 0x00, 0x00, 0x74, 0x07, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_METHOD_VERSION_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_METHOD_VERSION_KW.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       # imm = 0xFFFFFFFD
    // c: 29 c1                         subl    %eax, %ecx
    // e: 48 63 c9                      movslq  %ecx, %rcx
    // 11: 49 8b 4c cd 00                movq    (%r13,%rcx,8), %rcx
    // 16: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1a: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 21: 75 31                         jne     0x54 <_JIT_ENTRY+0x54>
    // 23: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 27: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 2b: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_Type
    // 32: 75 20                         jne     0x54 <_JIT_ENTRY+0x54>
    // 34: 8b 89 90 00 00 00             movl    0x90(%rcx), %ecx
    // 3a: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 40: 75 12                         jne     0x54 <_JIT_ENTRY+0x54>
    // 42: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 47: 29 c1                         subl    %eax, %ecx
    // 49: 48 63 c1                      movslq  %ecx, %rax
    // 4c: 49 83 7c c5 00 00             cmpq    $0x0, (%r13,%rax,8)
    // 52: 74 07                         je      0x5b <_JIT_ENTRY+0x5b>
    // 54: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 5b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[91] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0xfd, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xc9, 0x49, 0x8b, 0x4c, 0xcd, 0x00, 0x48, 0x8b,
        0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x31, 0x48, 0x8b, 0x49, 0x10, 0x48,
        0x8b, 0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x20, 0x8b, 0x89, 0x90, 0x00,
        0x00, 0x00, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x12, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc1, 0x48, 0x63, 0xc1, 0x49, 0x83, 0x7c, 0xc5,
        0x00, 0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND0
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand0);
    patch_64(data + 0x20, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PEP_523.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 46 10                   movq    0x10(%r14), %rax
    // 4: 48 83 b8 70 20 00 00 00       cmpq    $0x0, 0x2070(%rax)
    // c: 74 07                         je      0x15 <_JIT_ENTRY+0x15>
    // e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 15: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[21] = {
        0x49, 0x8b, 0x46, 0x10, 0x48, 0x83, 0xb8, 0x70,
        0x20, 0x00, 0x00, 0x00, 0x74, 0x07, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 8: 84 c0                         testb   %al, %al
    // a: 74 2b                         je      0x37 <_JIT_ENTRY+0x37>
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f1                      movq    %r14, %rcx
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__Py_HandlePending
    // 1a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 74 0b                         je      0x37 <_JIT_ENTRY+0x37>
    // 2c: 48 83 c4 28                   addq    $0x28, %rsp
    // 30: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 37: 48 83 c4 28                   addq    $0x28, %rsp
    // 3b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[59] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x46, 0x18,
        0x84, 0xc0, 0x74, 0x2b, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: &_Py_HandlePending+0x0
    // 8: ERROR_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_HandlePending);
    patch_64(data + 0x8, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
}

void
emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_PERIODIC_IF_NOT_YIELD_FROM.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: a8 02                         testb   $0x2, %al
    // d: 75 33                         jne     0x42 <_JIT_ENTRY+0x42>
    // f: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 13: 84 c0                         testb   %al, %al
    // 15: 74 2b                         je      0x42 <_JIT_ENTRY+0x42>
    // 17: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1c: 4c 89 f1                      movq    %r14, %rcx
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__Py_HandlePending
    // 25: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 33: 85 c0                         testl   %eax, %eax
    // 35: 74 0b                         je      0x42 <_JIT_ENTRY+0x42>
    // 37: 48 83 c4 28                   addq    $0x28, %rsp
    // 3b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 42: 48 83 c4 28                   addq    $0x28, %rsp
    // 46: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[70] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xa8, 0x02, 0x75, 0x33, 0x49,
        0x8b, 0x46, 0x18, 0x84, 0xc0, 0x74, 0x2b, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &_Py_HandlePending+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_HandlePending);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 86 e8 00 00 00          movq    0xe8(%r14), %rax
    // 7: 48 85 c0                      testq   %rax, %rax
    // a: 74 38                         je      0x44 <_JIT_ENTRY+0x44>
    // c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 13: 48 c7 c2 fe ff ff ff          movq    $-0x2, %rdx
    // 1a: 48 29 ca                      subq    %rcx, %rdx
    // 1d: 49 8b 4c d5 00                movq    (%r13,%rdx,8), %rcx
    // 22: 48 8b 49 30                   movq    0x30(%rcx), %rcx
    // 26: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
    // 2a: 49 8b 96 f0 00 00 00          movq    0xf0(%r14), %rdx
    // 31: 48 29 c2                      subq    %rax, %rdx
    // 34: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 38: 48 39 ca                      cmpq    %rcx, %rdx
    // 3b: 7e 07                         jle     0x44 <_JIT_ENTRY+0x44>
    // 3d: 41 83 7e 2c 01                cmpl    $0x1, 0x2c(%r14)
    // 42: 7f 07                         jg      0x4b <_JIT_ENTRY+0x4b>
    // 44: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 4b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[75] = {
        0x49, 0x8b, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x38, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0xc2, 0xfe, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xca, 0x49, 0x8b, 0x4c,
        0xd5, 0x00, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63,
        0x49, 0x4c, 0x49, 0x8b, 0x96, 0xf0, 0x00, 0x00,
        0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03,
        0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83, 0x7e,
        0x2c, 0x01, 0x7f, 0x07, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x4);
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_STACK_SPACE_OPERAND.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 86 e8 00 00 00          movq    0xe8(%r14), %rax
    // 7: 48 85 c0                      testq   %rax, %rax
    // a: 74 21                         je      0x2d <_JIT_ENTRY+0x2d>
    // c: 48 63 0d 00 00 00 00          movslq  (%rip), %rcx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 13: 49 8b 96 f0 00 00 00          movq    0xf0(%r14), %rdx
    // 1a: 48 29 c2                      subq    %rax, %rdx
    // 1d: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 21: 48 39 ca                      cmpq    %rcx, %rdx
    // 24: 7e 07                         jle     0x2d <_JIT_ENTRY+0x2d>
    // 26: 41 83 7e 2c 01                cmpl    $0x1, 0x2c(%r14)
    // 2b: 7f 07                         jg      0x34 <_JIT_ENTRY+0x34>
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 34: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[52] = {
        0x49, 0x8b, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x21, 0x48, 0x63, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x96, 0xf0, 0x00,
        0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa,
        0x03, 0x48, 0x39, 0xca, 0x7e, 0x07, 0x41, 0x83,
        0x7e, 0x2c, 0x01, 0x7f, 0x07, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 7: f6 40 22 01                   testb   $0x1, 0x22(%rax)
    // b: 75 07                         jne     0x14 <_JIT_ENTRY+0x14>
    // d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 14: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[20] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf6,
        0x40, 0x22, 0x01, 0x75, 0x07, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CHECK_VALIDITY_AND_SET_IP.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 7: f6 40 22 01                   testb   $0x1, 0x22(%rax)
    // b: 75 07                         jne     0x14 <_JIT_ENTRY+0x14>
    // d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1b: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // 20: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[32] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf6,
        0x40, 0x22, 0x01, 0x75, 0x07, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x44, 0x24, 0x38,
    };
    // 0: EXECUTOR
    // 8: JUMP_TARGET
    // 10: OPERAND0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0xc);
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 44 0f b7 3d 00 00 00 00       movzwl  (%rip), %r15d           # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 45 89 f8                      movl    %r15d, %r8d
    // 1c: 41 c1 e8 05                   shrl    $0x5, %r8d
    // 20: 48 89 d9                      movq    %rbx, %rcx
    // 23: 48 89 fa                      movq    %rdi, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp_PyObject_RichCompare
    // 2c: 48 89 c6                      movq    %rax, %rsi
    // 2f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 34: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3d: 8b 03                         movl    (%rbx), %eax
    // 3f: 85 c0                         testl   %eax, %eax
    // 41: 78 0f                         js      0x52 <_JIT_ENTRY+0x52>
    // 43: ff c8                         decl    %eax
    // 45: 89 03                         movl    %eax, (%rbx)
    // 47: 75 09                         jne     0x52 <_JIT_ENTRY+0x52>
    // 49: 48 89 d9                      movq    %rbx, %rcx
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 52: 8b 07                         movl    (%rdi), %eax
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 78 06                         js      0x5e <_JIT_ENTRY+0x5e>
    // 58: ff c8                         decl    %eax
    // 5a: 89 07                         movl    %eax, (%rdi)
    // 5c: 74 5b                         je      0xb9 <_JIT_ENTRY+0xb9>
    // 5e: 48 85 f6                      testq   %rsi, %rsi
    // 61: 0f 84 8d 00 00 00             je      0xf4 <_JIT_ENTRY+0xf4>
    // 67: 49 83 c5 f0                   addq    $-0x10, %r13
    // 6b: 41 f6 c7 10                   testb   $0x10, %r15b
    // 6f: 74 35                         je      0xa6 <_JIT_ENTRY+0xa6>
    // 71: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 76: 48 89 f1                      movq    %rsi, %rcx
    // 79: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp_PyObject_IsTrue
    // 7f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 84: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8d: 8b 0e                         movl    (%rsi), %ecx
    // 8f: 85 c9                         testl   %ecx, %ecx
    // 91: 78 06                         js      0x99 <_JIT_ENTRY+0x99>
    // 93: ff c9                         decl    %ecx
    // 95: 89 0e                         movl    %ecx, (%rsi)
    // 97: 74 4a                         je      0xe3 <_JIT_ENTRY+0xe3>
    // 99: 85 c0                         testl   %eax, %eax
    // 9b: 78 57                         js      0xf4 <_JIT_ENTRY+0xf4>
    // 9d: 75 2a                         jne     0xc9 <_JIT_ENTRY+0xc9>
    // 9f: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // a6: 49 89 75 00                   movq    %rsi, (%r13)
    // aa: 49 83 c5 08                   addq    $0x8, %r13
    // ae: 48 83 c4 28                   addq    $0x28, %rsp
    // b2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb9 <_JIT_ENTRY+0xb9>
    // 00000000000000b5:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b9: 48 89 f9                      movq    %rdi, %rcx
    // bc: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c2: 48 85 f6                      testq   %rsi, %rsi
    // c5: 75 a0                         jne     0x67 <_JIT_ENTRY+0x67>
    // c7: eb 2b                         jmp     0xf4 <_JIT_ENTRY+0xf4>
    // c9: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000cc:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // d0: 49 89 75 00                   movq    %rsi, (%r13)
    // d4: 49 83 c5 08                   addq    $0x8, %r13
    // d8: 48 83 c4 28                   addq    $0x28, %rsp
    // dc: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // e3: 48 89 f1                      movq    %rsi, %rcx
    // e6: 89 c6                         movl    %eax, %esi
    // e8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xee <_JIT_ENTRY+0xee>
    // 00000000000000ea:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ee: 89 f0                         movl    %esi, %eax
    // f0: 85 c0                         testl   %eax, %eax
    // f2: 79 a9                         jns     0x9d <_JIT_ENTRY+0x9d>
    // f4: 48 83 c4 28                   addq    $0x28, %rsp
    // f8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xff <_JIT_ENTRY+0xff>
    // 00000000000000fb:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[255] = {
        0x48, 0x83, 0xec, 0x28, 0x44, 0x0f, 0xb7, 0x3d,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x45, 0x89, 0xf8, 0x41, 0xc1, 0xe8, 0x05,
        0x48, 0x89, 0xd9, 0x48, 0x89, 0xfa, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc6, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x5b, 0x48, 0x85,
        0xf6, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf0, 0x41, 0xf6, 0xc7, 0x10, 0x74,
        0x35, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74,
        0x4a, 0x85, 0xc0, 0x78, 0x57, 0x75, 0x2a, 0x48,
        0x8b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x75, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xf6, 0x75, 0xa0, 0xeb,
        0x2b, 0x48, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x75, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x85, 0xc0, 0x79, 0xa9, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_RichCompare+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &PyObject_IsTrue+0x0
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: &_Py_TrueStruct+0x0
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_RichCompare);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbe, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xea, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)data + 0x34);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_FLOAT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: f2 0f 10 77 10                movsd   0x10(%rdi), %xmm6
    // 11: f2 0f 10 7e 10                movsd   0x10(%rsi), %xmm7
    // 16: 8b 07                         movl    (%rdi), %eax
    // 18: 85 c0                         testl   %eax, %eax
    // 1a: 78 33                         js      0x4f <_JIT_ENTRY+0x4f>
    // 1c: ff c8                         decl    %eax
    // 1e: 89 07                         movl    %eax, (%rdi)
    // 20: 75 2d                         jne     0x4f <_JIT_ENTRY+0x4f>
    // 22: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 29: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 11                         je      0x46 <_JIT_ENTRY+0x46>
    // 35: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 3c: 48 89 f9                      movq    %rdi, %rcx
    // 3f: ba 01 00 00 00                movl    $0x1, %edx
    // 44: ff d0                         callq   *%rax
    // 46: 48 89 f9                      movq    %rdi, %rcx
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__PyFloat_ExactDealloc
    // 4f: 8b 06                         movl    (%rsi), %eax
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 78 33                         js      0x88 <_JIT_ENTRY+0x88>
    // 55: ff c8                         decl    %eax
    // 57: 89 06                         movl    %eax, (%rsi)
    // 59: 75 2d                         jne     0x88 <_JIT_ENTRY+0x88>
    // 5b: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 62: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 69: 48 85 c0                      testq   %rax, %rax
    // 6c: 74 11                         je      0x7f <_JIT_ENTRY+0x7f>
    // 6e: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 75: 48 89 f1                      movq    %rsi, %rcx
    // 78: ba 01 00 00 00                movl    $0x1, %edx
    // 7d: ff d0                         callq   *%rax
    // 7f: 48 89 f1                      movq    %rsi, %rcx
    // 82: ff 15 00 00 00 00             callq   *(%rip)                 # 0x88 <_JIT_ENTRY+0x88>
    // 0000000000000084:  IMAGE_REL_AMD64_REL32        __imp__PyFloat_ExactDealloc
    // 88: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 8c: 31 c9                         xorl    %ecx, %ecx
    // 8e: 66 0f 2e f7                   ucomisd %xmm7, %xmm6
    // 92: 0f 93 c1                      setae   %cl
    // 95: 01 c9                         addl    %ecx, %ecx
    // 97: 31 d2                         xorl    %edx, %edx
    // 99: 66 0f 2e fe                   ucomisd %xmm6, %xmm7
    // 9d: 0f 93 c2                      setae   %dl
    // a0: 09 ca                         orl     %ecx, %edx
    // a2: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a4:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a8: 0f a3 d1                      btl     %edx, %ecx
    // ab: 72 19                         jb      0xc6 <_JIT_ENTRY+0xc6>
    // ad: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // b4: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // b8: 49 89 c5                      movq    %rax, %r13
    // bb: 48 83 c4 28                   addq    $0x28, %rsp
    // bf: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c6: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // cd: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // d1: 49 89 c5                      movq    %rax, %r13
    // d4: 48 83 c4 28                   addq    $0x28, %rsp
    // d8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[216] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0xf2, 0x0f, 0x10, 0x77,
        0x10, 0xf2, 0x0f, 0x10, 0x7e, 0x10, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x33, 0xff, 0xc8, 0x89, 0x07,
        0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x18, 0x25, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81,
        0x20, 0x25, 0x00, 0x00, 0x48, 0x89, 0xf9, 0xba,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89,
        0xf9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x33, 0xff, 0xc8, 0x89,
        0x06, 0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x81, 0x18, 0x25, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x4c, 0x8b,
        0x81, 0x20, 0x25, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0xba, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8d, 0x45, 0xf8, 0x31, 0xc9, 0x66, 0x0f,
        0x2e, 0xf7, 0x0f, 0x93, 0xc1, 0x01, 0xc9, 0x31,
        0xd2, 0x66, 0x0f, 0x2e, 0xfe, 0x0f, 0x93, 0xc2,
        0x09, 0xca, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xa3, 0xd1, 0x72, 0x19, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d, 0xf0,
        0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d,
        0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &_PyRuntime+0x0
    // 8: &_PyFloat_ExactDealloc+0x0
    // 10: OPARG
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_TrueStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa4, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x24);
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 30                   subq    $0x30, %rsp
    // 5: 49 8b 7d f0                   movq    -0x10(%r13), %rdi
    // 9: 4c 8b 7f 10                   movq    0x10(%rdi), %r15
    // d: 49 83 ff 10                   cmpq    $0x10, %r15
    // 11: 73 0e                         jae     0x21 <_JIT_ENTRY+0x21>
    // 13: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 17: 48 8b 5e 10                   movq    0x10(%rsi), %rbx
    // 1b: 48 83 fb 10                   cmpq    $0x10, %rbx
    // 1f: 72 0c                         jb      0x2d <_JIT_ENTRY+0x2d>
    // 21: 48 83 c4 30                   addq    $0x30, %rsp
    // 25: 5d                            popq    %rbp
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 2d: 8b 07                         movl    (%rdi), %eax
    // 2f: 8b 6f 18                      movl    0x18(%rdi), %ebp
    // 32: 44 8b 46 18                   movl    0x18(%rsi), %r8d
    // 36: 85 c0                         testl   %eax, %eax
    // 38: 78 3d                         js      0x77 <_JIT_ENTRY+0x77>
    // 3a: ff c8                         decl    %eax
    // 3c: 89 07                         movl    %eax, (%rdi)
    // 3e: 75 37                         jne     0x77 <_JIT_ENTRY+0x77>
    // 40: 4c 89 44 24 28                movq    %r8, 0x28(%rsp)
    // 45: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 4c: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 53: 48 85 c0                      testq   %rax, %rax
    // 56: 74 11                         je      0x69 <_JIT_ENTRY+0x69>
    // 58: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 5f: 48 89 f9                      movq    %rdi, %rcx
    // 62: ba 01 00 00 00                movl    $0x1, %edx
    // 67: ff d0                         callq   *%rax
    // 69: 48 89 f9                      movq    %rdi, %rcx
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 72: 4c 8b 44 24 28                movq    0x28(%rsp), %r8
    // 77: 8b 06                         movl    (%rsi), %eax
    // 79: 85 c0                         testl   %eax, %eax
    // 7b: 78 39                         js      0xb6 <_JIT_ENTRY+0xb6>
    // 7d: ff c8                         decl    %eax
    // 7f: 89 06                         movl    %eax, (%rsi)
    // 81: 75 33                         jne     0xb6 <_JIT_ENTRY+0xb6>
    // 83: 4c 89 c7                      movq    %r8, %rdi
    // 86: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 8d: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 94: 48 85 c0                      testq   %rax, %rax
    // 97: 74 11                         je      0xaa <_JIT_ENTRY+0xaa>
    // 99: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // a0: 48 89 f1                      movq    %rsi, %rcx
    // a3: ba 01 00 00 00                movl    $0x1, %edx
    // a8: ff d0                         callq   *%rax
    // aa: 48 89 f1                      movq    %rsi, %rcx
    // ad: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb3 <_JIT_ENTRY+0xb3>
    // 00000000000000af:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // b3: 49 89 f8                      movq    %rdi, %r8
    // b6: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // ba: 41 83 e7 03                   andl    $0x3, %r15d
    // be: b9 01 00 00 00                movl    $0x1, %ecx
    // c3: ba 01 00 00 00                movl    $0x1, %edx
    // c8: 4c 29 fa                      subq    %r15, %rdx
    // cb: 48 0f af d5                   imulq   %rbp, %rdx
    // cf: 83 e3 03                      andl    $0x3, %ebx
    // d2: 48 29 d9                      subq    %rbx, %rcx
    // d5: 49 0f af c8                   imulq   %r8, %rcx
    // d9: 31 f6                         xorl    %esi, %esi
    // db: 31 ff                         xorl    %edi, %edi
    // dd: 48 39 ca                      cmpq    %rcx, %rdx
    // e0: 40 0f 9d c6                   setge   %sil
    // e4: 40 0f 9e c7                   setle   %dil
    // e8: 01 f6                         addl    %esi, %esi
    // ea: 09 f7                         orl     %esi, %edi
    // ec: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0xf2 <_JIT_ENTRY+0xf2>
    // 00000000000000ee:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // f2: 0f a3 f9                      btl     %edi, %ecx
    // f5: 72 09                         jb      0x100 <_JIT_ENTRY+0x100>
    // f7: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xfe <_JIT_ENTRY+0xfe>
    // 00000000000000fa:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // fe: eb 07                         jmp     0x107 <_JIT_ENTRY+0x107>
    // 100: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x107 <_JIT_ENTRY+0x107>
    // 0000000000000103:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 107: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 10b: 49 89 c5                      movq    %rax, %r13
    // 10e: 48 83 c4 30                   addq    $0x30, %rsp
    // 112: 5d                            popq    %rbp
    // 113: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x11a <_JIT_ENTRY+0x11a>
    // 0000000000000116:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[275] = {
        0x55, 0x48, 0x83, 0xec, 0x30, 0x49, 0x8b, 0x7d,
        0xf0, 0x4c, 0x8b, 0x7f, 0x10, 0x49, 0x83, 0xff,
        0x10, 0x73, 0x0e, 0x49, 0x8b, 0x75, 0xf8, 0x48,
        0x8b, 0x5e, 0x10, 0x48, 0x83, 0xfb, 0x10, 0x72,
        0x0c, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x8b,
        0x6f, 0x18, 0x44, 0x8b, 0x46, 0x18, 0x85, 0xc0,
        0x78, 0x3d, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x37,
        0x4c, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x18,
        0x25, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00, 0x00, 0x48,
        0x89, 0xf9, 0xba, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8b, 0x44, 0x24, 0x28, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x39, 0xff, 0xc8, 0x89,
        0x06, 0x75, 0x33, 0x4c, 0x89, 0xc7, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0xba, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0xf8, 0x49, 0x8d,
        0x45, 0xf8, 0x41, 0x83, 0xe7, 0x03, 0xb9, 0x01,
        0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00,
        0x4c, 0x29, 0xfa, 0x48, 0x0f, 0xaf, 0xd5, 0x83,
        0xe3, 0x03, 0x48, 0x29, 0xd9, 0x49, 0x0f, 0xaf,
        0xc8, 0x31, 0xf6, 0x31, 0xff, 0x48, 0x39, 0xca,
        0x40, 0x0f, 0x9d, 0xc6, 0x40, 0x0f, 0x9e, 0xc7,
        0x01, 0xf6, 0x09, 0xf7, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xa3, 0xf9, 0x72, 0x09, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x07,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83,
        0xc4, 0x30, 0x5d,
    };
    // 0: JUMP_TARGET
    // 8: &_PyRuntime+0x0
    // 10: &_PyLong_ExactDealloc+0x0
    // 18: OPARG
    // 20: &_Py_FalseStruct+0x0
    // 28: &_Py_TrueStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xee, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xfa, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x103, (uintptr_t)data + 0x24);
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COMPARE_OP_STR.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 48 89 d9                      movq    %rbx, %rcx
    // f: 48 89 fa                      movq    %rdi, %rdx
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_Equal
    // 18: 89 c6                         movl    %eax, %esi
    // 1a: 8b 03                         movl    (%rbx), %eax
    // 1c: 85 c0                         testl   %eax, %eax
    // 1e: 78 33                         js      0x53 <_JIT_ENTRY+0x53>
    // 20: ff c8                         decl    %eax
    // 22: 89 03                         movl    %eax, (%rbx)
    // 24: 75 2d                         jne     0x53 <_JIT_ENTRY+0x53>
    // 26: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2d: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 34: 48 85 c0                      testq   %rax, %rax
    // 37: 74 11                         je      0x4a <_JIT_ENTRY+0x4a>
    // 39: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 40: 48 89 d9                      movq    %rbx, %rcx
    // 43: ba 01 00 00 00                movl    $0x1, %edx
    // 48: ff d0                         callq   *%rax
    // 4a: 48 89 d9                      movq    %rbx, %rcx
    // 4d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_ExactDealloc
    // 53: 8b 07                         movl    (%rdi), %eax
    // 55: 85 c0                         testl   %eax, %eax
    // 57: 78 33                         js      0x8c <_JIT_ENTRY+0x8c>
    // 59: ff c8                         decl    %eax
    // 5b: 89 07                         movl    %eax, (%rdi)
    // 5d: 75 2d                         jne     0x8c <_JIT_ENTRY+0x8c>
    // 5f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x66 <_JIT_ENTRY+0x66>
    // 0000000000000062:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 66: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 6d: 48 85 c0                      testq   %rax, %rax
    // 70: 74 11                         je      0x83 <_JIT_ENTRY+0x83>
    // 72: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 79: 48 89 f9                      movq    %rdi, %rcx
    // 7c: ba 01 00 00 00                movl    $0x1, %edx
    // 81: ff d0                         callq   *%rax
    // 83: 48 89 f9                      movq    %rdi, %rcx
    // 86: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8c <_JIT_ENTRY+0x8c>
    // 0000000000000088:  IMAGE_REL_AMD64_REL32        __imp__PyUnicode_ExactDealloc
    // 8c: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 90: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x97 <_JIT_ENTRY+0x97>
    // 0000000000000093:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 97: 83 c6 07                      addl    $0x7, %esi
    // 9a: 66 85 f1                      testw   %si, %cx
    // 9d: 75 19                         jne     0xb8 <_JIT_ENTRY+0xb8>
    // 9f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // a6: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // aa: 49 89 c5                      movq    %rax, %r13
    // ad: 48 83 c4 28                   addq    $0x28, %rsp
    // b1: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b4:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b8: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xbf <_JIT_ENTRY+0xbf>
    // 00000000000000bb:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // bf: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // c3: 49 89 c5                      movq    %rax, %r13
    // c6: 48 83 c4 28                   addq    $0x28, %rsp
    // ca: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd1 <_JIT_ENTRY+0xd1>
    // 00000000000000cd:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[202] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x48, 0x89, 0xd9, 0x48,
        0x89, 0xfa, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc6, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x33,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x2d, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00, 0x00,
        0x48, 0x89, 0xd9, 0xba, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x33, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x2d, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25, 0x00,
        0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x45, 0xf8,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x83,
        0xc6, 0x07, 0x66, 0x85, 0xf1, 0x75, 0x19, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: &_PyUnicode_Equal+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: OPARG
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyUnicode_Equal);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x2c);
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 89 f9                      movq    %rdi, %rcx
    // 14: 48 89 da                      movq    %rbx, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp_PySequence_Contains
    // 1d: 89 c6                         movl    %eax, %esi
    // 1f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 24: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2d: 8b 03                         movl    (%rbx), %eax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 0f                         js      0x42 <_JIT_ENTRY+0x42>
    // 33: ff c8                         decl    %eax
    // 35: 89 03                         movl    %eax, (%rbx)
    // 37: 75 09                         jne     0x42 <_JIT_ENTRY+0x42>
    // 39: 48 89 d9                      movq    %rbx, %rcx
    // 3c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 42: 8b 07                         movl    (%rdi), %eax
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 78 06                         js      0x4e <_JIT_ENTRY+0x4e>
    // 48: ff c8                         decl    %eax
    // 4a: 89 07                         movl    %eax, (%rdi)
    // 4c: 74 43                         je      0x91 <_JIT_ENTRY+0x91>
    // 4e: 85 f6                         testl   %esi, %esi
    // 50: 78 4c                         js      0x9e <_JIT_ENTRY+0x9e>
    // 52: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 59: 39 c6                         cmpl    %eax, %esi
    // 5b: 75 1a                         jne     0x77 <_JIT_ENTRY+0x77>
    // 5d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 64: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 68: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6c: 48 83 c4 28                   addq    $0x28, %rsp
    // 70: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x77 <_JIT_ENTRY+0x77>
    // 0000000000000073:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 77: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 7e: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 82: 49 83 c5 f8                   addq    $-0x8, %r13
    // 86: 48 83 c4 28                   addq    $0x28, %rsp
    // 8a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 91: 48 89 f9                      movq    %rdi, %rcx
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 9a: 85 f6                         testl   %esi, %esi
    // 9c: 79 b4                         jns     0x52 <_JIT_ENTRY+0x52>
    // 9e: 48 83 c4 28                   addq    $0x28, %rsp
    // a2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xa9 <_JIT_ENTRY+0xa9>
    // 00000000000000a5:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[169] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xf9, 0x48, 0x89, 0xda, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc6, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x07, 0x74, 0x43, 0x85, 0xf6,
        0x78, 0x4c, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x39, 0xc6, 0x75, 0x1a, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xf6, 0x79, 0xb4, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PySequence_Contains+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: OPARG
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_TrueStruct+0x0
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySequence_Contains);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa5, (uintptr_t)data + 0x2c);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_DICT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 24: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 29: 48 89 f1                      movq    %rsi, %rcx
    // 2c: 48 89 da                      movq    %rbx, %rdx
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Contains
    // 35: 89 c7                         movl    %eax, %edi
    // 37: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 45: 8b 03                         movl    (%rbx), %eax
    // 47: 85 c0                         testl   %eax, %eax
    // 49: 78 0f                         js      0x5a <_JIT_ENTRY+0x5a>
    // 4b: ff c8                         decl    %eax
    // 4d: 89 03                         movl    %eax, (%rbx)
    // 4f: 75 09                         jne     0x5a <_JIT_ENTRY+0x5a>
    // 51: 48 89 d9                      movq    %rbx, %rcx
    // 54: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5a: 8b 06                         movl    (%rsi), %eax
    // 5c: 85 c0                         testl   %eax, %eax
    // 5e: 78 06                         js      0x66 <_JIT_ENTRY+0x66>
    // 60: ff c8                         decl    %eax
    // 62: 89 06                         movl    %eax, (%rsi)
    // 64: 74 43                         je      0xa9 <_JIT_ENTRY+0xa9>
    // 66: 85 ff                         testl   %edi, %edi
    // 68: 78 4c                         js      0xb6 <_JIT_ENTRY+0xb6>
    // 6a: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 71: 39 c7                         cmpl    %eax, %edi
    // 73: 75 1a                         jne     0x8f <_JIT_ENTRY+0x8f>
    // 75: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 7c: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 80: 49 83 c5 f8                   addq    $-0x8, %r13
    // 84: 48 83 c4 28                   addq    $0x28, %rsp
    // 88: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8f <_JIT_ENTRY+0x8f>
    // 000000000000008b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 8f: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 96: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 9a: 49 83 c5 f8                   addq    $-0x8, %r13
    // 9e: 48 83 c4 28                   addq    $0x28, %rsp
    // a2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xa9 <_JIT_ENTRY+0xa9>
    // 00000000000000a5:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // a9: 48 89 f1                      movq    %rsi, %rcx
    // ac: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b2: 85 ff                         testl   %edi, %edi
    // b4: 79 b4                         jns     0x6a <_JIT_ENTRY+0x6a>
    // b6: 48 83 c4 28                   addq    $0x28, %rsp
    // ba: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[193] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x5d, 0xf0, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc7, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x43, 0x85, 0xff,
        0x78, 0x4c, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x39, 0xc7, 0x75, 0x1a, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xff, 0x79, 0xb4, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyDict_Contains+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: OPARG
    // 28: &_Py_FalseStruct+0x0
    // 30: CONTINUE
    // 38: &_Py_TrueStruct+0x0
    // 40: ERROR_TARGET
    const unsigned char data_body[72] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyDict_Contains);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x40, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xa5, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x3c);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONTAINS_OP_SET.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PySet_Type
    // 13: 0f 94 c1                      sete    %cl
    // 16: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp_PyFrozenSet_Type
    // 1d: 0f 94 c0                      sete    %al
    // 20: 08 c8                         orb     %cl, %al
    // 22: 74 6f                         je      0x93 <_JIT_ENTRY+0x93>
    // 24: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 28: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2d: 48 89 f1                      movq    %rsi, %rcx
    // 30: 48 89 da                      movq    %rbx, %rdx
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__PySet_Contains
    // 39: 89 c7                         movl    %eax, %edi
    // 3b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 40: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 49: 8b 03                         movl    (%rbx), %eax
    // 4b: 85 c0                         testl   %eax, %eax
    // 4d: 78 0f                         js      0x5e <_JIT_ENTRY+0x5e>
    // 4f: ff c8                         decl    %eax
    // 51: 89 03                         movl    %eax, (%rbx)
    // 53: 75 09                         jne     0x5e <_JIT_ENTRY+0x5e>
    // 55: 48 89 d9                      movq    %rbx, %rcx
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5e: 8b 06                         movl    (%rsi), %eax
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 78 06                         js      0x6a <_JIT_ENTRY+0x6a>
    // 64: ff c8                         decl    %eax
    // 66: 89 06                         movl    %eax, (%rsi)
    // 68: 74 4e                         je      0xb8 <_JIT_ENTRY+0xb8>
    // 6a: 85 ff                         testl   %edi, %edi
    // 6c: 78 57                         js      0xc5 <_JIT_ENTRY+0xc5>
    // 6e: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 75: 39 c7                         cmpl    %eax, %edi
    // 77: 75 25                         jne     0x9e <_JIT_ENTRY+0x9e>
    // 79: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 80: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // 84: 49 83 c5 f8                   addq    $-0x8, %r13
    // 88: 48 83 c4 28                   addq    $0x28, %rsp
    // 8c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 93: 48 83 c4 28                   addq    $0x28, %rsp
    // 97: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9e <_JIT_ENTRY+0x9e>
    // 000000000000009a:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 9e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // a5: 49 89 45 f0                   movq    %rax, -0x10(%r13)
    // a9: 49 83 c5 f8                   addq    $-0x8, %r13
    // ad: 48 83 c4 28                   addq    $0x28, %rsp
    // b1: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b4:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b8: 48 89 f1                      movq    %rsi, %rcx
    // bb: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c1: 85 ff                         testl   %edi, %edi
    // c3: 79 a9                         jns     0x6e <_JIT_ENTRY+0x6e>
    // c5: 48 83 c4 28                   addq    $0x28, %rsp
    // c9: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000cc:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[208] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x94, 0xc1, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x94, 0xc0,
        0x08, 0xc8, 0x74, 0x6f, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0x48, 0x89, 0xda, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xd9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x4e, 0x85, 0xff, 0x78, 0x57, 0x0f, 0xb7,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc7, 0x75,
        0x25, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0xf0, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf0, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xff, 0x79, 0xa9, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySet_Type+0x0
    // 8: &PyFrozenSet_Type+0x0
    // 10: &_PySet_Contains+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: OPARG
    // 28: &_Py_FalseStruct+0x0
    // 30: CONTINUE
    // 38: JUMP_TARGET
    // 40: &_Py_TrueStruct+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySet_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x10, (uintptr_t)&_PySet_Contains);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x40, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x9a, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x44);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CONVERT_VALUE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // f: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp__PyEval_ConversionFuncs
    // 16: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1b: 48 89 f1                      movq    %rsi, %rcx
    // 1e: ff 14 c2                      callq   *(%rdx,%rax,8)
    // 21: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 26: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2f: 8b 0e                         movl    (%rsi), %ecx
    // 31: 85 c9                         testl   %ecx, %ecx
    // 33: 78 06                         js      0x3b <_JIT_ENTRY+0x3b>
    // 35: ff c9                         decl    %ecx
    // 37: 89 0e                         movl    %ecx, (%rsi)
    // 39: 74 14                         je      0x4f <_JIT_ENTRY+0x4f>
    // 3b: 48 85 c0                      testq   %rax, %rax
    // 3e: 74 23                         je      0x63 <_JIT_ENTRY+0x63>
    // 40: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 44: 48 83 c4 28                   addq    $0x28, %rsp
    // 48: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4f: 48 89 f1                      movq    %rsi, %rcx
    // 52: 48 89 c6                      movq    %rax, %rsi
    // 55: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5b: 48 89 f0                      movq    %rsi, %rax
    // 5e: 48 85 c0                      testq   %rax, %rax
    // 61: 75 dd                         jne     0x40 <_JIT_ENTRY+0x40>
    // 63: 48 83 c4 28                   addq    $0x28, %rsp
    // 67: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[110] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff, 0x14,
        0xc2, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x0e, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89,
        0x0e, 0x74, 0x14, 0x48, 0x85, 0xc0, 0x74, 0x23,
        0x49, 0x89, 0x45, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf1, 0x48, 0x89, 0xc6, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf0, 0x48, 0x85,
        0xc0, 0x75, 0xdd, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ConversionFuncs+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x1c);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: c1 e0 03                      shll    $0x3, %eax
    // a: 4c 89 e9                      movq    %r13, %rcx
    // d: 48 29 c1                      subq    %rax, %rcx
    // 10: 48 8b 01                      movq    (%rcx), %rax
    // 13: 8b 08                         movl    (%rax), %ecx
    // 15: 85 c9                         testl   %ecx, %ecx
    // 17: 78 04                         js      0x1d <_JIT_ENTRY+0x1d>
    // 19: ff c1                         incl    %ecx
    // 1b: 89 08                         movl    %ecx, (%rax)
    // 1d: 49 89 45 00                   movq    %rax, (%r13)
    // 21: 49 83 c5 08                   addq    $0x8, %r13
    // 25: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[37] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x03, 0x4c, 0x89, 0xe9, 0x48, 0x29, 0xc1,
        0x48, 0x8b, 0x01, 0x8b, 0x08, 0x85, 0xc9, 0x78,
        0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _COPY_FREE_VARS.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 66 85 c0                      testw   %ax, %ax
    // a: 74 45                         je      0x51 <_JIT_ENTRY+0x51>
    // c: 49 8b 04 24                   movq    (%r12), %rax
    // 10: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
    // 15: 8b 40 48                      movl    0x48(%rax), %eax
    // 18: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1f: 0f b7 f2                      movzwl  %dx, %esi
    // 22: 29 f0                         subl    %esi, %eax
    // 24: 48 8b 49 48                   movq    0x48(%rcx), %rcx
    // 28: 48 98                         cltq
    // 2a: 0f b7 d2                      movzwl  %dx, %edx
    // 2d: 66 83 fa 01                   cmpw    $0x1, %dx
    // 31: 75 25                         jne     0x58 <_JIT_ENTRY+0x58>
    // 33: 31 f6                         xorl    %esi, %esi
    // 35: f6 c2 01                      testb   $0x1, %dl
    // 38: 74 17                         je      0x51 <_JIT_ENTRY+0x51>
    // 3a: 48 8b 4c f1 18                movq    0x18(%rcx,%rsi,8), %rcx
    // 3f: 48 01 f0                      addq    %rsi, %rax
    // 42: 8b 11                         movl    (%rcx), %edx
    // 44: 85 d2                         testl   %edx, %edx
    // 46: 78 04                         js      0x4c <_JIT_ENTRY+0x4c>
    // 48: ff c2                         incl    %edx
    // 4a: 89 11                         movl    %edx, (%rcx)
    // 4c: 49 89 4c c4 50                movq    %rcx, 0x50(%r12,%rax,8)
    // 51: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 58: 89 d7                         movl    %edx, %edi
    // 5a: 83 e7 fe                      andl    $-0x2, %edi
    // 5d: 4d 8d 04 c4                   leaq    (%r12,%rax,8), %r8
    // 61: 49 83 c0 58                   addq    $0x58, %r8
    // 65: 31 f6                         xorl    %esi, %esi
    // 67: eb 14                         jmp     0x7d <_JIT_ENTRY+0x7d>
    // 69: 0f 1f 80 00 00 00 00          nopl    (%rax)
    // 70: 4d 89 0c f0                   movq    %r9, (%r8,%rsi,8)
    // 74: 48 83 c6 02                   addq    $0x2, %rsi
    // 78: 48 39 f7                      cmpq    %rsi, %rdi
    // 7b: 74 b8                         je      0x35 <_JIT_ENTRY+0x35>
    // 7d: 4c 8b 4c f1 18                movq    0x18(%rcx,%rsi,8), %r9
    // 82: 41 8b 19                      movl    (%r9), %ebx
    // 85: 85 db                         testl   %ebx, %ebx
    // 87: 78 05                         js      0x8e <_JIT_ENTRY+0x8e>
    // 89: ff c3                         incl    %ebx
    // 8b: 41 89 19                      movl    %ebx, (%r9)
    // 8e: 4d 89 4c f0 f8                movq    %r9, -0x8(%r8,%rsi,8)
    // 93: 4c 8b 4c f1 20                movq    0x20(%rcx,%rsi,8), %r9
    // 98: 41 8b 19                      movl    (%r9), %ebx
    // 9b: 85 db                         testl   %ebx, %ebx
    // 9d: 78 d1                         js      0x70 <_JIT_ENTRY+0x70>
    // 9f: ff c3                         incl    %ebx
    // a1: 41 89 19                      movl    %ebx, (%r9)
    // a4: eb ca                         jmp     0x70 <_JIT_ENTRY+0x70>
    const unsigned char code_body[166] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x74, 0x45, 0x49, 0x8b, 0x04, 0x24,
        0x49, 0x8b, 0x4c, 0x24, 0x10, 0x8b, 0x40, 0x48,
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xf2, 0x29, 0xf0, 0x48, 0x8b, 0x49, 0x48,
        0x48, 0x98, 0x0f, 0xb7, 0xd2, 0x66, 0x83, 0xfa,
        0x01, 0x75, 0x25, 0x31, 0xf6, 0xf6, 0xc2, 0x01,
        0x74, 0x17, 0x48, 0x8b, 0x4c, 0xf1, 0x18, 0x48,
        0x01, 0xf0, 0x8b, 0x11, 0x85, 0xd2, 0x78, 0x04,
        0xff, 0xc2, 0x89, 0x11, 0x49, 0x89, 0x4c, 0xc4,
        0x50, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd7, 0x83, 0xe7, 0xfe, 0x4d, 0x8d, 0x04,
        0xc4, 0x49, 0x83, 0xc0, 0x58, 0x31, 0xf6, 0xeb,
        0x14, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x0c, 0xf0, 0x48, 0x83, 0xc6, 0x02,
        0x48, 0x39, 0xf7, 0x74, 0xb8, 0x4c, 0x8b, 0x4c,
        0xf1, 0x18, 0x41, 0x8b, 0x19, 0x85, 0xdb, 0x78,
        0x05, 0xff, 0xc3, 0x41, 0x89, 0x19, 0x4d, 0x89,
        0x4c, 0xf0, 0xf8, 0x4c, 0x8b, 0x4c, 0xf1, 0x20,
        0x41, 0x8b, 0x19, 0x85, 0xdb, 0x78, 0xd1, 0xff,
        0xc3, 0x41, 0x89, 0x19, 0xeb, 0xca,
    };
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0x4);
}

void
emit__CREATE_INIT_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _CREATE_INIT_FRAME.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 4c 89 e8                      movq    %r13, %rax
    // 7: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // e: 8d 14 cd 00 00 00 00          leal    (,%rcx,8), %edx
    // 15: 4d 89 e9                      movq    %r13, %r9
    // 18: 49 29 d1                      subq    %rdx, %r9
    // 1b: 89 ca                         movl    %ecx, %edx
    // 1d: f7 d2                         notl    %edx
    // 1f: 48 63 fa                      movslq  %edx, %rdi
    // 22: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 27: 29 ca                         subl    %ecx, %edx
    // 29: 4c 63 ea                      movslq  %edx, %r13
    // 2c: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 31: 49 8b b6 e8 00 00 00          movq    0xe8(%r14), %rsi
    // 38: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__Py_InitCleanup
    // 3f: 4c 63 42 4c                   movslq  0x4c(%rdx), %r8
    // 43: 4e 8d 04 c6                   leaq    (%rsi,%r8,8), %r8
    // 47: 4d 89 86 e8 00 00 00          movq    %r8, 0xe8(%r14)
    // 4e: 4c 89 66 08                   movq    %r12, 0x8(%rsi)
    // 52: 4c 8b 05 00 00 00 00          movq    (%rip), %r8             # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 59: 4c 89 46 10                   movq    %r8, 0x10(%rsi)
    // 5d: 48 89 16                      movq    %rdx, (%rsi)
    // 60: 0f 57 c0                      xorps   %xmm0, %xmm0
    // 63: 0f 11 46 28                   movups  %xmm0, 0x28(%rsi)
    // 67: 4c 63 42 48                   movslq  0x48(%rdx), %r8
    // 6b: 4e 8d 04 c6                   leaq    (%rsi,%r8,8), %r8
    // 6f: 49 83 c0 58                   addq    $0x58, %r8
    // 73: 4c 89 46 40                   movq    %r8, 0x40(%rsi)
    // 77: 48 81 c2 d0 00 00 00          addq    $0xd0, %rdx
    // 7e: 48 89 56 38                   movq    %rdx, 0x38(%rsi)
    // 82: c7 46 48 00 00 00 00          movl    $0x0, 0x48(%rsi)
    // 89: 49 8b 54 24 40                movq    0x40(%r12), %rdx
    // 8e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 97: 48 8b 3c f8                   movq    (%rax,%rdi,8), %rdi
    // 9b: 8b 1f                         movl    (%rdi), %ebx
    // 9d: 85 db                         testl   %ebx, %ebx
    // 9f: 78 04                         js      0xa5 <_JIT_ENTRY+0xa5>
    // a1: ff c3                         incl    %ebx
    // a3: 89 1f                         movl    %ebx, (%rdi)
    // a5: 48 89 7e 50                   movq    %rdi, 0x50(%rsi)
    // a9: 49 89 54 24 40                movq    %rdx, 0x40(%r12)
    // ae: ff c1                         incl    %ecx
    // b0: 49 83 c1 f8                   addq    $-0x8, %r9
    // b4: 4a 8b 14 e8                   movq    (%rax,%r13,8), %rdx
    // b8: 49 c1 e5 03                   shlq    $0x3, %r13
    // bc: 48 89 74 24 30                movq    %rsi, 0x30(%rsp)
    // c1: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
    // c6: 48 c7 44 24 28 00 00 00 00    movq    $0x0, 0x28(%rsp)
    // cf: 4c 89 f1                      movq    %r14, %rcx
    // d2: 45 31 c0                      xorl    %r8d, %r8d
    // d5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdb <_JIT_ENTRY+0xdb>
    // 00000000000000d7:  IMAGE_REL_AMD64_REL32        __imp__PyEvalFramePushAndInit
    // db: 4d 03 6c 24 40                addq    0x40(%r12), %r13
    // e0: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e9: 48 85 c0                      testq   %rax, %rax
    // ec: 74 1f                         je      0x10d <_JIT_ENTRY+0x10d>
    // ee: 66 41 c7 44 24 48 04 00       movw    $0x4, 0x48(%r12)
    // f6: 41 ff 4e 2c                   decl    0x2c(%r14)
    // fa: 49 89 45 00                   movq    %rax, (%r13)
    // fe: 49 83 c5 08                   addq    $0x8, %r13
    // 102: 48 83 c4 38                   addq    $0x38, %rsp
    // 106: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x10d <_JIT_ENTRY+0x10d>
    // 0000000000000109:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 10d: 4c 89 f1                      movq    %r14, %rcx
    // 110: 48 89 f2                      movq    %rsi, %rdx
    // 113: ff 15 00 00 00 00             callq   *(%rip)                 # 0x119 <_JIT_ENTRY+0x119>
    // 0000000000000115:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FrameClearAndPop
    // 119: 48 83 c4 38                   addq    $0x38, %rsp
    // 11d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x124 <_JIT_ENTRY+0x124>
    // 0000000000000120:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[292] = {
        0x48, 0x83, 0xec, 0x38, 0x4c, 0x89, 0xe8, 0x0f,
        0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x14,
        0xcd, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe9,
        0x49, 0x29, 0xd1, 0x89, 0xca, 0xf7, 0xd2, 0x48,
        0x63, 0xfa, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xca, 0x4c, 0x63, 0xea, 0x49, 0x89, 0x44, 0x24,
        0x40, 0x49, 0x8b, 0xb6, 0xe8, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x63, 0x42, 0x4c, 0x4e, 0x8d, 0x04, 0xc6, 0x4d,
        0x89, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x66, 0x08, 0x4c, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0x46, 0x10, 0x48, 0x89, 0x16,
        0x0f, 0x57, 0xc0, 0x0f, 0x11, 0x46, 0x28, 0x4c,
        0x63, 0x42, 0x48, 0x4e, 0x8d, 0x04, 0xc6, 0x49,
        0x83, 0xc0, 0x58, 0x4c, 0x89, 0x46, 0x40, 0x48,
        0x81, 0xc2, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x56, 0x38, 0xc7, 0x46, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x54, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x3c, 0xf8, 0x8b, 0x1f, 0x85, 0xdb, 0x78,
        0x04, 0xff, 0xc3, 0x89, 0x1f, 0x48, 0x89, 0x7e,
        0x50, 0x49, 0x89, 0x54, 0x24, 0x40, 0xff, 0xc1,
        0x49, 0x83, 0xc1, 0xf8, 0x4a, 0x8b, 0x14, 0xe8,
        0x49, 0xc1, 0xe5, 0x03, 0x48, 0x89, 0x74, 0x24,
        0x30, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0xc7,
        0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf1, 0x45, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x03, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x1f, 0x66, 0x41,
        0xc7, 0x44, 0x24, 0x48, 0x04, 0x00, 0x41, 0xff,
        0x4e, 0x2c, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1,
        0x48, 0x89, 0xf2, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x38, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_InitCleanup+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &_PyEvalFramePushAndInit+0x0
    // 20: CONTINUE
    // 28: &_PyEval_FrameClearAndPop+0x0
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_InitCleanup);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_PyEval_FrameClearAndPop);
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x109, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x115, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x120, (uintptr_t)data + 0x2c);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_ATTR.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 17: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 48 89 f1                      movq    %rsi, %rcx
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp_PyObject_DelAttr
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 8b 0e                         movl    (%rsi), %ecx
    // 3a: 85 c9                         testl   %ecx, %ecx
    // 3c: 78 06                         js      0x44 <_JIT_ENTRY+0x44>
    // 3e: ff c9                         decl    %ecx
    // 40: 89 0e                         movl    %ecx, (%rsi)
    // 42: 74 0f                         je      0x53 <_JIT_ENTRY+0x53>
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 74 1c                         je      0x64 <_JIT_ENTRY+0x64>
    // 48: 48 83 c4 28                   addq    $0x28, %rsp
    // 4c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 53: 48 89 f1                      movq    %rsi, %rcx
    // 56: 89 c6                         movl    %eax, %esi
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5e: 89 f0                         movl    %esi, %eax
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 75 e4                         jne     0x48 <_JIT_ENTRY+0x48>
    // 64: 49 83 c5 f8                   addq    $-0x8, %r13
    // 68: 48 83 c4 28                   addq    $0x28, %rsp
    // 6c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x73 <_JIT_ENTRY+0x73>
    // 000000000000006f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[108] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x54, 0xc8, 0x18, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9,
        0x89, 0x0e, 0x74, 0x0f, 0x85, 0xc0, 0x74, 0x1c,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x85, 0xc0, 0x75, 0xe4, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PyObject_DelAttr+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_DelAttr);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x14);
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_DEREF.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 10: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 14: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
    // 1c: 48 85 c9                      testq   %rcx, %rcx
    // 1f: 74 17                         je      0x38 <_JIT_ENTRY+0x38>
    // 21: 8b 01                         movl    (%rcx), %eax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 06                         js      0x2d <_JIT_ENTRY+0x2d>
    // 27: ff c8                         decl    %eax
    // 29: 89 01                         movl    %eax, (%rcx)
    // 2b: 74 3e                         je      0x6b <_JIT_ENTRY+0x6b>
    // 2d: 48 83 c4 28                   addq    $0x28, %rsp
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 38: 44 0f b7 05 00 00 00 00       movzwl  (%rip), %r8d            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 40: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 45: 49 8b 14 24                   movq    (%r12), %rdx
    // 49: 4c 89 f1                      movq    %r14, %rcx
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcUnbound
    // 52: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 57: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 60: 48 83 c4 28                   addq    $0x28, %rsp
    // 64: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 6b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 71: 48 83 c4 28                   addq    $0x28, %rsp
    // 75: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[117] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xc4, 0x50,
        0x48, 0x8b, 0x48, 0x10, 0x48, 0xc7, 0x40, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74,
        0x17, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x3e, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x44, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x14,
        0x24, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyEval_FormatExcUnbound+0x0
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x1c);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_FAST.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 0f b7 d0                      movzwl  %ax, %edx
    // e: 0f b7 c0                      movzwl  %ax, %eax
    // 11: 49 8b 4c c4 50                movq    0x50(%r12,%rax,8), %rcx
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 20                         je      0x3b <_JIT_ENTRY+0x3b>
    // 1b: 49 c7 44 d4 50 00 00 00 00    movq    $0x0, 0x50(%r12,%rdx,8)
    // 24: 8b 01                         movl    (%rcx), %eax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c8                         decl    %eax
    // 2c: 89 01                         movl    %eax, (%rcx)
    // 2e: 74 54                         je      0x84 <_JIT_ENTRY+0x84>
    // 30: 48 83 c4 28                   addq    $0x28, %rsp
    // 34: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 3b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 40: 49 8b 04 24                   movq    (%r12), %rax
    // 44: 48 8b 48 60                   movq    0x60(%rax), %rcx
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_GetItem
    // 4e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp_PyExc_UnboundLocalError
    // 55: 48 8b 11                      movq    (%rcx), %rdx
    // 58: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 5f: 4c 89 f1                      movq    %r14, %rcx
    // 62: 49 89 c1                      movq    %rax, %r9
    // 65: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcCheckArg
    // 6b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 70: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 79: 48 83 c4 28                   addq    $0x28, %rsp
    // 7d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 84: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8a <_JIT_ENTRY+0x8a>
    // 0000000000000086:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 8a: 48 83 c4 28                   addq    $0x28, %rsp
    // 8e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x95 <_JIT_ENTRY+0x95>
    // 0000000000000091:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[142] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x0f, 0xb7,
        0xc0, 0x49, 0x8b, 0x4c, 0xc4, 0x50, 0x48, 0x85,
        0xc9, 0x74, 0x20, 0x49, 0xc7, 0x44, 0xd4, 0x50,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x54,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x48, 0x60,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x11,
        0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf1, 0x49, 0x89, 0xc1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyTuple_GetItem+0x0
    // 68: &PyExc_UnboundLocalError+0x0
    // 70: &_PyEval_FormatExcCheckArg+0x0
    // 78: ERROR_TARGET
    // 80: &_Py_Dealloc+0x0
    const unsigned char data_body[136] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x68, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x70, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x78, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x80, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + 0x7c);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_GLOBAL.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 18: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
    // 1d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 22: 48 89 f2                      movq    %rsi, %rdx
    // 25: 45 31 c0                      xorl    %r8d, %r8d
    // 28: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Pop
    // 2e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 33: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3c: 85 c0                         testl   %eax, %eax
    // 3e: 78 0d                         js      0x4d <_JIT_ENTRY+0x4d>
    // 40: 74 16                         je      0x58 <_JIT_ENTRY+0x58>
    // 42: 48 83 c4 28                   addq    $0x28, %rsp
    // 46: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4d: 48 83 c4 28                   addq    $0x28, %rsp
    // 51: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 58: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 5d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  IMAGE_REL_AMD64_REL32        __imp_PyExc_NameError
    // 64: 48 8b 10                      movq    (%rax), %rdx
    // 67: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 6e: 4c 89 f1                      movq    %r14, %rcx
    // 71: 49 89 f1                      movq    %rsi, %r9
    // 74: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7a <_JIT_ENTRY+0x7a>
    // 0000000000000076:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcCheckArg
    // 7a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 88: 48 83 c4 28                   addq    $0x28, %rsp
    // 8c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[147] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x04, 0x24,
        0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x74, 0xd0, 0x18, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0xf2, 0x45, 0x31, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0d,
        0x74, 0x16, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x10, 0x4c,
        0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf1, 0x49, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: OPARG
    // 28: &PyDict_Pop+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    // 40: &PyExc_NameError+0x0
    // 48: &_PyEval_FormatExcCheckArg+0x0
    const unsigned char data_body[80] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Pop);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, (uintptr_t)&_PyEval_FormatExcCheckArg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x34);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_NAME.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 18: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
    // 1d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 22: 48 85 c9                      testq   %rcx, %rcx
    // 25: 74 56                         je      0x7d <_JIT_ENTRY+0x7d>
    // 27: 48 89 f2                      movq    %rsi, %rdx
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp_PyObject_DelItem
    // 30: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 35: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3e: 85 c0                         testl   %eax, %eax
    // 40: 74 71                         je      0xb3 <_JIT_ENTRY+0xb3>
    // 42: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 47: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp_PyExc_NameError
    // 4e: 48 8b 10                      movq    (%rax), %rdx
    // 51: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        ??_C@_0BN@DBLGJMNF@name?5?8?$CF?4200s?8?5is?5not?5defined?$AA@
    // 58: 4c 89 f1                      movq    %r14, %rcx
    // 5b: 49 89 f1                      movq    %rsi, %r9
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcCheckArg
    // 64: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 69: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 72: 48 83 c4 28                   addq    $0x28, %rsp
    // 76: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7d <_JIT_ENTRY+0x7d>
    // 0000000000000079:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 7d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  IMAGE_REL_AMD64_REL32        __imp_PyExc_SystemError
    // 84: 48 8b 10                      movq    (%rax), %rdx
    // 87: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  IMAGE_REL_AMD64_REL32        ??_C@_0BL@HJKLBJNK@no?5locals?5when?5deleting?5?$CFR?$AA@
    // 8e: 4c 89 f1                      movq    %r14, %rcx
    // 91: 49 89 f1                      movq    %rsi, %r9
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // 9a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a8: 48 83 c4 28                   addq    $0x28, %rsp
    // ac: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb3 <_JIT_ENTRY+0xb3>
    // 00000000000000af:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // b3: 48 83 c4 28                   addq    $0x28, %rsp
    // b7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbe <_JIT_ENTRY+0xbe>
    // 00000000000000ba:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[183] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x04, 0x24,
        0x49, 0x8b, 0x4c, 0x24, 0x28, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x74, 0xd0, 0x18, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x85, 0xc9, 0x74, 0x56, 0x48,
        0x89, 0xf2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x71, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x10, 0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf1, 0x49, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x10, 0x4c,
        0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf1, 0x49, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: OPARG
    // 40: &PyObject_DelItem+0x0
    // 48: &PyExc_NameError+0x0
    // 50: &_PyEval_FormatExcCheckArg+0x0
    // 58: ERROR_TARGET
    // 60: &PyExc_SystemError+0x0
    // 68: &_PyErr_Format+0x0
    const unsigned char data_body[112] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, instruction->oparg);
    patch_64(data + 0x40, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x48, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x50, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x58, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x60, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0x17);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0x54);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DELETE_SUBSCR.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 89 d9                      movq    %rbx, %rcx
    // 14: 48 89 f2                      movq    %rsi, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp_PyObject_DelItem
    // 1d: 89 c7                         movl    %eax, %edi
    // 1f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 24: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2d: 8b 03                         movl    (%rbx), %eax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 0f                         js      0x42 <_JIT_ENTRY+0x42>
    // 33: ff c8                         decl    %eax
    // 35: 89 03                         movl    %eax, (%rbx)
    // 37: 75 09                         jne     0x42 <_JIT_ENTRY+0x42>
    // 39: 48 89 d9                      movq    %rbx, %rcx
    // 3c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 42: 8b 06                         movl    (%rsi), %eax
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 78 06                         js      0x4e <_JIT_ENTRY+0x4e>
    // 48: ff c8                         decl    %eax
    // 4a: 89 06                         movl    %eax, (%rsi)
    // 4c: 74 0f                         je      0x5d <_JIT_ENTRY+0x5d>
    // 4e: 85 ff                         testl   %edi, %edi
    // 50: 74 18                         je      0x6a <_JIT_ENTRY+0x6a>
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 5d: 48 89 f1                      movq    %rsi, %rcx
    // 60: ff 15 00 00 00 00             callq   *(%rip)                 # 0x66 <_JIT_ENTRY+0x66>
    // 0000000000000062:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 66: 85 ff                         testl   %edi, %edi
    // 68: 75 e8                         jne     0x52 <_JIT_ENTRY+0x52>
    // 6a: 49 83 c5 f0                   addq    $-0x10, %r13
    // 6e: 48 83 c4 28                   addq    $0x28, %rsp
    // 72: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x79 <_JIT_ENTRY+0x79>
    // 0000000000000075:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[114] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xd9, 0x48, 0x89, 0xf2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc7, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x0f, 0x85, 0xff,
        0x74, 0x18, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xff,
        0x75, 0xe8, 0x49, 0x83, 0xc5, 0xf0, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: &PyObject_DelItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0x4);
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DEOPT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 7: 49 89 86 08 01 00 00          movq    %rax, 0x108(%r14)
    // e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 13: 49 8b 04 24                   movq    (%r12), %rax
    // 17: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_TARGET
    // 1d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // 21: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 27: c3                            retq
    const unsigned char code_body[40] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x86, 0x08, 0x01, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x49, 0x8b, 0x04, 0x24, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x04,
        0x48, 0x48, 0x05, 0xd0, 0x00, 0x00, 0x00, 0xc3,
    };
    // 0: EXECUTOR
    // 8: TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->target);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_MERGE.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // f: ba fc ff ff ff                movl    $0xfffffffc, %edx       # imm = 0xFFFFFFFC
    // 14: 29 c2                         subl    %eax, %edx
    // 16: f7 d0                         notl    %eax
    // 18: 48 98                         cltq
    // 1a: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 1f: 48 63 c2                      movslq  %edx, %rax
    // 22: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 48 89 f2                      movq    %rsi, %rdx
    // 2f: 41 b8 02 00 00 00             movl    $0x2, %r8d
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  IMAGE_REL_AMD64_REL32        __imp__PyDict_MergeEx
    // 3b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 40: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 49: 85 c0                         testl   %eax, %eax
    // 4b: 78 1b                         js      0x68 <_JIT_ENTRY+0x68>
    // 4d: 8b 06                         movl    (%rsi), %eax
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 78 06                         js      0x59 <_JIT_ENTRY+0x59>
    // 53: ff c8                         decl    %eax
    // 55: 89 06                         movl    %eax, (%rsi)
    // 57: 74 48                         je      0xa1 <_JIT_ENTRY+0xa1>
    // 59: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5d: 48 83 c4 28                   addq    $0x28, %rsp
    // 61: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 68: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 6d: 4c 89 f1                      movq    %r14, %rcx
    // 70: 48 89 fa                      movq    %rdi, %rdx
    // 73: 49 89 f0                      movq    %rsi, %r8
    // 76: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatKwargsError
    // 7c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 81: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8a: 8b 06                         movl    (%rsi), %eax
    // 8c: 85 c0                         testl   %eax, %eax
    // 8e: 78 06                         js      0x96 <_JIT_ENTRY+0x96>
    // 90: ff c8                         decl    %eax
    // 92: 89 06                         movl    %eax, (%rsi)
    // 94: 74 23                         je      0xb9 <_JIT_ENTRY+0xb9>
    // 96: 48 83 c4 28                   addq    $0x28, %rsp
    // 9a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xa1 <_JIT_ENTRY+0xa1>
    // 000000000000009d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // a1: 48 89 f1                      movq    %rsi, %rcx
    // a4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xaa <_JIT_ENTRY+0xaa>
    // 00000000000000a6:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // aa: 49 83 c5 f8                   addq    $-0x8, %r13
    // ae: 48 83 c4 28                   addq    $0x28, %rsp
    // b2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb9 <_JIT_ENTRY+0xb9>
    // 00000000000000b5:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b9: 48 89 f1                      movq    %rsi, %rcx
    // bc: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c2: 48 83 c4 28                   addq    $0x28, %rsp
    // c6: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[205] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0xba,
        0xfc, 0xff, 0xff, 0xff, 0x29, 0xc2, 0xf7, 0xd0,
        0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc5, 0x00, 0x48,
        0x63, 0xc2, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf2, 0x41,
        0xb8, 0x02, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x78, 0x1b, 0x8b, 0x06, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74,
        0x48, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf1,
        0x48, 0x89, 0xfa, 0x49, 0x89, 0xf0, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x23, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyDict_MergeEx+0x0
    // 10: CONTINUE
    // 18: &_PyEval_FormatKwargsError+0x0
    // 20: ERROR_TARGET
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_MergeEx);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbe, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x1c);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DICT_UPDATE.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: f7 d0                         notl    %eax
    // c: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 19: 49 8b 4c 05 00                movq    (%r13,%rax), %rcx
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f2                      movq    %rsi, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Update
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 1f                         js      0x5d <_JIT_ENTRY+0x5d>
    // 3e: 8b 06                         movl    (%rsi), %eax
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 0a                         js      0x4e <_JIT_ENTRY+0x4e>
    // 44: ff c8                         decl    %eax
    // 46: 89 06                         movl    %eax, (%rsi)
    // 48: 0f 84 85 00 00 00             je      0xd3 <_JIT_ENTRY+0xd3>
    // 4e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 62: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  IMAGE_REL_AMD64_REL32        __imp_PyExc_AttributeError
    // 69: 48 8b 10                      movq    (%rax), %rdx
    // 6c: 4c 89 f1                      movq    %r14, %rcx
    // 6f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__PyErr_ExceptionMatches
    // 75: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 83: 85 c0                         testl   %eax, %eax
    // 85: 74 35                         je      0xbc <_JIT_ENTRY+0xbc>
    // 87: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 8c: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 90: 4c 8b 48 18                   movq    0x18(%rax), %r9
    // 94: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 9b: 48 8b 10                      movq    (%rax), %rdx
    // 9e: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        ??_C@_0CB@CMJMJEG@?8?$CF?4200s?8?5object?5is?5not?5a?5mapping@
    // a5: 4c 89 f1                      movq    %r14, %rcx
    // a8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xae <_JIT_ENTRY+0xae>
    // 00000000000000aa:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // ae: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // b3: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // bc: 8b 06                         movl    (%rsi), %eax
    // be: 85 c0                         testl   %eax, %eax
    // c0: 78 06                         js      0xc8 <_JIT_ENTRY+0xc8>
    // c2: ff c8                         decl    %eax
    // c4: 89 06                         movl    %eax, (%rsi)
    // c6: 74 23                         je      0xeb <_JIT_ENTRY+0xeb>
    // c8: 48 83 c4 28                   addq    $0x28, %rsp
    // cc: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd3 <_JIT_ENTRY+0xd3>
    // 00000000000000cf:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // d3: 48 89 f1                      movq    %rsi, %rcx
    // d6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000d8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // dc: 49 83 c5 f8                   addq    $-0x8, %r13
    // e0: 48 83 c4 28                   addq    $0x28, %rsp
    // e4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xeb <_JIT_ENTRY+0xeb>
    // 00000000000000e7:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // eb: 48 89 f1                      movq    %rsi, %rcx
    // ee: ff 15 00 00 00 00             callq   *(%rip)                 # 0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f0:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // f4: 48 83 c4 28                   addq    $0x28, %rsp
    // f8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xff <_JIT_ENTRY+0xff>
    // 00000000000000fb:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[255] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x75, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x4c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x1f, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89, 0x06,
        0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x10, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x35, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x46, 0x08,
        0x4c, 0x8b, 0x48, 0x18, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x10, 0x4c, 0x8d,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x23,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: OPARG
    // 30: &PyDict_Update+0x0
    // 38: CONTINUE
    // 40: &PyExc_AttributeError+0x0
    // 48: &_PyErr_ExceptionMatches+0x0
    // 50: &PyExc_TypeError+0x0
    // 58: &_PyErr_Format+0x0
    // 60: ERROR_TARGET
    // 68: &_Py_Dealloc+0x0
    const unsigned char data_body[112] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, instruction->oparg);
    patch_64(data + 0x30, (uintptr_t)&PyDict_Update);
    patch_64(data + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x40, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x48, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x50, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x58, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x60, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x68, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xaa, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xd8, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xf0, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xfb, (uintptr_t)data + 0x5c);
}

void
emit__DYNAMIC_EXIT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _DYNAMIC_EXIT.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // b: 49 89 be 08 01 00 00          movq    %rdi, 0x108(%r14)
    // 12: 49 8b 74 24 38                movq    0x38(%r12), %rsi
    // 17: 80 3e ff                      cmpb    $-0x1, (%rsi)
    // 1a: 74 5a                         je      0x76 <_JIT_ENTRY+0x76>
    // 1c: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 23: 0f b7 43 04                   movzwl  0x4(%rbx), %eax
    // 27: 66 83 f8 0f                   cmpw    $0xf, %ax
    // 2b: 73 72                         jae     0x9f <_JIT_ENTRY+0x9f>
    // 2d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 32: c7 44 24 20 00 00 00 00       movl    $0x0, 0x20(%rsp)
    // 3a: 4c 8d 4c 24 30                leaq    0x30(%rsp), %r9
    // 3f: 4c 89 e1                      movq    %r12, %rcx
    // 42: 48 89 f2                      movq    %rsi, %rdx
    // 45: 4d 89 e8                      movq    %r13, %r8
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__PyOptimizer_Optimize
    // 4e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 53: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5c: 85 c0                         testl   %eax, %eax
    // 5e: 7e 53                         jle     0xb3 <_JIT_ENTRY+0xb3>
    // 60: 66 c7 43 04 fc ff             movw    $0xfffc, 0x4(%rbx)      # imm = 0xFFFC
    // 66: 48 8b 44 24 30                movq    0x30(%rsp), %rax
    // 6b: 48 8b 40 78                   movq    0x78(%rax), %rax
    // 6f: 48 83 c4 38                   addq    $0x38, %rsp
    // 73: 48 ff e0                      jmpq    *%rax
    // 76: 49 8b 04 24                   movq    (%r12), %rax
    // 7a: 48 8b 80 98 00 00 00          movq    0x98(%rax), %rax
    // 81: 0f b6 4e 01                   movzbl  0x1(%rsi), %ecx
    // 85: 48 8b 44 c8 08                movq    0x8(%rax,%rcx,8), %rax
    // 8a: 8b 08                         movl    (%rax), %ecx
    // 8c: 85 c9                         testl   %ecx, %ecx
    // 8e: 78 db                         js      0x6b <_JIT_ENTRY+0x6b>
    // 90: ff c1                         incl    %ecx
    // 92: 89 08                         movl    %ecx, (%rax)
    // 94: 48 8b 40 78                   movq    0x78(%rax), %rax
    // 98: 48 83 c4 38                   addq    $0x38, %rsp
    // 9c: 48 ff e0                      jmpq    *%rax
    // 9f: 83 c0 f0                      addl    $-0x10, %eax
    // a2: 66 89 43 04                   movw    %ax, 0x4(%rbx)
    // a6: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // ab: 48 89 f0                      movq    %rsi, %rax
    // ae: 48 83 c4 38                   addq    $0x38, %rsp
    // b2: c3                            retq
    // b3: 0f b7 4b 04                   movzwl  0x4(%rbx), %ecx
    // b7: 83 e1 0f                      andl    $0xf, %ecx
    // ba: 66 ba fc ff                   movw    $0xfffc, %dx            # imm = 0xFFFC
    // be: 66 83 f9 0b                   cmpw    $0xb, %cx
    // c2: 77 10                         ja      0xd4 <_JIT_ENTRY+0xd4>
    // c4: ff c1                         incl    %ecx
    // c6: ba ff ff ff ff                movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    // cb: d3 e2                         shll    %cl, %edx
    // cd: f7 d2                         notl    %edx
    // cf: c1 e2 04                      shll    $0x4, %edx
    // d2: 09 ca                         orl     %ecx, %edx
    // d4: 66 89 53 04                   movw    %dx, 0x4(%rbx)
    // d8: 85 c0                         testl   %eax, %eax
    // da: 78 0d                         js      0xe9 <_JIT_ENTRY+0xe9>
    // dc: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // e1: 48 89 f0                      movq    %rsi, %rax
    // e4: 48 83 c4 38                   addq    $0x38, %rsp
    // e8: c3                            retq
    // e9: 49 89 be 08 01 00 00          movq    %rdi, 0x108(%r14)
    // f0: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // f5: 31 f6                         xorl    %esi, %esi
    // f7: 48 89 f0                      movq    %rsi, %rax
    // fa: 48 83 c4 38                   addq    $0x38, %rsp
    // fe: c3                            retq
    const unsigned char code_body[255] = {
        0x48, 0x83, 0xec, 0x38, 0x48, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0xbe, 0x08, 0x01,
        0x00, 0x00, 0x49, 0x8b, 0x74, 0x24, 0x38, 0x80,
        0x3e, 0xff, 0x74, 0x5a, 0x48, 0x8b, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0x43, 0x04, 0x66,
        0x83, 0xf8, 0x0f, 0x73, 0x72, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x30, 0x4c,
        0x89, 0xe1, 0x48, 0x89, 0xf2, 0x4d, 0x89, 0xe8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x7e, 0x53,
        0x66, 0xc7, 0x43, 0x04, 0xfc, 0xff, 0x48, 0x8b,
        0x44, 0x24, 0x30, 0x48, 0x8b, 0x40, 0x78, 0x48,
        0x83, 0xc4, 0x38, 0x48, 0xff, 0xe0, 0x49, 0x8b,
        0x04, 0x24, 0x48, 0x8b, 0x80, 0x98, 0x00, 0x00,
        0x00, 0x0f, 0xb6, 0x4e, 0x01, 0x48, 0x8b, 0x44,
        0xc8, 0x08, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0xdb,
        0xff, 0xc1, 0x89, 0x08, 0x48, 0x8b, 0x40, 0x78,
        0x48, 0x83, 0xc4, 0x38, 0x48, 0xff, 0xe0, 0x83,
        0xc0, 0xf0, 0x66, 0x89, 0x43, 0x04, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf0, 0x48, 0x83,
        0xc4, 0x38, 0xc3, 0x0f, 0xb7, 0x4b, 0x04, 0x83,
        0xe1, 0x0f, 0x66, 0xba, 0xfc, 0xff, 0x66, 0x83,
        0xf9, 0x0b, 0x77, 0x10, 0xff, 0xc1, 0xba, 0xff,
        0xff, 0xff, 0xff, 0xd3, 0xe2, 0xf7, 0xd2, 0xc1,
        0xe2, 0x04, 0x09, 0xca, 0x66, 0x89, 0x53, 0x04,
        0x85, 0xc0, 0x78, 0x0d, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xf0, 0x48, 0x83, 0xc4, 0x38,
        0xc3, 0x49, 0x89, 0xbe, 0x08, 0x01, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x31, 0xf6, 0x48,
        0x89, 0xf0, 0x48, 0x83, 0xc4, 0x38, 0xc3,
    };
    // 0: EXECUTOR
    // 8: OPERAND0
    // 10: &_PyOptimizer_Optimize+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)&_PyOptimizer_Optimize);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0xc);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _END_SEND.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 ee                      movq    %r13, %rsi
    // 7: 49 83 c5 f8                   addq    $-0x8, %r13
    // b: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
    // f: 48 8b 7e f8                   movq    -0x8(%rsi), %rdi
    // 13: 8b 01                         movl    (%rcx), %eax
    // 15: 85 c0                         testl   %eax, %eax
    // 17: 78 06                         js      0x1f <_JIT_ENTRY+0x1f>
    // 19: ff c8                         decl    %eax
    // 1b: 89 01                         movl    %eax, (%rcx)
    // 1d: 74 0f                         je      0x2e <_JIT_ENTRY+0x2e>
    // 1f: 48 89 7e f0                   movq    %rdi, -0x10(%rsi)
    // 23: 48 83 c4 28                   addq    $0x28, %rsp
    // 27: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 34: 48 89 7e f0                   movq    %rdi, -0x10(%rsi)
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0xee, 0x49,
        0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x4e, 0xf0, 0x48,
        0x8b, 0x7e, 0xf8, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0f, 0x48,
        0x89, 0x7e, 0xf0, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7e, 0xf0,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ERROR_POP_N.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: c1 e0 03                      shll    $0x3, %eax
    // a: 49 29 c5                      subq    %rax, %r13
    // d: 49 8b 04 24                   movq    (%r12), %rax
    // 11: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 17: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // 1b: 48 05 d0 00 00 00             addq    $0xd0, %rax
    // 21: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // 26: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 2d: 49 89 86 08 01 00 00          movq    %rax, 0x108(%r14)
    // 34: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 39: 31 c0                         xorl    %eax, %eax
    // 3b: c3                            retq
    const unsigned char code_body[60] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x03, 0x49, 0x29, 0xc5, 0x49, 0x8b, 0x04,
        0x24, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8d, 0x04, 0x48, 0x48, 0x05, 0xd0, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x86,
        0x08, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x31, 0xc0, 0xc3,
    };
    // 0: OPARG
    // 8: OPERAND0
    // 10: EXECUTOR
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_INIT_CHECK.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // f: 74 3d                         je      0x4e <_JIT_ENTRY+0x4e>
    // 11: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 16: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1a: 4c 8b 40 18                   movq    0x18(%rax), %r8
    // 1e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 25: 48 8b 08                      movq    (%rax), %rcx
    // 28: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        ??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp_PyErr_Format
    // 35: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 43: 48 83 c4 28                   addq    $0x28, %rsp
    // 47: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 4e: 49 83 c5 f8                   addq    $-0x8, %r13
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[86] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x3d, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x40, 0x08, 0x4c, 0x8b, 0x40, 0x18, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x08,
        0x48, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &_Py_NoneStruct+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: &PyErr_Format+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, (uintptr_t)&PyErr_Format);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x44);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXIT_TRACE.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 4d 8b 3c 24                   movq    (%r12), %r15
    // 8: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 8b 03                         movl    (%rbx), %eax
    // 11: 49 8d 34 47                   leaq    (%r15,%rax,2), %rsi
    // 15: 48 81 c6 d0 00 00 00          addq    $0xd0, %rsi
    // 1c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 25: 48 8b 4b 08                   movq    0x8(%rbx), %rcx
    // 29: 48 85 c9                      testq   %rcx, %rcx
    // 2c: 74 31                         je      0x5f <_JIT_ENTRY+0x5f>
    // 2e: f6 41 22 01                   testb   $0x1, 0x22(%rcx)
    // 32: 75 1e                         jne     0x52 <_JIT_ENTRY+0x52>
    // 34: 66 c7 43 04 fc ff             movw    $0xfffc, 0x4(%rbx)      # imm = 0xFFFC
    // 3a: 48 c7 43 08 00 00 00 00       movq    $0x0, 0x8(%rbx)
    // 42: 8b 01                         movl    (%rcx), %eax
    // 44: 85 c0                         testl   %eax, %eax
    // 46: 78 76                         js      0xbe <_JIT_ENTRY+0xbe>
    // 48: ff c8                         decl    %eax
    // 4a: 89 01                         movl    %eax, (%rcx)
    // 4c: 0f 84 d7 00 00 00             je      0x129 <_JIT_ENTRY+0x129>
    // 52: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 56: 48 85 c0                      testq   %rax, %rax
    // 59: 0f 85 a3 00 00 00             jne     0x102 <_JIT_ENTRY+0x102>
    // 5f: 0f b7 7b 04                   movzwl  0x4(%rbx), %edi
    // 63: 83 ff 0f                      cmpl    $0xf, %edi
    // 66: 73 5a                         jae     0xc2 <_JIT_ENTRY+0xc2>
    // 68: 80 3e ff                      cmpb    $-0x1, (%rsi)
    // 6b: 74 77                         je      0xe4 <_JIT_ENTRY+0xe4>
    // 6d: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            # 0x74 <_JIT_ENTRY+0x74>
    // 0000000000000070:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 74: 41 0f b6 47 22                movzbl  0x22(%r15), %eax
    // 79: c1 e8 02                      shrl    $0x2, %eax
    // 7c: ff c0                         incl    %eax
    // 7e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 83: 89 44 24 20                   movl    %eax, 0x20(%rsp)
    // 87: 4c 8d 4c 24 30                leaq    0x30(%rsp), %r9
    // 8c: 4c 89 e1                      movq    %r12, %rcx
    // 8f: 48 89 f2                      movq    %rsi, %rdx
    // 92: 4d 89 e8                      movq    %r13, %r8
    // 95: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  IMAGE_REL_AMD64_REL32        __imp__PyOptimizer_Optimize
    // 9b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // a0: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a9: 85 c0                         testl   %eax, %eax
    // ab: 0f 8e 8c 00 00 00             jle     0x13d <_JIT_ENTRY+0x13d>
    // b1: 66 c7 43 04 fc ff             movw    $0xfffc, 0x4(%rbx)      # imm = 0xFFFC
    // b7: 48 8b 44 24 30                movq    0x30(%rsp), %rax
    // bc: eb 40                         jmp     0xfe <_JIT_ENTRY+0xfe>
    // be: 66 bf fc ff                   movw    $0xfffc, %di            # imm = 0xFFFC
    // c2: 83 c7 f0                      addl    $-0x10, %edi
    // c5: 66 89 7b 04                   movw    %di, 0x4(%rbx)
    // c9: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000cc:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // d0: 49 89 86 08 01 00 00          movq    %rax, 0x108(%r14)
    // d7: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // dc: 48 89 f0                      movq    %rsi, %rax
    // df: 48 83 c4 38                   addq    $0x38, %rsp
    // e3: c3                            retq
    // e4: 49 8b 87 98 00 00 00          movq    0x98(%r15), %rax
    // eb: 0f b6 4e 01                   movzbl  0x1(%rsi), %ecx
    // ef: 48 8b 44 c8 08                movq    0x8(%rax,%rcx,8), %rax
    // f4: 8b 08                         movl    (%rax), %ecx
    // f6: 85 c9                         testl   %ecx, %ecx
    // f8: 78 04                         js      0xfe <_JIT_ENTRY+0xfe>
    // fa: ff c1                         incl    %ecx
    // fc: 89 08                         movl    %ecx, (%rax)
    // fe: 48 89 43 08                   movq    %rax, 0x8(%rbx)
    // 102: 8b 08                         movl    (%rax), %ecx
    // 104: 85 c9                         testl   %ecx, %ecx
    // 106: 78 08                         js      0x110 <_JIT_ENTRY+0x110>
    // 108: ff c1                         incl    %ecx
    // 10a: 89 08                         movl    %ecx, (%rax)
    // 10c: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 110: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x117 <_JIT_ENTRY+0x117>
    // 0000000000000113:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 117: 49 89 8e 08 01 00 00          movq    %rcx, 0x108(%r14)
    // 11e: 48 8b 40 78                   movq    0x78(%rax), %rax
    // 122: 48 83 c4 38                   addq    $0x38, %rsp
    // 126: 48 ff e0                      jmpq    *%rax
    // 129: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12f <_JIT_ENTRY+0x12f>
    // 000000000000012b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 12f: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 133: 48 85 c0                      testq   %rax, %rax
    // 136: 75 ca                         jne     0x102 <_JIT_ENTRY+0x102>
    // 138: e9 22 ff ff ff                jmp     0x5f <_JIT_ENTRY+0x5f>
    // 13d: 66 ba fc ff                   movw    $0xfffc, %dx            # imm = 0xFFFC
    // 141: 66 83 ff 0b                   cmpw    $0xb, %di
    // 145: 77 12                         ja      0x159 <_JIT_ENTRY+0x159>
    // 147: ff c7                         incl    %edi
    // 149: ba ff ff ff ff                movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    // 14e: 89 f9                         movl    %edi, %ecx
    // 150: d3 e2                         shll    %cl, %edx
    // 152: f7 d2                         notl    %edx
    // 154: c1 e2 04                      shll    $0x4, %edx
    // 157: 09 fa                         orl     %edi, %edx
    // 159: 66 89 53 04                   movw    %dx, 0x4(%rbx)
    // 15d: 85 c0                         testl   %eax, %eax
    // 15f: 78 14                         js      0x175 <_JIT_ENTRY+0x175>
    // 161: 4d 89 be 08 01 00 00          movq    %r15, 0x108(%r14)
    // 168: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 16d: 48 89 f0                      movq    %rsi, %rax
    // 170: 48 83 c4 38                   addq    $0x38, %rsp
    // 174: c3                            retq
    // 175: 4d 89 be 08 01 00 00          movq    %r15, 0x108(%r14)
    // 17c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 181: 31 f6                         xorl    %esi, %esi
    // 183: 48 89 f0                      movq    %rsi, %rax
    // 186: 48 83 c4 38                   addq    $0x38, %rsp
    // 18a: c3                            retq
    const unsigned char code_body[395] = {
        0x48, 0x83, 0xec, 0x38, 0x4d, 0x8b, 0x3c, 0x24,
        0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x49, 0x8d, 0x34, 0x47, 0x48, 0x81, 0xc6,
        0xd0, 0x00, 0x00, 0x00, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b,
        0x08, 0x48, 0x85, 0xc9, 0x74, 0x31, 0xf6, 0x41,
        0x22, 0x01, 0x75, 0x1e, 0x66, 0xc7, 0x43, 0x04,
        0xfc, 0xff, 0x48, 0xc7, 0x43, 0x08, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x76,
        0xff, 0xc8, 0x89, 0x01, 0x0f, 0x84, 0xd7, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x85,
        0xc0, 0x0f, 0x85, 0xa3, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0x7b, 0x04, 0x83, 0xff, 0x0f, 0x73, 0x5a,
        0x80, 0x3e, 0xff, 0x74, 0x77, 0x4c, 0x8b, 0x3d,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb6, 0x47,
        0x22, 0xc1, 0xe8, 0x02, 0xff, 0xc0, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x89, 0x44, 0x24, 0x20, 0x4c,
        0x8d, 0x4c, 0x24, 0x30, 0x4c, 0x89, 0xe1, 0x48,
        0x89, 0xf2, 0x4d, 0x89, 0xe8, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x0f, 0x8e, 0x8c, 0x00, 0x00,
        0x00, 0x66, 0xc7, 0x43, 0x04, 0xfc, 0xff, 0x48,
        0x8b, 0x44, 0x24, 0x30, 0xeb, 0x40, 0x66, 0xbf,
        0xfc, 0xff, 0x83, 0xc7, 0xf0, 0x66, 0x89, 0x7b,
        0x04, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x86, 0x08, 0x01, 0x00, 0x00, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf0, 0x48,
        0x83, 0xc4, 0x38, 0xc3, 0x49, 0x8b, 0x87, 0x98,
        0x00, 0x00, 0x00, 0x0f, 0xb6, 0x4e, 0x01, 0x48,
        0x8b, 0x44, 0xc8, 0x08, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x48, 0x89,
        0x43, 0x08, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x08,
        0xff, 0xc1, 0x89, 0x08, 0x48, 0x8b, 0x43, 0x08,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x8e, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8b,
        0x40, 0x78, 0x48, 0x83, 0xc4, 0x38, 0x48, 0xff,
        0xe0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x43, 0x08, 0x48, 0x85, 0xc0, 0x75, 0xca,
        0xe9, 0x22, 0xff, 0xff, 0xff, 0x66, 0xba, 0xfc,
        0xff, 0x66, 0x83, 0xff, 0x0b, 0x77, 0x12, 0xff,
        0xc7, 0xba, 0xff, 0xff, 0xff, 0xff, 0x89, 0xf9,
        0xd3, 0xe2, 0xf7, 0xd2, 0xc1, 0xe2, 0x04, 0x09,
        0xfa, 0x66, 0x89, 0x53, 0x04, 0x85, 0xc0, 0x78,
        0x14, 0x4d, 0x89, 0xbe, 0x08, 0x01, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf0,
        0x48, 0x83, 0xc4, 0x38, 0xc3, 0x4d, 0x89, 0xbe,
        0x08, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x31, 0xf6, 0x48, 0x89, 0xf0, 0x48, 0x83,
        0xc4, 0x38, 0xc3,
    };
    // 0: OPERAND0
    // 8: EXECUTOR
    // 10: &_PyOptimizer_Optimize+0x0
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)executor);
    patch_64(data + 0x10, (uintptr_t)&_PyOptimizer_Optimize);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x113, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x12b, (uintptr_t)data + 0x14);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 10: 29 c2                         subl    %eax, %edx
    // 12: f7 d0                         notl    %eax
    // 14: 48 63 c8                      movslq  %eax, %rcx
    // 17: 48 63 c2                      movslq  %edx, %rax
    // 1a: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 1f: 48 8b 72 18                   movq    0x18(%rdx), %rsi
    // 23: 8b 3e                         movl    (%rsi), %edi
    // 25: 85 ff                         testl   %edi, %edi
    // 27: 78 04                         js      0x2d <_JIT_ENTRY+0x2d>
    // 29: ff c7                         incl    %edi
    // 2b: 89 3e                         movl    %edi, (%rsi)
    // 2d: 49 89 74 cd 00                movq    %rsi, (%r13,%rcx,8)
    // 32: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 37: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 3b: 8b 32                         movl    (%rdx), %esi
    // 3d: 85 f6                         testl   %esi, %esi
    // 3f: 78 04                         js      0x45 <_JIT_ENTRY+0x45>
    // 41: ff c6                         incl    %esi
    // 43: 89 32                         movl    %esi, (%rdx)
    // 45: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
    // 4a: 8b 01                         movl    (%rcx), %eax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: ff c8                         decl    %eax
    // 52: 89 01                         movl    %eax, (%rcx)
    // 54: 74 0b                         je      0x61 <_JIT_ENTRY+0x61>
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 67: 48 83 c4 28                   addq    $0x28, %rsp
    // 6b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[107] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x63, 0xc8, 0x48,
        0x63, 0xc2, 0x49, 0x8b, 0x54, 0xc5, 0x00, 0x48,
        0x8b, 0x72, 0x18, 0x8b, 0x3e, 0x85, 0xff, 0x78,
        0x04, 0xff, 0xc7, 0x89, 0x3e, 0x49, 0x89, 0x74,
        0xcd, 0x00, 0x49, 0x8b, 0x4c, 0xc5, 0x00, 0x48,
        0x8b, 0x52, 0x10, 0x8b, 0x32, 0x85, 0xf6, 0x78,
        0x04, 0xff, 0xc6, 0x89, 0x32, 0x49, 0x89, 0x54,
        0xc5, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0xc);
}

void
emit__EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _EXPAND_METHOD_KW.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 10: 29 c1                         subl    %eax, %ecx
    // 12: 48 63 d1                      movslq  %ecx, %rdx
    // 15: b9 fd ff ff ff                movl    $0xfffffffd, %ecx       # imm = 0xFFFFFFFD
    // 1a: 29 c1                         subl    %eax, %ecx
    // 1c: 48 63 c1                      movslq  %ecx, %rax
    // 1f: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 24: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 28: 8b 3e                         movl    (%rsi), %edi
    // 2a: 85 ff                         testl   %edi, %edi
    // 2c: 78 04                         js      0x32 <_JIT_ENTRY+0x32>
    // 2e: ff c7                         incl    %edi
    // 30: 89 3e                         movl    %edi, (%rsi)
    // 32: 49 89 74 d5 00                movq    %rsi, (%r13,%rdx,8)
    // 37: 48 8b 51 10                   movq    0x10(%rcx), %rdx
    // 3b: 8b 32                         movl    (%rdx), %esi
    // 3d: 85 f6                         testl   %esi, %esi
    // 3f: 78 04                         js      0x45 <_JIT_ENTRY+0x45>
    // 41: ff c6                         incl    %esi
    // 43: 89 32                         movl    %esi, (%rdx)
    // 45: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
    // 4a: 8b 01                         movl    (%rcx), %eax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: ff c8                         decl    %eax
    // 52: 89 01                         movl    %eax, (%rcx)
    // 54: 74 0b                         je      0x61 <_JIT_ENTRY+0x61>
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 67: 48 83 c4 28                   addq    $0x28, %rsp
    // 6b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[107] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x48, 0x63, 0xd1, 0xb9, 0xfd, 0xff,
        0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49,
        0x8b, 0x4c, 0xc5, 0x00, 0x48, 0x8b, 0x71, 0x18,
        0x8b, 0x3e, 0x85, 0xff, 0x78, 0x04, 0xff, 0xc7,
        0x89, 0x3e, 0x49, 0x89, 0x74, 0xd5, 0x00, 0x48,
        0x8b, 0x51, 0x10, 0x8b, 0x32, 0x85, 0xf6, 0x78,
        0x04, 0xff, 0xc6, 0x89, 0x32, 0x49, 0x89, 0x54,
        0xc5, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0xc);
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FATAL_ERROR.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8d 0d 00 00 00 00          leaq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        ??_C@_0L@HIBONIGH@_JIT_ENTRY?$AA@
    // b: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  IMAGE_REL_AMD64_REL32        ??_C@_0BK@GCJGAMOK@Fatal?5error?5uop?5executed?4?$AA@
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__Py_FatalErrorFunc
    const unsigned char code_body[24] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8d, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8d, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Fatal error uop executed.\x00_JIT_ENTRY\x00'
    // 25: 00 00 00
    // 28: &_Py_FatalErrorFunc+0x0
    const unsigned char data_body[48] = {
        0x46, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x72,
        0x72, 0x6f, 0x72, 0x20, 0x75, 0x6f, 0x70, 0x20,
        0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
        0x2e, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45,
        0x4e, 0x54, 0x52, 0x59, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FatalErrorFunc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x16);
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x24);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_SIMPLE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // 13: 74 32                         je      0x47 <_JIT_ENTRY+0x47>
    // 15: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1a: 48 89 f1                      movq    %rsi, %rcx
    // 1d: 31 d2                         xorl    %edx, %edx
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Format
    // 25: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 33: 8b 0e                         movl    (%rsi), %ecx
    // 35: 85 c9                         testl   %ecx, %ecx
    // 37: 78 06                         js      0x3f <_JIT_ENTRY+0x3f>
    // 39: ff c9                         decl    %ecx
    // 3b: 89 0e                         movl    %ecx, (%rsi)
    // 3d: 74 17                         je      0x56 <_JIT_ENTRY+0x56>
    // 3f: 48 85 c0                      testq   %rax, %rax
    // 42: 74 26                         je      0x6a <_JIT_ENTRY+0x6a>
    // 44: 48 89 c6                      movq    %rax, %rsi
    // 47: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 4b: 48 83 c4 28                   addq    $0x28, %rsp
    // 4f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 56: 48 89 f1                      movq    %rsi, %rcx
    // 59: 48 89 c6                      movq    %rax, %rsi
    // 5c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 62: 48 89 f0                      movq    %rsi, %rax
    // 65: 48 85 c0                      testq   %rax, %rax
    // 68: 75 da                         jne     0x44 <_JIT_ENTRY+0x44>
    // 6a: 48 83 c4 28                   addq    $0x28, %rsp
    // 6e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[117] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x32, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x89, 0xf1, 0x31, 0xd2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x17, 0x48,
        0x85, 0xc0, 0x74, 0x26, 0x48, 0x89, 0xc6, 0x49,
        0x89, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xf1, 0x48, 0x89, 0xc6, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf0, 0x48, 0x85, 0xc0,
        0x75, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: &PyObject_Format+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x1c);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FORMAT_WITH_SPEC.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 89 d9                      movq    %rbx, %rcx
    // 14: 48 89 fa                      movq    %rdi, %rdx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Format
    // 1d: 48 89 c6                      movq    %rax, %rsi
    // 20: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 25: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2e: 8b 03                         movl    (%rbx), %eax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 0f                         js      0x43 <_JIT_ENTRY+0x43>
    // 34: ff c8                         decl    %eax
    // 36: 89 03                         movl    %eax, (%rbx)
    // 38: 75 09                         jne     0x43 <_JIT_ENTRY+0x43>
    // 3a: 48 89 d9                      movq    %rbx, %rcx
    // 3d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 43: 8b 07                         movl    (%rdi), %eax
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 78 06                         js      0x4f <_JIT_ENTRY+0x4f>
    // 49: ff c8                         decl    %eax
    // 4b: 89 07                         movl    %eax, (%rdi)
    // 4d: 74 18                         je      0x67 <_JIT_ENTRY+0x67>
    // 4f: 48 85 f6                      testq   %rsi, %rsi
    // 52: 74 21                         je      0x75 <_JIT_ENTRY+0x75>
    // 54: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // 58: 49 83 c5 f8                   addq    $-0x8, %r13
    // 5c: 48 83 c4 28                   addq    $0x28, %rsp
    // 60: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 67: 48 89 f9                      movq    %rdi, %rcx
    // 6a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 70: 48 85 f6                      testq   %rsi, %rsi
    // 73: 75 df                         jne     0x54 <_JIT_ENTRY+0x54>
    // 75: 48 83 c4 28                   addq    $0x28, %rsp
    // 79: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[128] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x89, 0xd9, 0x48, 0x89, 0xfa, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc6,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x07, 0x74, 0x18, 0x48,
        0x85, 0xf6, 0x74, 0x21, 0x49, 0x89, 0x75, 0xf0,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xf6, 0x75, 0xdf, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_Format+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + 0x14);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_GEN_FRAME.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyGen_Type
    // f: 75 06                         jne     0x17 <_JIT_ENTRY+0x17>
    // 11: 80 78 43 00                   cmpb    $0x0, 0x43(%rax)
    // 15: 78 07                         js      0x1e <_JIT_ENTRY+0x1e>
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 1e: 48 8b 88 88 00 00 00          movq    0x88(%rax), %rcx
    // 25: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 2c: 48 89 11                      movq    %rdx, (%rcx)
    // 2f: 48 83 80 88 00 00 00 08       addq    $0x8, 0x88(%rax)
    // 37: 48 8d 48 48                   leaq    0x48(%rax), %rcx
    // 3b: c6 40 43 00                   movb    $0x0, 0x43(%rax)
    // 3f: 49 8b 56 78                   movq    0x78(%r14), %rdx
    // 43: 48 8d 70 28                   leaq    0x28(%rax), %rsi
    // 47: 48 89 50 30                   movq    %rdx, 0x30(%rax)
    // 4b: 49 89 76 78                   movq    %rsi, 0x78(%r14)
    // 4f: 4c 89 60 50                   movq    %r12, 0x50(%rax)
    // 53: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 59: 83 c0 02                      addl    $0x2, %eax
    // 5c: 66 41 89 44 24 48             movw    %ax, 0x48(%r12)
    // 62: 49 89 4d 00                   movq    %rcx, (%r13)
    // 66: 49 83 c5 08                   addq    $0x8, %r13
    // 6a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[106] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x06, 0x80, 0x78, 0x43, 0x00, 0x78, 0x07, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x88, 0x88, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x11, 0x48,
        0x83, 0x80, 0x88, 0x00, 0x00, 0x00, 0x08, 0x48,
        0x8d, 0x48, 0x48, 0xc6, 0x40, 0x43, 0x00, 0x49,
        0x8b, 0x56, 0x78, 0x48, 0x8d, 0x70, 0x28, 0x48,
        0x89, 0x50, 0x30, 0x49, 0x89, 0x76, 0x78, 0x4c,
        0x89, 0x60, 0x50, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc0, 0x02, 0x66, 0x41, 0x89, 0x44,
        0x24, 0x48, 0x49, 0x89, 0x4d, 0x00, 0x49, 0x83,
        0xc5, 0x08,
    };
    // 0: &PyGen_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_NoneStruct+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x14);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _FOR_ITER_TIER_TWO.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // 11: ff 90 e0 00 00 00             callq   *0xe0(%rax)
    // 17: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1c: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 25: 48 85 c0                      testq   %rax, %rax
    // 28: 74 13                         je      0x3d <_JIT_ENTRY+0x3d>
    // 2a: 49 89 45 00                   movq    %rax, (%r13)
    // 2e: 49 83 c5 08                   addq    $0x8, %r13
    // 32: 48 83 c4 28                   addq    $0x28, %rsp
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 3d: 49 8b 46 70                   movq    0x70(%r14), %rax
    // 41: 48 85 c0                      testq   %rax, %rax
    // 44: 74 5e                         je      0xa4 <_JIT_ENTRY+0xa4>
    // 46: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // 4b: 74 57                         je      0xa4 <_JIT_ENTRY+0xa4>
    // 4d: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 52: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp_PyExc_StopIteration
    // 59: 48 8b 10                      movq    (%rax), %rdx
    // 5c: 4c 89 f1                      movq    %r14, %rcx
    // 5f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  IMAGE_REL_AMD64_REL32        __imp__PyErr_ExceptionMatches
    // 65: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 73: 85 c0                         testl   %eax, %eax
    // 75: 74 38                         je      0xaf <_JIT_ENTRY+0xaf>
    // 77: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7c: 4d 8b 44 24 38                movq    0x38(%r12), %r8
    // 81: 4c 89 f1                      movq    %r14, %rcx
    // 84: 4c 89 e2                      movq    %r12, %rdx
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  IMAGE_REL_AMD64_REL32        __imp__PyEval_MonitorRaise
    // 8d: 4c 89 f1                      movq    %r14, %rcx
    // 90: ff 15 00 00 00 00             callq   *(%rip)                 # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Clear
    // 96: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a4: 48 83 c4 28                   addq    $0x28, %rsp
    // a8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xaf <_JIT_ENTRY+0xaf>
    // 00000000000000ab:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // af: 48 83 c4 28                   addq    $0x28, %rsp
    // b3: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[186] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x41,
        0x08, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x13, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x46,
        0x70, 0x48, 0x85, 0xc0, 0x74, 0x5e, 0x48, 0x83,
        0x78, 0x08, 0x00, 0x74, 0x57, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x10, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x38, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4d, 0x8b, 0x44, 0x24,
        0x38, 0x4c, 0x89, 0xf1, 0x4c, 0x89, 0xe2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: &PyExc_StopIteration+0x0
    // 10: &_PyErr_ExceptionMatches+0x0
    // 18: &_PyEval_MonitorRaise+0x0
    // 20: &_PyErr_Clear+0x0
    // 28: JUMP_TARGET
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyExc_StopIteration);
    patch_64(data + 0x10, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x18, (uintptr_t)&_PyEval_MonitorRaise);
    patch_64(data + 0x20, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x28, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0x2c);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AITER.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // c: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // 10: 48 85 c9                      testq   %rcx, %rcx
    // 13: 74 60                         je      0x75 <_JIT_ENTRY+0x75>
    // 15: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 19: 48 85 d2                      testq   %rdx, %rdx
    // 1c: 74 57                         je      0x75 <_JIT_ENTRY+0x75>
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f9                      movq    %rdi, %rcx
    // 26: ff d2                         callq   *%rdx
    // 28: 48 89 c6                      movq    %rax, %rsi
    // 2b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 30: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 39: 8b 07                         movl    (%rdi), %eax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 0a                         js      0x49 <_JIT_ENTRY+0x49>
    // 3f: ff c8                         decl    %eax
    // 41: 89 07                         movl    %eax, (%rdi)
    // 43: 0f 84 d8 00 00 00             je      0x121 <_JIT_ENTRY+0x121>
    // 49: 48 85 f6                      testq   %rsi, %rsi
    // 4c: 0f 84 e1 00 00 00             je      0x133 <_JIT_ENTRY+0x133>
    // 52: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 56: 48 8b 40 50                   movq    0x50(%rax), %rax
    // 5a: 48 85 c0                      testq   %rax, %rax
    // 5d: 74 5e                         je      0xbd <_JIT_ENTRY+0xbd>
    // 5f: 48 83 78 10 00                cmpq    $0x0, 0x10(%rax)
    // 64: 74 57                         je      0xbd <_JIT_ENTRY+0xbd>
    // 66: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 6a: 48 83 c4 28                   addq    $0x28, %rsp
    // 6e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 75: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7a: 4c 8b 48 18                   movq    0x18(%rax), %r9
    // 7e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x85 <_JIT_ENTRY+0x85>
    // 0000000000000081:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 85: 48 8b 10                      movq    (%rax), %rdx
    // 88: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x8f <_JIT_ENTRY+0x8f>
    // 000000000000008b:  IMAGE_REL_AMD64_REL32        ??_C@_0EB@HAIFCLCF@?8async?5for?8?5requires?5an?5object?5w@
    // 8f: 4c 89 f1                      movq    %r14, %rcx
    // 92: ff 15 00 00 00 00             callq   *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // 98: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a6: 8b 07                         movl    (%rdi), %eax
    // a8: 85 c0                         testl   %eax, %eax
    // aa: 78 06                         js      0xb2 <_JIT_ENTRY+0xb2>
    // ac: ff c8                         decl    %eax
    // ae: 89 07                         movl    %eax, (%rdi)
    // b0: 74 5b                         je      0x10d <_JIT_ENTRY+0x10d>
    // b2: 48 83 c4 28                   addq    $0x28, %rsp
    // b6: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbd <_JIT_ENTRY+0xbd>
    // 00000000000000b9:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // bd: 49 83 c5 f8                   addq    $-0x8, %r13
    // c1: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // c6: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // ca: 4c 8b 48 18                   movq    0x18(%rax), %r9
    // ce: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xd5 <_JIT_ENTRY+0xd5>
    // 00000000000000d1:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // d5: 48 8b 10                      movq    (%rax), %rdx
    // d8: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  IMAGE_REL_AMD64_REL32        ??_C@_0FI@MHPMLJOA@?8async?5for?8?5received?5an?5object?5f@
    // df: 4c 89 f1                      movq    %r14, %rcx
    // e2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe8 <_JIT_ENTRY+0xe8>
    // 00000000000000e4:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // e8: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // ed: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // f6: 8b 06                         movl    (%rsi), %eax
    // f8: 85 c0                         testl   %eax, %eax
    // fa: 78 06                         js      0x102 <_JIT_ENTRY+0x102>
    // fc: ff c8                         decl    %eax
    // fe: 89 06                         movl    %eax, (%rsi)
    // 100: 74 3c                         je      0x13e <_JIT_ENTRY+0x13e>
    // 102: 48 83 c4 28                   addq    $0x28, %rsp
    // 106: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x10d <_JIT_ENTRY+0x10d>
    // 0000000000000109:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 10d: 48 89 f9                      movq    %rdi, %rcx
    // 110: ff 15 00 00 00 00             callq   *(%rip)                 # 0x116 <_JIT_ENTRY+0x116>
    // 0000000000000112:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 116: 48 83 c4 28                   addq    $0x28, %rsp
    // 11a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x121 <_JIT_ENTRY+0x121>
    // 000000000000011d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 121: 48 89 f9                      movq    %rdi, %rcx
    // 124: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12a <_JIT_ENTRY+0x12a>
    // 0000000000000126:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 12a: 48 85 f6                      testq   %rsi, %rsi
    // 12d: 0f 85 1f ff ff ff             jne     0x52 <_JIT_ENTRY+0x52>
    // 133: 48 83 c4 28                   addq    $0x28, %rsp
    // 137: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13e <_JIT_ENTRY+0x13e>
    // 000000000000013a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 13e: 48 89 f1                      movq    %rsi, %rcx
    // 141: ff 15 00 00 00 00             callq   *(%rip)                 # 0x147 <_JIT_ENTRY+0x147>
    // 0000000000000143:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 147: 48 83 c4 28                   addq    $0x28, %rsp
    // 14b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x152 <_JIT_ENTRY+0x152>
    // 000000000000014e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[338] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x08, 0x48, 0x8b, 0x48, 0x50,
        0x48, 0x85, 0xc9, 0x74, 0x60, 0x48, 0x8b, 0x51,
        0x08, 0x48, 0x85, 0xd2, 0x74, 0x57, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf9, 0xff, 0xd2,
        0x48, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0a, 0xff,
        0xc8, 0x89, 0x07, 0x0f, 0x84, 0xd8, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0xe1, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48, 0x8b,
        0x40, 0x50, 0x48, 0x85, 0xc0, 0x74, 0x5e, 0x48,
        0x83, 0x78, 0x10, 0x00, 0x74, 0x57, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x4c, 0x8b, 0x48, 0x18, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x10,
        0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07,
        0x74, 0x5b, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0xf8, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x46, 0x08, 0x4c, 0x8b, 0x48, 0x18, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x10,
        0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x3c, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xf6, 0x0f, 0x85, 0x1f,
        0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: CONTINUE
    // a8: &PyExc_TypeError+0x0
    // b0: &_PyErr_Format+0x0
    // b8: ERROR_TARGET
    // c0: &_Py_Dealloc+0x0
    const unsigned char data_body[200] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0xa8, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0xb0, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0xb8, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0xc0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x9c);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)data + 0xa4);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + 0xac);
    patch_x86_64_32rx(code + 0xb9, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0xd1, (uintptr_t)data + 0xa4);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)data + 0x3d);
    patch_x86_64_32rx(code + 0xe4, (uintptr_t)data + 0xac);
    patch_x86_64_32rx(code + 0x109, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0x112, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0x11d, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0x126, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0x13a, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0x143, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0x14e, (uintptr_t)data + 0xb4);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ANEXT.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__PyEval_GetANext
    // 13: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 18: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 21: 48 85 c0                      testq   %rax, %rax
    // 24: 74 13                         je      0x39 <_JIT_ENTRY+0x39>
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 48 83 c4 28                   addq    $0x28, %rsp
    // 32: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 39: 48 83 c4 28                   addq    $0x28, %rsp
    // 3d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[68] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x13, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_GetANext+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_GetANext);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0xc);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_AWAITABLE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 14: 48 89 f1                      movq    %rsi, %rcx
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__PyEval_GetAwaitable
    // 1d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 22: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2b: 8b 0e                         movl    (%rsi), %ecx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 06                         js      0x37 <_JIT_ENTRY+0x37>
    // 31: ff c9                         decl    %ecx
    // 33: 89 0e                         movl    %ecx, (%rsi)
    // 35: 74 14                         je      0x4b <_JIT_ENTRY+0x4b>
    // 37: 48 85 c0                      testq   %rax, %rax
    // 3a: 74 23                         je      0x5f <_JIT_ENTRY+0x5f>
    // 3c: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 40: 48 83 c4 28                   addq    $0x28, %rsp
    // 44: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4b: 48 89 f1                      movq    %rsi, %rcx
    // 4e: 48 89 c6                      movq    %rax, %rsi
    // 51: ff 15 00 00 00 00             callq   *(%rip)                 # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 57: 48 89 f0                      movq    %rsi, %rax
    // 5a: 48 85 c0                      testq   %rax, %rax
    // 5d: 75 dd                         jne     0x3c <_JIT_ENTRY+0x3c>
    // 5f: 48 83 c4 28                   addq    $0x28, %rsp
    // 63: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[106] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x14, 0x48,
        0x85, 0xc0, 0x74, 0x23, 0x49, 0x89, 0x45, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x48, 0x89,
        0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf0, 0x48, 0x85, 0xc0, 0x75, 0xdd, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_GetAwaitable+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_GetAwaitable);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x1c);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_ITER.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 f1                      movq    %rsi, %rcx
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GetIter
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0e                         movl    (%rsi), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0e                         movl    %ecx, (%rsi)
    // 2e: 74 14                         je      0x44 <_JIT_ENTRY+0x44>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 23                         je      0x58 <_JIT_ENTRY+0x58>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 48 83 c4 28                   addq    $0x28, %rsp
    // 3d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 44: 48 89 f1                      movq    %rsi, %rcx
    // 47: 48 89 c6                      movq    %rax, %rsi
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 50: 48 89 f0                      movq    %rsi, %rax
    // 53: 48 85 c0                      testq   %rax, %rax
    // 56: 75 dd                         jne     0x35 <_JIT_ENTRY+0x35>
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[99] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x14,
        0x48, 0x85, 0xc0, 0x74, 0x23, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf0, 0x48, 0x85, 0xc0, 0x75, 0xdd,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &PyObject_GetIter+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x14);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_LEN.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Size
    // 13: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 18: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 21: 48 85 c0                      testq   %rax, %rax
    // 24: 78 21                         js      0x47 <_JIT_ENTRY+0x47>
    // 26: 48 89 c1                      movq    %rax, %rcx
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        __imp_PyLong_FromSsize_t
    // 2f: 48 85 c0                      testq   %rax, %rax
    // 32: 74 13                         je      0x47 <_JIT_ENTRY+0x47>
    // 34: 49 89 45 00                   movq    %rax, (%r13)
    // 38: 49 83 c5 08                   addq    $0x8, %r13
    // 3c: 48 83 c4 28                   addq    $0x28, %rsp
    // 40: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 47: 48 83 c4 28                   addq    $0x28, %rsp
    // 4b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[82] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x78, 0x21, 0x48, 0x89,
        0xc1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x13, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &PyObject_Size+0x0
    // 8: &PyLong_FromSsize_t+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x8, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x14);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GET_YIELD_FROM_ITER.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyCoro_Type
    // 13: 74 48                         je      0x5d <_JIT_ENTRY+0x5d>
    // 15: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp_PyGen_Type
    // 1c: 74 4e                         je      0x6c <_JIT_ENTRY+0x6c>
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f1                      movq    %rsi, %rcx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GetIter
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 48 85 c0                      testq   %rax, %rax
    // 3d: 74 69                         je      0xa8 <_JIT_ENTRY+0xa8>
    // 3f: 8b 0e                         movl    (%rsi), %ecx
    // 41: 85 c9                         testl   %ecx, %ecx
    // 43: 78 6e                         js      0xb3 <_JIT_ENTRY+0xb3>
    // 45: ff c9                         decl    %ecx
    // 47: 89 0e                         movl    %ecx, (%rsi)
    // 49: 74 7a                         je      0xc5 <_JIT_ENTRY+0xc5>
    // 4b: 48 89 c6                      movq    %rax, %rsi
    // 4e: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5d: 49 8b 04 24                   movq    (%r12), %rax
    // 61: 0f b7 40 30                   movzwl  0x30(%rax), %eax
    // 65: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
    // 6a: 74 0f                         je      0x7b <_JIT_ENTRY+0x7b>
    // 6c: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 70: 48 83 c4 28                   addq    $0x28, %rsp
    // 74: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 7b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 80: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 87: 48 8b 10                      movq    (%rax), %rdx
    // 8a: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  IMAGE_REL_AMD64_REL32        ??_C@_0EE@OKAKFBDN@cannot?5?8yield?5from?8?5a?5coroutine?5@
    // 91: 4c 89 f1                      movq    %r14, %rcx
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp__PyErr_SetString
    // 9a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a8: 48 83 c4 28                   addq    $0x28, %rsp
    // ac: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb3 <_JIT_ENTRY+0xb3>
    // 00000000000000af:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // b3: 48 89 c6                      movq    %rax, %rsi
    // b6: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // ba: 48 83 c4 28                   addq    $0x28, %rsp
    // be: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc5 <_JIT_ENTRY+0xc5>
    // 00000000000000c1:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c5: 48 89 f1                      movq    %rsi, %rcx
    // c8: 48 89 c6                      movq    %rax, %rsi
    // cb: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd1 <_JIT_ENTRY+0xd1>
    // 00000000000000cd:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // d1: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // d5: 48 83 c4 28                   addq    $0x28, %rsp
    // d9: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe0 <_JIT_ENTRY+0xe0>
    // 00000000000000dc:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[217] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x48, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x4e, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x69, 0x8b,
        0x0e, 0x85, 0xc9, 0x78, 0x6e, 0xff, 0xc9, 0x89,
        0x0e, 0x74, 0x7a, 0x48, 0x89, 0xc6, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04,
        0x24, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01,
        0x00, 0x00, 0x74, 0x0f, 0x49, 0x89, 0x75, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x10, 0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xc6, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0x48, 0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83, 0xc4,
        0x28,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &PyCoro_Type+0x0
    // 50: &PyGen_Type+0x0
    // 58: &PyObject_GetIter+0x0
    // 60: CONTINUE
    // 68: &PyExc_TypeError+0x0
    // 70: &_PyErr_SetString+0x0
    // 78: ERROR_TARGET
    // 80: &_Py_Dealloc+0x0
    const unsigned char data_body[136] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x50, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x58, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x68, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x70, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x78, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x80, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0xc1, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)data + 0x7c);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_FLOAT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyFloat_Type
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp_PyFloat_Type
    // 20: 74 07                         je      0x29 <_JIT_ENTRY+0x29>
    // 22: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 29: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[41] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 20: 74 07                         je      0x29 <_JIT_ENTRY+0x29>
    // 22: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 29: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[41] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BOTH_UNICODE.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // 20: 74 07                         je      0x29 <_JIT_ENTRY+0x29>
    // 22: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 29: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[41] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BUILTINS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_BUILTINS_VERSION_PUSH_KEYS.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 20                movq    0x20(%r12), %rax
    // 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 9: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 10: 75 1f                         jne     0x31 <_JIT_ENTRY+0x31>
    // 12: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 16: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1d: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 20: 75 0f                         jne     0x31 <_JIT_ENTRY+0x31>
    // 22: 49 89 45 00                   movq    %rax, (%r13)
    // 26: 49 83 c5 08                   addq    $0x8, %r13
    // 2a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[56] = {
        0x49, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x48,
        0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x1f, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c,
        0x75, 0x0f, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_NO_DICT.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 83 78 e8 00                cmpq    $0x0, -0x18(%rax)
    // 9: 74 07                         je      0x12 <_JIT_ENTRY+0x12>
    // b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 12: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 16: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 1a: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 1f: 74 ea                         je      0xb <_JIT_ENTRY+0xb>
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0x78, 0xe8,
        0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b,
        0x49, 0x20, 0x80, 0x7c, 0x08, 0x03, 0x00, 0x74,
        0xea,
    };
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + -0x4);
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // c: 80 7c 08 03 00                cmpb    $0x0, 0x3(%rax,%rcx)
    // 11: 74 07                         je      0x1a <_JIT_ENTRY+0x1a>
    // 13: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x8b, 0x49, 0x20, 0x80, 0x7c, 0x08, 0x03,
        0x00, 0x74, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 9: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 10: 75 17                         jne     0x29 <_JIT_ENTRY+0x29>
    // 12: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 16: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1d: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 20: 75 07                         jne     0x29 <_JIT_ENTRY+0x29>
    // 22: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 29: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[48] = {
        0x49, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x48,
        0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x17, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c,
        0x75, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x14);
}

void
emit__GUARD_GLOBALS_VERSION_PUSH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_GLOBALS_VERSION_PUSH_KEYS.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 5: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 9: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 10: 75 1f                         jne     0x31 <_JIT_ENTRY+0x31>
    // 12: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 16: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1d: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 20: 75 0f                         jne     0x31 <_JIT_ENTRY+0x31>
    // 22: 49 89 45 00                   movq    %rax, (%r13)
    // 26: 49 83 c5 08                   addq    $0x8, %r13
    // 2a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[56] = {
        0x49, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x48,
        0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x1f, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c,
        0x75, 0x0f, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyDict_Type+0x0
    // 8: OPERAND0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand0);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_FALSE_POP.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NONE_POP.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 13: 74 17                         je      0x2c <_JIT_ENTRY+0x2c>
    // 15: 8b 01                         movl    (%rcx), %eax
    // 17: 85 c0                         testl   %eax, %eax
    // 19: 78 06                         js      0x21 <_JIT_ENTRY+0x21>
    // 1b: ff c8                         decl    %eax
    // 1d: 89 01                         movl    %eax, (%rcx)
    // 1f: 74 16                         je      0x37 <_JIT_ENTRY+0x37>
    // 21: 48 83 c4 28                   addq    $0x28, %rsp
    // 25: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 2c: 48 83 c4 28                   addq    $0x28, %rsp
    // 30: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 37: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3d: 48 83 c4 28                   addq    $0x28, %rsp
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[72] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x3b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x17, 0x8b, 0x01, 0x85,
        0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74,
        0x16, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x4);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_NOT_NONE_POP.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 8b 06                         movl    (%rsi), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 06                         js      0x14 <_JIT_ENTRY+0x14>
    // e: ff c8                         decl    %eax
    // 10: 89 06                         movl    %eax, (%rsi)
    // 12: 74 18                         je      0x2c <_JIT_ENTRY+0x2c>
    // 14: 49 83 c5 f8                   addq    $-0x8, %r13
    // 18: 48 83 c4 28                   addq    $0x28, %rsp
    // 1c: 48 3b 35 00 00 00 00          cmpq    (%rip), %rsi            # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 23: 74 21                         je      0x46 <_JIT_ENTRY+0x46>
    // 25: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2c: 48 89 f1                      movq    %rsi, %rcx
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 35: 49 83 c5 f8                   addq    $-0x8, %r13
    // 39: 48 83 c4 28                   addq    $0x28, %rsp
    // 3d: 48 3b 35 00 00 00 00          cmpq    (%rip), %rsi            # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 44: 75 df                         jne     0x25 <_JIT_ENTRY+0x25>
    // 46: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[77] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x06, 0x74, 0x18, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0x3b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x21, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0x3b, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x75, 0xdf, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x14);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_IS_TRUE_POP.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_KEYS_VERSION.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
    // f: 8b 40 0c                      movl    0xc(%rax), %eax
    // 12: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 18: 75 07                         jne     0x21 <_JIT_ENTRY+0x21>
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[40] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x8b,
        0x40, 0x0c, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0xc);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_FLOAT.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyFloat_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOS_INT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_LIST.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 8: 48 85 c9                      testq   %rcx, %rcx
    // b: 74 11                         je      0x1e <_JIT_ENTRY+0x1e>
    // d: 48 8b 50 10                   movq    0x10(%rax), %rdx
    // 11: 48 3b 51 10                   cmpq    0x10(%rcx), %rdx
    // 15: 73 0e                         jae     0x25 <_JIT_ENTRY+0x25>
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 25: 48 c7 40 10 ff ff ff ff       movq    $-0x1, 0x10(%rax)
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[52] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x85, 0xc9, 0x74, 0x11, 0x48, 0x8b, 0x50,
        0x10, 0x48, 0x3b, 0x51, 0x10, 0x73, 0x0e, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40,
        0x10, 0xff, 0xff, 0xff, 0xff, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_RANGE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 83 78 18 00                   cmpl    $0x0, 0x18(%rax)
    // 8: 7e 07                         jle     0x11 <_JIT_ENTRY+0x11>
    // a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x83, 0x78, 0x18, 0x00,
        0x7e, 0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_NOT_EXHAUSTED_TUPLE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 8: 48 85 c9                      testq   %rcx, %rcx
    // b: 74 11                         je      0x1e <_JIT_ENTRY+0x1e>
    // d: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 11: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
    // 15: 7d 07                         jge     0x1e <_JIT_ENTRY+0x1e>
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[37] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x85, 0xc9, 0x74, 0x11, 0x48, 0x8b, 0x40,
        0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x07, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_FLOAT.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyFloat_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TOS_INT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _GUARD_TYPE_VERSION.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // e: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 14: 75 07                         jne     0x1d <_JIT_ENTRY+0x1d>
    // 16: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[36] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x8b, 0x80, 0x80, 0x01, 0x00, 0x00, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x07, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0xc);
}

void
emit__IMPORT_FROM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_FROM.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 10: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 17: 4c 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %r8
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 4c 89 f1                      movq    %r14, %rcx
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp__PyEval_ImportFrom
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 48 85 c0                      testq   %rax, %rax
    // 3b: 74 13                         je      0x50 <_JIT_ENTRY+0x50>
    // 3d: 49 89 45 00                   movq    %rax, (%r13)
    // 41: 49 83 c5 08                   addq    $0x8, %r13
    // 45: 48 83 c4 28                   addq    $0x28, %rsp
    // 49: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 50: 48 83 c4 28                   addq    $0x28, %rsp
    // 54: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[91] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x55, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8b, 0x44, 0xc8, 0x18, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x13, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ImportFrom+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ImportFrom);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
}

void
emit__IMPORT_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IMPORT_NAME.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 49 8b 04 24                   movq    (%r12), %rax
    // 10: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 14: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1b: 4c 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %r8
    // 20: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 25: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
    // 2a: 4c 89 f1                      movq    %r14, %rcx
    // 2d: 4c 89 e2                      movq    %r12, %rdx
    // 30: 49 89 f1                      movq    %rsi, %r9
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__PyEval_ImportName
    // 39: 48 89 c7                      movq    %rax, %rdi
    // 3c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 41: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4a: 8b 03                         movl    (%rbx), %eax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 0f                         js      0x5f <_JIT_ENTRY+0x5f>
    // 50: ff c8                         decl    %eax
    // 52: 89 03                         movl    %eax, (%rbx)
    // 54: 75 09                         jne     0x5f <_JIT_ENTRY+0x5f>
    // 56: 48 89 d9                      movq    %rbx, %rcx
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5f: 8b 06                         movl    (%rsi), %eax
    // 61: 85 c0                         testl   %eax, %eax
    // 63: 78 06                         js      0x6b <_JIT_ENTRY+0x6b>
    // 65: ff c8                         decl    %eax
    // 67: 89 06                         movl    %eax, (%rsi)
    // 69: 74 18                         je      0x83 <_JIT_ENTRY+0x83>
    // 6b: 48 85 ff                      testq   %rdi, %rdi
    // 6e: 74 21                         je      0x91 <_JIT_ENTRY+0x91>
    // 70: 49 89 7d f0                   movq    %rdi, -0x10(%r13)
    // 74: 49 83 c5 f8                   addq    $-0x8, %r13
    // 78: 48 83 c4 28                   addq    $0x28, %rsp
    // 7c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x83 <_JIT_ENTRY+0x83>
    // 000000000000007f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 83: 48 89 f1                      movq    %rsi, %rcx
    // 86: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8c <_JIT_ENTRY+0x8c>
    // 0000000000000088:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 8c: 48 85 ff                      testq   %rdi, %rdi
    // 8f: 75 df                         jne     0x70 <_JIT_ENTRY+0x70>
    // 91: 48 83 c4 28                   addq    $0x28, %rsp
    // 95: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[156] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x8b, 0x44, 0xc8, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0x5c,
        0x24, 0x20, 0x4c, 0x89, 0xf1, 0x4c, 0x89, 0xe2,
        0x49, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xc7, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89,
        0x06, 0x74, 0x18, 0x48, 0x85, 0xff, 0x74, 0x21,
        0x49, 0x89, 0x7d, 0xf0, 0x49, 0x83, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x75,
        0xdf, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_ImportName+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ImportName);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0x1c);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 10: 29 c2                         subl    %eax, %edx
    // 12: f7 d0                         notl    %eax
    // 14: 48 63 c8                      movslq  %eax, %rcx
    // 17: 48 63 c2                      movslq  %edx, %rax
    // 1a: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 1f: 48 8b 72 18                   movq    0x18(%rdx), %rsi
    // 23: 8b 3e                         movl    (%rsi), %edi
    // 25: 85 ff                         testl   %edi, %edi
    // 27: 78 04                         js      0x2d <_JIT_ENTRY+0x2d>
    // 29: ff c7                         incl    %edi
    // 2b: 89 3e                         movl    %edi, (%rsi)
    // 2d: 49 89 74 cd 00                movq    %rsi, (%r13,%rcx,8)
    // 32: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 37: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 3b: 8b 32                         movl    (%rdx), %esi
    // 3d: 85 f6                         testl   %esi, %esi
    // 3f: 78 04                         js      0x45 <_JIT_ENTRY+0x45>
    // 41: ff c6                         incl    %esi
    // 43: 89 32                         movl    %esi, (%rdx)
    // 45: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
    // 4a: 8b 01                         movl    (%rcx), %eax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: ff c8                         decl    %eax
    // 52: 89 01                         movl    %eax, (%rcx)
    // 54: 74 0b                         je      0x61 <_JIT_ENTRY+0x61>
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 61: ff 15 00 00 00 00             callq   *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 67: 48 83 c4 28                   addq    $0x28, %rsp
    // 6b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[107] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc2, 0xf7, 0xd0, 0x48, 0x63, 0xc8, 0x48,
        0x63, 0xc2, 0x49, 0x8b, 0x54, 0xc5, 0x00, 0x48,
        0x8b, 0x72, 0x18, 0x8b, 0x3e, 0x85, 0xff, 0x78,
        0x04, 0xff, 0xc7, 0x89, 0x3e, 0x49, 0x89, 0x74,
        0xcd, 0x00, 0x49, 0x8b, 0x4c, 0xc5, 0x00, 0x48,
        0x8b, 0x52, 0x10, 0x8b, 0x32, 0x85, 0xf6, 0x78,
        0x04, 0xff, 0xc6, 0x89, 0x32, 0x49, 0x89, 0x54,
        0xc5, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0xc);
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 89 f0                         movl    %esi, %eax
    // 9: f7 d0                         notl    %eax
    // b: 48 98                         cltq
    // d: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 12: 29 f1                         subl    %esi, %ecx
    // 14: 48 63 c9                      movslq  %ecx, %rcx
    // 17: 4d 8b 54 c5 00                movq    (%r13,%rax,8), %r10
    // 1c: 49 83 fa 01                   cmpq    $0x1, %r10
    // 20: 89 f3                         movl    %esi, %ebx
    // 22: 83 db ff                      sbbl    $-0x1, %ebx
    // 25: 4d 8b 44 cd 00                movq    (%r13,%rcx,8), %r8
    // 2a: 49 8b 78 30                   movq    0x30(%r8), %rdi
    // 2e: 49 8b 96 e8 00 00 00          movq    0xe8(%r14), %rdx
    // 35: 4c 63 4f 4c                   movslq  0x4c(%rdi), %r9
    // 39: 4e 8d 0c ca                   leaq    (%rdx,%r9,8), %r9
    // 3d: 4d 89 8e e8 00 00 00          movq    %r9, 0xe8(%r14)
    // 44: 4c 89 62 08                   movq    %r12, 0x8(%rdx)
    // 48: 4c 89 42 10                   movq    %r8, 0x10(%rdx)
    // 4c: 44 8b 0f                      movl    (%rdi), %r9d
    // 4f: 45 85 c9                      testl   %r9d, %r9d
    // 52: 78 06                         js      0x5a <_JIT_ENTRY+0x5a>
    // 54: 41 ff c1                      incl    %r9d
    // 57: 44 89 0f                      movl    %r9d, (%rdi)
    // 5a: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 62: 4c 01 e8                      addq    %r13, %rax
    // 65: 48 89 3a                      movq    %rdi, (%rdx)
    // 68: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 6c: 4c 89 4a 20                   movq    %r9, 0x20(%rdx)
    // 70: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 74: 4c 89 42 18                   movq    %r8, 0x18(%rdx)
    // 78: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 80: 4c 8d 4a 50                   leaq    0x50(%rdx), %r9
    // 84: 4c 63 47 48                   movslq  0x48(%rdi), %r8
    // 88: 4e 8d 44 c2 50                leaq    0x50(%rdx,%r8,8), %r8
    // 8d: 4c 89 42 40                   movq    %r8, 0x40(%rdx)
    // 91: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 99: 4c 8d 87 d0 00 00 00          leaq    0xd0(%rdi), %r8
    // a0: 4c 89 42 38                   movq    %r8, 0x38(%rdx)
    // a4: c7 42 48 00 00 00 00          movl    $0x0, 0x48(%rdx)
    // ab: 39 5f 48                      cmpl    %ebx, 0x48(%rdi)
    // ae: 7e 24                         jle     0xd4 <_JIT_ENTRY+0xd4>
    // b0: 41 89 d8                      movl    %ebx, %r8d
    // b3: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // c0: 4b c7 04 c1 00 00 00 00       movq    $0x0, (%r9,%r8,8)
    // c8: 49 ff c0                      incq    %r8
    // cb: 4c 63 5f 48                   movslq  0x48(%rdi), %r11
    // cf: 4d 39 d8                      cmpq    %r11, %r8
    // d2: 7c ec                         jl      0xc0 <_JIT_ENTRY+0xc0>
    // d4: 45 31 c0                      xorl    %r8d, %r8d
    // d7: 4d 85 d2                      testq   %r10, %r10
    // da: 0f 95 c3                      setne   %bl
    // dd: 48 8b 38                      movq    (%rax), %rdi
    // e0: 49 89 39                      movq    %rdi, (%r9)
    // e3: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xea <_JIT_ENTRY+0xea>
    // 00000000000000e6:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // ea: 66 85 ff                      testw   %di, %di
    // ed: 0f 84 15 01 00 00             je      0x208 <_JIT_ENTRY+0x208>
    // f3: 41 88 d8                      movb    %bl, %r8b
    // f6: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xfd <_JIT_ENTRY+0xfd>
    // 00000000000000f9:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // fd: 0f b7 ff                      movzwl  %di, %edi
    // 100: 66 83 ff 11                   cmpw    $0x11, %di
    // 104: 76 2a                         jbe     0x130 <_JIT_ENTRY+0x130>
    // 106: 45 31 db                      xorl    %r11d, %r11d
    // 109: 4d 85 d2                      testq   %r10, %r10
    // 10c: 41 0f 95 c3                   setne   %r11b
    // 110: 4e 8d 14 da                   leaq    (%rdx,%r11,8), %r10
    // 114: 44 8d 3c fd 00 00 00 00       leal    (,%rdi,8), %r15d
    // 11c: 4d 01 fa                      addq    %r15, %r10
    // 11f: 4d 29 ea                      subq    %r13, %r10
    // 122: 49 83 c2 50                   addq    $0x50, %r10
    // 126: 49 83 fa 20                   cmpq    $0x20, %r10
    // 12a: 0f 83 91 00 00 00             jae     0x1c1 <_JIT_ENTRY+0x1c1>
    // 130: 45 31 d2                      xorl    %r10d, %r10d
    // 133: 48 89 fb                      movq    %rdi, %rbx
    // 136: 4d 89 d3                      movq    %r10, %r11
    // 139: 48 83 e3 03                   andq    $0x3, %rbx
    // 13d: 74 21                         je      0x160 <_JIT_ENTRY+0x160>
    // 13f: c1 e6 03                      shll    $0x3, %esi
    // 142: 4d 89 ef                      movq    %r13, %r15
    // 145: 49 29 f7                      subq    %rsi, %r15
    // 148: 4b 8d 34 c1                   leaq    (%r9,%r8,8), %rsi
    // 14c: 4d 89 d3                      movq    %r10, %r11
    // 14f: 90                            nop
    // 150: 4f 8b 0c df                   movq    (%r15,%r11,8), %r9
    // 154: 4e 89 0c de                   movq    %r9, (%rsi,%r11,8)
    // 158: 49 ff c3                      incq    %r11
    // 15b: 48 ff cb                      decq    %rbx
    // 15e: 75 f0                         jne     0x150 <_JIT_ENTRY+0x150>
    // 160: 49 29 fa                      subq    %rdi, %r10
    // 163: 49 83 fa fc                   cmpq    $-0x4, %r10
    // 167: 0f 87 9b 00 00 00             ja      0x208 <_JIT_ENTRY+0x208>
    // 16d: 44 8d 0c fd 00 00 00 00       leal    (,%rdi,8), %r9d
    // 175: 4c 89 ee                      movq    %r13, %rsi
    // 178: 4c 29 ce                      subq    %r9, %rsi
    // 17b: 48 83 c6 18                   addq    $0x18, %rsi
    // 17f: 4e 8d 04 c2                   leaq    (%rdx,%r8,8), %r8
    // 183: 49 83 c0 68                   addq    $0x68, %r8
    // 187: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // 190: 4e 8b 4c de e8                movq    -0x18(%rsi,%r11,8), %r9
    // 195: 4f 89 4c d8 e8                movq    %r9, -0x18(%r8,%r11,8)
    // 19a: 4e 8b 4c de f0                movq    -0x10(%rsi,%r11,8), %r9
    // 19f: 4f 89 4c d8 f0                movq    %r9, -0x10(%r8,%r11,8)
    // 1a4: 4e 8b 4c de f8                movq    -0x8(%rsi,%r11,8), %r9
    // 1a9: 4f 89 4c d8 f8                movq    %r9, -0x8(%r8,%r11,8)
    // 1ae: 4e 8b 0c de                   movq    (%rsi,%r11,8), %r9
    // 1b2: 4f 89 0c d8                   movq    %r9, (%r8,%r11,8)
    // 1b6: 49 83 c3 04                   addq    $0x4, %r11
    // 1ba: 4c 39 df                      cmpq    %r11, %rdi
    // 1bd: 75 d1                         jne     0x190 <_JIT_ENTRY+0x190>
    // 1bf: eb 47                         jmp     0x208 <_JIT_ENTRY+0x208>
    // 1c1: 41 89 fa                      movl    %edi, %r10d
    // 1c4: 41 83 e2 fc                   andl    $-0x4, %r10d
    // 1c8: 4e 8d 1c c2                   leaq    (%rdx,%r8,8), %r11
    // 1cc: 49 83 c3 60                   addq    $0x60, %r11
    // 1d0: 4c 89 eb                      movq    %r13, %rbx
    // 1d3: 4c 29 fb                      subq    %r15, %rbx
    // 1d6: 48 83 c3 10                   addq    $0x10, %rbx
    // 1da: 45 31 ff                      xorl    %r15d, %r15d
    // 1dd: 0f 1f 00                      nopl    (%rax)
    // 1e0: 42 0f 10 44 fb f0             movups  -0x10(%rbx,%r15,8), %xmm0
    // 1e6: 42 0f 10 0c fb                movups  (%rbx,%r15,8), %xmm1
    // 1eb: 43 0f 11 44 fb f0             movups  %xmm0, -0x10(%r11,%r15,8)
    // 1f1: 43 0f 11 0c fb                movups  %xmm1, (%r11,%r15,8)
    // 1f6: 49 83 c7 04                   addq    $0x4, %r15
    // 1fa: 4d 39 fa                      cmpq    %r15, %r10
    // 1fd: 75 e1                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
    // 1ff: 41 39 fa                      cmpl    %edi, %r10d
    // 202: 0f 85 2b ff ff ff             jne     0x133 <_JIT_ENTRY+0x133>
    // 208: 49 89 54 cd 00                movq    %rdx, (%r13,%rcx,8)
    // 20d: 49 89 c5                      movq    %rax, %r13
    // 210: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x217 <_JIT_ENTRY+0x217>
    // 0000000000000213:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[528] = {
        0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0xf7, 0xd0, 0x48, 0x98, 0xb9, 0xfe, 0xff,
        0xff, 0xff, 0x29, 0xf1, 0x48, 0x63, 0xc9, 0x4d,
        0x8b, 0x54, 0xc5, 0x00, 0x49, 0x83, 0xfa, 0x01,
        0x89, 0xf3, 0x83, 0xdb, 0xff, 0x4d, 0x8b, 0x44,
        0xcd, 0x00, 0x49, 0x8b, 0x78, 0x30, 0x49, 0x8b,
        0x96, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x4f,
        0x4c, 0x4e, 0x8d, 0x0c, 0xca, 0x4d, 0x89, 0x8e,
        0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x62, 0x08,
        0x4c, 0x89, 0x42, 0x10, 0x44, 0x8b, 0x0f, 0x45,
        0x85, 0xc9, 0x78, 0x06, 0x41, 0xff, 0xc1, 0x44,
        0x89, 0x0f, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x01, 0xe8, 0x48, 0x89, 0x3a,
        0x4d, 0x8b, 0x48, 0x18, 0x4c, 0x89, 0x4a, 0x20,
        0x4d, 0x8b, 0x40, 0x10, 0x4c, 0x89, 0x42, 0x18,
        0x48, 0xc7, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x8d, 0x4a, 0x50, 0x4c, 0x63, 0x47, 0x48,
        0x4e, 0x8d, 0x44, 0xc2, 0x50, 0x4c, 0x89, 0x42,
        0x40, 0x48, 0xc7, 0x42, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x87, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x42, 0x38, 0xc7, 0x42, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x39, 0x5f, 0x48, 0x7e, 0x24,
        0x41, 0x89, 0xd8, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0xc7, 0x04, 0xc1, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc0, 0x4c, 0x63, 0x5f, 0x48, 0x4d,
        0x39, 0xd8, 0x7c, 0xec, 0x45, 0x31, 0xc0, 0x4d,
        0x85, 0xd2, 0x0f, 0x95, 0xc3, 0x48, 0x8b, 0x38,
        0x49, 0x89, 0x39, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x85, 0xff, 0x0f, 0x84, 0x15,
        0x01, 0x00, 0x00, 0x41, 0x88, 0xd8, 0x48, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xff,
        0x66, 0x83, 0xff, 0x11, 0x76, 0x2a, 0x45, 0x31,
        0xdb, 0x4d, 0x85, 0xd2, 0x41, 0x0f, 0x95, 0xc3,
        0x4e, 0x8d, 0x14, 0xda, 0x44, 0x8d, 0x3c, 0xfd,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x01, 0xfa, 0x4d,
        0x29, 0xea, 0x49, 0x83, 0xc2, 0x50, 0x49, 0x83,
        0xfa, 0x20, 0x0f, 0x83, 0x91, 0x00, 0x00, 0x00,
        0x45, 0x31, 0xd2, 0x48, 0x89, 0xfb, 0x4d, 0x89,
        0xd3, 0x48, 0x83, 0xe3, 0x03, 0x74, 0x21, 0xc1,
        0xe6, 0x03, 0x4d, 0x89, 0xef, 0x49, 0x29, 0xf7,
        0x4b, 0x8d, 0x34, 0xc1, 0x4d, 0x89, 0xd3, 0x90,
        0x4f, 0x8b, 0x0c, 0xdf, 0x4e, 0x89, 0x0c, 0xde,
        0x49, 0xff, 0xc3, 0x48, 0xff, 0xcb, 0x75, 0xf0,
        0x49, 0x29, 0xfa, 0x49, 0x83, 0xfa, 0xfc, 0x0f,
        0x87, 0x9b, 0x00, 0x00, 0x00, 0x44, 0x8d, 0x0c,
        0xfd, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee,
        0x4c, 0x29, 0xce, 0x48, 0x83, 0xc6, 0x18, 0x4e,
        0x8d, 0x04, 0xc2, 0x49, 0x83, 0xc0, 0x68, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x8b, 0x4c, 0xde, 0xe8, 0x4f, 0x89, 0x4c,
        0xd8, 0xe8, 0x4e, 0x8b, 0x4c, 0xde, 0xf0, 0x4f,
        0x89, 0x4c, 0xd8, 0xf0, 0x4e, 0x8b, 0x4c, 0xde,
        0xf8, 0x4f, 0x89, 0x4c, 0xd8, 0xf8, 0x4e, 0x8b,
        0x0c, 0xde, 0x4f, 0x89, 0x0c, 0xd8, 0x49, 0x83,
        0xc3, 0x04, 0x4c, 0x39, 0xdf, 0x75, 0xd1, 0xeb,
        0x47, 0x41, 0x89, 0xfa, 0x41, 0x83, 0xe2, 0xfc,
        0x4e, 0x8d, 0x1c, 0xc2, 0x49, 0x83, 0xc3, 0x60,
        0x4c, 0x89, 0xeb, 0x4c, 0x29, 0xfb, 0x48, 0x83,
        0xc3, 0x10, 0x45, 0x31, 0xff, 0x0f, 0x1f, 0x00,
        0x42, 0x0f, 0x10, 0x44, 0xfb, 0xf0, 0x42, 0x0f,
        0x10, 0x0c, 0xfb, 0x43, 0x0f, 0x11, 0x44, 0xfb,
        0xf0, 0x43, 0x0f, 0x11, 0x0c, 0xfb, 0x49, 0x83,
        0xc7, 0x04, 0x4d, 0x39, 0xfa, 0x75, 0xe1, 0x41,
        0x39, 0xfa, 0x0f, 0x85, 0x2b, 0xff, 0xff, 0xff,
        0x49, 0x89, 0x54, 0xcd, 0x00, 0x49, 0x89, 0xc5,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xe6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf9, (uintptr_t)data + -0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_0.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4d 8b 45 f0                   movq    -0x10(%r13), %r8
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 31 ff                         xorl    %edi, %edi
    // a: 48 85 f6                      testq   %rsi, %rsi
    // d: 40 0f 95 c7                   setne   %dil
    // 11: 49 8b 50 30                   movq    0x30(%r8), %rdx
    // 15: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 1c: 48 63 42 4c                   movslq  0x4c(%rdx), %rax
    // 20: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 24: 49 89 86 e8 00 00 00          movq    %rax, 0xe8(%r14)
    // 2b: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 2f: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 33: 8b 02                         movl    (%rdx), %eax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 04                         js      0x3d <_JIT_ENTRY+0x3d>
    // 39: ff c0                         incl    %eax
    // 3b: 89 02                         movl    %eax, (%rdx)
    // 3d: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 41: 48 89 11                      movq    %rdx, (%rcx)
    // 44: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 48: 4c 89 49 20                   movq    %r9, 0x20(%rcx)
    // 4c: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 50: 4c 89 41 18                   movq    %r8, 0x18(%rcx)
    // 54: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5c: 4c 63 42 48                   movslq  0x48(%rdx), %r8
    // 60: 4e 8d 44 c1 50                leaq    0x50(%rcx,%r8,8), %r8
    // 65: 4c 89 41 40                   movq    %r8, 0x40(%rcx)
    // 69: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 71: 4c 8d 82 d0 00 00 00          leaq    0xd0(%rdx), %r8
    // 78: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 7c: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 83: 39 7a 48                      cmpl    %edi, 0x48(%rdx)
    // 86: 7e 2c                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 88: 48 8d 79 50                   leaq    0x50(%rcx), %rdi
    // 8c: 45 31 c0                      xorl    %r8d, %r8d
    // 8f: 48 85 f6                      testq   %rsi, %rsi
    // 92: 41 0f 95 c0                   setne   %r8b
    // 96: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
    // a0: 4a c7 04 c7 00 00 00 00       movq    $0x0, (%rdi,%r8,8)
    // a8: 49 ff c0                      incq    %r8
    // ab: 48 63 72 48                   movslq  0x48(%rdx), %rsi
    // af: 49 39 f0                      cmpq    %rsi, %r8
    // b2: 7c ec                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // b4: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // b8: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // bc: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // c0: 49 89 c5                      movq    %rax, %r13
    // c3: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xca <_JIT_ENTRY+0xca>
    // 00000000000000c6:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[195] = {
        0x4d, 0x8b, 0x45, 0xf0, 0x49, 0x8b, 0x75, 0xf8,
        0x31, 0xff, 0x48, 0x85, 0xf6, 0x40, 0x0f, 0x95,
        0xc7, 0x49, 0x8b, 0x50, 0x30, 0x49, 0x8b, 0x8e,
        0xe8, 0x00, 0x00, 0x00, 0x48, 0x63, 0x42, 0x4c,
        0x48, 0x8d, 0x04, 0xc1, 0x49, 0x89, 0x86, 0xe8,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x61, 0x08, 0x4c,
        0x89, 0x41, 0x10, 0x8b, 0x02, 0x85, 0xc0, 0x78,
        0x04, 0xff, 0xc0, 0x89, 0x02, 0x49, 0x8d, 0x45,
        0xf8, 0x48, 0x89, 0x11, 0x4d, 0x8b, 0x48, 0x18,
        0x4c, 0x89, 0x49, 0x20, 0x4d, 0x8b, 0x40, 0x10,
        0x4c, 0x89, 0x41, 0x18, 0x48, 0xc7, 0x41, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x63, 0x42, 0x48,
        0x4e, 0x8d, 0x44, 0xc1, 0x50, 0x4c, 0x89, 0x41,
        0x40, 0x48, 0xc7, 0x41, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x82, 0xd0, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x41, 0x38, 0xc7, 0x41, 0x48, 0x00,
        0x00, 0x00, 0x00, 0x39, 0x7a, 0x48, 0x7e, 0x2c,
        0x48, 0x8d, 0x79, 0x50, 0x45, 0x31, 0xc0, 0x48,
        0x85, 0xf6, 0x41, 0x0f, 0x95, 0xc0, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4a, 0xc7, 0x04, 0xc7, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc0, 0x48, 0x63, 0x72, 0x48, 0x49,
        0x39, 0xf0, 0x7c, 0xec, 0x49, 0x8b, 0x55, 0xf8,
        0x48, 0x89, 0x51, 0x50, 0x49, 0x89, 0x4d, 0xf0,
        0x49, 0x89, 0xc5,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_1.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4d 8b 45 e8                   movq    -0x18(%r13), %r8
    // 4: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 01 00 00 00                movl    $0x1, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 e8 00 00 00          movq    %rax, 0xe8(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <_JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 49 8d 45 f0                   leaq    -0x10(%r13), %rax
    // 44: 48 89 31                      movq    %rsi, (%rcx)
    // 47: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 4b: 4c 89 49 20                   movq    %r9, 0x20(%rcx)
    // 4f: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 53: 4c 89 41 18                   movq    %r8, 0x18(%rcx)
    // 57: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5f: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 63: 4e 8d 44 c1 50                leaq    0x50(%rcx,%r8,8), %r8
    // 68: 4c 89 41 40                   movq    %r8, 0x40(%rcx)
    // 6c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 74: 4c 8d 86 d0 00 00 00          leaq    0xd0(%rsi), %r8
    // 7b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 7f: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 86: 39 7e 48                      cmpl    %edi, 0x48(%rsi)
    // 89: 7e 29                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 8b: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8f: 89 ff                         movl    %edi, %edi
    // 91: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // a0: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // a8: 48 ff c7                      incq    %rdi
    // ab: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // af: 4c 39 cf                      cmpq    %r9, %rdi
    // b2: 7c ec                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // b4: 31 f6                         xorl    %esi, %esi
    // b6: 48 85 d2                      testq   %rdx, %rdx
    // b9: 40 0f 95 c6                   setne   %sil
    // bd: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // c1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // c5: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // ce: 49 89 4d e8                   movq    %rcx, -0x18(%r13)
    // d2: 49 89 c5                      movq    %rax, %r13
    // d5: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000d8:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[213] = {
        0x4d, 0x8b, 0x45, 0xe8, 0x49, 0x8b, 0x55, 0xf0,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x01, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x49, 0x8d, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d,
        0x8b, 0x48, 0x18, 0x4c, 0x89, 0x49, 0x20, 0x4d,
        0x8b, 0x40, 0x10, 0x4c, 0x89, 0x41, 0x18, 0x48,
        0xc7, 0x41, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x63, 0x46, 0x48, 0x4e, 0x8d, 0x44, 0xc1, 0x50,
        0x4c, 0x89, 0x41, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0xd0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0xc7,
        0x41, 0x48, 0x00, 0x00, 0x00, 0x00, 0x39, 0x7e,
        0x48, 0x7e, 0x29, 0x4c, 0x8d, 0x41, 0x50, 0x89,
        0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xf0, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xf8, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x89,
        0x4d, 0xe8, 0x49, 0x89, 0xc5,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_2.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4d 8b 45 e0                   movq    -0x20(%r13), %r8
    // 4: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 02 00 00 00                movl    $0x2, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 e8 00 00 00          movq    %rax, 0xe8(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <_JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 49 8d 45 e8                   leaq    -0x18(%r13), %rax
    // 44: 48 89 31                      movq    %rsi, (%rcx)
    // 47: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 4b: 4c 89 49 20                   movq    %r9, 0x20(%rcx)
    // 4f: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 53: 4c 89 41 18                   movq    %r8, 0x18(%rcx)
    // 57: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5f: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 63: 4e 8d 44 c1 50                leaq    0x50(%rcx,%r8,8), %r8
    // 68: 4c 89 41 40                   movq    %r8, 0x40(%rcx)
    // 6c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 74: 4c 8d 86 d0 00 00 00          leaq    0xd0(%rsi), %r8
    // 7b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 7f: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 86: 39 7e 48                      cmpl    %edi, 0x48(%rsi)
    // 89: 7e 29                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 8b: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8f: 89 ff                         movl    %edi, %edi
    // 91: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // a0: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // a8: 48 ff c7                      incq    %rdi
    // ab: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // af: 4c 39 cf                      cmpq    %r9, %rdi
    // b2: 7c ec                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // b4: 31 f6                         xorl    %esi, %esi
    // b6: 48 85 d2                      testq   %rdx, %rdx
    // b9: 40 0f 95 c6                   setne   %sil
    // bd: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // c1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // c5: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // c9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // ce: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // d2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // d7: 49 89 4d e0                   movq    %rcx, -0x20(%r13)
    // db: 49 89 c5                      movq    %rax, %r13
    // de: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe5 <_JIT_ENTRY+0xe5>
    // 00000000000000e1:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[222] = {
        0x4d, 0x8b, 0x45, 0xe0, 0x49, 0x8b, 0x55, 0xe8,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x02, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x49, 0x8d, 0x45, 0xe8, 0x48, 0x89, 0x31, 0x4d,
        0x8b, 0x48, 0x18, 0x4c, 0x89, 0x49, 0x20, 0x4d,
        0x8b, 0x40, 0x10, 0x4c, 0x89, 0x41, 0x18, 0x48,
        0xc7, 0x41, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x63, 0x46, 0x48, 0x4e, 0x8d, 0x44, 0xc1, 0x50,
        0x4c, 0x89, 0x41, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0xd0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0xc7,
        0x41, 0x48, 0x00, 0x00, 0x00, 0x00, 0x39, 0x7e,
        0x48, 0x7e, 0x29, 0x4c, 0x8d, 0x41, 0x50, 0x89,
        0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xe8, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xf0, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x89, 0x4d, 0xe0, 0x49, 0x89, 0xc5,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_3.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4d 8b 45 d8                   movq    -0x28(%r13), %r8
    // 4: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 03 00 00 00                movl    $0x3, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 e8 00 00 00          movq    %rax, 0xe8(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <_JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 49 8d 45 e0                   leaq    -0x20(%r13), %rax
    // 44: 48 89 31                      movq    %rsi, (%rcx)
    // 47: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 4b: 4c 89 49 20                   movq    %r9, 0x20(%rcx)
    // 4f: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 53: 4c 89 41 18                   movq    %r8, 0x18(%rcx)
    // 57: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5f: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 63: 4e 8d 44 c1 50                leaq    0x50(%rcx,%r8,8), %r8
    // 68: 4c 89 41 40                   movq    %r8, 0x40(%rcx)
    // 6c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 74: 4c 8d 86 d0 00 00 00          leaq    0xd0(%rsi), %r8
    // 7b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 7f: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 86: 39 7e 48                      cmpl    %edi, 0x48(%rsi)
    // 89: 7e 29                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 8b: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8f: 89 ff                         movl    %edi, %edi
    // 91: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // a0: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // a8: 48 ff c7                      incq    %rdi
    // ab: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // af: 4c 39 cf                      cmpq    %r9, %rdi
    // b2: 7c ec                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // b4: 31 f6                         xorl    %esi, %esi
    // b6: 48 85 d2                      testq   %rdx, %rdx
    // b9: 40 0f 95 c6                   setne   %sil
    // bd: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // c1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // c5: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // c9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // ce: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // d2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // d7: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // db: 48 89 54 f1 60                movq    %rdx, 0x60(%rcx,%rsi,8)
    // e0: 49 89 4d d8                   movq    %rcx, -0x28(%r13)
    // e4: 49 89 c5                      movq    %rax, %r13
    // e7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xee <_JIT_ENTRY+0xee>
    // 00000000000000ea:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[231] = {
        0x4d, 0x8b, 0x45, 0xd8, 0x49, 0x8b, 0x55, 0xe0,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x03, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x49, 0x8d, 0x45, 0xe0, 0x48, 0x89, 0x31, 0x4d,
        0x8b, 0x48, 0x18, 0x4c, 0x89, 0x49, 0x20, 0x4d,
        0x8b, 0x40, 0x10, 0x4c, 0x89, 0x41, 0x18, 0x48,
        0xc7, 0x41, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x63, 0x46, 0x48, 0x4e, 0x8d, 0x44, 0xc1, 0x50,
        0x4c, 0x89, 0x41, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0xd0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0xc7,
        0x41, 0x48, 0x00, 0x00, 0x00, 0x00, 0x39, 0x7e,
        0x48, 0x7e, 0x29, 0x4c, 0x8d, 0x41, 0x50, 0x89,
        0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xe0, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xe8, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1, 0x60,
        0x49, 0x89, 0x4d, 0xd8, 0x49, 0x89, 0xc5,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INIT_CALL_PY_EXACT_ARGS_4.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4d 8b 45 d0                   movq    -0x30(%r13), %r8
    // 4: 49 8b 55 d8                   movq    -0x28(%r13), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 04 00 00 00                movl    $0x4, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 49 8b 70 30                   movq    0x30(%r8), %rsi
    // 18: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 1f: 48 63 46 4c                   movslq  0x4c(%rsi), %rax
    // 23: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 27: 49 89 86 e8 00 00 00          movq    %rax, 0xe8(%r14)
    // 2e: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 32: 4c 89 41 10                   movq    %r8, 0x10(%rcx)
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <_JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 49 8d 45 d8                   leaq    -0x28(%r13), %rax
    // 44: 48 89 31                      movq    %rsi, (%rcx)
    // 47: 4d 8b 48 18                   movq    0x18(%r8), %r9
    // 4b: 4c 89 49 20                   movq    %r9, 0x20(%rcx)
    // 4f: 4d 8b 40 10                   movq    0x10(%r8), %r8
    // 53: 4c 89 41 18                   movq    %r8, 0x18(%rcx)
    // 57: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 5f: 4c 63 46 48                   movslq  0x48(%rsi), %r8
    // 63: 4e 8d 44 c1 50                leaq    0x50(%rcx,%r8,8), %r8
    // 68: 4c 89 41 40                   movq    %r8, 0x40(%rcx)
    // 6c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 74: 4c 8d 86 d0 00 00 00          leaq    0xd0(%rsi), %r8
    // 7b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 7f: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // 86: 39 7e 48                      cmpl    %edi, 0x48(%rsi)
    // 89: 7e 29                         jle     0xb4 <_JIT_ENTRY+0xb4>
    // 8b: 4c 8d 41 50                   leaq    0x50(%rcx), %r8
    // 8f: 89 ff                         movl    %edi, %edi
    // 91: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // a0: 49 c7 04 f8 00 00 00 00       movq    $0x0, (%r8,%rdi,8)
    // a8: 48 ff c7                      incq    %rdi
    // ab: 4c 63 4e 48                   movslq  0x48(%rsi), %r9
    // af: 4c 39 cf                      cmpq    %r9, %rdi
    // b2: 7c ec                         jl      0xa0 <_JIT_ENTRY+0xa0>
    // b4: 31 f6                         xorl    %esi, %esi
    // b6: 48 85 d2                      testq   %rdx, %rdx
    // b9: 40 0f 95 c6                   setne   %sil
    // bd: 49 8b 55 d8                   movq    -0x28(%r13), %rdx
    // c1: 48 89 51 50                   movq    %rdx, 0x50(%rcx)
    // c5: 49 8b 55 e0                   movq    -0x20(%r13), %rdx
    // c9: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // ce: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // d2: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // d7: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // db: 48 89 54 f1 60                movq    %rdx, 0x60(%rcx,%rsi,8)
    // e0: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // e4: 48 89 54 f1 68                movq    %rdx, 0x68(%rcx,%rsi,8)
    // e9: 49 89 4d d0                   movq    %rcx, -0x30(%r13)
    // ed: 49 89 c5                      movq    %rax, %r13
    // f0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf7 <_JIT_ENTRY+0xf7>
    // 00000000000000f3:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[240] = {
        0x4d, 0x8b, 0x45, 0xd0, 0x49, 0x8b, 0x55, 0xd8,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x04, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x49, 0x8b, 0x70, 0x30,
        0x49, 0x8b, 0x8e, 0xe8, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x46, 0x4c, 0x48, 0x8d, 0x04, 0xc1, 0x49,
        0x89, 0x86, 0xe8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x61, 0x08, 0x4c, 0x89, 0x41, 0x10, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x06,
        0x49, 0x8d, 0x45, 0xd8, 0x48, 0x89, 0x31, 0x4d,
        0x8b, 0x48, 0x18, 0x4c, 0x89, 0x49, 0x20, 0x4d,
        0x8b, 0x40, 0x10, 0x4c, 0x89, 0x41, 0x18, 0x48,
        0xc7, 0x41, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x63, 0x46, 0x48, 0x4e, 0x8d, 0x44, 0xc1, 0x50,
        0x4c, 0x89, 0x41, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x86, 0xd0,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0xc7,
        0x41, 0x48, 0x00, 0x00, 0x00, 0x00, 0x39, 0x7e,
        0x48, 0x7e, 0x29, 0x4c, 0x8d, 0x41, 0x50, 0x89,
        0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xc7, 0x04, 0xf8, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xc7, 0x4c, 0x63, 0x4e, 0x48, 0x4c,
        0x39, 0xcf, 0x7c, 0xec, 0x31, 0xf6, 0x48, 0x85,
        0xd2, 0x40, 0x0f, 0x95, 0xc6, 0x49, 0x8b, 0x55,
        0xd8, 0x48, 0x89, 0x51, 0x50, 0x49, 0x8b, 0x55,
        0xe0, 0x48, 0x89, 0x54, 0xf1, 0x50, 0x49, 0x8b,
        0x55, 0xe8, 0x48, 0x89, 0x54, 0xf1, 0x58, 0x49,
        0x8b, 0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1, 0x60,
        0x49, 0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1,
        0x68, 0x49, 0x89, 0x4d, 0xd0, 0x49, 0x89, 0xc5,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INTERNAL_INCREMENT_OPT_COUNTER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _INTERNAL_INCREMENT_OPT_COUNTER.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 ff 40 18                   incq    0x18(%rax)
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[12] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0xff, 0x40, 0x18,
        0x49, 0x83, 0xc5, 0xf8,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_NONE.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // f: 74 22                         je      0x33 <_JIT_ENTRY+0x33>
    // 11: 8b 01                         movl    (%rcx), %eax
    // 13: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 06                         js      0x24 <_JIT_ENTRY+0x24>
    // 1e: ff c8                         decl    %eax
    // 20: 89 01                         movl    %eax, (%rcx)
    // 22: 74 25                         je      0x49 <_JIT_ENTRY+0x49>
    // 24: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 28: 48 83 c4 28                   addq    $0x28, %rsp
    // 2c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 33: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 3a: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 3e: 48 83 c4 28                   addq    $0x28, %rsp
    // 42: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4f: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 53: 48 83 c4 28                   addq    $0x28, %rsp
    // 57: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[87] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x22, 0x8b, 0x01, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x25, 0x49, 0x89, 0x75, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x1c);
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _IS_OP.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 8: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // c: 8b 06                         movl    (%rsi), %eax
    // e: 85 c0                         testl   %eax, %eax
    // 10: 78 0f                         js      0x21 <_JIT_ENTRY+0x21>
    // 12: ff c8                         decl    %eax
    // 14: 89 06                         movl    %eax, (%rsi)
    // 16: 75 09                         jne     0x21 <_JIT_ENTRY+0x21>
    // 18: 48 89 f1                      movq    %rsi, %rcx
    // 1b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 21: 8b 07                         movl    (%rdi), %eax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 0f                         js      0x36 <_JIT_ENTRY+0x36>
    // 27: ff c8                         decl    %eax
    // 29: 89 07                         movl    %eax, (%rdi)
    // 2b: 75 09                         jne     0x36 <_JIT_ENTRY+0x36>
    // 2d: 48 89 f9                      movq    %rdi, %rcx
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 36: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 3a: 31 c9                         xorl    %ecx, %ecx
    // 3c: 48 39 fe                      cmpq    %rdi, %rsi
    // 3f: 0f 94 c1                      sete    %cl
    // 42: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 49: 66 39 d1                      cmpw    %dx, %cx
    // 4c: 75 19                         jne     0x67 <_JIT_ENTRY+0x67>
    // 4e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 55: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 59: 49 89 c5                      movq    %rax, %r13
    // 5c: 48 83 c4 28                   addq    $0x28, %rsp
    // 60: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 67: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 6e: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
    // 72: 49 89 c5                      movq    %rax, %r13
    // 75: 48 83 c4 28                   addq    $0x28, %rsp
    // 79: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[121] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf0,
        0x49, 0x8b, 0x7d, 0xf8, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x0f, 0xff, 0xc8, 0x89, 0x06, 0x75, 0x09,
        0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x07, 0x75, 0x09, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d,
        0x45, 0xf8, 0x31, 0xc9, 0x48, 0x39, 0xfe, 0x0f,
        0x94, 0xc1, 0x48, 0x8b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x39, 0xd1, 0x75, 0x19, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d,
        0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x4d, 0xf0, 0x49, 0x89, 0xc5, 0x48, 0x83, 0xc4,
        0x28,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x1c);
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_LIST.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyListIter_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyListIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_RANGE.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyRangeIter_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyRangeIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_CHECK_TUPLE.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyTupleIter_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTupleIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_LIST.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 8: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // c: 48 8b 52 18                   movq    0x18(%rdx), %rdx
    // 10: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 14: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 18: 48 8b 04 ca                   movq    (%rdx,%rcx,8), %rax
    // 1c: 8b 08                         movl    (%rax), %ecx
    // 1e: 85 c9                         testl   %ecx, %ecx
    // 20: 78 04                         js      0x26 <_JIT_ENTRY+0x26>
    // 22: ff c1                         incl    %ecx
    // 24: 89 08                         movl    %ecx, (%rax)
    // 26: 49 89 45 00                   movq    %rax, (%r13)
    // 2a: 49 83 c5 08                   addq    $0x8, %r13
    // 2e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[46] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x10,
        0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18,
        0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10,
        0x48, 0x8b, 0x04, 0xca, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_RANGE.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 8b 48 10                      movl    0x10(%rax), %ecx
    // b: 8b 50 14                      movl    0x14(%rax), %edx
    // e: 01 ca                         addl    %ecx, %edx
    // 10: 89 50 10                      movl    %edx, 0x10(%rax)
    // 13: ff 48 18                      decl    0x18(%rax)
    // 16: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp_PyLong_FromLong
    // 1c: 48 85 c0                      testq   %rax, %rax
    // 1f: 74 13                         je      0x34 <_JIT_ENTRY+0x34>
    // 21: 49 89 45 00                   movq    %rax, (%r13)
    // 25: 49 83 c5 08                   addq    $0x8, %r13
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 34: 48 83 c4 28                   addq    $0x28, %rsp
    // 38: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x8b, 0x48, 0x10, 0x8b, 0x50, 0x14, 0x01, 0xca,
        0x89, 0x50, 0x10, 0xff, 0x48, 0x18, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x13, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_FromLong+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_FromLong);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _ITER_NEXT_TUPLE.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 8: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // c: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 10: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 14: 48 8b 44 ca 18                movq    0x18(%rdx,%rcx,8), %rax
    // 19: 8b 08                         movl    (%rax), %ecx
    // 1b: 85 c9                         testl   %ecx, %ecx
    // 1d: 78 04                         js      0x23 <_JIT_ENTRY+0x23>
    // 1f: ff c1                         incl    %ecx
    // 21: 89 08                         movl    %ecx, (%rax)
    // 23: 49 89 45 00                   movq    %rax, (%r13)
    // 27: 49 83 c5 08                   addq    $0x8, %r13
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[43] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x10,
        0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01,
        0x48, 0x89, 0x70, 0x10, 0x48, 0x8b, 0x44, 0xca,
        0x18, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _JUMP_TO_TOP.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[7] = {
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_APPEND.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: f7 d0                         notl    %eax
    // c: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 19: 49 8b 4c 05 00                movq    (%r13,%rax), %rcx
    // 1e: 48 8b 41 10                   movq    0x10(%rcx), %rax
    // 22: 48 39 41 20                   cmpq    %rax, 0x20(%rcx)
    // 26: 7e 1e                         jle     0x46 <_JIT_ENTRY+0x46>
    // 28: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 2c: 48 89 14 c6                   movq    %rdx, (%rsi,%rax,8)
    // 30: 48 ff c0                      incq    %rax
    // 33: 48 89 41 10                   movq    %rax, 0x10(%rcx)
    // 37: 49 83 c5 f8                   addq    $-0x8, %r13
    // 3b: 48 83 c4 28                   addq    $0x28, %rsp
    // 3f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 46: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  IMAGE_REL_AMD64_REL32        __imp__PyList_AppendTakeRefListResize
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 0f                         js      0x5f <_JIT_ENTRY+0x5f>
    // 50: 49 83 c5 f8                   addq    $-0x8, %r13
    // 54: 48 83 c4 28                   addq    $0x28, %rsp
    // 58: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5f: 48 83 c4 28                   addq    $0x28, %rsp
    // 63: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[106] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x55, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x4c, 0x05, 0x00, 0x48, 0x8b,
        0x41, 0x10, 0x48, 0x39, 0x41, 0x20, 0x7e, 0x1e,
        0x48, 0x8b, 0x71, 0x18, 0x48, 0x89, 0x14, 0xc6,
        0x48, 0xff, 0xc0, 0x48, 0x89, 0x41, 0x10, 0x49,
        0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x0f,
        0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyList_AppendTakeRefListResize+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x14);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LIST_EXTEND.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: f7 d0                         notl    %eax
    // c: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 19: 49 8b 4c 05 00                movq    (%r13,%rax), %rcx
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f2                      movq    %rsi, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__PyList_Extend
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 48 85 c0                      testq   %rax, %rax
    // 3d: 74 1f                         je      0x5e <_JIT_ENTRY+0x5e>
    // 3f: 8b 06                         movl    (%rsi), %eax
    // 41: 85 c0                         testl   %eax, %eax
    // 43: 78 0a                         js      0x4f <_JIT_ENTRY+0x4f>
    // 45: ff c8                         decl    %eax
    // 47: 89 06                         movl    %eax, (%rsi)
    // 49: 0f 84 a2 00 00 00             je      0xf1 <_JIT_ENTRY+0xf1>
    // 4f: 49 83 c5 f8                   addq    $-0x8, %r13
    // 53: 48 83 c4 28                   addq    $0x28, %rsp
    // 57: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 63: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 6a: 48 8b 17                      movq    (%rdi), %rdx
    // 6d: 4c 89 f1                      movq    %r14, %rcx
    // 70: ff 15 00 00 00 00             callq   *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  IMAGE_REL_AMD64_REL32        __imp__PyErr_ExceptionMatches
    // 76: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 7b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 84: 85 c0                         testl   %eax, %eax
    // 86: 74 52                         je      0xda <_JIT_ENTRY+0xda>
    // 88: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 8c: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
    // 94: 75 44                         jne     0xda <_JIT_ENTRY+0xda>
    // 96: 48 89 f1                      movq    %rsi, %rcx
    // 99: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  IMAGE_REL_AMD64_REL32        __imp_PySequence_Check
    // 9f: 85 c0                         testl   %eax, %eax
    // a1: 75 37                         jne     0xda <_JIT_ENTRY+0xda>
    // a3: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // a8: 4c 89 f1                      movq    %r14, %rcx
    // ab: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb1 <_JIT_ENTRY+0xb1>
    // 00000000000000ad:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Clear
    // b1: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // b5: 4c 8b 48 18                   movq    0x18(%rax), %r9
    // b9: 48 8b 17                      movq    (%rdi), %rdx
    // bc: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0xc3 <_JIT_ENTRY+0xc3>
    // 00000000000000bf:  IMAGE_REL_AMD64_REL32        ??_C@_0CO@OBBMLOHJ@Value?5after?5?$CK?5must?5be?5an?5iterabl@
    // c3: 4c 89 f1                      movq    %r14, %rcx
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // cc: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // d1: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // da: 8b 06                         movl    (%rsi), %eax
    // dc: 85 c0                         testl   %eax, %eax
    // de: 78 06                         js      0xe6 <_JIT_ENTRY+0xe6>
    // e0: ff c8                         decl    %eax
    // e2: 89 06                         movl    %eax, (%rsi)
    // e4: 74 23                         je      0x109 <_JIT_ENTRY+0x109>
    // e6: 48 83 c4 28                   addq    $0x28, %rsp
    // ea: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf1 <_JIT_ENTRY+0xf1>
    // 00000000000000ed:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // f1: 48 89 f1                      movq    %rsi, %rcx
    // f4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xfa <_JIT_ENTRY+0xfa>
    // 00000000000000f6:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // fa: 49 83 c5 f8                   addq    $-0x8, %r13
    // fe: 48 83 c4 28                   addq    $0x28, %rsp
    // 102: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x109 <_JIT_ENTRY+0x109>
    // 0000000000000105:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 109: 48 89 f1                      movq    %rsi, %rcx
    // 10c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x112 <_JIT_ENTRY+0x112>
    // 000000000000010e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 112: 48 83 c4 28                   addq    $0x28, %rsp
    // 116: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x11d <_JIT_ENTRY+0x11d>
    // 0000000000000119:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[285] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x75, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x4c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x1f, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89,
        0x06, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x17, 0x4c, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x52,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x83, 0xb8, 0xd8,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x44, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x75, 0x37, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x46, 0x08, 0x4c, 0x8b, 0x48,
        0x18, 0x48, 0x8b, 0x17, 0x4c, 0x8d, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x06, 0x74, 0x23, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: OPARG
    // 38: &_PyList_Extend+0x0
    // 40: CONTINUE
    // 48: &PyExc_TypeError+0x0
    // 50: &_PyErr_ExceptionMatches+0x0
    // 58: &PySequence_Check+0x0
    // 60: &_PyErr_Clear+0x0
    // 68: &_PyErr_Format+0x0
    // 70: ERROR_TARGET
    // 78: &_Py_Dealloc+0x0
    const unsigned char data_body[128] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, instruction->oparg);
    patch_64(data + 0x38, (uintptr_t)&_PyList_Extend);
    patch_64(data + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x48, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x58, (uintptr_t)&PySequence_Check);
    patch_64(data + 0x60, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x70, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x78, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xbf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xed, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0xf6, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0x105, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x10e, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0x119, (uintptr_t)data + 0x6c);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 3d 00 00 00 00             movl    (%rip), %edi            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // e: 49 8b 04 24                   movq    (%r12), %rax
    // 12: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 16: 89 f9                         movl    %edi, %ecx
    // 18: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
    // 1e: 48 8b 54 88 18                movq    0x18(%rax,%rcx,4), %rdx
    // 23: 83 e7 01                      andl    $0x1, %edi
    // 26: 75 4b                         jne     0x73 <_JIT_ENTRY+0x73>
    // 28: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2d: 48 89 f1                      movq    %rsi, %rcx
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GetAttr
    // 36: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 44: 8b 0e                         movl    (%rsi), %ecx
    // 46: 85 c9                         testl   %ecx, %ecx
    // 48: 78 0a                         js      0x54 <_JIT_ENTRY+0x54>
    // 4a: ff c9                         decl    %ecx
    // 4c: 89 0e                         movl    %ecx, (%rsi)
    // 4e: 0f 84 8f 00 00 00             je      0xe3 <_JIT_ENTRY+0xe3>
    // 54: 48 85 c0                      testq   %rax, %rax
    // 57: 0f 84 9e 00 00 00             je      0xfb <_JIT_ENTRY+0xfb>
    // 5d: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 61: 89 f8                         movl    %edi, %eax
    // 63: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 68: 48 83 c4 28                   addq    $0x28, %rsp
    // 6c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x73 <_JIT_ENTRY+0x73>
    // 000000000000006f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 73: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
    // 7c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 81: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 86: 48 89 f1                      movq    %rsi, %rcx
    // 89: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8f <_JIT_ENTRY+0x8f>
    // 000000000000008b:  IMAGE_REL_AMD64_REL32        __imp__PyObject_GetMethod
    // 8f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 94: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9d: 85 c0                         testl   %eax, %eax
    // 9f: 74 07                         je      0xa8 <_JIT_ENTRY+0xa8>
    // a1: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // a6: eb 21                         jmp     0xc9 <_JIT_ENTRY+0xc9>
    // a8: 8b 06                         movl    (%rsi), %eax
    // aa: 85 c0                         testl   %eax, %eax
    // ac: 78 0f                         js      0xbd <_JIT_ENTRY+0xbd>
    // ae: ff c8                         decl    %eax
    // b0: 89 06                         movl    %eax, (%rsi)
    // b2: 75 09                         jne     0xbd <_JIT_ENTRY+0xbd>
    // b4: 48 89 f1                      movq    %rsi, %rcx
    // b7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbd <_JIT_ENTRY+0xbd>
    // 00000000000000b9:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // bd: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // c2: 48 85 c0                      testq   %rax, %rax
    // c5: 74 34                         je      0xfb <_JIT_ENTRY+0xfb>
    // c7: 31 f6                         xorl    %esi, %esi
    // c9: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // cd: 49 89 75 00                   movq    %rsi, (%r13)
    // d1: 89 f8                         movl    %edi, %eax
    // d3: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // d8: 48 83 c4 28                   addq    $0x28, %rsp
    // dc: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // e3: 48 89 f1                      movq    %rsi, %rcx
    // e6: 48 89 c6                      movq    %rax, %rsi
    // e9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xef <_JIT_ENTRY+0xef>
    // 00000000000000eb:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ef: 48 89 f0                      movq    %rsi, %rax
    // f2: 48 85 c0                      testq   %rax, %rax
    // f5: 0f 85 62 ff ff ff             jne     0x5d <_JIT_ENTRY+0x5d>
    // fb: 48 83 c4 28                   addq    $0x28, %rsp
    // ff: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x106 <_JIT_ENTRY+0x106>
    // 0000000000000102:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[262] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8b,
        0x04, 0x24, 0x48, 0x8b, 0x40, 0x20, 0x89, 0xf9,
        0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b,
        0x54, 0x88, 0x18, 0x83, 0xe7, 0x01, 0x75, 0x4b,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x0a, 0xff, 0xc9, 0x89, 0x0e, 0x0f, 0x84,
        0x8f, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f,
        0x84, 0x9e, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x89, 0xf8, 0x4d, 0x8d, 0x6c, 0xc5, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x07, 0x48, 0x8b, 0x44, 0x24, 0x20, 0xeb, 0x21,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8,
        0x89, 0x06, 0x75, 0x09, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44,
        0x24, 0x20, 0x48, 0x85, 0xc0, 0x74, 0x34, 0x31,
        0xf6, 0x49, 0x89, 0x45, 0xf8, 0x49, 0x89, 0x75,
        0x00, 0x89, 0xf8, 0x4d, 0x8d, 0x6c, 0xc5, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x48, 0x89,
        0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf0, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x62,
        0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyObject_GetAttr+0x0
    // 10: CONTINUE
    // 18: &_PyObject_GetMethod+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetAttr);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_PyObject_GetMethod);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb9, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xeb, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x102, (uintptr_t)data + 0x24);
}

void
emit__LOAD_ATTR_CLASS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_0.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 8b 06                         movl    (%rsi), %eax
    // 11: 85 c0                         testl   %eax, %eax
    // 13: 78 04                         js      0x19 <_JIT_ENTRY+0x19>
    // 15: ff c0                         incl    %eax
    // 17: 89 06                         movl    %eax, (%rsi)
    // 19: 8b 01                         movl    (%rcx), %eax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 06                         js      0x25 <_JIT_ENTRY+0x25>
    // 1f: ff c8                         decl    %eax
    // 21: 89 01                         movl    %eax, (%rcx)
    // 23: 74 0f                         je      0x34 <_JIT_ENTRY+0x34>
    // 25: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 34: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3a: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 3e: 48 83 c4 28                   addq    $0x28, %rsp
    // 42: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[66] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89,
        0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x0f, 0x49, 0x89, 0x75,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0xc);
}

void
emit__LOAD_ATTR_CLASS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_CLASS_1.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 8b 06                         movl    (%rsi), %eax
    // 11: 85 c0                         testl   %eax, %eax
    // 13: 78 04                         js      0x19 <_JIT_ENTRY+0x19>
    // 15: ff c0                         incl    %eax
    // 17: 89 06                         movl    %eax, (%rsi)
    // 19: 8b 01                         movl    (%rcx), %eax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 0c                         js      0x2b <_JIT_ENTRY+0x2b>
    // 1f: ff c8                         decl    %eax
    // 21: 89 01                         movl    %eax, (%rcx)
    // 23: 75 06                         jne     0x2b <_JIT_ENTRY+0x2b>
    // 25: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 2b: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 2f: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 37: 49 83 c5 08                   addq    $0x8, %r13
    // 3b: 48 83 c4 28                   addq    $0x28, %rsp
    // 3f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89,
        0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x49,
        0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_0.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 48 8b 34 01                   movq    (%rcx,%rax), %rsi
    // 13: 48 85 f6                      testq   %rsi, %rsi
    // 16: 74 25                         je      0x3d <_JIT_ENTRY+0x3d>
    // 18: 8b 06                         movl    (%rsi), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 04                         js      0x22 <_JIT_ENTRY+0x22>
    // 1e: ff c0                         incl    %eax
    // 20: 89 06                         movl    %eax, (%rsi)
    // 22: 8b 01                         movl    (%rcx), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <_JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 01                         movl    %eax, (%rcx)
    // 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
    // 2e: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 32: 48 83 c4 28                   addq    $0x28, %rsp
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 3d: 48 83 c4 28                   addq    $0x28, %rsp
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4e: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[86] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x34, 0x01, 0x48, 0x85, 0xf6, 0x74, 0x25,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x1a, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_INSTANCE_VALUE_1.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 48 8b 34 01                   movq    (%rcx,%rax), %rsi
    // 13: 48 85 f6                      testq   %rsi, %rsi
    // 16: 74 37                         je      0x4f <_JIT_ENTRY+0x4f>
    // 18: 8b 06                         movl    (%rsi), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 04                         js      0x22 <_JIT_ENTRY+0x22>
    // 1e: ff c0                         incl    %eax
    // 20: 89 06                         movl    %eax, (%rsi)
    // 22: 8b 01                         movl    (%rcx), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 0c                         js      0x34 <_JIT_ENTRY+0x34>
    // 28: ff c8                         decl    %eax
    // 2a: 89 01                         movl    %eax, (%rcx)
    // 2c: 75 06                         jne     0x34 <_JIT_ENTRY+0x34>
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 34: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 38: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 40: 49 83 c5 08                   addq    $0x8, %r13
    // 44: 48 83 c4 28                   addq    $0x28, %rsp
    // 48: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4f: 48 83 c4 28                   addq    $0x28, %rsp
    // 53: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[90] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x34, 0x01, 0x48, 0x85, 0xf6, 0x74, 0x37,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x75, 0xf8,
        0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_LAZY_DICT.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // b: 8b 11                         movl    (%rcx), %edx
    // d: 85 d2                         testl   %edx, %edx
    // f: 78 04                         js      0x15 <_JIT_ENTRY+0x15>
    // 11: ff c2                         incl    %edx
    // 13: 89 11                         movl    %edx, (%rcx)
    // 15: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 19: 49 89 45 00                   movq    %rax, (%r13)
    // 1d: 49 83 c5 08                   addq    $0x8, %r13
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0x85, 0xd2, 0x78,
        0x04, 0xff, 0xc2, 0x89, 0x11, 0x49, 0x89, 0x4d,
        0xf8, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_NO_DICT.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // b: 8b 11                         movl    (%rcx), %edx
    // d: 85 d2                         testl   %edx, %edx
    // f: 78 04                         js      0x15 <_JIT_ENTRY+0x15>
    // 11: ff c2                         incl    %edx
    // 13: 89 11                         movl    %edx, (%rcx)
    // 15: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 19: 49 89 45 00                   movq    %rax, (%r13)
    // 1d: 49 83 c5 08                   addq    $0x8, %r13
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0x85, 0xd2, 0x78,
        0x04, 0xff, 0xc2, 0x89, 0x11, 0x49, 0x89, 0x4d,
        0xf8, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_METHOD_WITH_VALUES.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // b: 8b 11                         movl    (%rcx), %edx
    // d: 85 d2                         testl   %edx, %edx
    // f: 78 04                         js      0x15 <_JIT_ENTRY+0x15>
    // 11: ff c2                         incl    %edx
    // 13: 89 11                         movl    %edx, (%rcx)
    // 15: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // 19: 49 89 45 00                   movq    %rax, (%r13)
    // 1d: 49 83 c5 08                   addq    $0x8, %r13
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0x85, 0xd2, 0x78,
        0x04, 0xff, 0xc2, 0x89, 0x11, 0x49, 0x89, 0x4d,
        0xf8, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_MODULE.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // c: 48 8b 51 20                   movq    0x20(%rcx), %rdx
    // 10: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // 14: be 01 00 00 00                movl    $0x1, %esi
    // 19: 48 d3 e6                      shlq    %cl, %rsi
    // 1c: 48 01 d6                      addq    %rdx, %rsi
    // 1f: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 26: c1 e1 04                      shll    $0x4, %ecx
    // 29: 48 8b 74 31 28                movq    0x28(%rcx,%rsi), %rsi
    // 2e: 48 85 f6                      testq   %rsi, %rsi
    // 31: 74 42                         je      0x75 <_JIT_ENTRY+0x75>
    // 33: 8b 0e                         movl    (%rsi), %ecx
    // 35: 85 c9                         testl   %ecx, %ecx
    // 37: 78 04                         js      0x3d <_JIT_ENTRY+0x3d>
    // 39: ff c1                         incl    %ecx
    // 3b: 89 0e                         movl    %ecx, (%rsi)
    // 3d: 8b 08                         movl    (%rax), %ecx
    // 3f: 85 c9                         testl   %ecx, %ecx
    // 41: 78 06                         js      0x49 <_JIT_ENTRY+0x49>
    // 43: ff c9                         decl    %ecx
    // 45: 89 08                         movl    %ecx, (%rax)
    // 47: 74 37                         je      0x80 <_JIT_ENTRY+0x80>
    // 49: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 4d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 54: 66 83 e0 01                   andw    $0x1, %ax
    // 58: 74 08                         je      0x62 <_JIT_ENTRY+0x62>
    // 5a: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 62: 0f b7 c0                      movzwl  %ax, %eax
    // 65: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 6a: 48 83 c4 28                   addq    $0x28, %rsp
    // 6e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 75: 48 83 c4 28                   addq    $0x28, %rsp
    // 79: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x80 <_JIT_ENTRY+0x80>
    // 000000000000007c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 80: 48 89 c1                      movq    %rax, %rcx
    // 83: ff 15 00 00 00 00             callq   *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 89: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 8d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 94: 66 83 e0 01                   andw    $0x1, %ax
    // 98: 75 c0                         jne     0x5a <_JIT_ENTRY+0x5a>
    // 9a: eb c6                         jmp     0x62 <_JIT_ENTRY+0x62>
    const unsigned char code_body[156] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x51, 0x20,
        0x0f, 0xb6, 0x4a, 0x09, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0x48, 0xd3, 0xe6, 0x48, 0x01, 0xd6, 0x0f,
        0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe1,
        0x04, 0x48, 0x8b, 0x74, 0x31, 0x28, 0x48, 0x85,
        0xf6, 0x74, 0x42, 0x8b, 0x0e, 0x85, 0xc9, 0x78,
        0x04, 0xff, 0xc1, 0x89, 0x0e, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x08, 0x74,
        0x37, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01,
        0x74, 0x08, 0x49, 0xc7, 0x45, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8d, 0x6c,
        0xc5, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xc1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01,
        0x75, 0xc0, 0xeb, 0xc6,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x90, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_MODULE_FROM_KEYS.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 ee                      movq    %r13, %rsi
    // 7: 49 83 c5 f8                   addq    $-0x8, %r13
    // b: 48 8b 46 f8                   movq    -0x8(%rsi), %rax
    // f: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // 13: ba 01 00 00 00                movl    $0x1, %edx
    // 18: 48 d3 e2                      shlq    %cl, %rdx
    // 1b: 48 01 c2                      addq    %rax, %rdx
    // 1e: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 25: c1 e0 04                      shll    $0x4, %eax
    // 28: 48 8b 7c 10 28                movq    0x28(%rax,%rdx), %rdi
    // 2d: 48 85 ff                      testq   %rdi, %rdi
    // 30: 74 46                         je      0x78 <_JIT_ENTRY+0x78>
    // 32: 48 8b 4e f0                   movq    -0x10(%rsi), %rcx
    // 36: 8b 07                         movl    (%rdi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 04                         js      0x40 <_JIT_ENTRY+0x40>
    // 3c: ff c0                         incl    %eax
    // 3e: 89 07                         movl    %eax, (%rdi)
    // 40: 8b 01                         movl    (%rcx), %eax
    // 42: 85 c0                         testl   %eax, %eax
    // 44: 78 06                         js      0x4c <_JIT_ENTRY+0x4c>
    // 46: ff c8                         decl    %eax
    // 48: 89 01                         movl    %eax, (%rcx)
    // 4a: 74 37                         je      0x83 <_JIT_ENTRY+0x83>
    // 4c: 48 89 7e f0                   movq    %rdi, -0x10(%rsi)
    // 50: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 57: 66 83 e0 01                   andw    $0x1, %ax
    // 5b: 74 08                         je      0x65 <_JIT_ENTRY+0x65>
    // 5d: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 65: 0f b7 c0                      movzwl  %ax, %eax
    // 68: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 78: 48 83 c4 28                   addq    $0x28, %rsp
    // 7c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x83 <_JIT_ENTRY+0x83>
    // 000000000000007f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 83: ff 15 00 00 00 00             callq   *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 89: 48 89 7e f0                   movq    %rdi, -0x10(%rsi)
    // 8d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 94: 66 83 e0 01                   andw    $0x1, %ax
    // 98: 75 c3                         jne     0x5d <_JIT_ENTRY+0x5d>
    // 9a: eb c9                         jmp     0x65 <_JIT_ENTRY+0x65>
    const unsigned char code_body[156] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0xee, 0x49,
        0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x46, 0xf8, 0x0f,
        0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00,
        0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x0f, 0xb7,
        0x05, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04,
        0x48, 0x8b, 0x7c, 0x10, 0x28, 0x48, 0x85, 0xff,
        0x74, 0x46, 0x48, 0x8b, 0x4e, 0xf0, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x07,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x37, 0x48, 0x89, 0x7e, 0xf0,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x83, 0xe0, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0,
        0x4d, 0x8d, 0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x7e, 0xf0, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01,
        0x75, 0xc3, 0xeb, 0xc9,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x90, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 8b 01                         movl    (%rcx), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 0c                         js      0x1a <_JIT_ENTRY+0x1a>
    // e: ff c8                         decl    %eax
    // 10: 89 01                         movl    %eax, (%rcx)
    // 12: 75 06                         jne     0x1a <_JIT_ENTRY+0x1a>
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 1a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 21: 8b 08                         movl    (%rax), %ecx
    // 23: 85 c9                         testl   %ecx, %ecx
    // 25: 78 04                         js      0x2b <_JIT_ENTRY+0x2b>
    // 27: ff c1                         incl    %ecx
    // 29: 89 08                         movl    %ecx, (%rax)
    // 2b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 2f: 48 83 c4 28                   addq    $0x28, %rsp
    // 33: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 8b 01                         movl    (%rcx), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 0c                         js      0x1a <_JIT_ENTRY+0x1a>
    // e: ff c8                         decl    %eax
    // 10: 89 01                         movl    %eax, (%rcx)
    // 12: 75 06                         jne     0x1a <_JIT_ENTRY+0x1a>
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 1a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 21: 8b 08                         movl    (%rax), %ecx
    // 23: 85 c9                         testl   %ecx, %ecx
    // 25: 78 04                         js      0x2b <_JIT_ENTRY+0x2b>
    // 27: ff c1                         incl    %ecx
    // 29: 89 08                         movl    %ecx, (%rax)
    // 2b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 2f: 48 83 c4 28                   addq    $0x28, %rsp
    // 33: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[51] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: &_Py_Dealloc+0x0
    // 8: OPERAND0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_PROPERTY_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_PROPERTY_FRAME.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 48 8b 42 30                   movq    0x30(%rdx), %rax
    // b: 8b 48 30                      movl    0x30(%rax), %ecx
    // e: 83 e1 0d                      andl    $0xd, %ecx
    // 11: 83 f9 01                      cmpl    $0x1, %ecx
    // 14: 0f 85 e1 00 00 00             jne     0xfb <_JIT_ENTRY+0xfb>
    // 1a: 83 78 3c 00                   cmpl    $0x0, 0x3c(%rax)
    // 1e: 0f 85 d7 00 00 00             jne     0xfb <_JIT_ENTRY+0xfb>
    // 24: 83 78 34 01                   cmpl    $0x1, 0x34(%rax)
    // 28: 0f 85 cd 00 00 00             jne     0xfb <_JIT_ENTRY+0xfb>
    // 2e: 49 8b 8e e8 00 00 00          movq    0xe8(%r14), %rcx
    // 35: 48 85 c9                      testq   %rcx, %rcx
    // 38: 0f 84 bd 00 00 00             je      0xfb <_JIT_ENTRY+0xfb>
    // 3e: 48 63 78 4c                   movslq  0x4c(%rax), %rdi
    // 42: 49 8b b6 f0 00 00 00          movq    0xf0(%r14), %rsi
    // 49: 48 29 ce                      subq    %rcx, %rsi
    // 4c: 48 c1 fe 03                   sarq    $0x3, %rsi
    // 50: 48 39 fe                      cmpq    %rdi, %rsi
    // 53: 0f 8e a2 00 00 00             jle     0xfb <_JIT_ENTRY+0xfb>
    // 59: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 5d: 8b 1a                         movl    (%rdx), %ebx
    // 5f: 85 db                         testl   %ebx, %ebx
    // 61: 78 04                         js      0x67 <_JIT_ENTRY+0x67>
    // 63: ff c3                         incl    %ebx
    // 65: 89 1a                         movl    %ebx, (%rdx)
    // 67: 48 8d 3c f9                   leaq    (%rcx,%rdi,8), %rdi
    // 6b: 49 89 be e8 00 00 00          movq    %rdi, 0xe8(%r14)
    // 72: 4c 89 61 08                   movq    %r12, 0x8(%rcx)
    // 76: 48 89 51 10                   movq    %rdx, 0x10(%rcx)
    // 7a: 8b 38                         movl    (%rax), %edi
    // 7c: 85 ff                         testl   %edi, %edi
    // 7e: 78 04                         js      0x84 <_JIT_ENTRY+0x84>
    // 80: ff c7                         incl    %edi
    // 82: 89 38                         movl    %edi, (%rax)
    // 84: 48 89 01                      movq    %rax, (%rcx)
    // 87: 0f 10 42 10                   movups  0x10(%rdx), %xmm0
    // 8b: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 8f: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 97: 48 63 50 48                   movslq  0x48(%rax), %rdx
    // 9b: 48 8d 54 d1 50                leaq    0x50(%rcx,%rdx,8), %rdx
    // a0: 48 89 51 40                   movq    %rdx, 0x40(%rcx)
    // a4: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // ac: 48 8d 90 d0 00 00 00          leaq    0xd0(%rax), %rdx
    // b3: 48 89 51 38                   movq    %rdx, 0x38(%rcx)
    // b7: c7 41 48 00 00 00 00          movl    $0x0, 0x48(%rcx)
    // be: 83 78 48 02                   cmpl    $0x2, 0x48(%rax)
    // c2: 7c 28                         jl      0xec <_JIT_ENTRY+0xec>
    // c4: ba 0b 00 00 00                movl    $0xb, %edx
    // c9: 0f 1f 80 00 00 00 00          nopl    (%rax)
    // d0: 48 c7 04 d1 00 00 00 00       movq    $0x0, (%rcx,%rdx,8)
    // d8: 48 63 78 48                   movslq  0x48(%rax), %rdi
    // dc: 4c 8d 42 01                   leaq    0x1(%rdx), %r8
    // e0: 48 83 c2 f7                   addq    $-0x9, %rdx
    // e4: 48 39 fa                      cmpq    %rdi, %rdx
    // e7: 4c 89 c2                      movq    %r8, %rdx
    // ea: 7c e4                         jl      0xd0 <_JIT_ENTRY+0xd0>
    // ec: 48 89 71 50                   movq    %rsi, 0x50(%rcx)
    // f0: 49 89 4d f8                   movq    %rcx, -0x8(%r13)
    // f4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xfb <_JIT_ENTRY+0xfb>
    // 00000000000000f7:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // fb: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x102 <_JIT_ENTRY+0x102>
    // 00000000000000fe:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[258] = {
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x42, 0x30, 0x8b, 0x48, 0x30, 0x83, 0xe1,
        0x0d, 0x83, 0xf9, 0x01, 0x0f, 0x85, 0xe1, 0x00,
        0x00, 0x00, 0x83, 0x78, 0x3c, 0x00, 0x0f, 0x85,
        0xd7, 0x00, 0x00, 0x00, 0x83, 0x78, 0x34, 0x01,
        0x0f, 0x85, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x8e, 0xe8, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9,
        0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x63,
        0x78, 0x4c, 0x49, 0x8b, 0xb6, 0xf0, 0x00, 0x00,
        0x00, 0x48, 0x29, 0xce, 0x48, 0xc1, 0xfe, 0x03,
        0x48, 0x39, 0xfe, 0x0f, 0x8e, 0xa2, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf8, 0x8b, 0x1a, 0x85,
        0xdb, 0x78, 0x04, 0xff, 0xc3, 0x89, 0x1a, 0x48,
        0x8d, 0x3c, 0xf9, 0x49, 0x89, 0xbe, 0xe8, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0x61, 0x08, 0x48, 0x89,
        0x51, 0x10, 0x8b, 0x38, 0x85, 0xff, 0x78, 0x04,
        0xff, 0xc7, 0x89, 0x38, 0x48, 0x89, 0x01, 0x0f,
        0x10, 0x42, 0x10, 0x0f, 0x11, 0x41, 0x18, 0x48,
        0xc7, 0x41, 0x28, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x63, 0x50, 0x48, 0x48, 0x8d, 0x54, 0xd1, 0x50,
        0x48, 0x89, 0x51, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x90, 0xd0,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x51, 0x38, 0xc7,
        0x41, 0x48, 0x00, 0x00, 0x00, 0x00, 0x83, 0x78,
        0x48, 0x02, 0x7c, 0x28, 0xba, 0x0b, 0x00, 0x00,
        0x00, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x04, 0xd1, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x63, 0x78, 0x48, 0x4c, 0x8d, 0x42, 0x01,
        0x48, 0x83, 0xc2, 0xf7, 0x48, 0x39, 0xfa, 0x4c,
        0x89, 0xc2, 0x7c, 0xe4, 0x48, 0x89, 0x71, 0x50,
        0x49, 0x89, 0x4d, 0xf8, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xfe, (uintptr_t)data + 0xc);
}

void
emit__LOAD_ATTR_SLOT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_0.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 48 8b 34 01                   movq    (%rcx,%rax), %rsi
    // 13: 48 85 f6                      testq   %rsi, %rsi
    // 16: 74 25                         je      0x3d <_JIT_ENTRY+0x3d>
    // 18: 8b 06                         movl    (%rsi), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 04                         js      0x22 <_JIT_ENTRY+0x22>
    // 1e: ff c0                         incl    %eax
    // 20: 89 06                         movl    %eax, (%rsi)
    // 22: 8b 01                         movl    (%rcx), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <_JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 01                         movl    %eax, (%rcx)
    // 2c: 74 1a                         je      0x48 <_JIT_ENTRY+0x48>
    // 2e: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 32: 48 83 c4 28                   addq    $0x28, %rsp
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 3d: 48 83 c4 28                   addq    $0x28, %rsp
    // 41: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4e: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 52: 48 83 c4 28                   addq    $0x28, %rsp
    // 56: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[86] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x34, 0x01, 0x48, 0x85, 0xf6, 0x74, 0x25,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x1a, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_SLOT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_SLOT_1.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // f: 48 8b 34 01                   movq    (%rcx,%rax), %rsi
    // 13: 48 85 f6                      testq   %rsi, %rsi
    // 16: 74 37                         je      0x4f <_JIT_ENTRY+0x4f>
    // 18: 8b 06                         movl    (%rsi), %eax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 04                         js      0x22 <_JIT_ENTRY+0x22>
    // 1e: ff c0                         incl    %eax
    // 20: 89 06                         movl    %eax, (%rsi)
    // 22: 8b 01                         movl    (%rcx), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 0c                         js      0x34 <_JIT_ENTRY+0x34>
    // 28: ff c8                         decl    %eax
    // 2a: 89 01                         movl    %eax, (%rcx)
    // 2c: 75 06                         jne     0x34 <_JIT_ENTRY+0x34>
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 34: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 38: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 40: 49 83 c5 08                   addq    $0x8, %r13
    // 44: 48 83 c4 28                   addq    $0x28, %rsp
    // 48: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4f: 48 83 c4 28                   addq    $0x28, %rsp
    // 53: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[90] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x34, 0x01, 0x48, 0x85, 0xf6, 0x74, 0x37,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x06, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x75, 0xf8,
        0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_ATTR_WITH_HINT.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 48 8b 48 e8                   movq    -0x18(%rax), %rcx
    // c: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 13: 48 8b 79 20                   movq    0x20(%rcx), %rdi
    // 17: 48 39 57 18                   cmpq    %rdx, 0x18(%rdi)
    // 1b: 76 3b                         jbe     0x58 <_JIT_ENTRY+0x58>
    // 1d: 80 7f 0a 00                   cmpb    $0x0, 0xa(%rdi)
    // 21: 74 35                         je      0x58 <_JIT_ENTRY+0x58>
    // 23: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 2a: 49 8b 0c 24                   movq    (%r12), %rcx
    // 2e: 4c 8b 49 20                   movq    0x20(%rcx), %r9
    // 32: 41 89 f2                      movl    %esi, %r10d
    // 35: 41 83 e2 fe                   andl    $-0x2, %r10d
    // 39: 0f b6 4f 09                   movzbl  0x9(%rdi), %ecx
    // 3d: 41 b8 01 00 00 00             movl    $0x1, %r8d
    // 43: 49 d3 e0                      shlq    %cl, %r8
    // 46: 49 01 f8                      addq    %rdi, %r8
    // 49: c1 e2 04                      shll    $0x4, %edx
    // 4c: 4a 8b 4c 02 20                movq    0x20(%rdx,%r8), %rcx
    // 51: 4b 3b 4c 91 18                cmpq    0x18(%r9,%r10,4), %rcx
    // 56: 74 0b                         je      0x63 <_JIT_ENTRY+0x63>
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 63: 4a 8d 0c 02                   leaq    (%rdx,%r8), %rcx
    // 67: 48 83 c1 20                   addq    $0x20, %rcx
    // 6b: 48 8b 79 08                   movq    0x8(%rcx), %rdi
    // 6f: 48 85 ff                      testq   %rdi, %rdi
    // 72: 74 e4                         je      0x58 <_JIT_ENTRY+0x58>
    // 74: 8b 0f                         movl    (%rdi), %ecx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 04                         js      0x7e <_JIT_ENTRY+0x7e>
    // 7a: ff c1                         incl    %ecx
    // 7c: 89 0f                         movl    %ecx, (%rdi)
    // 7e: 8b 08                         movl    (%rax), %ecx
    // 80: 85 c9                         testl   %ecx, %ecx
    // 82: 78 0f                         js      0x93 <_JIT_ENTRY+0x93>
    // 84: ff c9                         decl    %ecx
    // 86: 89 08                         movl    %ecx, (%rax)
    // 88: 75 09                         jne     0x93 <_JIT_ENTRY+0x93>
    // 8a: 48 89 c1                      movq    %rax, %rcx
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 93: 49 89 7d f8                   movq    %rdi, -0x8(%r13)
    // 97: 83 e6 01                      andl    $0x1, %esi
    // 9a: 74 08                         je      0xa4 <_JIT_ENTRY+0xa4>
    // 9c: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // a4: 89 f0                         movl    %esi, %eax
    // a6: 4d 8d 6c c5 00                leaq    (%r13,%rax,8), %r13
    // ab: 48 83 c4 28                   addq    $0x28, %rsp
    // af: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb6 <_JIT_ENTRY+0xb6>
    // 00000000000000b2:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[175] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x48, 0x8b, 0x48, 0xe8, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x79, 0x20, 0x48,
        0x39, 0x57, 0x18, 0x76, 0x3b, 0x80, 0x7f, 0x0a,
        0x00, 0x74, 0x35, 0x0f, 0xb7, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x0c, 0x24, 0x4c, 0x8b,
        0x49, 0x20, 0x41, 0x89, 0xf2, 0x41, 0x83, 0xe2,
        0xfe, 0x0f, 0xb6, 0x4f, 0x09, 0x41, 0xb8, 0x01,
        0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x49, 0x01,
        0xf8, 0xc1, 0xe2, 0x04, 0x4a, 0x8b, 0x4c, 0x02,
        0x20, 0x4b, 0x3b, 0x4c, 0x91, 0x18, 0x74, 0x0b,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4a, 0x8d, 0x0c, 0x02, 0x48,
        0x83, 0xc1, 0x20, 0x48, 0x8b, 0x79, 0x08, 0x48,
        0x85, 0xff, 0x74, 0xe4, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x0f, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x0f, 0xff, 0xc9, 0x89, 0x08,
        0x75, 0x09, 0x48, 0x89, 0xc1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x7d, 0xf8, 0x83,
        0xe6, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x45, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x4d, 0x8d,
        0x6c, 0xc5, 0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x14);
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_BUILD_CLASS.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 9: 49 8b 4c 24 20                movq    0x20(%r12), %rcx
    // e: ba 90 8e 00 00                movl    $0x8e90, %edx           # imm = 0x8E90
    // 13: 48 03 15 00 00 00 00          addq    (%rip), %rdx            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 1a: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp_PyMapping_GetOptionalItem
    // 25: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 33: 85 c0                         testl   %eax, %eax
    // 35: 78 1d                         js      0x54 <_JIT_ENTRY+0x54>
    // 37: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 3c: 48 85 c0                      testq   %rax, %rax
    // 3f: 74 1e                         je      0x5f <_JIT_ENTRY+0x5f>
    // 41: 49 89 45 00                   movq    %rax, (%r13)
    // 45: 49 83 c5 08                   addq    $0x8, %r13
    // 49: 48 83 c4 28                   addq    $0x28, %rsp
    // 4d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 54: 48 83 c4 28                   addq    $0x28, %rsp
    // 58: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 5f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 64: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  IMAGE_REL_AMD64_REL32        __imp_PyExc_NameError
    // 6b: 48 8b 10                      movq    (%rax), %rdx
    // 6e: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        ??_C@_0BK@IAGNFEAN@__build_class__?5not?5found?$AA@
    // 75: 4c 89 f1                      movq    %r14, %rcx
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__PyErr_SetString
    // 7e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 83: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8c: 48 83 c4 28                   addq    $0x28, %rsp
    // 90: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x97 <_JIT_ENTRY+0x97>
    // 0000000000000093:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[151] = {
        0x48, 0x83, 0xec, 0x28, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x49, 0x8b, 0x4c, 0x24, 0x20, 0xba, 0x90,
        0x8e, 0x00, 0x00, 0x48, 0x03, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x1d, 0x48,
        0x8b, 0x44, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x74,
        0x1e, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x10, 0x4c, 0x8d,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &_PyRuntime+0x0
    // 28: &PyMapping_GetOptionalItem+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    // 40: &PyExc_NameError+0x0
    // 48: &_PyErr_SetString+0x0
    const unsigned char data_body[80] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, (uintptr_t)&_PyErr_SetString);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + 0x34);
}

void
emit__LOAD_COMMON_CONSTANT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_COMMON_CONSTANT.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 66 85 c0                      testw   %ax, %ax
    // a: 75 19                         jne     0x25 <_JIT_ENTRY+0x25>
    // c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyExc_AssertionError
    // 13: 48 8b 00                      movq    (%rax), %rax
    // 16: 49 89 45 00                   movq    %rax, (%r13)
    // 1a: 49 83 c5 08                   addq    $0x8, %r13
    // 1e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 25: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp_PyExc_NotImplementedError
    // 2c: 48 8b 00                      movq    (%rax), %rax
    // 2f: 49 89 45 00                   movq    %rax, (%r13)
    // 33: 49 83 c5 08                   addq    $0x8, %r13
    // 37: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[55] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x75, 0x19, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x00, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x00, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    // 8: &PyExc_AssertionError+0x0
    // 10: CONTINUE
    // 18: &PyExc_NotImplementedError+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyExc_AssertionError);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&PyExc_NotImplementedError);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x14);
}

void
emit__LOAD_CONST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 04 24                   movq    (%r12), %rax
    // 4: 48 8b 40 18                   movq    0x18(%rax), %rax
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // f: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 14: 8b 08                         movl    (%rax), %ecx
    // 16: 85 c9                         testl   %ecx, %ecx
    // 18: 78 04                         js      0x1e <_JIT_ENTRY+0x1e>
    // 1a: ff c1                         incl    %ecx
    // 1c: 89 08                         movl    %ecx, (%rax)
    // 1e: 49 89 45 00                   movq    %rax, (%r13)
    // 22: 49 83 c5 08                   addq    $0x8, %r13
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[38] = {
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x18,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x44, 0xc8, 0x18, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_IMMORTAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_IMMORTAL.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 04 24                   movq    (%r12), %rax
    // 4: 48 8b 40 18                   movq    0x18(%rax), %rax
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // f: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 14: 49 89 45 00                   movq    %rax, (%r13)
    // 18: 49 83 c5 08                   addq    $0x8, %r13
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[28] = {
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x18,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x44, 0xc8, 0x18, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 8b 08                         movl    (%rax), %ecx
    // 9: 85 c9                         testl   %ecx, %ecx
    // b: 78 04                         js      0x11 <_JIT_ENTRY+0x11>
    // d: ff c1                         incl    %ecx
    // f: 89 08                         movl    %ecx, (%rax)
    // 11: 49 89 45 00                   movq    %rax, (%r13)
    // 15: 49 83 c5 08                   addq    $0x8, %r13
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[25] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89,
        0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5,
        0x08,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 49 89 45 00                   movq    %rax, (%r13)
    // b: 49 83 c5 08                   addq    $0x8, %r13
    // f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[15] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_BORROW_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_BORROW_WITH_NULL.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 49 89 45 00                   movq    %rax, (%r13)
    // b: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 13: 49 83 c5 10                   addq    $0x10, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x45, 0x00, 0x49, 0xc7, 0x45, 0x08, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x83, 0xc5, 0x10,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_CONST_INLINE_WITH_NULL.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 8b 08                         movl    (%rax), %ecx
    // 9: 85 c9                         testl   %ecx, %ecx
    // b: 78 04                         js      0x11 <_JIT_ENTRY+0x11>
    // d: ff c1                         incl    %ecx
    // f: 89 08                         movl    %ecx, (%rax)
    // 11: 49 89 45 00                   movq    %rax, (%r13)
    // 15: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 1d: 49 83 c5 10                   addq    $0x10, %r13
    // 21: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[33] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89,
        0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0xc7, 0x45,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0x10,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_DEREF.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 10: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 14: 48 85 c0                      testq   %rax, %rax
    // 17: 74 1d                         je      0x36 <_JIT_ENTRY+0x36>
    // 19: 8b 08                         movl    (%rax), %ecx
    // 1b: 85 c9                         testl   %ecx, %ecx
    // 1d: 78 04                         js      0x23 <_JIT_ENTRY+0x23>
    // 1f: ff c1                         incl    %ecx
    // 21: 89 08                         movl    %ecx, (%rax)
    // 23: 49 89 45 00                   movq    %rax, (%r13)
    // 27: 49 83 c5 08                   addq    $0x8, %r13
    // 2b: 48 83 c4 28                   addq    $0x28, %rsp
    // 2f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 36: 44 0f b7 05 00 00 00 00       movzwl  (%rip), %r8d            # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 3e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 43: 49 8b 14 24                   movq    (%r12), %rdx
    // 47: 4c 89 f1                      movq    %r14, %rcx
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcUnbound
    // 50: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 55: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5e: 48 83 c4 28                   addq    $0x28, %rsp
    // 62: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[105] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0xc4, 0x50,
        0x48, 0x8b, 0x40, 0x10, 0x48, 0x85, 0xc0, 0x74,
        0x1d, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff,
        0xc1, 0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49,
        0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f,
        0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x49, 0x8b, 0x14, 0x24, 0x4c,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyEval_FormatExcUnbound+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0x14);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // c: 8b 08                         movl    (%rax), %ecx
    // e: 85 c9                         testl   %ecx, %ecx
    // 10: 78 04                         js      0x16 <_JIT_ENTRY+0x16>
    // 12: ff c1                         incl    %ecx
    // 14: 89 08                         movl    %ecx, (%rax)
    // 16: 49 89 45 00                   movq    %rax, (%r13)
    // 1a: 49 83 c5 08                   addq    $0x8, %r13
    // 1e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[30] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x44, 0xc4, 0x50, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_0.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 50                movq    0x50(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x50, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_1.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 58                movq    0x58(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x58, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_2.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 60                movq    0x60(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x60, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_3.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 68                movq    0x68(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x68, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_4.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 70                movq    0x70(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x70, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_5.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 78                movq    0x78(%r12), %rax
    // 5: 8b 08                         movl    (%rax), %ecx
    // 7: 85 c9                         testl   %ecx, %ecx
    // 9: 78 04                         js      0xf <_JIT_ENTRY+0xf>
    // b: ff c1                         incl    %ecx
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 49 89 45 00                   movq    %rax, (%r13)
    // 13: 49 83 c5 08                   addq    $0x8, %r13
    // 17: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x44, 0x24, 0x78, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49,
        0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_6.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 84 24 80 00 00 00       movq    0x80(%r12), %rax
    // 8: 8b 08                         movl    (%rax), %ecx
    // a: 85 c9                         testl   %ecx, %ecx
    // c: 78 04                         js      0x12 <_JIT_ENTRY+0x12>
    // e: ff c1                         incl    %ecx
    // 10: 89 08                         movl    %ecx, (%rax)
    // 12: 49 89 45 00                   movq    %rax, (%r13)
    // 16: 49 83 c5 08                   addq    $0x8, %r13
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[26] = {
        0x49, 0x8b, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_7.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 84 24 88 00 00 00       movq    0x88(%r12), %rax
    // 8: 8b 08                         movl    (%rax), %ecx
    // a: 85 c9                         testl   %ecx, %ecx
    // c: 78 04                         js      0x12 <_JIT_ENTRY+0x12>
    // e: ff c1                         incl    %ecx
    // 10: 89 08                         movl    %ecx, (%rax)
    // 12: 49 89 45 00                   movq    %rax, (%r13)
    // 16: 49 83 c5 08                   addq    $0x8, %r13
    // 1a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[26] = {
        0x49, 0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_AND_CLEAR.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 49 8b 4c c4 50                movq    0x50(%r12,%rax,8), %rcx
    // c: 49 c7 44 c4 50 00 00 00 00    movq    $0x0, 0x50(%r12,%rax,8)
    // 15: 49 89 4d 00                   movq    %rcx, (%r13)
    // 19: 49 83 c5 08                   addq    $0x8, %r13
    // 1d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[29] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x4c, 0xc4, 0x50, 0x49, 0xc7, 0x44, 0xc4,
        0x50, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d,
        0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FAST_CHECK.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 0f b7 c1                      movzwl  %cx, %eax
    // e: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 13: 48 85 c0                      testq   %rax, %rax
    // 16: 74 1d                         je      0x35 <_JIT_ENTRY+0x35>
    // 18: 8b 08                         movl    (%rax), %ecx
    // 1a: 85 c9                         testl   %ecx, %ecx
    // 1c: 78 04                         js      0x22 <_JIT_ENTRY+0x22>
    // 1e: ff c1                         incl    %ecx
    // 20: 89 08                         movl    %ecx, (%rax)
    // 22: 49 89 45 00                   movq    %rax, (%r13)
    // 26: 49 83 c5 08                   addq    $0x8, %r13
    // 2a: 48 83 c4 28                   addq    $0x28, %rsp
    // 2e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 35: 0f b7 d1                      movzwl  %cx, %edx
    // 38: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 3d: 49 8b 04 24                   movq    (%r12), %rax
    // 41: 48 8b 48 60                   movq    0x60(%rax), %rcx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_GetItem
    // 4b: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp_PyExc_UnboundLocalError
    // 52: 48 8b 11                      movq    (%rcx), %rdx
    // 55: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  IMAGE_REL_AMD64_REL32        ??_C@_0EK@CHGBBAMA@cannot?5access?5local?5variable?5?8?$CFs@
    // 5c: 4c 89 f1                      movq    %r14, %rcx
    // 5f: 49 89 c1                      movq    %rax, %r9
    // 62: ff 15 00 00 00 00             callq   *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcCheckArg
    // 68: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 76: 48 83 c4 28                   addq    $0x28, %rsp
    // 7a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[129] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x49, 0x8b,
        0x44, 0xc4, 0x50, 0x48, 0x85, 0xc0, 0x74, 0x1d,
        0x8b, 0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1,
        0x89, 0x08, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x04,
        0x24, 0x48, 0x8b, 0x48, 0x60, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x11, 0x4c, 0x8d, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1, 0x49,
        0x89, 0xc1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyTuple_GetItem+0x0
    // 68: &PyExc_UnboundLocalError+0x0
    // 70: &_PyEval_FormatExcCheckArg+0x0
    // 78: ERROR_TARGET
    const unsigned char data_body[128] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x68, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x70, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x78, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x74);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_FROM_DICT_OR_DEREF.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 48 8b 40 60                   movq    0x60(%rax), %rax
    // 10: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 17: 0f b7 cf                      movzwl  %di, %ecx
    // 1a: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 1f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 24: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 29: 48 89 f1                      movq    %rsi, %rcx
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp_PyMapping_GetOptionalItem
    // 32: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 37: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 1f                         js      0x63 <_JIT_ENTRY+0x63>
    // 44: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // 49: 48 85 c0                      testq   %rax, %rax
    // 4c: 74 20                         je      0x6e <_JIT_ENTRY+0x6e>
    // 4e: 8b 0e                         movl    (%rsi), %ecx
    // 50: 85 c9                         testl   %ecx, %ecx
    // 52: 79 40                         jns     0x94 <_JIT_ENTRY+0x94>
    // 54: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 63: 48 83 c4 28                   addq    $0x28, %rsp
    // 67: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 6e: 0f b7 c7                      movzwl  %di, %eax
    // 71: 49 8b 44 c4 50                movq    0x50(%r12,%rax,8), %rax
    // 76: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 7a: 48 85 c0                      testq   %rax, %rax
    // 7d: 74 38                         je      0xb7 <_JIT_ENTRY+0xb7>
    // 7f: 8b 08                         movl    (%rax), %ecx
    // 81: 85 c9                         testl   %ecx, %ecx
    // 83: 78 04                         js      0x89 <_JIT_ENTRY+0x89>
    // 85: ff c1                         incl    %ecx
    // 87: 89 08                         movl    %ecx, (%rax)
    // 89: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 8e: 8b 0e                         movl    (%rsi), %ecx
    // 90: 85 c9                         testl   %ecx, %ecx
    // 92: 78 c0                         js      0x54 <_JIT_ENTRY+0x54>
    // 94: ff c9                         decl    %ecx
    // 96: 89 0e                         movl    %ecx, (%rsi)
    // 98: 75 ba                         jne     0x54 <_JIT_ENTRY+0x54>
    // 9a: 48 89 f1                      movq    %rsi, %rcx
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a3: 48 8b 44 24 20                movq    0x20(%rsp), %rax
    // a8: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // ac: 48 83 c4 28                   addq    $0x28, %rsp
    // b0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb7 <_JIT_ENTRY+0xb7>
    // 00000000000000b3:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b7: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
    // c0: 44 0f b7 05 00 00 00 00       movzwl  (%rip), %r8d            # 0xc8 <_JIT_ENTRY+0xc8>
    // 00000000000000c4:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // c8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // cd: 49 8b 14 24                   movq    (%r12), %rdx
    // d1: 4c 89 f1                      movq    %r14, %rcx
    // d4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xda <_JIT_ENTRY+0xda>
    // 00000000000000d6:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FormatExcUnbound
    // da: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // df: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e8: 48 83 c4 28                   addq    $0x28, %rsp
    // ec: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf3 <_JIT_ENTRY+0xf3>
    // 00000000000000ef:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[243] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x60,
        0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xcf, 0x48, 0x8b, 0x54, 0xc8, 0x18, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x8d, 0x44, 0x24,
        0x20, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x1f, 0x48, 0x8b, 0x44, 0x24,
        0x20, 0x48, 0x85, 0xc0, 0x74, 0x20, 0x8b, 0x0e,
        0x85, 0xc9, 0x79, 0x40, 0x49, 0x89, 0x45, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc7, 0x49, 0x8b, 0x44, 0xc4, 0x50, 0x48, 0x8b,
        0x40, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x38, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89,
        0x08, 0x48, 0x89, 0x44, 0x24, 0x20, 0x8b, 0x0e,
        0x85, 0xc9, 0x78, 0xc0, 0xff, 0xc9, 0x89, 0x0e,
        0x75, 0xba, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x20,
        0x49, 0x89, 0x45, 0xf8, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x44, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x14,
        0x24, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &PyMapping_GetOptionalItem+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    // 28: &_PyEval_FormatExcUnbound+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)&_PyEval_FormatExcUnbound);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xef, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 ee                      movq    %r13, %rsi
    // 7: 8b 3d 00 00 00 00             movl    (%rip), %edi            # 0xd <_JIT_ENTRY+0xd>
    // 0000000000000009:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // d: 49 8b 04 24                   movq    (%r12), %rax
    // 11: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
    // 16: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 1a: 89 fa                         movl    %edi, %edx
    // 1c: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
    // 22: 4c 8b 44 90 18                movq    0x18(%rax,%rdx,4), %r8
    // 27: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2c: 49 8b 54 24 20                movq    0x20(%r12), %rdx
    // 31: 4d 89 e9                      movq    %r13, %r9
    // 34: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__PyEval_LoadGlobalStackRef
    // 3a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 48: 48 83 3e 00                   cmpq    $0x0, (%rsi)
    // 4c: 74 22                         je      0x70 <_JIT_ENTRY+0x70>
    // 4e: 0f b7 c7                      movzwl  %di, %eax
    // 51: 83 e0 01                      andl    $0x1, %eax
    // 54: 74 08                         je      0x5e <_JIT_ENTRY+0x5e>
    // 56: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 5e: 89 c0                         movl    %eax, %eax
    // 60: 4d 8d 6c c5 08                leaq    0x8(%r13,%rax,8), %r13
    // 65: 48 83 c4 28                   addq    $0x28, %rsp
    // 69: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 70: 48 83 c4 28                   addq    $0x28, %rsp
    // 74: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[123] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0xee, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04,
        0x24, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b,
        0x40, 0x20, 0x89, 0xfa, 0x81, 0xe2, 0xfe, 0xff,
        0x00, 0x00, 0x4c, 0x8b, 0x44, 0x90, 0x18, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x54, 0x24,
        0x20, 0x4d, 0x89, 0xe9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0x3e, 0x00, 0x74, 0x22, 0x0f, 0xb7,
        0xc7, 0x83, 0xe0, 0x01, 0x74, 0x08, 0x49, 0xc7,
        0x45, 0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc0,
        0x4d, 0x8d, 0x6c, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_LoadGlobalStackRef+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_LoadGlobalStackRef);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x9, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 20                movq    0x20(%r12), %rax
    // 5: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 9: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // d: ba 01 00 00 00                movl    $0x1, %edx
    // 12: 48 d3 e2                      shlq    %cl, %rdx
    // 15: 48 01 c2                      addq    %rax, %rdx
    // 18: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1f: c1 e0 04                      shll    $0x4, %eax
    // 22: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 27: 48 85 c0                      testq   %rax, %rax
    // 2a: 74 32                         je      0x5e <_JIT_ENTRY+0x5e>
    // 2c: 8b 08                         movl    (%rax), %ecx
    // 2e: 85 c9                         testl   %ecx, %ecx
    // 30: 78 04                         js      0x36 <_JIT_ENTRY+0x36>
    // 32: ff c1                         incl    %ecx
    // 34: 89 08                         movl    %ecx, (%rax)
    // 36: 49 89 45 00                   movq    %rax, (%r13)
    // 3a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 41: 66 83 e0 01                   andw    $0x1, %ax
    // 45: 74 08                         je      0x4f <_JIT_ENTRY+0x4f>
    // 47: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 4f: 0f b7 c0                      movzwl  %ax, %eax
    // 52: 4d 8d 6c c5 08                leaq    0x8(%r13,%rax,8), %r13
    // 57: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[101] = {
        0x49, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00,
        0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48,
        0x85, 0xc0, 0x74, 0x32, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x83, 0xe0, 0x01, 0x74, 0x08, 0x49,
        0xc7, 0x45, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xc0, 0x4d, 0x8d, 0x6c, 0xc5, 0x08, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_BUILTINS_FROM_KEYS.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4c 89 e8                      movq    %r13, %rax
    // 3: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7: 48 8b 50 f8                   movq    -0x8(%rax), %rdx
    // b: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // f: be 01 00 00 00                movl    $0x1, %esi
    // 14: 48 d3 e6                      shlq    %cl, %rsi
    // 17: 48 01 d6                      addq    %rdx, %rsi
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 21: c1 e1 04                      shll    $0x4, %ecx
    // 24: 48 8b 4c 31 28                movq    0x28(%rcx,%rsi), %rcx
    // 29: 48 85 c9                      testq   %rcx, %rcx
    // 2c: 74 31                         je      0x5f <_JIT_ENTRY+0x5f>
    // 2e: 8b 11                         movl    (%rcx), %edx
    // 30: 85 d2                         testl   %edx, %edx
    // 32: 78 04                         js      0x38 <_JIT_ENTRY+0x38>
    // 34: ff c2                         incl    %edx
    // 36: 89 11                         movl    %edx, (%rcx)
    // 38: 49 89 4d 00                   movq    %rcx, (%r13)
    // 3c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 43: 66 83 e1 01                   andw    $0x1, %cx
    // 47: 74 07                         je      0x50 <_JIT_ENTRY+0x50>
    // 49: 48 c7 00 00 00 00 00          movq    $0x0, (%rax)
    // 50: 0f b7 c1                      movzwl  %cx, %eax
    // 53: 4d 8d 6c c5 08                leaq    0x8(%r13,%rax,8), %r13
    // 58: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x66 <_JIT_ENTRY+0x66>
    // 0000000000000062:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[102] = {
        0x4c, 0x89, 0xe8, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x50, 0xf8, 0x0f, 0xb6, 0x4a, 0x09, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48,
        0x01, 0xd6, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0xc1, 0xe1, 0x04, 0x48, 0x8b, 0x4c, 0x31,
        0x28, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x8b, 0x11,
        0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89, 0x11,
        0x49, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x83, 0xe1, 0x01, 0x74,
        0x07, 0x48, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc1, 0x4d, 0x8d, 0x6c, 0xc5, 0x08,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 5: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 9: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // d: ba 01 00 00 00                movl    $0x1, %edx
    // 12: 48 d3 e2                      shlq    %cl, %rdx
    // 15: 48 01 c2                      addq    %rax, %rdx
    // 18: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1f: c1 e0 04                      shll    $0x4, %eax
    // 22: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 27: 48 85 c0                      testq   %rax, %rax
    // 2a: 74 32                         je      0x5e <_JIT_ENTRY+0x5e>
    // 2c: 8b 08                         movl    (%rax), %ecx
    // 2e: 85 c9                         testl   %ecx, %ecx
    // 30: 78 04                         js      0x36 <_JIT_ENTRY+0x36>
    // 32: ff c1                         incl    %ecx
    // 34: 89 08                         movl    %ecx, (%rax)
    // 36: 49 89 45 00                   movq    %rax, (%r13)
    // 3a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 41: 66 83 e0 01                   andw    $0x1, %ax
    // 45: 74 08                         je      0x4f <_JIT_ENTRY+0x4f>
    // 47: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 4f: 0f b7 c0                      movzwl  %ax, %eax
    // 52: 4d 8d 6c c5 08                leaq    0x8(%r13,%rax,8), %r13
    // 57: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[101] = {
        0x49, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00,
        0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48,
        0x85, 0xc0, 0x74, 0x32, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x04, 0xff, 0xc1, 0x89, 0x08, 0x49, 0x89,
        0x45, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x83, 0xe0, 0x01, 0x74, 0x08, 0x49,
        0xc7, 0x45, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0xb7, 0xc0, 0x4d, 0x8d, 0x6c, 0xc5, 0x08, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL_MODULE_FROM_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_GLOBAL_MODULE_FROM_KEYS.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 4c 89 e8                      movq    %r13, %rax
    // 3: 49 83 c5 f8                   addq    $-0x8, %r13
    // 7: 48 8b 50 f8                   movq    -0x8(%rax), %rdx
    // b: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // f: be 01 00 00 00                movl    $0x1, %esi
    // 14: 48 d3 e6                      shlq    %cl, %rsi
    // 17: 48 01 d6                      addq    %rdx, %rsi
    // 1a: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 21: c1 e1 04                      shll    $0x4, %ecx
    // 24: 48 8b 4c 31 28                movq    0x28(%rcx,%rsi), %rcx
    // 29: 48 85 c9                      testq   %rcx, %rcx
    // 2c: 74 31                         je      0x5f <_JIT_ENTRY+0x5f>
    // 2e: 8b 11                         movl    (%rcx), %edx
    // 30: 85 d2                         testl   %edx, %edx
    // 32: 78 04                         js      0x38 <_JIT_ENTRY+0x38>
    // 34: ff c2                         incl    %edx
    // 36: 89 11                         movl    %edx, (%rcx)
    // 38: 49 89 4d 00                   movq    %rcx, (%r13)
    // 3c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 43: 66 83 e1 01                   andw    $0x1, %cx
    // 47: 74 07                         je      0x50 <_JIT_ENTRY+0x50>
    // 49: 48 c7 00 00 00 00 00          movq    $0x0, (%rax)
    // 50: 0f b7 c1                      movzwl  %cx, %eax
    // 53: 4d 8d 6c c5 08                leaq    0x8(%r13,%rax,8), %r13
    // 58: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 5f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x66 <_JIT_ENTRY+0x66>
    // 0000000000000062:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[102] = {
        0x4c, 0x89, 0xe8, 0x49, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x50, 0xf8, 0x0f, 0xb6, 0x4a, 0x09, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe6, 0x48,
        0x01, 0xd6, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0xc1, 0xe1, 0x04, 0x48, 0x8b, 0x4c, 0x31,
        0x28, 0x48, 0x85, 0xc9, 0x74, 0x31, 0x8b, 0x11,
        0x85, 0xd2, 0x78, 0x04, 0xff, 0xc2, 0x89, 0x11,
        0x49, 0x89, 0x4d, 0x00, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x83, 0xe1, 0x01, 0x74,
        0x07, 0x48, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc1, 0x4d, 0x8d, 0x6c, 0xc5, 0x08,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0x14);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_LOCALS.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 44 24 28                movq    0x28(%r12), %rax
    // 9: 48 85 c0                      testq   %rax, %rax
    // c: 74 1d                         je      0x2b <_JIT_ENTRY+0x2b>
    // e: 8b 08                         movl    (%rax), %ecx
    // 10: 85 c9                         testl   %ecx, %ecx
    // 12: 78 04                         js      0x18 <_JIT_ENTRY+0x18>
    // 14: ff c1                         incl    %ecx
    // 16: 89 08                         movl    %ecx, (%rax)
    // 18: 49 89 45 00                   movq    %rax, (%r13)
    // 1c: 49 83 c5 08                   addq    $0x8, %r13
    // 20: 48 83 c4 28                   addq    $0x28, %rsp
    // 24: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 30: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp_PyExc_SystemError
    // 37: 48 8b 10                      movq    (%rax), %rdx
    // 3a: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  IMAGE_REL_AMD64_REL32        ??_C@_0BA@GFAKPHCI@no?5locals?5found?$AA@
    // 41: 4c 89 f1                      movq    %r14, %rcx
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__PyErr_SetString
    // 4a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 4f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[99] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x44, 0x24,
        0x28, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x04, 0xff, 0xc1, 0x89, 0x08,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x10, 0x4c, 0x8d, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 'no locals found\x00'
    // 10: CONTINUE
    // 18: &PyExc_SystemError+0x0
    // 20: &_PyErr_SetString+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x20, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x24);
}

void
emit__LOAD_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_NAME.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 04 24                   movq    (%r12), %rax
    // 8: 48 8b 40 20                   movq    0x20(%rax), %rax
    // c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 13: 4c 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %r8
    // 18: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 1d: 4c 89 f1                      movq    %r14, %rcx
    // 20: 4c 89 e2                      movq    %r12, %rdx
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__PyEval_LoadName
    // 29: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2e: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 37: 48 85 c0                      testq   %rax, %rax
    // 3a: 74 13                         je      0x4f <_JIT_ENTRY+0x4f>
    // 3c: 49 89 45 00                   movq    %rax, (%r13)
    // 40: 49 83 c5 08                   addq    $0x8, %r13
    // 44: 48 83 c4 28                   addq    $0x28, %rsp
    // 48: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4f: 48 83 c4 28                   addq    $0x28, %rsp
    // 53: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[90] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x8b, 0x44, 0xc8, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x89, 0xf1,
        0x4c, 0x89, 0xe2, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x13, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_LoadName+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_LoadName);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x14);
}

void
emit__LOAD_SMALL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: c1 e0 05                      shll    $0x5, %eax
    // a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 11: 48 01 c8                      addq    %rcx, %rax
    // 14: 48 05 88 33 00 00             addq    $0x3388, %rax           # imm = 0x3388
    // 1a: 49 89 45 00                   movq    %rax, (%r13)
    // 1e: 49 83 c5 08                   addq    $0x8, %r13
    // 22: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[34] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x05, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0x88, 0x33,
        0x00, 0x00, 0x49, 0x89, 0x45, 0x00, 0x49, 0x83,
        0xc5, 0x08,
    };
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + 0x4);
}

void
emit__LOAD_SMALL_INT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_0.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: b8 88 33 00 00                movl    $0x3388, %eax           # imm = 0x3388
    // 5: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // c: 49 89 45 00                   movq    %rax, (%r13)
    // 10: 49 83 c5 08                   addq    $0x8, %r13
    // 14: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[20] = {
        0xb8, 0x88, 0x33, 0x00, 0x00, 0x48, 0x03, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_1.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: b8 a8 33 00 00                movl    $0x33a8, %eax           # imm = 0x33A8
    // 5: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // c: 49 89 45 00                   movq    %rax, (%r13)
    // 10: 49 83 c5 08                   addq    $0x8, %r13
    // 14: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[20] = {
        0xb8, 0xa8, 0x33, 0x00, 0x00, 0x48, 0x03, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_2.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: b8 c8 33 00 00                movl    $0x33c8, %eax           # imm = 0x33C8
    // 5: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // c: 49 89 45 00                   movq    %rax, (%r13)
    // 10: 49 83 c5 08                   addq    $0x8, %r13
    // 14: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[20] = {
        0xb8, 0xc8, 0x33, 0x00, 0x00, 0x48, 0x03, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SMALL_INT_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SMALL_INT_3.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: b8 e8 33 00 00                movl    $0x33e8, %eax           # imm = 0x33E8
    // 5: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // c: 49 89 45 00                   movq    %rax, (%r13)
    // 10: 49 83 c5 08                   addq    $0x8, %r13
    // 14: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[20] = {
        0xb8, 0xe8, 0x33, 0x00, 0x00, 0x48, 0x03, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_PyRuntime+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
}

void
emit__LOAD_SPECIAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SPECIAL.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 13: c1 e3 04                      shll    $0x4, %ebx
    // 16: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__Py_SpecialMethods
    // 1d: 48 8b 14 1f                   movq    (%rdi,%rbx), %rdx
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 2b: 48 89 f1                      movq    %rsi, %rcx
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__PyObject_LookupSpecialMethod
    // 34: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 39: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 42: 48 85 c0                      testq   %rax, %rax
    // 45: 74 1c                         je      0x63 <_JIT_ENTRY+0x63>
    // 47: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // 4c: 49 89 45 00                   movq    %rax, (%r13)
    // 50: 49 89 4d 08                   movq    %rcx, 0x8(%r13)
    // 54: 49 83 c5 10                   addq    $0x10, %r13
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 63: 49 8b 46 70                   movq    0x70(%r14), %rax
    // 67: 48 85 c0                      testq   %rax, %rax
    // 6a: 74 12                         je      0x7e <_JIT_ENTRY+0x7e>
    // 6c: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // 71: 74 0b                         je      0x7e <_JIT_ENTRY+0x7e>
    // 73: 48 83 c4 28                   addq    $0x28, %rsp
    // 77: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 7e: 48 01 df                      addq    %rbx, %rdi
    // 81: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 86: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 8a: 4c 8b 48 18                   movq    0x18(%rax), %r9
    // 8e: 4c 8b 47 08                   movq    0x8(%rdi), %r8
    // 92: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x99 <_JIT_ENTRY+0x99>
    // 0000000000000095:  IMAGE_REL_AMD64_REL32        __imp_PyExc_TypeError
    // 99: 48 8b 10                      movq    (%rax), %rdx
    // 9c: 4c 89 f1                      movq    %r14, %rcx
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // a5: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // aa: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b3: 48 83 c4 28                   addq    $0x28, %rsp
    // b7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbe <_JIT_ENTRY+0xbe>
    // 00000000000000ba:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[190] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe3, 0x04, 0x48, 0x8b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14,
        0x1f, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c, 0x8d,
        0x44, 0x24, 0x20, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x1c, 0x48,
        0x8b, 0x4c, 0x24, 0x20, 0x49, 0x89, 0x45, 0x00,
        0x49, 0x89, 0x4d, 0x08, 0x49, 0x83, 0xc5, 0x10,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x70, 0x48,
        0x85, 0xc0, 0x74, 0x12, 0x48, 0x83, 0x78, 0x08,
        0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01,
        0xdf, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b,
        0x46, 0x08, 0x4c, 0x8b, 0x48, 0x18, 0x4c, 0x8b,
        0x47, 0x08, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x10, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_Py_SpecialMethods+0x0
    // 10: &_PyObject_LookupSpecialMethod+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    // 28: &PyExc_TypeError+0x0
    // 30: &_PyErr_Format+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_SpecialMethods);
    patch_64(data + 0x10, (uintptr_t)&_PyObject_LookupSpecialMethod);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x30, (uintptr_t)&_PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x95, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)data + 0x1c);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_ATTR.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 15: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 19: 83 b8 a8 00 00 00 00          cmpl    $0x0, 0xa8(%rax)
    // 20: 78 0b                         js      0x2d <_JIT_ENTRY+0x2d>
    // 22: 48 83 c4 28                   addq    $0x28, %rsp
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 2d: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 31: 49 8b 04 24                   movq    (%r12), %rax
    // 35: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 39: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 40: 83 e1 fc                      andl    $-0x4, %ecx
    // 43: 4c 8b 44 48 18                movq    0x18(%rax,%rcx,2), %r8
    // 48: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4d: 48 89 d9                      movq    %rbx, %rcx
    // 50: 48 89 f2                      movq    %rsi, %rdx
    // 53: 45 31 c9                      xorl    %r9d, %r9d
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  IMAGE_REL_AMD64_REL32        __imp__PySuper_Lookup
    // 5c: 48 89 c7                      movq    %rax, %rdi
    // 5f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 64: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 6d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x74 <_JIT_ENTRY+0x74>
    // 0000000000000070:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // 74: 8b 08                         movl    (%rax), %ecx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 13                         js      0x8d <_JIT_ENTRY+0x8d>
    // 7a: ff c9                         decl    %ecx
    // 7c: 89 08                         movl    %ecx, (%rax)
    // 7e: 75 0d                         jne     0x8d <_JIT_ENTRY+0x8d>
    // 80: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 8d: 8b 03                         movl    (%rbx), %eax
    // 8f: 85 c0                         testl   %eax, %eax
    // 91: 78 0f                         js      0xa2 <_JIT_ENTRY+0xa2>
    // 93: ff c8                         decl    %eax
    // 95: 89 03                         movl    %eax, (%rbx)
    // 97: 75 09                         jne     0xa2 <_JIT_ENTRY+0xa2>
    // 99: 48 89 d9                      movq    %rbx, %rcx
    // 9c: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa2 <_JIT_ENTRY+0xa2>
    // 000000000000009e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // a2: 8b 06                         movl    (%rsi), %eax
    // a4: 85 c0                         testl   %eax, %eax
    // a6: 78 0f                         js      0xb7 <_JIT_ENTRY+0xb7>
    // a8: ff c8                         decl    %eax
    // aa: 89 06                         movl    %eax, (%rsi)
    // ac: 75 09                         jne     0xb7 <_JIT_ENTRY+0xb7>
    // ae: 48 89 f1                      movq    %rsi, %rcx
    // b1: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb7 <_JIT_ENTRY+0xb7>
    // 00000000000000b3:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b7: 48 85 ff                      testq   %rdi, %rdi
    // ba: 74 13                         je      0xcf <_JIT_ENTRY+0xcf>
    // bc: 49 89 7d e8                   movq    %rdi, -0x18(%r13)
    // c0: 49 83 c5 f0                   addq    $-0x10, %r13
    // c4: 48 83 c4 28                   addq    $0x28, %rsp
    // c8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xcf <_JIT_ENTRY+0xcf>
    // 00000000000000cb:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // cf: 48 83 c4 28                   addq    $0x28, %rsp
    // d3: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xda <_JIT_ENTRY+0xda>
    // 00000000000000d6:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[218] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xe8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x49, 0x8b, 0x5d, 0xf0, 0x48, 0x8b, 0x43,
        0x08, 0x83, 0xb8, 0xa8, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x0b, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75,
        0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xe1, 0xfc, 0x4c, 0x8b, 0x44, 0x48, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xd9,
        0x48, 0x89, 0xf2, 0x45, 0x31, 0xc9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x08, 0x85, 0xc9,
        0x78, 0x13, 0xff, 0xc9, 0x89, 0x08, 0x75, 0x0d,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x06, 0x75, 0x09, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xff, 0x74, 0x13, 0x49, 0x89, 0x7d, 0xe8,
        0x49, 0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &_PySuper_Lookup+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x70, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x9e, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xd6, (uintptr_t)data + 0x2c);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _LOAD_SUPER_ATTR_METHOD.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 15: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 19: 83 b8 a8 00 00 00 00          cmpl    $0x0, 0xa8(%rax)
    // 20: 78 0b                         js      0x2d <_JIT_ENTRY+0x2d>
    // 22: 48 83 c4 28                   addq    $0x28, %rsp
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 2d: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 31: 49 8b 04 24                   movq    (%r12), %rax
    // 35: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 39: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 40: 83 e1 fc                      andl    $-0x4, %ecx
    // 43: 4c 8b 44 48 18                movq    0x18(%rax,%rcx,2), %r8
    // 48: c7 44 24 24 00 00 00 00       movl    $0x0, 0x24(%rsp)
    // 50: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 55: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 59: 48 8b 80 90 00 00 00          movq    0x90(%rax), %rax
    // 60: 31 c9                         xorl    %ecx, %ecx
    // 62: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  IMAGE_REL_AMD64_REL32        __imp_PyObject_GenericGetAttr
    // 69: 4c 8d 4c 24 24                leaq    0x24(%rsp), %r9
    // 6e: 4c 0f 45 c9                   cmovneq %rcx, %r9
    // 72: 48 89 d9                      movq    %rbx, %rcx
    // 75: 48 89 f2                      movq    %rsi, %rdx
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__PySuper_Lookup
    // 7e: 48 89 c7                      movq    %rax, %rdi
    // 81: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 86: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 8f: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // 96: 8b 08                         movl    (%rax), %ecx
    // 98: 85 c9                         testl   %ecx, %ecx
    // 9a: 78 13                         js      0xaf <_JIT_ENTRY+0xaf>
    // 9c: ff c9                         decl    %ecx
    // 9e: 89 08                         movl    %ecx, (%rax)
    // a0: 75 0d                         jne     0xaf <_JIT_ENTRY+0xaf>
    // a2: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa9 <_JIT_ENTRY+0xa9>
    // 00000000000000a5:  IMAGE_REL_AMD64_REL32        __imp_PySuper_Type
    // a9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xaf <_JIT_ENTRY+0xaf>
    // 00000000000000ab:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // af: 8b 03                         movl    (%rbx), %eax
    // b1: 85 c0                         testl   %eax, %eax
    // b3: 78 0f                         js      0xc4 <_JIT_ENTRY+0xc4>
    // b5: ff c8                         decl    %eax
    // b7: 89 03                         movl    %eax, (%rbx)
    // b9: 75 09                         jne     0xc4 <_JIT_ENTRY+0xc4>
    // bb: 48 89 d9                      movq    %rbx, %rcx
    // be: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c0:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c4: 48 85 ff                      testq   %rdi, %rdi
    // c7: 74 35                         je      0xfe <_JIT_ENTRY+0xfe>
    // c9: 83 7c 24 24 00                cmpl    $0x0, 0x24(%rsp)
    // ce: 75 17                         jne     0xe7 <_JIT_ENTRY+0xe7>
    // d0: 8b 06                         movl    (%rsi), %eax
    // d2: 85 c0                         testl   %eax, %eax
    // d4: 78 0f                         js      0xe5 <_JIT_ENTRY+0xe5>
    // d6: ff c8                         decl    %eax
    // d8: 89 06                         movl    %eax, (%rsi)
    // da: 75 09                         jne     0xe5 <_JIT_ENTRY+0xe5>
    // dc: 48 89 f1                      movq    %rsi, %rcx
    // df: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe5 <_JIT_ENTRY+0xe5>
    // 00000000000000e1:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // e5: 31 f6                         xorl    %esi, %esi
    // e7: 49 89 7d e8                   movq    %rdi, -0x18(%r13)
    // eb: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
    // ef: 49 83 c5 f8                   addq    $-0x8, %r13
    // f3: 48 83 c4 28                   addq    $0x28, %rsp
    // f7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xfe <_JIT_ENTRY+0xfe>
    // 00000000000000fa:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // fe: 8b 06                         movl    (%rsi), %eax
    // 100: 85 c0                         testl   %eax, %eax
    // 102: 78 0f                         js      0x113 <_JIT_ENTRY+0x113>
    // 104: ff c8                         decl    %eax
    // 106: 89 06                         movl    %eax, (%rsi)
    // 108: 75 09                         jne     0x113 <_JIT_ENTRY+0x113>
    // 10a: 48 89 f1                      movq    %rsi, %rcx
    // 10d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x113 <_JIT_ENTRY+0x113>
    // 000000000000010f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 113: 48 83 c4 28                   addq    $0x28, %rsp
    // 117: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x11e <_JIT_ENTRY+0x11e>
    // 000000000000011a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[286] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xe8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x49, 0x8b, 0x5d, 0xf0, 0x48, 0x8b, 0x43,
        0x08, 0x83, 0xb8, 0xa8, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x0b, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75,
        0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x83, 0xe1, 0xfc, 0x4c, 0x8b, 0x44, 0x48, 0x18,
        0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0x46,
        0x08, 0x48, 0x8b, 0x80, 0x90, 0x00, 0x00, 0x00,
        0x31, 0xc9, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8d, 0x4c, 0x24, 0x24, 0x4c, 0x0f,
        0x45, 0xc9, 0x48, 0x89, 0xd9, 0x48, 0x89, 0xf2,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7,
        0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x13, 0xff, 0xc9, 0x89, 0x08,
        0x75, 0x0d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89,
        0x03, 0x75, 0x09, 0x48, 0x89, 0xd9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xff, 0x74,
        0x35, 0x83, 0x7c, 0x24, 0x24, 0x00, 0x75, 0x17,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8,
        0x89, 0x06, 0x75, 0x09, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x49,
        0x89, 0x7d, 0xe8, 0x49, 0x89, 0x75, 0xf0, 0x49,
        0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x06,
        0x75, 0x09, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &PyObject_GenericGetAttr+0x0
    // 20: &_PySuper_Lookup+0x0
    // 28: &_Py_Dealloc+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x20, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa5, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xe1, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xfa, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x10f, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x11a, (uintptr_t)data + 0x34);
}

void
emit__MAKE_CALLARGS_A_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CALLARGS_A_TUPLE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 3d 00 00 00 00             movl    (%rip), %edi            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: 83 e7 01                      andl    $0x1, %edi
    // d: 75 04                         jne     0x13 <_JIT_ENTRY+0x13>
    // f: 31 db                         xorl    %ebx, %ebx
    // 11: eb 04                         jmp     0x17 <_JIT_ENTRY+0x17>
    // 13: 49 8b 5d f8                   movq    -0x8(%r13), %rbx
    // 17: 89 f8                         movl    %edi, %eax
    // 19: f7 d0                         notl    %eax
    // 1b: 4c 63 f8                      movslq  %eax, %r15
    // 1e: 4b 8b 74 fd 00                movq    (%r13,%r15,8), %rsi
    // 23: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 27: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_Type
    // 2e: 74 6e                         je      0x9e <_JIT_ENTRY+0x9e>
    // 30: 89 f8                         movl    %edi, %eax
    // 32: 83 f0 fd                      xorl    $-0x3, %eax
    // 35: 48 98                         cltq
    // 37: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 3c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 41: 4c 89 f1                      movq    %r14, %rcx
    // 44: 49 89 f0                      movq    %rsi, %r8
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__Py_Check_ArgsIterable
    // 4d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 52: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5b: 85 c0                         testl   %eax, %eax
    // 5d: 78 57                         js      0xb6 <_JIT_ENTRY+0xb6>
    // 5f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 64: 48 89 f1                      movq    %rsi, %rcx
    // 67: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6d <_JIT_ENTRY+0x6d>
    // 0000000000000069:  IMAGE_REL_AMD64_REL32        __imp_PySequence_Tuple
    // 6d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 72: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 7b: 48 85 c0                      testq   %rax, %rax
    // 7e: 74 36                         je      0xb6 <_JIT_ENTRY+0xb6>
    // 80: 8b 0e                         movl    (%rsi), %ecx
    // 82: 85 c9                         testl   %ecx, %ecx
    // 84: 78 15                         js      0x9b <_JIT_ENTRY+0x9b>
    // 86: ff c9                         decl    %ecx
    // 88: 89 0e                         movl    %ecx, (%rsi)
    // 8a: 75 0f                         jne     0x9b <_JIT_ENTRY+0x9b>
    // 8c: 48 89 f1                      movq    %rsi, %rcx
    // 8f: 48 89 c6                      movq    %rax, %rsi
    // 92: ff 15 00 00 00 00             callq   *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 98: 48 89 f0                      movq    %rsi, %rax
    // 9b: 48 89 c6                      movq    %rax, %rsi
    // 9e: 4b 89 74 fd 00                movq    %rsi, (%r13,%r15,8)
    // a3: 85 ff                         testl   %edi, %edi
    // a5: 74 04                         je      0xab <_JIT_ENTRY+0xab>
    // a7: 49 89 5d f8                   movq    %rbx, -0x8(%r13)
    // ab: 48 83 c4 28                   addq    $0x28, %rsp
    // af: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb6 <_JIT_ENTRY+0xb6>
    // 00000000000000b2:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // b6: 48 83 c4 28                   addq    $0x28, %rsp
    // ba: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[193] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x83, 0xe7, 0x01, 0x75, 0x04, 0x31,
        0xdb, 0xeb, 0x04, 0x49, 0x8b, 0x5d, 0xf8, 0x89,
        0xf8, 0xf7, 0xd0, 0x4c, 0x63, 0xf8, 0x4b, 0x8b,
        0x74, 0xfd, 0x00, 0x48, 0x8b, 0x46, 0x08, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x6e,
        0x89, 0xf8, 0x83, 0xf0, 0xfd, 0x48, 0x98, 0x49,
        0x8b, 0x54, 0xc5, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0x49, 0x89, 0xf0, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x57, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x36,
        0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x15, 0xff, 0xc9,
        0x89, 0x0e, 0x75, 0x0f, 0x48, 0x89, 0xf1, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf0, 0x48, 0x89, 0xc6, 0x4b, 0x89,
        0x74, 0xfd, 0x00, 0x85, 0xff, 0x74, 0x04, 0x49,
        0x89, 0x5d, 0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: OPARG
    // 8: &PyTuple_Type+0x0
    // 10: &_Py_Check_ArgsIterable+0x0
    // 18: &PySequence_Tuple+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Check_ArgsIterable);
    patch_64(data + 0x18, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x69, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x2c);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_CELL.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 0f b7 c6                      movzwl  %si, %eax
    // e: 49 8b 4c c4 50                movq    0x50(%r12,%rax,8), %rcx
    // 13: ff 15 00 00 00 00             callq   *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  IMAGE_REL_AMD64_REL32        __imp_PyCell_New
    // 19: 48 85 c0                      testq   %rax, %rax
    // 1c: 74 29                         je      0x47 <_JIT_ENTRY+0x47>
    // 1e: 0f b7 d6                      movzwl  %si, %edx
    // 21: 49 8b 4c d4 50                movq    0x50(%r12,%rdx,8), %rcx
    // 26: 49 89 44 d4 50                movq    %rax, 0x50(%r12,%rdx,8)
    // 2b: 48 85 c9                      testq   %rcx, %rcx
    // 2e: 74 0c                         je      0x3c <_JIT_ENTRY+0x3c>
    // 30: 8b 01                         movl    (%rcx), %eax
    // 32: 85 c0                         testl   %eax, %eax
    // 34: 78 06                         js      0x3c <_JIT_ENTRY+0x3c>
    // 36: ff c8                         decl    %eax
    // 38: 89 01                         movl    %eax, (%rcx)
    // 3a: 74 16                         je      0x52 <_JIT_ENTRY+0x52>
    // 3c: 48 83 c4 28                   addq    $0x28, %rsp
    // 40: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 47: 48 83 c4 28                   addq    $0x28, %rsp
    // 4b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 52: ff 15 00 00 00 00             callq   *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[92] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc6, 0x49, 0x8b,
        0x4c, 0xc4, 0x50, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x0f, 0xb7,
        0xd6, 0x49, 0x8b, 0x4c, 0xd4, 0x50, 0x49, 0x89,
        0x44, 0xd4, 0x50, 0x48, 0x85, 0xc9, 0x74, 0x0c,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x16, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PyCell_New+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCell_New);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0x1c);
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_FUNCTION.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 49 8b 54 24 18                movq    0x18(%r12), %rdx
    // 12: 48 89 f1                      movq    %rsi, %rcx
    // 15: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp_PyFunction_New
    // 1b: 48 89 c7                      movq    %rax, %rdi
    // 1e: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 23: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2c: 8b 06                         movl    (%rsi), %eax
    // 2e: 85 c0                         testl   %eax, %eax
    // 30: 78 06                         js      0x38 <_JIT_ENTRY+0x38>
    // 32: ff c8                         decl    %eax
    // 34: 89 06                         movl    %eax, (%rsi)
    // 36: 74 20                         je      0x58 <_JIT_ENTRY+0x58>
    // 38: 48 85 ff                      testq   %rdi, %rdi
    // 3b: 74 29                         je      0x66 <_JIT_ENTRY+0x66>
    // 3d: 8b 56 5c                      movl    0x5c(%rsi), %edx
    // 40: 48 89 f9                      movq    %rdi, %rcx
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__PyFunction_SetVersion
    // 49: 49 89 7d f8                   movq    %rdi, -0x8(%r13)
    // 4d: 48 83 c4 28                   addq    $0x28, %rsp
    // 51: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 58: 48 89 f1                      movq    %rsi, %rcx
    // 5b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 61: 48 85 ff                      testq   %rdi, %rdi
    // 64: 75 d7                         jne     0x3d <_JIT_ENTRY+0x3d>
    // 66: 48 83 c4 28                   addq    $0x28, %rsp
    // 6a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[113] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x54,
        0x24, 0x18, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x20,
        0x48, 0x85, 0xff, 0x74, 0x29, 0x8b, 0x56, 0x5c,
        0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0x7d, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xff, 0x75, 0xd7, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &PyFunction_New+0x0
    // 8: &_PyFunction_SetVersion+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFunction_New);
    patch_64(data + 0x8, (uintptr_t)&_PyFunction_SetVersion);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x1c);
}

void
emit__MAKE_WARM(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAKE_WARM.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_EXECUTOR
    // 7: c6 40 23 01                   movb    $0x1, 0x23(%rax)
    // b: 49 8b 46 10                   movq    0x10(%r14), %rax
    // f: 48 ff 88 08 66 03 00          decq    0x36608(%rax)
    // 16: 74 07                         je      0x1f <_JIT_ENTRY+0x1f>
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1f: f0                            lock
    // 20: 49 81 4e 18 80 00 00 00       orq     $0x80, 0x18(%r14)
    // 28: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[40] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc6,
        0x40, 0x23, 0x01, 0x49, 0x8b, 0x46, 0x10, 0x48,
        0xff, 0x88, 0x08, 0x66, 0x03, 0x00, 0x74, 0x07,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xf0,
        0x49, 0x81, 0x4e, 0x18, 0x80, 0x00, 0x00, 0x00,
    };
    // 0: EXECUTOR
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0x4);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAP_ADD.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // f: 4d 8b 45 f8                   movq    -0x8(%r13), %r8
    // 13: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 1a: 48 29 c1                      subq    %rax, %rcx
    // 1d: 49 8b 4c cd 00                movq    (%r13,%rcx,8), %rcx
    // 22: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__PyDict_SetItem_Take2
    // 2d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 32: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 74 0b                         je      0x4a <_JIT_ENTRY+0x4a>
    // 3f: 48 83 c4 28                   addq    $0x28, %rsp
    // 43: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 4a: 49 83 c5 f0                   addq    $-0x10, %r13
    // 4e: 48 83 c4 28                   addq    $0x28, %rsp
    // 52: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[82] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x55, 0xf0, 0x4d,
        0x8b, 0x45, 0xf8, 0x48, 0xc7, 0xc1, 0xfe, 0xff,
        0xff, 0xff, 0x48, 0x29, 0xc1, 0x49, 0x8b, 0x4c,
        0xcd, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x83, 0xc5, 0xf0, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &_PyDict_SetItem_Take2+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0xc);
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_CLASS.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 4d 8b 7d e8                   movq    -0x18(%r13), %r15
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: 44 0f b7 0d 00 00 00 00       movzwl  (%rip), %r9d            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1d: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
    // 22: 4c 89 f1                      movq    %r14, %rcx
    // 25: 4c 89 fa                      movq    %r15, %rdx
    // 28: 49 89 d8                      movq    %rbx, %r8
    // 2b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp__PyEval_MatchClass
    // 31: 48 89 c6                      movq    %rax, %rsi
    // 34: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 39: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 42: 41 8b 07                      movl    (%r15), %eax
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 78 10                         js      0x59 <_JIT_ENTRY+0x59>
    // 49: ff c8                         decl    %eax
    // 4b: 41 89 07                      movl    %eax, (%r15)
    // 4e: 75 09                         jne     0x59 <_JIT_ENTRY+0x59>
    // 50: 4c 89 f9                      movq    %r15, %rcx
    // 53: ff 15 00 00 00 00             callq   *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 59: 8b 03                         movl    (%rbx), %eax
    // 5b: 85 c0                         testl   %eax, %eax
    // 5d: 78 0f                         js      0x6e <_JIT_ENTRY+0x6e>
    // 5f: ff c8                         decl    %eax
    // 61: 89 03                         movl    %eax, (%rbx)
    // 63: 75 09                         jne     0x6e <_JIT_ENTRY+0x6e>
    // 65: 48 89 d9                      movq    %rbx, %rcx
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 6e: 8b 07                         movl    (%rdi), %eax
    // 70: 85 c0                         testl   %eax, %eax
    // 72: 78 06                         js      0x7a <_JIT_ENTRY+0x7a>
    // 74: ff c8                         decl    %eax
    // 76: 89 07                         movl    %eax, (%rdi)
    // 78: 74 18                         je      0x92 <_JIT_ENTRY+0x92>
    // 7a: 48 85 f6                      testq   %rsi, %rsi
    // 7d: 74 21                         je      0xa0 <_JIT_ENTRY+0xa0>
    // 7f: 49 89 75 e8                   movq    %rsi, -0x18(%r13)
    // 83: 49 83 c5 f0                   addq    $-0x10, %r13
    // 87: 48 83 c4 28                   addq    $0x28, %rsp
    // 8b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 92: 48 89 f9                      movq    %rdi, %rcx
    // 95: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 9b: 48 85 f6                      testq   %rsi, %rsi
    // 9e: 75 df                         jne     0x7f <_JIT_ENTRY+0x7f>
    // a0: 49 8b 46 70                   movq    0x70(%r14), %rax
    // a4: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xab <_JIT_ENTRY+0xab>
    // 00000000000000a7:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // ab: 48 85 c0                      testq   %rax, %rax
    // ae: 74 cf                         je      0x7f <_JIT_ENTRY+0x7f>
    // b0: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // b5: 74 c8                         je      0x7f <_JIT_ENTRY+0x7f>
    // b7: 48 83 c4 28                   addq    $0x28, %rsp
    // bb: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[194] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x4d, 0x8b, 0x7d, 0xe8, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x44, 0x0f, 0xb7,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c,
        0x24, 0x20, 0x4c, 0x89, 0xf1, 0x4c, 0x89, 0xfa,
        0x49, 0x89, 0xd8, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xc6, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x10, 0xff, 0xc8, 0x41, 0x89, 0x07, 0x75, 0x09,
        0x4c, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xd9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x07,
        0x74, 0x18, 0x48, 0x85, 0xf6, 0x74, 0x21, 0x49,
        0x89, 0x75, 0xe8, 0x49, 0x83, 0xc5, 0xf0, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xf6, 0x75, 0xdf,
        0x49, 0x8b, 0x46, 0x70, 0x48, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xcf,
        0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0xc8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_MatchClass+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: &_Py_NoneStruct+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_MatchClass);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xbe, (uintptr_t)data + 0x24);
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_KEYS.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // 8: 4d 8b 45 f8                   movq    -0x8(%r13), %r8
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 4c 89 f1                      movq    %r14, %rcx
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__PyEval_MatchKeys
    // 1a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 28: 48 85 c0                      testq   %rax, %rax
    // 2b: 74 13                         je      0x40 <_JIT_ENTRY+0x40>
    // 2d: 49 89 45 00                   movq    %rax, (%r13)
    // 31: 49 83 c5 08                   addq    $0x8, %r13
    // 35: 48 83 c4 28                   addq    $0x28, %rsp
    // 39: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 40: 48 83 c4 28                   addq    $0x28, %rsp
    // 44: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[75] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x55, 0xf0,
        0x4d, 0x8b, 0x45, 0xf8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x13, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyEval_MatchKeys+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_MatchKeys);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0xc);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_MAPPING.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
    // f: 75 16                         jne     0x27 <_JIT_ENTRY+0x27>
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 18: 49 89 45 00                   movq    %rax, (%r13)
    // 1c: 49 83 c5 08                   addq    $0x8, %r13
    // 20: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 27: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 2e: 49 89 45 00                   movq    %rax, (%r13)
    // 32: 49 83 c5 08                   addq    $0x8, %r13
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[54] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x75,
        0x16, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_TrueStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0xc);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MATCH_SEQUENCE.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
    // f: 75 16                         jne     0x27 <_JIT_ENTRY+0x27>
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 18: 49 89 45 00                   movq    %rax, (%r13)
    // 1c: 49 83 c5 08                   addq    $0x8, %r13
    // 20: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 27: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 2e: 49 89 45 00                   movq    %rax, (%r13)
    // 32: 49 83 c5 08                   addq    $0x8, %r13
    // 36: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[54] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x75,
        0x16, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_TrueStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0xc);
}

void
emit__MAYBE_EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 10: 29 d0                         subl    %edx, %eax
    // 12: 48 98                         cltq
    // 14: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 19: 48 8b 71 08                   movq    0x8(%rcx), %rsi
    // 1d: 48 3b 35 00 00 00 00          cmpq    (%rip), %rsi            # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 24: 74 0b                         je      0x31 <_JIT_ENTRY+0x31>
    // 26: 48 83 c4 28                   addq    $0x28, %rsp
    // 2a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 31: f7 d2                         notl    %edx
    // 33: 48 63 d2                      movslq  %edx, %rdx
    // 36: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 3c: 75 e8                         jne     0x26 <_JIT_ENTRY+0x26>
    // 3e: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 42: 8b 3e                         movl    (%rsi), %edi
    // 44: 85 ff                         testl   %edi, %edi
    // 46: 78 04                         js      0x4c <_JIT_ENTRY+0x4c>
    // 48: ff c7                         incl    %edi
    // 4a: 89 3e                         movl    %edi, (%rsi)
    // 4c: 49 89 74 d5 00                movq    %rsi, (%r13,%rdx,8)
    // 51: 48 8b 51 10                   movq    0x10(%rcx), %rdx
    // 55: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 5a: 8b 32                         movl    (%rdx), %esi
    // 5c: 85 f6                         testl   %esi, %esi
    // 5e: 78 04                         js      0x64 <_JIT_ENTRY+0x64>
    // 60: ff c6                         incl    %esi
    // 62: 89 32                         movl    %esi, (%rdx)
    // 64: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
    // 69: 8b 01                         movl    (%rcx), %eax
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 78 b7                         js      0x26 <_JIT_ENTRY+0x26>
    // 6f: ff c8                         decl    %eax
    // 71: 89 01                         movl    %eax, (%rcx)
    // 73: 75 b1                         jne     0x26 <_JIT_ENTRY+0x26>
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7b: 48 83 c4 28                   addq    $0x28, %rsp
    // 7f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[127] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x4c, 0xc5,
        0x00, 0x48, 0x8b, 0x71, 0x08, 0x48, 0x3b, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xf7, 0xd2, 0x48, 0x63, 0xd2, 0x49, 0x83,
        0x7c, 0xd5, 0x00, 0x00, 0x75, 0xe8, 0x48, 0x8b,
        0x71, 0x18, 0x8b, 0x3e, 0x85, 0xff, 0x78, 0x04,
        0xff, 0xc7, 0x89, 0x3e, 0x49, 0x89, 0x74, 0xd5,
        0x00, 0x48, 0x8b, 0x51, 0x10, 0x49, 0x8b, 0x4c,
        0xc5, 0x00, 0x8b, 0x32, 0x85, 0xf6, 0x78, 0x04,
        0xff, 0xc6, 0x89, 0x32, 0x49, 0x89, 0x54, 0xc5,
        0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0xb7, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0xb1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x14);
}

void
emit__MAYBE_EXPAND_METHOD_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _MAYBE_EXPAND_METHOD_KW.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // f: b8 fd ff ff ff                movl    $0xfffffffd, %eax       # imm = 0xFFFFFFFD
    // 14: 29 c8                         subl    %ecx, %eax
    // 16: 48 98                         cltq
    // 18: 49 8b 54 c5 00                movq    (%r13,%rax,8), %rdx
    // 1d: 48 8b 7a 08                   movq    0x8(%rdx), %rdi
    // 21: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp_PyMethod_Type
    // 28: 74 0f                         je      0x39 <_JIT_ENTRY+0x39>
    // 2a: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 2e: 48 83 c4 28                   addq    $0x28, %rsp
    // 32: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 39: bf fe ff ff ff                movl    $0xfffffffe, %edi       # imm = 0xFFFFFFFE
    // 3e: 29 cf                         subl    %ecx, %edi
    // 40: 48 63 ff                      movslq  %edi, %rdi
    // 43: 49 83 7c fd 00 00             cmpq    $0x0, (%r13,%rdi,8)
    // 49: 75 df                         jne     0x2a <_JIT_ENTRY+0x2a>
    // 4b: 4c 8b 42 18                   movq    0x18(%rdx), %r8
    // 4f: 41 8b 18                      movl    (%r8), %ebx
    // 52: 48 89 d1                      movq    %rdx, %rcx
    // 55: 85 db                         testl   %ebx, %ebx
    // 57: 78 0a                         js      0x63 <_JIT_ENTRY+0x63>
    // 59: ff c3                         incl    %ebx
    // 5b: 41 89 18                      movl    %ebx, (%r8)
    // 5e: 49 8b 4c c5 00                movq    (%r13,%rax,8), %rcx
    // 63: 4d 89 44 fd 00                movq    %r8, (%r13,%rdi,8)
    // 68: 48 8b 52 10                   movq    0x10(%rdx), %rdx
    // 6c: 8b 3a                         movl    (%rdx), %edi
    // 6e: 85 ff                         testl   %edi, %edi
    // 70: 78 04                         js      0x76 <_JIT_ENTRY+0x76>
    // 72: ff c7                         incl    %edi
    // 74: 89 3a                         movl    %edi, (%rdx)
    // 76: 49 89 54 c5 00                movq    %rdx, (%r13,%rax,8)
    // 7b: 8b 01                         movl    (%rcx), %eax
    // 7d: 85 c0                         testl   %eax, %eax
    // 7f: 78 a9                         js      0x2a <_JIT_ENTRY+0x2a>
    // 81: ff c8                         decl    %eax
    // 83: 89 01                         movl    %eax, (%rcx)
    // 85: 75 a3                         jne     0x2a <_JIT_ENTRY+0x2a>
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 8d: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 91: 48 83 c4 28                   addq    $0x28, %rsp
    // 95: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[149] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0xf8, 0xb8,
        0xfd, 0xff, 0xff, 0xff, 0x29, 0xc8, 0x48, 0x98,
        0x49, 0x8b, 0x54, 0xc5, 0x00, 0x48, 0x8b, 0x7a,
        0x08, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x0f, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xcf,
        0x48, 0x63, 0xff, 0x49, 0x83, 0x7c, 0xfd, 0x00,
        0x00, 0x75, 0xdf, 0x4c, 0x8b, 0x42, 0x18, 0x41,
        0x8b, 0x18, 0x48, 0x89, 0xd1, 0x85, 0xdb, 0x78,
        0x0a, 0xff, 0xc3, 0x41, 0x89, 0x18, 0x49, 0x8b,
        0x4c, 0xc5, 0x00, 0x4d, 0x89, 0x44, 0xfd, 0x00,
        0x48, 0x8b, 0x52, 0x10, 0x8b, 0x3a, 0x85, 0xff,
        0x78, 0x04, 0xff, 0xc7, 0x89, 0x3a, 0x49, 0x89,
        0x54, 0xc5, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0xa9, 0xff, 0xc8, 0x89, 0x01, 0x75, 0xa3, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x75,
        0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x14);
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _NOP.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_EXCEPT.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 8b 56 78                   movq    0x78(%r14), %rdx
    // c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 11: 48 8b 0a                      movq    (%rdx), %rcx
    // 14: 31 f6                         xorl    %esi, %esi
    // 16: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 1d: 48 0f 45 f0                   cmovneq %rax, %rsi
    // 21: 48 89 32                      movq    %rsi, (%rdx)
    // 24: 48 85 c9                      testq   %rcx, %rcx
    // 27: 74 12                         je      0x3b <_JIT_ENTRY+0x3b>
    // 29: 8b 01                         movl    (%rcx), %eax
    // 2b: 85 c0                         testl   %eax, %eax
    // 2d: 78 0c                         js      0x3b <_JIT_ENTRY+0x3b>
    // 2f: ff c8                         decl    %eax
    // 31: 89 01                         movl    %eax, (%rcx)
    // 33: 75 06                         jne     0x3b <_JIT_ENTRY+0x3b>
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 40: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 49: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4d: 48 83 c4 28                   addq    $0x28, %rsp
    // 51: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[81] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x8b, 0x56, 0x78, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x0a, 0x31, 0xf6, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45,
        0xf0, 0x48, 0x89, 0x32, 0x48, 0x85, 0xc9, 0x74,
        0x12, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff,
        0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x4);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 8b 01                         movl    (%rcx), %eax
    // e: 85 c0                         testl   %eax, %eax
    // 10: 78 06                         js      0x18 <_JIT_ENTRY+0x18>
    // 12: ff c8                         decl    %eax
    // 14: 89 01                         movl    %eax, (%rcx)
    // 16: 74 0b                         je      0x23 <_JIT_ENTRY+0x23>
    // 18: 48 83 c4 28                   addq    $0x28, %rsp
    // 1c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 29: 48 83 c4 28                   addq    $0x28, %rsp
    // 2d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[45] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _POP_TOP_LOAD_CONST_INLINE_BORROW.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 8b 01                         movl    (%rcx), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 06                         js      0x14 <_JIT_ENTRY+0x14>
    // e: ff c8                         decl    %eax
    // 10: 89 01                         movl    %eax, (%rcx)
    // 12: 74 16                         je      0x2a <_JIT_ENTRY+0x2a>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 1b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1f: 48 83 c4 28                   addq    $0x28, %rsp
    // 23: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 30: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 37: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 3b: 48 83 c4 28                   addq    $0x28, %rsp
    // 3f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x16, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x45, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + -0x4);
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_EXC_INFO.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 8b 4e 78                   movq    0x78(%r14), %rcx
    // 8: 48 8b 11                      movq    (%rcx), %rdx
    // b: 8b 30                         movl    (%rax), %esi
    // d: 85 f6                         testl   %esi, %esi
    // f: 78 04                         js      0x15 <_JIT_ENTRY+0x15>
    // 11: ff c6                         incl    %esi
    // 13: 89 30                         movl    %esi, (%rax)
    // 15: 48 85 d2                      testq   %rdx, %rdx
    // 18: 75 07                         jne     0x21 <_JIT_ENTRY+0x21>
    // 1a: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 21: 48 89 01                      movq    %rax, (%rcx)
    // 24: 49 89 55 f8                   movq    %rdx, -0x8(%r13)
    // 28: 49 89 45 00                   movq    %rax, (%r13)
    // 2c: 49 83 c5 08                   addq    $0x8, %r13
    // 30: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[48] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x8b, 0x4e, 0x78,
        0x48, 0x8b, 0x11, 0x8b, 0x30, 0x85, 0xf6, 0x78,
        0x04, 0xff, 0xc6, 0x89, 0x30, 0x48, 0x85, 0xd2,
        0x75, 0x07, 0x48, 0x8b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x01, 0x49, 0x89, 0x55, 0xf8,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
    };
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + -0x4);
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_FRAME.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 49 83 c5 f8                   addq    $-0x8, %r13
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 49 89 46 48                   movq    %rax, 0x48(%r14)
    // 11: 41 ff 4e 2c                   decl    0x2c(%r14)
    // 15: 4c 8b 68 40                   movq    0x40(%rax), %r13
    // 19: 48 c7 40 40 00 00 00 00       movq    $0x0, 0x40(%rax)
    // 21: 49 89 c4                      movq    %rax, %r12
    // 24: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[36] = {
        0x49, 0x8b, 0x45, 0xf8, 0x49, 0x83, 0xc5, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x89, 0x46,
        0x48, 0x41, 0xff, 0x4e, 0x2c, 0x4c, 0x8b, 0x68,
        0x40, 0x48, 0xc7, 0x40, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x89, 0xc4,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PUSH_NULL.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 c7 45 00 00 00 00 00       movq    $0x0, (%r13)
    // 8: 49 83 c5 08                   addq    $0x8, %r13
    // c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[12] = {
        0x49, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x83, 0xc5, 0x08,
    };
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_GENERAL.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 4c 89 e8                      movq    %r13, %rax
    // 7: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // e: 8d 0c f5 00 00 00 00          leal    (,%rsi,8), %ecx
    // 15: 4c 89 ef                      movq    %r13, %rdi
    // 18: 48 29 cf                      subq    %rcx, %rdi
    // 1b: 89 f1                         movl    %esi, %ecx
    // 1d: f7 d1                         notl    %ecx
    // 1f: 48 63 d1                      movslq  %ecx, %rdx
    // 22: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 27: 29 f1                         subl    %esi, %ecx
    // 29: 4c 63 e9                      movslq  %ecx, %r13
    // 2c: 45 31 c0                      xorl    %r8d, %r8d
    // 2f: 31 c9                         xorl    %ecx, %ecx
    // 31: 48 83 3c d0 00                cmpq    $0x0, (%rax,%rdx,8)
    // 36: 4a 8b 14 e8                   movq    (%rax,%r13,8), %rdx
    // 3a: 41 0f 94 c0                   sete    %r8b
    // 3e: 0f 95 c1                      setne   %cl
    // 41: 01 f1                         addl    %esi, %ecx
    // 43: 4e 8d 0c c7                   leaq    (%rdi,%r8,8), %r9
    // 47: 49 83 c1 f8                   addq    $-0x8, %r9
    // 4b: 48 8b 72 30                   movq    0x30(%rdx), %rsi
    // 4f: f6 46 30 01                   testb   $0x1, 0x30(%rsi)
    // 53: 75 12                         jne     0x67 <_JIT_ENTRY+0x67>
    // 55: 4c 8b 42 10                   movq    0x10(%rdx), %r8
    // 59: 41 8b 10                      movl    (%r8), %edx
    // 5c: 85 d2                         testl   %edx, %edx
    // 5e: 78 0a                         js      0x6a <_JIT_ENTRY+0x6a>
    // 60: ff c2                         incl    %edx
    // 62: 41 89 10                      movl    %edx, (%r8)
    // 65: eb 03                         jmp     0x6a <_JIT_ENTRY+0x6a>
    // 67: 45 31 c0                      xorl    %r8d, %r8d
    // 6a: 49 89 44 24 40                movq    %rax, 0x40(%r12)
    // 6f: 89 c9                         movl    %ecx, %ecx
    // 71: 4a 8b 14 e8                   movq    (%rax,%r13,8), %rdx
    // 75: 49 c1 e5 03                   shlq    $0x3, %r13
    // 79: 4c 89 64 24 30                movq    %r12, 0x30(%rsp)
    // 7e: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
    // 83: 48 c7 44 24 28 00 00 00 00    movq    $0x0, 0x28(%rsp)
    // 8c: 4c 89 f1                      movq    %r14, %rcx
    // 8f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x95 <_JIT_ENTRY+0x95>
    // 0000000000000091:  IMAGE_REL_AMD64_REL32        __imp__PyEvalFramePushAndInit
    // 95: 4d 03 6c 24 40                addq    0x40(%r12), %r13
    // 9a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a3: 48 85 c0                      testq   %rax, %rax
    // a6: 74 13                         je      0xbb <_JIT_ENTRY+0xbb>
    // a8: 49 89 45 00                   movq    %rax, (%r13)
    // ac: 49 83 c5 08                   addq    $0x8, %r13
    // b0: 48 83 c4 38                   addq    $0x38, %rsp
    // b4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbb <_JIT_ENTRY+0xbb>
    // 00000000000000b7:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // bb: 48 83 c4 38                   addq    $0x38, %rsp
    // bf: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[198] = {
        0x48, 0x83, 0xec, 0x38, 0x4c, 0x89, 0xe8, 0x0f,
        0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x0c,
        0xf5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef,
        0x48, 0x29, 0xcf, 0x89, 0xf1, 0xf7, 0xd1, 0x48,
        0x63, 0xd1, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xf1, 0x4c, 0x63, 0xe9, 0x45, 0x31, 0xc0, 0x31,
        0xc9, 0x48, 0x83, 0x3c, 0xd0, 0x00, 0x4a, 0x8b,
        0x14, 0xe8, 0x41, 0x0f, 0x94, 0xc0, 0x0f, 0x95,
        0xc1, 0x01, 0xf1, 0x4e, 0x8d, 0x0c, 0xc7, 0x49,
        0x83, 0xc1, 0xf8, 0x48, 0x8b, 0x72, 0x30, 0xf6,
        0x46, 0x30, 0x01, 0x75, 0x12, 0x4c, 0x8b, 0x42,
        0x10, 0x41, 0x8b, 0x10, 0x85, 0xd2, 0x78, 0x0a,
        0xff, 0xc2, 0x41, 0x89, 0x10, 0xeb, 0x03, 0x45,
        0x31, 0xc0, 0x49, 0x89, 0x44, 0x24, 0x40, 0x89,
        0xc9, 0x4a, 0x8b, 0x14, 0xe8, 0x49, 0xc1, 0xe5,
        0x03, 0x4c, 0x89, 0x64, 0x24, 0x30, 0x48, 0x89,
        0x4c, 0x24, 0x20, 0x48, 0xc7, 0x44, 0x24, 0x28,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x03, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x13,
        0x49, 0x89, 0x45, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0x83, 0xc4, 0x38, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x14);
}

void
emit__PY_FRAME_KW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _PY_FRAME_KW.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 10: 29 c8                         subl    %ecx, %eax
    // 12: 48 63 d0                      movslq  %eax, %rdx
    // 15: bf fd ff ff ff                movl    $0xfffffffd, %edi       # imm = 0xFFFFFFFD
    // 1a: 29 cf                         subl    %ecx, %edi
    // 1c: 45 31 c0                      xorl    %r8d, %r8d
    // 1f: 31 c0                         xorl    %eax, %eax
    // 21: 49 83 7c d5 00 00             cmpq    $0x0, (%r13,%rdx,8)
    // 27: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 2b: 41 0f 94 c0                   sete    %r8b
    // 2f: 0f 95 c0                      setne   %al
    // 32: 01 c8                         addl    %ecx, %eax
    // 34: f7 d1                         notl    %ecx
    // 36: 48 63 c9                      movslq  %ecx, %rcx
    // 39: 48 8d 14 cd 00 00 00 00       leaq    (,%rcx,8), %rdx
    // 41: 4c 01 ea                      addq    %r13, %rdx
    // 44: 48 63 ff                      movslq  %edi, %rdi
    // 47: 49 8b 4c fd 00                movq    (%r13,%rdi,8), %rcx
    // 4c: 4e 8d 0c c2                   leaq    (%rdx,%r8,8), %r9
    // 50: 49 83 c1 f8                   addq    $-0x8, %r9
    // 54: 48 8b 51 30                   movq    0x30(%rcx), %rdx
    // 58: 2b 46 10                      subl    0x10(%rsi), %eax
    // 5b: f6 42 30 01                   testb   $0x1, 0x30(%rdx)
    // 5f: 75 12                         jne     0x73 <_JIT_ENTRY+0x73>
    // 61: 4c 8b 41 10                   movq    0x10(%rcx), %r8
    // 65: 41 8b 08                      movl    (%r8), %ecx
    // 68: 85 c9                         testl   %ecx, %ecx
    // 6a: 78 0a                         js      0x76 <_JIT_ENTRY+0x76>
    // 6c: ff c1                         incl    %ecx
    // 6e: 41 89 08                      movl    %ecx, (%r8)
    // 71: eb 03                         jmp     0x76 <_JIT_ENTRY+0x76>
    // 73: 45 31 c0                      xorl    %r8d, %r8d
    // 76: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7b: 48 98                         cltq
    // 7d: 49 8b 54 fd 00                movq    (%r13,%rdi,8), %rdx
    // 82: 4c 89 64 24 30                movq    %r12, 0x30(%rsp)
    // 87: 48 89 74 24 28                movq    %rsi, 0x28(%rsp)
    // 8c: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 91: 4c 89 f1                      movq    %r14, %rcx
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp__PyEvalFramePushAndInit
    // 9a: 49 8b 5c 24 40                movq    0x40(%r12), %rbx
    // 9f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a8: 8b 0e                         movl    (%rsi), %ecx
    // aa: 85 c9                         testl   %ecx, %ecx
    // ac: 78 06                         js      0xb4 <_JIT_ENTRY+0xb4>
    // ae: ff c9                         decl    %ecx
    // b0: 89 0e                         movl    %ecx, (%rsi)
    // b2: 74 1c                         je      0xd0 <_JIT_ENTRY+0xd0>
    // b4: 4c 8d 2c fb                   leaq    (%rbx,%rdi,8), %r13
    // b8: 48 85 c0                      testq   %rax, %rax
    // bb: 74 2b                         je      0xe8 <_JIT_ENTRY+0xe8>
    // bd: 49 89 45 00                   movq    %rax, (%r13)
    // c1: 49 83 c5 08                   addq    $0x8, %r13
    // c5: 48 83 c4 38                   addq    $0x38, %rsp
    // c9: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd0 <_JIT_ENTRY+0xd0>
    // 00000000000000cc:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // d0: 48 89 f1                      movq    %rsi, %rcx
    // d3: 48 89 c6                      movq    %rax, %rsi
    // d6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000d8:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // dc: 48 89 f0                      movq    %rsi, %rax
    // df: 4c 8d 2c fb                   leaq    (%rbx,%rdi,8), %r13
    // e3: 48 85 c0                      testq   %rax, %rax
    // e6: 75 d5                         jne     0xbd <_JIT_ENTRY+0xbd>
    // e8: 48 83 c4 38                   addq    $0x38, %rsp
    // ec: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf3 <_JIT_ENTRY+0xf3>
    // 00000000000000ef:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[243] = {
        0x48, 0x83, 0xec, 0x38, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc8, 0x48, 0x63, 0xd0, 0xbf, 0xfd, 0xff,
        0xff, 0xff, 0x29, 0xcf, 0x45, 0x31, 0xc0, 0x31,
        0xc0, 0x49, 0x83, 0x7c, 0xd5, 0x00, 0x00, 0x49,
        0x8b, 0x75, 0xf8, 0x41, 0x0f, 0x94, 0xc0, 0x0f,
        0x95, 0xc0, 0x01, 0xc8, 0xf7, 0xd1, 0x48, 0x63,
        0xc9, 0x48, 0x8d, 0x14, 0xcd, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x01, 0xea, 0x48, 0x63, 0xff, 0x49,
        0x8b, 0x4c, 0xfd, 0x00, 0x4e, 0x8d, 0x0c, 0xc2,
        0x49, 0x83, 0xc1, 0xf8, 0x48, 0x8b, 0x51, 0x30,
        0x2b, 0x46, 0x10, 0xf6, 0x42, 0x30, 0x01, 0x75,
        0x12, 0x4c, 0x8b, 0x41, 0x10, 0x41, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x0a, 0xff, 0xc1, 0x41, 0x89,
        0x08, 0xeb, 0x03, 0x45, 0x31, 0xc0, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x98, 0x49, 0x8b, 0x54,
        0xfd, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x30, 0x48,
        0x89, 0x74, 0x24, 0x28, 0x48, 0x89, 0x44, 0x24,
        0x20, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x5c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9,
        0x89, 0x0e, 0x74, 0x1c, 0x4c, 0x8d, 0x2c, 0xfb,
        0x48, 0x85, 0xc0, 0x74, 0x2b, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x38, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0x48, 0x89, 0xc6, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf0, 0x4c,
        0x8d, 0x2c, 0xfb, 0x48, 0x85, 0xc0, 0x75, 0xd5,
        0x48, 0x83, 0xc4, 0x38, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xcc, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xef, (uintptr_t)data + 0x1c);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _REPLACE_WITH_TRUE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 8b 01                         movl    (%rcx), %eax
    // a: 85 c0                         testl   %eax, %eax
    // c: 78 06                         js      0x14 <_JIT_ENTRY+0x14>
    // e: ff c8                         decl    %eax
    // 10: 89 01                         movl    %eax, (%rcx)
    // 12: 74 16                         je      0x2a <_JIT_ENTRY+0x2a>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 1b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1f: 48 83 c4 28                   addq    $0x28, %rsp
    // 23: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 30: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 37: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 3b: 48 83 c4 28                   addq    $0x28, %rsp
    // 3f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[63] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x16, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x45, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &_Py_TrueStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + -0x4);
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RESUME_CHECK.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 4: 49 8b 0c 24                   movq    (%r12), %rcx
    // 8: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
    // f: 75 07                         jne     0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[31] = {
        0x49, 0x8b, 0x46, 0x18, 0x49, 0x8b, 0x0c, 0x24,
        0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00, 0x75,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0x4);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_GENERATOR.o:        file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4c 24 10                movq    0x10(%r12), %rcx
    // 9: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__Py_MakeCoro
    // 14: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 19: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 22: 48 85 c0                      testq   %rax, %rax
    // 25: 0f 84 b3 01 00 00             je      0x1de <_JIT_ENTRY+0x1de>
    // 2b: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 30: 49 83 44 24 38 02             addq    $0x2, 0x38(%r12)
    // 36: 49 8b 4c 24 50                movq    0x50(%r12), %rcx
    // 3b: 48 89 88 98 00 00 00          movq    %rcx, 0x98(%rax)
    // 42: 41 0f 10 04 24                movups  (%r12), %xmm0
    // 47: 41 0f 10 4c 24 10             movups  0x10(%r12), %xmm1
    // 4d: 41 0f 10 54 24 20             movups  0x20(%r12), %xmm2
    // 53: 0f 11 50 68                   movups  %xmm2, 0x68(%rax)
    // 57: 0f 11 48 58                   movups  %xmm1, 0x58(%rax)
    // 5b: 0f 11 40 48                   movups  %xmm0, 0x48(%rax)
    // 5f: 41 0f 10 44 24 40             movups  0x40(%r12), %xmm0
    // 65: 0f 11 80 88 00 00 00          movups  %xmm0, 0x88(%rax)
    // 6c: 41 0f 10 44 24 30             movups  0x30(%r12), %xmm0
    // 72: 0f 11 40 78                   movups  %xmm0, 0x78(%rax)
    // 76: 49 8d 54 24 50                leaq    0x50(%r12), %rdx
    // 7b: 49 8b 74 24 40                movq    0x40(%r12), %rsi
    // 80: 48 29 d6                      subq    %rdx, %rsi
    // 83: 48 c1 ee 03                   shrq    $0x3, %rsi
    // 87: 48 63 ce                      movslq  %esi, %rcx
    // 8a: 48 8d 3c c8                   leaq    (%rax,%rcx,8), %rdi
    // 8e: 48 81 c7 98 00 00 00          addq    $0x98, %rdi
    // 95: 48 89 b8 88 00 00 00          movq    %rdi, 0x88(%rax)
    // 9c: 83 f9 02                      cmpl    $0x2, %ecx
    // 9f: 0f 8c e8 00 00 00             jl      0x18d <_JIT_ENTRY+0x18d>
    // a5: 89 f1                         movl    %esi, %ecx
    // a7: 81 e1 ff ff ff 7f             andl    $0x7fffffff, %ecx       # imm = 0x7FFFFFFF
    // ad: 4c 8d 41 ff                   leaq    -0x1(%rcx), %r8
    // b1: bf 01 00 00 00                movl    $0x1, %edi
    // b6: 49 83 f8 08                   cmpq    $0x8, %r8
    // ba: 72 54                         jb      0x110 <_JIT_ENTRY+0x110>
    // bc: 49 89 c1                      movq    %rax, %r9
    // bf: 4d 29 e1                      subq    %r12, %r9
    // c2: 49 83 c1 48                   addq    $0x48, %r9
    // c6: 49 83 f9 20                   cmpq    $0x20, %r9
    // ca: 72 44                         jb      0x110 <_JIT_ENTRY+0x110>
    // cc: 4d 89 c1                      movq    %r8, %r9
    // cf: 49 83 e1 fc                   andq    $-0x4, %r9
    // d3: 49 8d 79 01                   leaq    0x1(%r9), %rdi
    // d7: 45 31 d2                      xorl    %r10d, %r10d
    // da: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
    // e0: 43 0f 10 44 d4 58             movups  0x58(%r12,%r10,8), %xmm0
    // e6: 43 0f 10 4c d4 68             movups  0x68(%r12,%r10,8), %xmm1
    // ec: 42 0f 11 84 d0 a0 00 00 00    movups  %xmm0, 0xa0(%rax,%r10,8)
    // f5: 42 0f 11 8c d0 b0 00 00 00    movups  %xmm1, 0xb0(%rax,%r10,8)
    // fe: 49 83 c2 04                   addq    $0x4, %r10
    // 102: 4d 39 d1                      cmpq    %r10, %r9
    // 105: 75 d9                         jne     0xe0 <_JIT_ENTRY+0xe0>
    // 107: 4d 39 c8                      cmpq    %r9, %r8
    // 10a: 0f 84 7d 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
    // 110: 29 fe                         subl    %edi, %esi
    // 112: 49 89 f8                      movq    %rdi, %r8
    // 115: 83 e6 03                      andl    $0x3, %esi
    // 118: 74 26                         je      0x140 <_JIT_ENTRY+0x140>
    // 11a: 49 89 c1                      movq    %rax, %r9
    // 11d: 49 81 c1 98 00 00 00          addq    $0x98, %r9
    // 124: 49 89 f8                      movq    %rdi, %r8
    // 127: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
    // 130: 4e 8b 14 c2                   movq    (%rdx,%r8,8), %r10
    // 134: 4f 89 14 c1                   movq    %r10, (%r9,%r8,8)
    // 138: 49 ff c0                      incq    %r8
    // 13b: 48 ff ce                      decq    %rsi
    // 13e: 75 f0                         jne     0x130 <_JIT_ENTRY+0x130>
    // 140: 48 29 cf                      subq    %rcx, %rdi
    // 143: 48 83 ff fc                   cmpq    $-0x4, %rdi
    // 147: 77 44                         ja      0x18d <_JIT_ENTRY+0x18d>
    // 149: 0f 1f 80 00 00 00 00          nopl    (%rax)
    // 150: 4b 8b 54 c4 50                movq    0x50(%r12,%r8,8), %rdx
    // 155: 4a 89 94 c0 98 00 00 00       movq    %rdx, 0x98(%rax,%r8,8)
    // 15d: 4b 8b 54 c4 58                movq    0x58(%r12,%r8,8), %rdx
    // 162: 4a 89 94 c0 a0 00 00 00       movq    %rdx, 0xa0(%rax,%r8,8)
    // 16a: 4b 8b 54 c4 60                movq    0x60(%r12,%r8,8), %rdx
    // 16f: 4a 89 94 c0 a8 00 00 00       movq    %rdx, 0xa8(%rax,%r8,8)
    // 177: 4b 8b 54 c4 68                movq    0x68(%r12,%r8,8), %rdx
    // 17c: 4a 89 94 c0 b0 00 00 00       movq    %rdx, 0xb0(%rax,%r8,8)
    // 184: 49 83 c0 04                   addq    $0x4, %r8
    // 188: 4c 39 c1                      cmpq    %r8, %rcx
    // 18b: 75 c3                         jne     0x150 <_JIT_ENTRY+0x150>
    // 18d: 48 c7 40 50 00 00 00 00       movq    $0x0, 0x50(%rax)
    // 195: c6 40 43 fd                   movb    $-0x3, 0x43(%rax)
    // 199: c6 80 92 00 00 00 01          movb    $0x1, 0x92(%rax)
    // 1a0: 41 ff 46 2c                   incl    0x2c(%r14)
    // 1a4: 49 8b 74 24 08                movq    0x8(%r12), %rsi
    // 1a9: 4c 89 f1                      movq    %r14, %rcx
    // 1ac: 4c 89 e2                      movq    %r12, %rdx
    // 1af: 48 89 c7                      movq    %rax, %rdi
    // 1b2: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1b8 <_JIT_ENTRY+0x1b8>
    // 00000000000001b4:  IMAGE_REL_AMD64_REL32        __imp__PyThreadState_PopFrame
    // 1b8: 49 89 76 48                   movq    %rsi, 0x48(%r14)
    // 1bc: 4c 8b 6e 40                   movq    0x40(%rsi), %r13
    // 1c0: 48 c7 46 40 00 00 00 00       movq    $0x0, 0x40(%rsi)
    // 1c8: 49 89 7d 00                   movq    %rdi, (%r13)
    // 1cc: 49 83 c5 08                   addq    $0x8, %r13
    // 1d0: 49 89 f4                      movq    %rsi, %r12
    // 1d3: 48 83 c4 28                   addq    $0x28, %rsp
    // 1d7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1de <_JIT_ENTRY+0x1de>
    // 00000000000001da:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 1de: 48 83 c4 28                   addq    $0x28, %rsp
    // 1e2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1e9 <_JIT_ENTRY+0x1e9>
    // 00000000000001e5:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[489] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4c, 0x24,
        0x10, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xb3,
        0x01, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x49, 0x83, 0x44, 0x24, 0x38, 0x02, 0x49, 0x8b,
        0x4c, 0x24, 0x50, 0x48, 0x89, 0x88, 0x98, 0x00,
        0x00, 0x00, 0x41, 0x0f, 0x10, 0x04, 0x24, 0x41,
        0x0f, 0x10, 0x4c, 0x24, 0x10, 0x41, 0x0f, 0x10,
        0x54, 0x24, 0x20, 0x0f, 0x11, 0x50, 0x68, 0x0f,
        0x11, 0x48, 0x58, 0x0f, 0x11, 0x40, 0x48, 0x41,
        0x0f, 0x10, 0x44, 0x24, 0x40, 0x0f, 0x11, 0x80,
        0x88, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x10, 0x44,
        0x24, 0x30, 0x0f, 0x11, 0x40, 0x78, 0x49, 0x8d,
        0x54, 0x24, 0x50, 0x49, 0x8b, 0x74, 0x24, 0x40,
        0x48, 0x29, 0xd6, 0x48, 0xc1, 0xee, 0x03, 0x48,
        0x63, 0xce, 0x48, 0x8d, 0x3c, 0xc8, 0x48, 0x81,
        0xc7, 0x98, 0x00, 0x00, 0x00, 0x48, 0x89, 0xb8,
        0x88, 0x00, 0x00, 0x00, 0x83, 0xf9, 0x02, 0x0f,
        0x8c, 0xe8, 0x00, 0x00, 0x00, 0x89, 0xf1, 0x81,
        0xe1, 0xff, 0xff, 0xff, 0x7f, 0x4c, 0x8d, 0x41,
        0xff, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xf8, 0x08, 0x72, 0x54, 0x49, 0x89, 0xc1, 0x4d,
        0x29, 0xe1, 0x49, 0x83, 0xc1, 0x48, 0x49, 0x83,
        0xf9, 0x20, 0x72, 0x44, 0x4d, 0x89, 0xc1, 0x49,
        0x83, 0xe1, 0xfc, 0x49, 0x8d, 0x79, 0x01, 0x45,
        0x31, 0xd2, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x43, 0x0f, 0x10, 0x44, 0xd4, 0x58, 0x43, 0x0f,
        0x10, 0x4c, 0xd4, 0x68, 0x42, 0x0f, 0x11, 0x84,
        0xd0, 0xa0, 0x00, 0x00, 0x00, 0x42, 0x0f, 0x11,
        0x8c, 0xd0, 0xb0, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc2, 0x04, 0x4d, 0x39, 0xd1, 0x75, 0xd9, 0x4d,
        0x39, 0xc8, 0x0f, 0x84, 0x7d, 0x00, 0x00, 0x00,
        0x29, 0xfe, 0x49, 0x89, 0xf8, 0x83, 0xe6, 0x03,
        0x74, 0x26, 0x49, 0x89, 0xc1, 0x49, 0x81, 0xc1,
        0x98, 0x00, 0x00, 0x00, 0x49, 0x89, 0xf8, 0x66,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x8b, 0x14, 0xc2, 0x4f, 0x89, 0x14, 0xc1,
        0x49, 0xff, 0xc0, 0x48, 0xff, 0xce, 0x75, 0xf0,
        0x48, 0x29, 0xcf, 0x48, 0x83, 0xff, 0xfc, 0x77,
        0x44, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x4b, 0x8b, 0x54, 0xc4, 0x50, 0x4a, 0x89, 0x94,
        0xc0, 0x98, 0x00, 0x00, 0x00, 0x4b, 0x8b, 0x54,
        0xc4, 0x58, 0x4a, 0x89, 0x94, 0xc0, 0xa0, 0x00,
        0x00, 0x00, 0x4b, 0x8b, 0x54, 0xc4, 0x60, 0x4a,
        0x89, 0x94, 0xc0, 0xa8, 0x00, 0x00, 0x00, 0x4b,
        0x8b, 0x54, 0xc4, 0x68, 0x4a, 0x89, 0x94, 0xc0,
        0xb0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc0, 0x04,
        0x4c, 0x39, 0xc1, 0x75, 0xc3, 0x48, 0xc7, 0x40,
        0x50, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x40, 0x43,
        0xfd, 0xc6, 0x80, 0x92, 0x00, 0x00, 0x00, 0x01,
        0x41, 0xff, 0x46, 0x2c, 0x49, 0x8b, 0x74, 0x24,
        0x08, 0x4c, 0x89, 0xf1, 0x4c, 0x89, 0xe2, 0x48,
        0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x76, 0x48, 0x4c, 0x8b, 0x6e, 0x40,
        0x48, 0xc7, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x49, 0x89, 0xf4, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: &_Py_MakeCoro+0x0
    // 8: &_PyThreadState_PopFrame+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_MakeCoro);
    patch_64(data + 0x8, (uintptr_t)&_PyThreadState_PopFrame);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1b4, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1da, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x1e5, (uintptr_t)data + 0x14);
}

void
emit__RETURN_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _RETURN_VALUE.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 e2                      movq    %r12, %rdx
    // 7: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // b: 49 83 c5 f8                   addq    $-0x8, %r13
    // f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 14: 41 ff 46 2c                   incl    0x2c(%r14)
    // 18: 4d 8b 64 24 08                movq    0x8(%r12), %r12
    // 1d: 4d 89 66 48                   movq    %r12, 0x48(%r14)
    // 21: 4c 89 f1                      movq    %r14, %rcx
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp__PyEval_FrameClearAndPop
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 49 89 75 00                   movq    %rsi, (%r13)
    // 3c: 49 83 c5 08                   addq    $0x8, %r13
    // 40: 48 83 c4 28                   addq    $0x28, %rsp
    // 44: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[68] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0xe2, 0x49,
        0x8b, 0x75, 0xf8, 0x49, 0x83, 0xc5, 0xf8, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x41, 0xff, 0x46, 0x2c,
        0x4d, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x89, 0x66,
        0x48, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x75, 0x00, 0x49, 0x83, 0xc5, 0x08,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &_PyEval_FrameClearAndPop+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FrameClearAndPop);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + -0x4);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SAVE_RETURN_OFFSET.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 66 41 89 44 24 48             movw    %ax, 0x48(%r12)
    // d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[13] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x41, 0x89, 0x44, 0x24, 0x48,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__SEND_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SEND_GEN_FRAME.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyGen_Type
    // f: 0f 94 c2                      sete    %dl
    // 12: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  IMAGE_REL_AMD64_REL32        __imp_PyCoro_Type
    // 19: 0f 94 c1                      sete    %cl
    // 1c: 08 d1                         orb     %dl, %cl
    // 1e: 74 06                         je      0x26 <_JIT_ENTRY+0x26>
    // 20: 80 78 43 00                   cmpb    $0x0, 0x43(%rax)
    // 24: 78 07                         js      0x2d <_JIT_ENTRY+0x2d>
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 2d: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 31: 48 8d 50 48                   leaq    0x48(%rax), %rdx
    // 35: 48 8b b0 88 00 00 00          movq    0x88(%rax), %rsi
    // 3c: 48 89 0e                      movq    %rcx, (%rsi)
    // 3f: 48 83 80 88 00 00 00 08       addq    $0x8, 0x88(%rax)
    // 47: c6 40 43 00                   movb    $0x0, 0x43(%rax)
    // 4b: 49 8b 4e 78                   movq    0x78(%r14), %rcx
    // 4f: 48 8d 70 28                   leaq    0x28(%rax), %rsi
    // 53: 48 89 48 30                   movq    %rcx, 0x30(%rax)
    // 57: 49 89 76 78                   movq    %rsi, 0x78(%r14)
    // 5b: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 61: 83 c1 02                      addl    $0x2, %ecx
    // 64: 66 41 89 4c 24 48             movw    %cx, 0x48(%r12)
    // 6a: 4c 89 60 50                   movq    %r12, 0x50(%rax)
    // 6e: 49 89 55 f8                   movq    %rdx, -0x8(%r13)
    // 72: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x79 <_JIT_ENTRY+0x79>
    // 0000000000000075:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[114] = {
        0x49, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x94, 0xc2, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x94, 0xc1, 0x08, 0xd1, 0x74, 0x06,
        0x80, 0x78, 0x43, 0x00, 0x78, 0x07, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d,
        0xf8, 0x48, 0x8d, 0x50, 0x48, 0x48, 0x8b, 0xb0,
        0x88, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0e, 0x48,
        0x83, 0x80, 0x88, 0x00, 0x00, 0x00, 0x08, 0xc6,
        0x40, 0x43, 0x00, 0x49, 0x8b, 0x4e, 0x78, 0x48,
        0x8d, 0x70, 0x28, 0x48, 0x89, 0x48, 0x30, 0x49,
        0x89, 0x76, 0x78, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xc1, 0x02, 0x66, 0x41, 0x89, 0x4c,
        0x24, 0x48, 0x4c, 0x89, 0x60, 0x50, 0x49, 0x89,
        0x55, 0xf8,
    };
    // 0: &PyGen_Type+0x0
    // 8: &PyCoro_Type+0x0
    // 10: JUMP_TARGET
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x14);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SETUP_ANNOTATIONS.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
    // 9: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // e: 48 85 c9                      testq   %rcx, %rcx
    // 11: 74 4e                         je      0x61 <_JIT_ENTRY+0x61>
    // 13: ba 40 8d 00 00                movl    $0x8d40, %edx           # imm = 0x8D40
    // 18: 48 03 15 00 00 00 00          addq    (%rip), %rdx            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 1f: 4c 8d 44 24 20                leaq    0x20(%rsp), %r8
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  IMAGE_REL_AMD64_REL32        __imp_PyMapping_GetOptionalItem
    // 2a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 4d                         js      0x89 <_JIT_ENTRY+0x89>
    // 3c: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // 41: 48 85 c9                      testq   %rcx, %rcx
    // 44: 74 4e                         je      0x94 <_JIT_ENTRY+0x94>
    // 46: 8b 01                         movl    (%rcx), %eax
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 0a                         js      0x56 <_JIT_ENTRY+0x56>
    // 4c: ff c8                         decl    %eax
    // 4e: 89 01                         movl    %eax, (%rcx)
    // 50: 0f 84 bc 00 00 00             je      0x112 <_JIT_ENTRY+0x112>
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 61: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  IMAGE_REL_AMD64_REL32        __imp_PyExc_SystemError
    // 68: 48 8b 10                      movq    (%rax), %rdx
    // 6b: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        ??_C@_0CM@CAADNNCE@no?5locals?5found?5when?5setting?5up?5@
    // 72: 4c 89 f1                      movq    %r14, %rcx
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // 7b: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 80: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 89: 48 83 c4 28                   addq    $0x28, %rsp
    // 8d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 94: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 99: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  IMAGE_REL_AMD64_REL32        __imp_PyDict_New
    // 9f: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // a4: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // a9: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // b2: 48 85 c0                      testq   %rax, %rax
    // b5: 74 d2                         je      0x89 <_JIT_ENTRY+0x89>
    // b7: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // bc: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
    // c1: ba 40 8d 00 00                movl    $0x8d40, %edx           # imm = 0x8D40
    // c6: 48 03 15 00 00 00 00          addq    (%rip), %rdx            # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // cd: 49 89 c0                      movq    %rax, %r8
    // d0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd6 <_JIT_ENTRY+0xd6>
    // 00000000000000d2:  IMAGE_REL_AMD64_REL32        __imp_PyObject_SetItem
    // d6: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // db: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // e4: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // e9: 8b 11                         movl    (%rcx), %edx
    // eb: 85 d2                         testl   %edx, %edx
    // ed: 78 10                         js      0xff <_JIT_ENTRY+0xff>
    // ef: ff ca                         decl    %edx
    // f1: 89 11                         movl    %edx, (%rcx)
    // f3: 75 0a                         jne     0xff <_JIT_ENTRY+0xff>
    // f5: 89 c6                         movl    %eax, %esi
    // f7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xfd <_JIT_ENTRY+0xfd>
    // 00000000000000f9:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // fd: 89 f0                         movl    %esi, %eax
    // ff: 85 c0                         testl   %eax, %eax
    // 101: 0f 84 4f ff ff ff             je      0x56 <_JIT_ENTRY+0x56>
    // 107: 48 83 c4 28                   addq    $0x28, %rsp
    // 10b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x112 <_JIT_ENTRY+0x112>
    // 000000000000010e:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 112: ff 15 00 00 00 00             callq   *(%rip)                 # 0x118 <_JIT_ENTRY+0x118>
    // 0000000000000114:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 118: 48 83 c4 28                   addq    $0x28, %rsp
    // 11c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x123 <_JIT_ENTRY+0x123>
    // 000000000000011f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[284] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4c, 0x24,
        0x28, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x85,
        0xc9, 0x74, 0x4e, 0xba, 0x40, 0x8d, 0x00, 0x00,
        0x48, 0x03, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8d, 0x44, 0x24, 0x20, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x4d, 0x48, 0x8b, 0x4c, 0x24,
        0x20, 0x48, 0x85, 0xc9, 0x74, 0x4e, 0x8b, 0x01,
        0x85, 0xc0, 0x78, 0x0a, 0xff, 0xc8, 0x89, 0x01,
        0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x10, 0x4c, 0x8d, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xf1, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x44, 0x24, 0x20, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xd2, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x49, 0x8b, 0x4c, 0x24,
        0x28, 0xba, 0x40, 0x8d, 0x00, 0x00, 0x48, 0x03,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24,
        0x20, 0x8b, 0x11, 0x85, 0xd2, 0x78, 0x10, 0xff,
        0xca, 0x89, 0x11, 0x75, 0x0a, 0x89, 0xc6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x85,
        0xc0, 0x0f, 0x84, 0x4f, 0xff, 0xff, 0xff, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &_PyRuntime+0x0
    // 38: &PyMapping_GetOptionalItem+0x0
    // 40: CONTINUE
    // 48: &PyExc_SystemError+0x0
    // 50: &_PyErr_Format+0x0
    // 58: ERROR_TARGET
    // 60: &PyDict_New+0x0
    // 68: &PyObject_SetItem+0x0
    // 70: &_Py_Dealloc+0x0
    const unsigned char data_body[120] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x38, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x48, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x58, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x60, (uintptr_t)&PyDict_New);
    patch_64(data + 0x68, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x70, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x90, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xd2, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xf9, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x10e, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x114, (uintptr_t)data + 0x6c);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_ADD.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: f7 d0                         notl    %eax
    // c: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 19: 49 8b 4c 05 00                movq    (%r13,%rax), %rcx
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f2                      movq    %rsi, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp_PySet_Add
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 8b 0e                         movl    (%rsi), %ecx
    // 3c: 85 c9                         testl   %ecx, %ecx
    // 3e: 78 06                         js      0x46 <_JIT_ENTRY+0x46>
    // 40: ff c9                         decl    %ecx
    // 42: 89 0e                         movl    %ecx, (%rsi)
    // 44: 74 0f                         je      0x55 <_JIT_ENTRY+0x55>
    // 46: 85 c0                         testl   %eax, %eax
    // 48: 74 1c                         je      0x66 <_JIT_ENTRY+0x66>
    // 4a: 48 83 c4 28                   addq    $0x28, %rsp
    // 4e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 55: 48 89 f1                      movq    %rsi, %rcx
    // 58: 89 c6                         movl    %eax, %esi
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 60: 89 f0                         movl    %esi, %eax
    // 62: 85 c0                         testl   %eax, %eax
    // 64: 75 e4                         jne     0x4a <_JIT_ENTRY+0x4a>
    // 66: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6a: 48 83 c4 28                   addq    $0x28, %rsp
    // 6e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[110] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x75, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x4c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x06,
        0xff, 0xc9, 0x89, 0x0e, 0x74, 0x0f, 0x85, 0xc0,
        0x74, 0x1c, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xf0, 0x85, 0xc0, 0x75, 0xe4, 0x49, 0x83,
        0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PySet_Add+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySet_Add);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x14);
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_FUNCTION_ATTRIBUTE.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 4: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // 8: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // c: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 13: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  IMAGE_REL_AMD64_REL32        __imp__Py_FunctionAttributeOffsets
    // 1a: 48 8b 34 f7                   movq    (%rdi,%rsi,8), %rsi
    // 1e: 48 89 0c 32                   movq    %rcx, (%rdx,%rsi)
    // 22: 49 89 55 f0                   movq    %rdx, -0x10(%r13)
    // 26: 49 89 c5                      movq    %rax, %r13
    // 29: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[41] = {
        0x49, 0x8d, 0x45, 0xf8, 0x49, 0x8b, 0x4d, 0xf0,
        0x49, 0x8b, 0x55, 0xf8, 0x0f, 0xb7, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x34, 0xf7, 0x48, 0x89,
        0x0c, 0x32, 0x49, 0x89, 0x55, 0xf0, 0x49, 0x89,
        0xc5,
    };
    // 0: OPARG
    // 8: &_Py_FunctionAttributeOffsets+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_FunctionAttributeOffsets);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_IP.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 7: 49 89 44 24 38                movq    %rax, 0x38(%r12)
    // c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[12] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x44, 0x24, 0x38,
    };
    // 0: OPERAND0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SET_UPDATE.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: f7 d0                         notl    %eax
    // c: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 10: c1 e0 03                      shll    $0x3, %eax
    // 13: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 19: 49 8b 4c 05 00                movq    (%r13,%rax), %rcx
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 f2                      movq    %rsi, %rdx
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__PySet_Update
    // 2c: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 31: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3a: 8b 0e                         movl    (%rsi), %ecx
    // 3c: 85 c9                         testl   %ecx, %ecx
    // 3e: 78 06                         js      0x46 <_JIT_ENTRY+0x46>
    // 40: ff c9                         decl    %ecx
    // 42: 89 0e                         movl    %ecx, (%rsi)
    // 44: 74 13                         je      0x59 <_JIT_ENTRY+0x59>
    // 46: 85 c0                         testl   %eax, %eax
    // 48: 78 20                         js      0x6a <_JIT_ENTRY+0x6a>
    // 4a: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4e: 48 83 c4 28                   addq    $0x28, %rsp
    // 52: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 59: 48 89 f1                      movq    %rsi, %rcx
    // 5c: 89 c6                         movl    %eax, %esi
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 64: 89 f0                         movl    %esi, %eax
    // 66: 85 c0                         testl   %eax, %eax
    // 68: 79 e0                         jns     0x4a <_JIT_ENTRY+0x4a>
    // 6a: 48 83 c4 28                   addq    $0x28, %rsp
    // 6e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[117] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0xf7, 0xd0, 0x49, 0x8b, 0x75, 0xf8,
        0xc1, 0xe0, 0x03, 0x48, 0x0d, 0x00, 0x00, 0xf8,
        0xff, 0x49, 0x8b, 0x4c, 0x05, 0x00, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0xf2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24,
        0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x06,
        0xff, 0xc9, 0x89, 0x0e, 0x74, 0x13, 0x85, 0xc0,
        0x78, 0x20, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x85, 0xc0,
        0x79, 0xe0, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PySet_Update+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PySet_Update);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x1c);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _START_EXECUTOR.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 8e 08 01 00 00          movq    0x108(%r14), %rcx
    // b: 8b 01                         movl    (%rcx), %eax
    // d: 85 c0                         testl   %eax, %eax
    // f: 78 06                         js      0x17 <_JIT_ENTRY+0x17>
    // 11: ff c8                         decl    %eax
    // 13: 89 01                         movl    %eax, (%rcx)
    // 15: 74 16                         je      0x2d <_JIT_ENTRY+0x2d>
    // 17: 49 c7 86 08 01 00 00 00 00 00 00      movq    $0x0, 0x108(%r14)
    // 22: 48 83 c4 28                   addq    $0x28, %rsp
    // 26: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 2d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 33: 49 c7 86 08 01 00 00 00 00 00 00      movq    $0x0, 0x108(%r14)
    // 3e: 48 83 c4 28                   addq    $0x28, %rsp
    // 42: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[66] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x8e, 0x08,
        0x01, 0x00, 0x00, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x16, 0x49,
        0xc7, 0x86, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0xc7, 0x86, 0x08, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x4);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 49 8b 04 24                   movq    (%r12), %rax
    // 10: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 14: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1b: 48 8b 54 c8 18                movq    0x18(%rax,%rcx,8), %rdx
    // 20: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 25: 48 89 f1                      movq    %rsi, %rcx
    // 28: 49 89 d8                      movq    %rbx, %r8
    // 2b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  IMAGE_REL_AMD64_REL32        __imp_PyObject_SetAttr
    // 31: 89 c7                         movl    %eax, %edi
    // 33: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 38: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 41: 8b 03                         movl    (%rbx), %eax
    // 43: 85 c0                         testl   %eax, %eax
    // 45: 78 0f                         js      0x56 <_JIT_ENTRY+0x56>
    // 47: ff c8                         decl    %eax
    // 49: 89 03                         movl    %eax, (%rbx)
    // 4b: 75 09                         jne     0x56 <_JIT_ENTRY+0x56>
    // 4d: 48 89 d9                      movq    %rbx, %rcx
    // 50: ff 15 00 00 00 00             callq   *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 56: 8b 06                         movl    (%rsi), %eax
    // 58: 85 c0                         testl   %eax, %eax
    // 5a: 78 06                         js      0x62 <_JIT_ENTRY+0x62>
    // 5c: ff c8                         decl    %eax
    // 5e: 89 06                         movl    %eax, (%rsi)
    // 60: 74 0f                         je      0x71 <_JIT_ENTRY+0x71>
    // 62: 85 ff                         testl   %edi, %edi
    // 64: 74 18                         je      0x7e <_JIT_ENTRY+0x7e>
    // 66: 48 83 c4 28                   addq    $0x28, %rsp
    // 6a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 71: 48 89 f1                      movq    %rsi, %rcx
    // 74: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7a <_JIT_ENTRY+0x7a>
    // 0000000000000076:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7a: 85 ff                         testl   %edi, %edi
    // 7c: 75 e8                         jne     0x66 <_JIT_ENTRY+0x66>
    // 7e: 49 83 c5 f0                   addq    $-0x10, %r13
    // 82: 48 83 c4 28                   addq    $0x28, %rsp
    // 86: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[134] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x5d, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0xc8, 0x18,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0x49, 0x89, 0xd8, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xc7, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xd9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x0f, 0x85, 0xff, 0x74, 0x18, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xff, 0x75, 0xe8, 0x49, 0x83,
        0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &PyObject_SetAttr+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetAttr);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0xc);
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_INSTANCE_VALUE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 55 f0                   movq    -0x10(%r13), %rdx
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 13: 48 8b 0c 06                   movq    (%rsi,%rax), %rcx
    // 17: 48 89 14 06                   movq    %rdx, (%rsi,%rax)
    // 1b: 48 85 c9                      testq   %rcx, %rcx
    // 1e: 74 14                         je      0x34 <_JIT_ENTRY+0x34>
    // 20: 8b 01                         movl    (%rcx), %eax
    // 22: 85 c0                         testl   %eax, %eax
    // 24: 78 46                         js      0x6c <_JIT_ENTRY+0x6c>
    // 26: ff c8                         decl    %eax
    // 28: 89 01                         movl    %eax, (%rcx)
    // 2a: 75 40                         jne     0x6c <_JIT_ENTRY+0x6c>
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 32: eb 38                         jmp     0x6c <_JIT_ENTRY+0x6c>
    // 34: 48 01 f0                      addq    %rsi, %rax
    // 37: 48 8b 4e 08                   movq    0x8(%rsi), %rcx
    // 3b: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 3f: 48 8d 14 0e                   leaq    (%rsi,%rcx), %rdx
    // 43: 48 8d 3c 0e                   leaq    (%rsi,%rcx), %rdi
    // 47: 48 83 c7 08                   addq    $0x8, %rdi
    // 4b: 29 f8                         subl    %edi, %eax
    // 4d: c1 e8 03                      shrl    $0x3, %eax
    // 50: 0f b6 7c 0e 01                movzbl  0x1(%rsi,%rcx), %edi
    // 55: 44 0f b6 04 0e                movzbl  (%rsi,%rcx), %r8d
    // 5a: 4a 8d 14 c2                   leaq    (%rdx,%r8,8), %rdx
    // 5e: 48 83 c2 08                   addq    $0x8, %rdx
    // 62: 88 04 17                      movb    %al, (%rdi,%rdx)
    // 65: 8d 47 01                      leal    0x1(%rdi), %eax
    // 68: 88 44 0e 01                   movb    %al, 0x1(%rsi,%rcx)
    // 6c: 49 83 c5 f0                   addq    $-0x10, %r13
    // 70: 8b 06                         movl    (%rsi), %eax
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 78 06                         js      0x7c <_JIT_ENTRY+0x7c>
    // 76: ff c8                         decl    %eax
    // 78: 89 06                         movl    %eax, (%rsi)
    // 7a: 74 0b                         je      0x87 <_JIT_ENTRY+0x87>
    // 7c: 48 83 c4 28                   addq    $0x28, %rsp
    // 80: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 87: 48 89 f1                      movq    %rsi, %rcx
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x90 <_JIT_ENTRY+0x90>
    // 000000000000008c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 90: 48 83 c4 28                   addq    $0x28, %rsp
    // 94: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[148] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x55, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x06, 0x48,
        0x89, 0x14, 0x06, 0x48, 0x85, 0xc9, 0x74, 0x14,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x46, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0x40, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x38, 0x48, 0x01, 0xf0, 0x48,
        0x8b, 0x4e, 0x08, 0x48, 0x8b, 0x49, 0x20, 0x48,
        0x8d, 0x14, 0x0e, 0x48, 0x8d, 0x3c, 0x0e, 0x48,
        0x83, 0xc7, 0x08, 0x29, 0xf8, 0xc1, 0xe8, 0x03,
        0x0f, 0xb6, 0x7c, 0x0e, 0x01, 0x44, 0x0f, 0xb6,
        0x04, 0x0e, 0x4a, 0x8d, 0x14, 0xc2, 0x48, 0x83,
        0xc2, 0x08, 0x88, 0x04, 0x17, 0x8d, 0x47, 0x01,
        0x88, 0x44, 0x0e, 0x01, 0x49, 0x83, 0xc5, 0xf0,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x06, 0x74, 0x0b, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + 0x4);
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_SLOT.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f0                   movq    -0x10(%r13), %rax
    // 8: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // c: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 13: 48 8b 0c 16                   movq    (%rsi,%rdx), %rcx
    // 17: 48 89 04 16                   movq    %rax, (%rsi,%rdx)
    // 1b: 48 85 c9                      testq   %rcx, %rcx
    // 1e: 74 12                         je      0x32 <_JIT_ENTRY+0x32>
    // 20: 8b 01                         movl    (%rcx), %eax
    // 22: 85 c0                         testl   %eax, %eax
    // 24: 78 0c                         js      0x32 <_JIT_ENTRY+0x32>
    // 26: ff c8                         decl    %eax
    // 28: 89 01                         movl    %eax, (%rcx)
    // 2a: 75 06                         jne     0x32 <_JIT_ENTRY+0x32>
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 32: 49 83 c5 f0                   addq    $-0x10, %r13
    // 36: 8b 06                         movl    (%rsi), %eax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 06                         js      0x42 <_JIT_ENTRY+0x42>
    // 3c: ff c8                         decl    %eax
    // 3e: 89 06                         movl    %eax, (%rsi)
    // 40: 74 0b                         je      0x4d <_JIT_ENTRY+0x4d>
    // 42: 48 83 c4 28                   addq    $0x28, %rsp
    // 46: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4d: 48 89 f1                      movq    %rsi, %rcx
    // 50: ff 15 00 00 00 00             callq   *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[90] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf0,
        0x49, 0x8b, 0x75, 0xf8, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x16, 0x48,
        0x89, 0x04, 0x16, 0x48, 0x85, 0xc9, 0x74, 0x12,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x83, 0xc5, 0xf0, 0x8b, 0x06,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x06,
        0x74, 0x0b, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x4);
}

void
emit__STORE_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_ATTR_WITH_HINT.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4c 8b 46 e8                   movq    -0x18(%rsi), %r8
    // c: 4d 85 c0                      testq   %r8, %r8
    // f: 74 44                         je      0x55 <_JIT_ENTRY+0x55>
    // 11: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPERAND0
    // 18: 49 8b 50 20                   movq    0x20(%r8), %rdx
    // 1c: 48 39 42 18                   cmpq    %rax, 0x18(%rdx)
    // 20: 76 33                         jbe     0x55 <_JIT_ENTRY+0x55>
    // 22: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
    // 26: 74 2d                         je      0x55 <_JIT_ENTRY+0x55>
    // 28: 49 8b 0c 24                   movq    (%r12), %rcx
    // 2c: 48 8b 49 20                   movq    0x20(%rcx), %rcx
    // 30: 0f b7 3d 00 00 00 00          movzwl  (%rip), %edi            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 37: 4c 8b 4c f9 18                movq    0x18(%rcx,%rdi,8), %r9
    // 3c: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // 40: bf 01 00 00 00                movl    $0x1, %edi
    // 45: 48 d3 e7                      shlq    %cl, %rdi
    // 48: 48 01 d7                      addq    %rdx, %rdi
    // 4b: c1 e0 04                      shll    $0x4, %eax
    // 4e: 4c 39 4c 38 20                cmpq    %r9, 0x20(%rax,%rdi)
    // 53: 74 0b                         je      0x60 <_JIT_ENTRY+0x60>
    // 55: 48 83 c4 28                   addq    $0x28, %rsp
    // 59: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 60: 48 8d 1c 38                   leaq    (%rax,%rdi), %rbx
    // 64: 48 83 c3 20                   addq    $0x20, %rbx
    // 68: 48 8b 7b 08                   movq    0x8(%rbx), %rdi
    // 6c: 48 85 ff                      testq   %rdi, %rdi
    // 6f: 74 e4                         je      0x55 <_JIT_ENTRY+0x55>
    // 71: 4d 8b 7d f0                   movq    -0x10(%r13), %r15
    // 75: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 7a: 41 0f b6 48 18                movzbl  0x18(%r8), %ecx
    // 7f: 85 c9                         testl   %ecx, %ecx
    // 81: 74 15                         je      0x98 <_JIT_ENTRY+0x98>
    // 83: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
    // 88: ba 01 00 00 00                movl    $0x1, %edx
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  IMAGE_REL_AMD64_REL32        __imp__PyDict_SendEvent
    // 93: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 98: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a1: 4c 89 7b 08                   movq    %r15, 0x8(%rbx)
    // a5: 8b 07                         movl    (%rdi), %eax
    // a7: 85 c0                         testl   %eax, %eax
    // a9: 78 0f                         js      0xba <_JIT_ENTRY+0xba>
    // ab: ff c8                         decl    %eax
    // ad: 89 07                         movl    %eax, (%rdi)
    // af: 75 09                         jne     0xba <_JIT_ENTRY+0xba>
    // b1: 48 89 f9                      movq    %rdi, %rcx
    // b4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // ba: 8b 06                         movl    (%rsi), %eax
    // bc: 85 c0                         testl   %eax, %eax
    // be: 78 0f                         js      0xcf <_JIT_ENTRY+0xcf>
    // c0: ff c8                         decl    %eax
    // c2: 89 06                         movl    %eax, (%rsi)
    // c4: 75 09                         jne     0xcf <_JIT_ENTRY+0xcf>
    // c6: 48 89 f1                      movq    %rsi, %rcx
    // c9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcf <_JIT_ENTRY+0xcf>
    // 00000000000000cb:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // cf: 49 83 c5 f0                   addq    $-0x10, %r13
    // d3: 48 83 c4 28                   addq    $0x28, %rsp
    // d7: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xde <_JIT_ENTRY+0xde>
    // 00000000000000da:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[215] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4c, 0x8b, 0x46, 0xe8, 0x4d, 0x85, 0xc0, 0x74,
        0x44, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x50, 0x20, 0x48, 0x39, 0x42, 0x18,
        0x76, 0x33, 0x80, 0x7a, 0x0a, 0x00, 0x74, 0x2d,
        0x49, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x49, 0x20,
        0x0f, 0xb7, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8b, 0x4c, 0xf9, 0x18, 0x0f, 0xb6, 0x4a, 0x09,
        0xbf, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe7,
        0x48, 0x01, 0xd7, 0xc1, 0xe0, 0x04, 0x4c, 0x39,
        0x4c, 0x38, 0x20, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8d, 0x1c, 0x38, 0x48, 0x83, 0xc3, 0x20,
        0x48, 0x8b, 0x7b, 0x08, 0x48, 0x85, 0xff, 0x74,
        0xe4, 0x4d, 0x8b, 0x7d, 0xf0, 0x4d, 0x89, 0x6c,
        0x24, 0x40, 0x41, 0x0f, 0xb6, 0x48, 0x18, 0x85,
        0xc9, 0x74, 0x15, 0x4c, 0x89, 0x7c, 0x24, 0x20,
        0xba, 0x01, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40,
        0x49, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0x7b, 0x08, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89, 0x07, 0x75,
        0x09, 0x48, 0x89, 0xf9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f,
        0xff, 0xc8, 0x89, 0x06, 0x75, 0x09, 0x48, 0x89,
        0xf1, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x83, 0xc5, 0xf0, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPERAND0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: &_PyDict_SendEvent+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand0);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_PyDict_SendEvent);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0x1c);
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_DEREF.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // f: 49 8b 54 cc 50                movq    0x50(%r12,%rcx,8), %rdx
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: 48 8b 4a 10                   movq    0x10(%rdx), %rcx
    // 1d: 48 89 42 10                   movq    %rax, 0x10(%rdx)
    // 21: 48 85 c9                      testq   %rcx, %rcx
    // 24: 74 12                         je      0x38 <_JIT_ENTRY+0x38>
    // 26: 8b 01                         movl    (%rcx), %eax
    // 28: 85 c0                         testl   %eax, %eax
    // 2a: 78 0c                         js      0x38 <_JIT_ENTRY+0x38>
    // 2c: ff c8                         decl    %eax
    // 2e: 89 01                         movl    %eax, (%rcx)
    // 30: 75 06                         jne     0x38 <_JIT_ENTRY+0x38>
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3d: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 46: 49 83 c5 f8                   addq    $-0x8, %r13
    // 4a: 48 83 c4 28                   addq    $0x28, %rsp
    // 4e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[78] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x54, 0xcc, 0x50, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x48, 0x8b, 0x4a, 0x10, 0x48, 0x89, 0x42,
        0x10, 0x48, 0x85, 0xc9, 0x74, 0x12, 0x8b, 0x01,
        0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8, 0x89, 0x01,
        0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83,
        0xc5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 13: 49 8b 4c d4 50                movq    0x50(%r12,%rdx,8), %rcx
    // 18: 49 89 44 d4 50                movq    %rax, 0x50(%r12,%rdx,8)
    // 1d: 48 85 c9                      testq   %rcx, %rcx
    // 20: 74 0c                         je      0x2e <_JIT_ENTRY+0x2e>
    // 22: 8b 01                         movl    (%rcx), %eax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 06                         js      0x2e <_JIT_ENTRY+0x2e>
    // 28: ff c8                         decl    %eax
    // 2a: 89 01                         movl    %eax, (%rcx)
    // 2c: 74 0b                         je      0x39 <_JIT_ENTRY+0x39>
    // 2e: 48 83 c4 28                   addq    $0x28, %rsp
    // 32: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3f: 48 83 c4 28                   addq    $0x28, %rsp
    // 43: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[67] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0xd4, 0x50,
        0x49, 0x89, 0x44, 0xd4, 0x50, 0x48, 0x85, 0xc9,
        0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06,
        0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc4, 0x28,
    };
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_0.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 50                movq    0x50(%r12), %rcx
    // 11: 49 89 44 24 50                movq    %rax, 0x50(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x50, 0x49, 0x89, 0x44, 0x24, 0x50, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_1.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 58                movq    0x58(%r12), %rcx
    // 11: 49 89 44 24 58                movq    %rax, 0x58(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x58, 0x49, 0x89, 0x44, 0x24, 0x58, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_2.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 60                movq    0x60(%r12), %rcx
    // 11: 49 89 44 24 60                movq    %rax, 0x60(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x60, 0x49, 0x89, 0x44, 0x24, 0x60, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_3.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 68                movq    0x68(%r12), %rcx
    // 11: 49 89 44 24 68                movq    %rax, 0x68(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x68, 0x49, 0x89, 0x44, 0x24, 0x68, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_4.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 70                movq    0x70(%r12), %rcx
    // 11: 49 89 44 24 70                movq    %rax, 0x70(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x70, 0x49, 0x89, 0x44, 0x24, 0x70, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_5.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 4c 24 78                movq    0x78(%r12), %rcx
    // 11: 49 89 44 24 78                movq    %rax, 0x78(%r12)
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 0c                         je      0x27 <_JIT_ENTRY+0x27>
    // 1b: 8b 01                         movl    (%rcx), %eax
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 06                         js      0x27 <_JIT_ENTRY+0x27>
    // 21: ff c8                         decl    %eax
    // 23: 89 01                         movl    %eax, (%rcx)
    // 25: 74 0b                         je      0x32 <_JIT_ENTRY+0x32>
    // 27: 48 83 c4 28                   addq    $0x28, %rsp
    // 2b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 38: 48 83 c4 28                   addq    $0x28, %rsp
    // 3c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[60] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x78, 0x49, 0x89, 0x44, 0x24, 0x78, 0x48, 0x85,
        0xc9, 0x74, 0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_6.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 8c 24 80 00 00 00       movq    0x80(%r12), %rcx
    // 14: 49 89 84 24 80 00 00 00       movq    %rax, 0x80(%r12)
    // 1c: 48 85 c9                      testq   %rcx, %rcx
    // 1f: 74 0c                         je      0x2d <_JIT_ENTRY+0x2d>
    // 21: 8b 01                         movl    (%rcx), %eax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 06                         js      0x2d <_JIT_ENTRY+0x2d>
    // 27: ff c8                         decl    %eax
    // 29: 89 01                         movl    %eax, (%rcx)
    // 2b: 74 0b                         je      0x38 <_JIT_ENTRY+0x38>
    // 2d: 48 83 c4 28                   addq    $0x28, %rsp
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 38: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3e: 48 83 c4 28                   addq    $0x28, %rsp
    // 42: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[66] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x8c, 0x24,
        0x80, 0x00, 0x00, 0x00, 0x49, 0x89, 0x84, 0x24,
        0x80, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74,
        0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_FAST_7.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 8: 49 83 c5 f8                   addq    $-0x8, %r13
    // c: 49 8b 8c 24 88 00 00 00       movq    0x88(%r12), %rcx
    // 14: 49 89 84 24 88 00 00 00       movq    %rax, 0x88(%r12)
    // 1c: 48 85 c9                      testq   %rcx, %rcx
    // 1f: 74 0c                         je      0x2d <_JIT_ENTRY+0x2d>
    // 21: 8b 01                         movl    (%rcx), %eax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 06                         js      0x2d <_JIT_ENTRY+0x2d>
    // 27: ff c8                         decl    %eax
    // 29: 89 01                         movl    %eax, (%rcx)
    // 2b: 74 0b                         je      0x38 <_JIT_ENTRY+0x38>
    // 2d: 48 83 c4 28                   addq    $0x28, %rsp
    // 31: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 38: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3e: 48 83 c4 28                   addq    $0x28, %rsp
    // 42: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[66] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x45, 0xf8,
        0x49, 0x83, 0xc5, 0xf8, 0x49, 0x8b, 0x8c, 0x24,
        0x88, 0x00, 0x00, 0x00, 0x49, 0x89, 0x84, 0x24,
        0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74,
        0x0c, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x06, 0xff,
        0xc8, 0x89, 0x01, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x4);
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_GLOBAL.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1c: 48 8b 54 d0 18                movq    0x18(%rax,%rdx,8), %rdx
    // 21: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 26: 49 89 f0                      movq    %rsi, %r8
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  IMAGE_REL_AMD64_REL32        __imp_PyDict_SetItem
    // 2f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 34: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 3d: 8b 0e                         movl    (%rsi), %ecx
    // 3f: 85 c9                         testl   %ecx, %ecx
    // 41: 78 06                         js      0x49 <_JIT_ENTRY+0x49>
    // 43: ff c9                         decl    %ecx
    // 45: 89 0e                         movl    %ecx, (%rsi)
    // 47: 74 0f                         je      0x58 <_JIT_ENTRY+0x58>
    // 49: 85 c0                         testl   %eax, %eax
    // 4b: 74 1c                         je      0x69 <_JIT_ENTRY+0x69>
    // 4d: 48 83 c4 28                   addq    $0x28, %rsp
    // 51: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 58: 48 89 f1                      movq    %rsi, %rcx
    // 5b: 89 c6                         movl    %eax, %esi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 63: 89 f0                         movl    %esi, %eax
    // 65: 85 c0                         testl   %eax, %eax
    // 67: 75 e4                         jne     0x4d <_JIT_ENTRY+0x4d>
    // 69: 49 83 c5 f8                   addq    $-0x8, %r13
    // 6d: 48 83 c4 28                   addq    $0x28, %rsp
    // 71: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[113] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x4c, 0x24,
        0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x54, 0xd0,
        0x18, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x49, 0x89,
        0xf0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74,
        0x0f, 0x85, 0xc0, 0x74, 0x1c, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0x89, 0xc6, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xf0, 0x85, 0xc0, 0x75,
        0xe4, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83, 0xc4,
        0x28,
    };
    // 0: OPARG
    // 8: &PyDict_SetItem+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x14);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_NAME.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 49 8b 04 24                   movq    (%r12), %rax
    // c: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 1c: 4c 8b 4c d0 18                movq    0x18(%rax,%rdx,8), %r9
    // 21: 48 85 c9                      testq   %rcx, %rcx
    // 24: 74 20                         je      0x46 <_JIT_ENTRY+0x46>
    // 26: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // 2a: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2f: 4c 89 ca                      movq    %r9, %rdx
    // 32: 49 89 f0                      movq    %rsi, %r8
    // 35: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 3c: 74 4c                         je      0x8a <_JIT_ENTRY+0x8a>
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp_PyObject_SetItem
    // 44: eb 4a                         jmp     0x90 <_JIT_ENTRY+0x90>
    // 46: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 4b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  IMAGE_REL_AMD64_REL32        __imp_PyExc_SystemError
    // 52: 48 8b 10                      movq    (%rax), %rdx
    // 55: 4c 8d 05 00 00 00 00          leaq    (%rip), %r8             # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  IMAGE_REL_AMD64_REL32        ??_C@_0CA@PHPKHPGD@no?5locals?5found?5when?5storing?5?$CFR?$AA@
    // 5c: 4c 89 f1                      movq    %r14, %rcx
    // 5f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  IMAGE_REL_AMD64_REL32        __imp__PyErr_Format
    // 65: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 6a: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 73: 8b 06                         movl    (%rsi), %eax
    // 75: 85 c0                         testl   %eax, %eax
    // 77: 78 06                         js      0x7f <_JIT_ENTRY+0x7f>
    // 79: ff c8                         decl    %eax
    // 7b: 89 06                         movl    %eax, (%rsi)
    // 7d: 74 5a                         je      0xd9 <_JIT_ENTRY+0xd9>
    // 7f: 48 83 c4 28                   addq    $0x28, %rsp
    // 83: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8a <_JIT_ENTRY+0x8a>
    // 0000000000000086:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x90 <_JIT_ENTRY+0x90>
    // 000000000000008c:  IMAGE_REL_AMD64_REL32        __imp_PyDict_SetItem
    // 90: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 95: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 9e: 8b 0e                         movl    (%rsi), %ecx
    // a0: 85 c9                         testl   %ecx, %ecx
    // a2: 78 06                         js      0xaa <_JIT_ENTRY+0xaa>
    // a4: ff c9                         decl    %ecx
    // a6: 89 0e                         movl    %ecx, (%rsi)
    // a8: 74 0f                         je      0xb9 <_JIT_ENTRY+0xb9>
    // aa: 85 c0                         testl   %eax, %eax
    // ac: 74 1c                         je      0xca <_JIT_ENTRY+0xca>
    // ae: 48 83 c4 28                   addq    $0x28, %rsp
    // b2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xb9 <_JIT_ENTRY+0xb9>
    // 00000000000000b5:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // b9: 48 89 f1                      movq    %rsi, %rcx
    // bc: 89 c6                         movl    %eax, %esi
    // be: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c0:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c4: 89 f0                         movl    %esi, %eax
    // c6: 85 c0                         testl   %eax, %eax
    // c8: 75 e4                         jne     0xae <_JIT_ENTRY+0xae>
    // ca: 49 83 c5 f8                   addq    $-0x8, %r13
    // ce: 48 83 c4 28                   addq    $0x28, %rsp
    // d2: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd9 <_JIT_ENTRY+0xd9>
    // 00000000000000d5:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // d9: 48 89 f1                      movq    %rsi, %rcx
    // dc: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // e2: 48 83 c4 28                   addq    $0x28, %rsp
    // e6: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xed <_JIT_ENTRY+0xed>
    // 00000000000000e9:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[237] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x49, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x4c, 0x24,
        0x28, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x4c, 0xd0,
        0x18, 0x48, 0x85, 0xc9, 0x74, 0x20, 0x48, 0x8b,
        0x41, 0x08, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x4c,
        0x89, 0xca, 0x49, 0x89, 0xf0, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x4c, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x4a, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x10, 0x4c, 0x8d, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0, 0x78,
        0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x5a, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44,
        0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e,
        0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e,
        0x74, 0x0f, 0x85, 0xc0, 0x74, 0x1c, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x85, 0xc0,
        0x75, 0xe4, 0x49, 0x83, 0xc5, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xf1, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: OPARG
    // 28: &PyDict_Type+0x0
    // 30: &PyObject_SetItem+0x0
    // 38: &PyExc_SystemError+0x0
    // 40: &_PyErr_Format+0x0
    // 48: ERROR_TARGET
    // 50: &PyDict_SetItem+0x0
    // 58: &_Py_Dealloc+0x0
    // 60: CONTINUE
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x38, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x48, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x50, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x60, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xd5, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0x44);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SLICE.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 8: 49 8b 4d f0                   movq    -0x10(%r13), %rcx
    // c: 49 8b 7d e0                   movq    -0x20(%r13), %rdi
    // 10: 49 8b 75 e8                   movq    -0x18(%r13), %rsi
    // 14: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 19: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__PyBuildSlice_ConsumeRefs
    // 1f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 24: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 2d: 48 85 c0                      testq   %rax, %rax
    // 30: 74 53                         je      0x85 <_JIT_ENTRY+0x85>
    // 32: 48 89 c3                      movq    %rax, %rbx
    // 35: 49 83 c5 f0                   addq    $-0x10, %r13
    // 39: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 3e: 48 89 f1                      movq    %rsi, %rcx
    // 41: 48 89 c2                      movq    %rax, %rdx
    // 44: 49 89 f8                      movq    %rdi, %r8
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  IMAGE_REL_AMD64_REL32        __imp_PyObject_SetItem
    // 4d: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 52: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 5b: 8b 0b                         movl    (%rbx), %ecx
    // 5d: 85 c9                         testl   %ecx, %ecx
    // 5f: 78 13                         js      0x74 <_JIT_ENTRY+0x74>
    // 61: ff c9                         decl    %ecx
    // 63: 89 0b                         movl    %ecx, (%rbx)
    // 65: 75 0d                         jne     0x74 <_JIT_ENTRY+0x74>
    // 67: 48 89 d9                      movq    %rbx, %rcx
    // 6a: 89 c3                         movl    %eax, %ebx
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 72: 89 d8                         movl    %ebx, %eax
    // 74: 49 83 c5 10                   addq    $0x10, %r13
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 0f 94 c3                      sete    %bl
    // 7d: 8b 07                         movl    (%rdi), %eax
    // 7f: 85 c0                         testl   %eax, %eax
    // 81: 79 0a                         jns     0x8d <_JIT_ENTRY+0x8d>
    // 83: eb 17                         jmp     0x9c <_JIT_ENTRY+0x9c>
    // 85: 31 db                         xorl    %ebx, %ebx
    // 87: 8b 07                         movl    (%rdi), %eax
    // 89: 85 c0                         testl   %eax, %eax
    // 8b: 78 0f                         js      0x9c <_JIT_ENTRY+0x9c>
    // 8d: ff c8                         decl    %eax
    // 8f: 89 07                         movl    %eax, (%rdi)
    // 91: 75 09                         jne     0x9c <_JIT_ENTRY+0x9c>
    // 93: 48 89 f9                      movq    %rdi, %rcx
    // 96: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 9c: 8b 06                         movl    (%rsi), %eax
    // 9e: 85 c0                         testl   %eax, %eax
    // a0: 78 06                         js      0xa8 <_JIT_ENTRY+0xa8>
    // a2: ff c8                         decl    %eax
    // a4: 89 06                         movl    %eax, (%rsi)
    // a6: 74 13                         je      0xbb <_JIT_ENTRY+0xbb>
    // a8: 84 db                         testb   %bl, %bl
    // aa: 74 1c                         je      0xc8 <_JIT_ENTRY+0xc8>
    // ac: 49 83 c5 e0                   addq    $-0x20, %r13
    // b0: 48 83 c4 28                   addq    $0x28, %rsp
    // b4: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xbb <_JIT_ENTRY+0xbb>
    // 00000000000000b7:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // bb: 48 89 f1                      movq    %rsi, %rcx
    // be: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc4 <_JIT_ENTRY+0xc4>
    // 00000000000000c0:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // c4: 84 db                         testb   %bl, %bl
    // c6: 75 e4                         jne     0xac <_JIT_ENTRY+0xac>
    // c8: 48 83 c4 28                   addq    $0x28, %rsp
    // cc: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xd3 <_JIT_ENTRY+0xd3>
    // 00000000000000cf:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[211] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x55, 0xf8,
        0x49, 0x8b, 0x4d, 0xf0, 0x49, 0x8b, 0x7d, 0xe0,
        0x49, 0x8b, 0x75, 0xe8, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x53, 0x48, 0x89, 0xc3, 0x49, 0x83, 0xc5,
        0xf0, 0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89,
        0xf1, 0x48, 0x89, 0xc2, 0x49, 0x89, 0xf8, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6c,
        0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x13, 0xff, 0xc9, 0x89, 0x0b, 0x75, 0x0d, 0x48,
        0x89, 0xd9, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x49, 0x83, 0xc5, 0x10,
        0x85, 0xc0, 0x0f, 0x94, 0xc3, 0x8b, 0x07, 0x85,
        0xc0, 0x79, 0x0a, 0xeb, 0x17, 0x31, 0xdb, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0f, 0xff, 0xc8, 0x89,
        0x07, 0x75, 0x09, 0x48, 0x89, 0xf9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x06, 0x74, 0x13,
        0x84, 0xdb, 0x74, 0x1c, 0x49, 0x83, 0xc5, 0xe0,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x84, 0xdb, 0x75, 0xe4,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_SetItem+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc0, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)data + 0x1c);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 8b 7d e8                   movq    -0x18(%r13), %r15
    // c: 49 8b 5d f0                   movq    -0x10(%r13), %rbx
    // 10: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 15: 48 89 d9                      movq    %rbx, %rcx
    // 18: 48 89 f2                      movq    %rsi, %rdx
    // 1b: 4d 89 f8                      movq    %r15, %r8
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  IMAGE_REL_AMD64_REL32        __imp_PyObject_SetItem
    // 24: 89 c7                         movl    %eax, %edi
    // 26: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 2b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 34: 41 8b 07                      movl    (%r15), %eax
    // 37: 85 c0                         testl   %eax, %eax
    // 39: 78 10                         js      0x4b <_JIT_ENTRY+0x4b>
    // 3b: ff c8                         decl    %eax
    // 3d: 41 89 07                      movl    %eax, (%r15)
    // 40: 75 09                         jne     0x4b <_JIT_ENTRY+0x4b>
    // 42: 4c 89 f9                      movq    %r15, %rcx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4b: 8b 03                         movl    (%rbx), %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 0f                         js      0x60 <_JIT_ENTRY+0x60>
    // 51: ff c8                         decl    %eax
    // 53: 89 03                         movl    %eax, (%rbx)
    // 55: 75 09                         jne     0x60 <_JIT_ENTRY+0x60>
    // 57: 48 89 d9                      movq    %rbx, %rcx
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 60: 8b 06                         movl    (%rsi), %eax
    // 62: 85 c0                         testl   %eax, %eax
    // 64: 78 06                         js      0x6c <_JIT_ENTRY+0x6c>
    // 66: ff c8                         decl    %eax
    // 68: 89 06                         movl    %eax, (%rsi)
    // 6a: 74 0f                         je      0x7b <_JIT_ENTRY+0x7b>
    // 6c: 85 ff                         testl   %edi, %edi
    // 6e: 74 18                         je      0x88 <_JIT_ENTRY+0x88>
    // 70: 48 83 c4 28                   addq    $0x28, %rsp
    // 74: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 7b: 48 89 f1                      movq    %rsi, %rcx
    // 7e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 84: 85 ff                         testl   %edi, %edi
    // 86: 75 e8                         jne     0x70 <_JIT_ENTRY+0x70>
    // 88: 49 83 c5 e8                   addq    $-0x18, %r13
    // 8c: 48 83 c4 28                   addq    $0x28, %rsp
    // 90: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x97 <_JIT_ENTRY+0x97>
    // 0000000000000093:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[144] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x8b, 0x7d, 0xe8, 0x49, 0x8b, 0x5d, 0xf0,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xd9,
        0x48, 0x89, 0xf2, 0x4d, 0x89, 0xf8, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x89, 0xc7, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x10, 0xff, 0xc8, 0x41, 0x89, 0x07,
        0x75, 0x09, 0x4c, 0x89, 0xf9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x0f, 0xff, 0xc8, 0x89, 0x03, 0x75, 0x09, 0x48,
        0x89, 0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x06, 0x74, 0x0f, 0x85, 0xff, 0x74, 0x18,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xff, 0x75, 0xe8,
        0x49, 0x83, 0xc5, 0xe8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyObject_SetItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x4);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_DICT.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 8: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyDict_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: 4d 8b 45 e8                   movq    -0x18(%r13), %r8
    // 24: 49 8b 55 f8                   movq    -0x8(%r13), %rdx
    // 28: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 2d: 48 89 f1                      movq    %rsi, %rcx
    // 30: ff 15 00 00 00 00             callq   *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  IMAGE_REL_AMD64_REL32        __imp__PyDict_SetItem_Take2
    // 36: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 44: 8b 0e                         movl    (%rsi), %ecx
    // 46: 85 c9                         testl   %ecx, %ecx
    // 48: 78 06                         js      0x50 <_JIT_ENTRY+0x50>
    // 4a: ff c9                         decl    %ecx
    // 4c: 89 0e                         movl    %ecx, (%rsi)
    // 4e: 74 0f                         je      0x5f <_JIT_ENTRY+0x5f>
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 74 1c                         je      0x70 <_JIT_ENTRY+0x70>
    // 54: 48 83 c4 28                   addq    $0x28, %rsp
    // 58: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    // 5f: 48 89 f1                      movq    %rsi, %rcx
    // 62: 89 c6                         movl    %eax, %esi
    // 64: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 6a: 89 f0                         movl    %esi, %eax
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 75 e4                         jne     0x54 <_JIT_ENTRY+0x54>
    // 70: 49 83 c5 e8                   addq    $-0x18, %r13
    // 74: 48 83 c4 28                   addq    $0x28, %rsp
    // 78: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[120] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf0,
        0x48, 0x8b, 0x46, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8b, 0x45, 0xe8, 0x49, 0x8b, 0x55, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x0f,
        0x85, 0xc0, 0x74, 0x1c, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf1, 0x89, 0xc6, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf0, 0x85, 0xc0, 0x75, 0xe4,
        0x49, 0x83, 0xc5, 0xe8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_PyDict_SetItem_Take2+0x0
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x1c);
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _STORE_SUBSCR_LIST_INT.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 8: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 13: 0f 85 a8 00 00 00             jne     0xc1 <_JIT_ENTRY+0xc1>
    // 19: 49 8b 75 f0                   movq    -0x10(%r13), %rsi
    // 1d: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 21: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  IMAGE_REL_AMD64_REL32        __imp_PyList_Type
    // 28: 0f 85 93 00 00 00             jne     0xc1 <_JIT_ENTRY+0xc1>
    // 2e: 48 83 7f 10 09                cmpq    $0x9, 0x10(%rdi)
    // 33: 0f 83 88 00 00 00             jae     0xc1 <_JIT_ENTRY+0xc1>
    // 39: 8b 47 18                      movl    0x18(%rdi), %eax
    // 3c: 48 39 46 10                   cmpq    %rax, 0x10(%rsi)
    // 40: 7e 7f                         jle     0xc1 <_JIT_ENTRY+0xc1>
    // 42: 49 8b 55 e8                   movq    -0x18(%r13), %rdx
    // 46: 4c 8b 46 18                   movq    0x18(%rsi), %r8
    // 4a: 49 8b 0c c0                   movq    (%r8,%rax,8), %rcx
    // 4e: 49 89 14 c0                   movq    %rdx, (%r8,%rax,8)
    // 52: 8b 01                         movl    (%rcx), %eax
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 78 0c                         js      0x64 <_JIT_ENTRY+0x64>
    // 58: ff c8                         decl    %eax
    // 5a: 89 01                         movl    %eax, (%rcx)
    // 5c: 75 06                         jne     0x64 <_JIT_ENTRY+0x64>
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 64: 8b 07                         movl    (%rdi), %eax
    // 66: 85 c0                         testl   %eax, %eax
    // 68: 78 33                         js      0x9d <_JIT_ENTRY+0x9d>
    // 6a: ff c8                         decl    %eax
    // 6c: 89 07                         movl    %eax, (%rdi)
    // 6e: 75 2d                         jne     0x9d <_JIT_ENTRY+0x9d>
    // 70: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x77 <_JIT_ENTRY+0x77>
    // 0000000000000073:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 77: 48 8b 81 18 25 00 00          movq    0x2518(%rcx), %rax
    // 7e: 48 85 c0                      testq   %rax, %rax
    // 81: 74 11                         je      0x94 <_JIT_ENTRY+0x94>
    // 83: 4c 8b 81 20 25 00 00          movq    0x2520(%rcx), %r8
    // 8a: 48 89 f9                      movq    %rdi, %rcx
    // 8d: ba 01 00 00 00                movl    $0x1, %edx
    // 92: ff d0                         callq   *%rax
    // 94: 48 89 f9                      movq    %rdi, %rcx
    // 97: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9d <_JIT_ENTRY+0x9d>
    // 0000000000000099:  IMAGE_REL_AMD64_REL32        __imp__PyLong_ExactDealloc
    // 9d: 49 83 c5 e8                   addq    $-0x18, %r13
    // a1: 8b 06                         movl    (%rsi), %eax
    // a3: 85 c0                         testl   %eax, %eax
    // a5: 78 0f                         js      0xb6 <_JIT_ENTRY+0xb6>
    // a7: ff c8                         decl    %eax
    // a9: 89 06                         movl    %eax, (%rsi)
    // ab: 75 09                         jne     0xb6 <_JIT_ENTRY+0xb6>
    // ad: 48 89 f1                      movq    %rsi, %rcx
    // b0: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb6 <_JIT_ENTRY+0xb6>
    // 00000000000000b2:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // b6: 48 83 c4 28                   addq    $0x28, %rsp
    // ba: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c1: 48 83 c4 28                   addq    $0x28, %rsp
    // c5: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[204] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x7d, 0xf8,
        0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0x85, 0xa8, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0x93, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x7f, 0x10, 0x09, 0x0f, 0x83, 0x88, 0x00, 0x00,
        0x00, 0x8b, 0x47, 0x18, 0x48, 0x39, 0x46, 0x10,
        0x7e, 0x7f, 0x49, 0x8b, 0x55, 0xe8, 0x4c, 0x8b,
        0x46, 0x18, 0x49, 0x8b, 0x0c, 0xc0, 0x49, 0x89,
        0x14, 0xc0, 0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c,
        0xff, 0xc8, 0x89, 0x01, 0x75, 0x06, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x33, 0xff, 0xc8, 0x89, 0x07, 0x75, 0x2d,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x18, 0x25, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x4c, 0x8b, 0x81, 0x20, 0x25,
        0x00, 0x00, 0x48, 0x89, 0xf9, 0xba, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xf9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc5,
        0xe8, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x0f, 0xff,
        0xc8, 0x89, 0x06, 0x75, 0x09, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_PyRuntime+0x0
    // 20: &_PyLong_ExactDealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)&_PyLong_ExactDealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x99, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x2c);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _SWAP.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 7: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // b: c1 e0 03                      shll    $0x3, %eax
    // e: 4c 89 ea                      movq    %r13, %rdx
    // 11: 48 29 c2                      subq    %rax, %rdx
    // 14: 48 8b 02                      movq    (%rdx), %rax
    // 17: 48 89 0a                      movq    %rcx, (%rdx)
    // 1a: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1e: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[30] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x4d, 0xf8, 0xc1, 0xe0, 0x03, 0x4c, 0x89,
        0xea, 0x48, 0x29, 0xc2, 0x48, 0x8b, 0x02, 0x48,
        0x89, 0x0a, 0x49, 0x89, 0x45, 0xf8,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TIER2_RESUME_CHECK.o:      file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 46 18                   movq    0x18(%r14), %rax
    // 4: 84 c0                         testb   %al, %al
    // 6: 74 07                         je      0xf <_JIT_ENTRY+0xf>
    // 8: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[15] = {
        0x49, 0x8b, 0x46, 0x18, 0x84, 0xc0, 0x74, 0x07,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 f1                      movq    %rsi, %rcx
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyObject_IsTrue
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0e                         movl    (%rsi), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0e                         movl    %ecx, (%rsi)
    // 2e: 74 32                         je      0x62 <_JIT_ENTRY+0x62>
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 3f                         js      0x73 <_JIT_ENTRY+0x73>
    // 34: 75 16                         jne     0x4c <_JIT_ENTRY+0x4c>
    // 36: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 3d: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 41: 48 83 c4 28                   addq    $0x28, %rsp
    // 45: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 53: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 57: 48 83 c4 28                   addq    $0x28, %rsp
    // 5b: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 62: 48 89 f1                      movq    %rsi, %rcx
    // 65: 89 c6                         movl    %eax, %esi
    // 67: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6d <_JIT_ENTRY+0x6d>
    // 0000000000000069:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 6d: 89 f0                         movl    %esi, %eax
    // 6f: 85 c0                         testl   %eax, %eax
    // 71: 79 c1                         jns     0x34 <_JIT_ENTRY+0x34>
    // 73: 48 83 c4 28                   addq    $0x28, %rsp
    // 77: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[126] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x32,
        0x85, 0xc0, 0x78, 0x3f, 0x75, 0x16, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0, 0x85,
        0xc0, 0x79, 0xc1, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyObject_IsTrue+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x69, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_BOOL.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  IMAGE_REL_AMD64_REL32        __imp_PyBool_Type
    // f: 74 07                         je      0x18 <_JIT_ENTRY+0x18>
    // 11: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x07, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyBool_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_INT.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyLong_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: 8b 41 10                      movl    0x10(%rcx), %eax
    // 23: 83 e0 03                      andl    $0x3, %eax
    // 26: 83 f8 01                      cmpl    $0x1, %eax
    // 29: 75 16                         jne     0x41 <_JIT_ENTRY+0x41>
    // 2b: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 32: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 36: 48 83 c4 28                   addq    $0x28, %rsp
    // 3a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 41: 8b 01                         movl    (%rcx), %eax
    // 43: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 78 e4                         js      0x32 <_JIT_ENTRY+0x32>
    // 4e: ff c8                         decl    %eax
    // 50: 89 01                         movl    %eax, (%rcx)
    // 52: 75 de                         jne     0x32 <_JIT_ENTRY+0x32>
    // 54: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 5a: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 5e: 48 83 c4 28                   addq    $0x28, %rsp
    // 62: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[98] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x41, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8,
        0x01, 0x75, 0x16, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x01, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0xe4, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0xde, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28,
    };
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_LIST.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyList_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: 48 8b 71 10                   movq    0x10(%rcx), %rsi
    // 24: 8b 01                         movl    (%rcx), %eax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c8                         decl    %eax
    // 2c: 89 01                         movl    %eax, (%rcx)
    // 2e: 74 1b                         je      0x4b <_JIT_ENTRY+0x4b>
    // 30: 48 85 f6                      testq   %rsi, %rsi
    // 33: 75 21                         jne     0x56 <_JIT_ENTRY+0x56>
    // 35: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 3c: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 40: 48 83 c4 28                   addq    $0x28, %rsp
    // 44: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 4b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x51 <_JIT_ENTRY+0x51>
    // 000000000000004d:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 51: 48 85 f6                      testq   %rsi, %rsi
    // 54: 74 df                         je      0x35 <_JIT_ENTRY+0x35>
    // 56: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 5d: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 61: 48 83 c4 28                   addq    $0x28, %rsp
    // 65: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[101] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x71, 0x10, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x1b,
        0x48, 0x85, 0xf6, 0x75, 0x21, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xf6, 0x74, 0xdf, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyList_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    // 28: &_Py_TrueStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_NONE.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 f8                   movq    -0x8(%r13), %rax
    // 4: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // b: 74 07                         je      0x14 <_JIT_ENTRY+0x14>
    // d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 1b: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 1f: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[31] = {
        0x49, 0x8b, 0x45, 0xf8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x07, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8,
    };
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + 0xc);
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _TO_BOOL_STR.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyUnicode_Type
    // 13: 74 0b                         je      0x20 <_JIT_ENTRY+0x20>
    // 15: 48 83 c4 28                   addq    $0x28, %rsp
    // 19: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 20: b8 c0 86 00 00                movl    $0x86c0, %eax           # imm = 0x86C0
    // 25: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__PyRuntime
    // 2c: 48 39 c1                      cmpq    %rax, %rcx
    // 2f: 74 22                         je      0x53 <_JIT_ENTRY+0x53>
    // 31: 8b 01                         movl    (%rcx), %eax
    // 33: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 06                         js      0x44 <_JIT_ENTRY+0x44>
    // 3e: ff c8                         decl    %eax
    // 40: 89 01                         movl    %eax, (%rcx)
    // 42: 74 25                         je      0x69 <_JIT_ENTRY+0x69>
    // 44: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 48: 48 83 c4 28                   addq    $0x28, %rsp
    // 4c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 53: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 5a: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 5e: 48 83 c4 28                   addq    $0x28, %rsp
    // 62: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 69: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 6f: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
    // 73: 48 83 c4 28                   addq    $0x28, %rsp
    // 77: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[119] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xb8, 0xc0, 0x86, 0x00, 0x00, 0x48, 0x03, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc1, 0x74,
        0x22, 0x8b, 0x01, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8,
        0x89, 0x01, 0x74, 0x25, 0x49, 0x89, 0x75, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x75, 0xf8, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x75, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_PyRuntime+0x0
    // 18: &_Py_TrueStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_FalseStruct+0x0
    // 30: &_Py_Dealloc+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x30, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0x2c);
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_INVERT.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 f1                      movq    %rsi, %rcx
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyNumber_Invert
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0e                         movl    (%rsi), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0e                         movl    %ecx, (%rsi)
    // 2e: 74 14                         je      0x44 <_JIT_ENTRY+0x44>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 23                         je      0x58 <_JIT_ENTRY+0x58>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 48 83 c4 28                   addq    $0x28, %rsp
    // 3d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 44: 48 89 f1                      movq    %rsi, %rcx
    // 47: 48 89 c6                      movq    %rax, %rsi
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 50: 48 89 f0                      movq    %rsi, %rax
    // 53: 48 85 c0                      testq   %rax, %rax
    // 56: 75 dd                         jne     0x35 <_JIT_ENTRY+0x35>
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[99] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x14,
        0x48, 0x85, 0xc0, 0x74, 0x23, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf0, 0x48, 0x85, 0xc0, 0x75, 0xdd,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &PyNumber_Invert+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Invert);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x14);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NEGATIVE.o:  file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 8: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // d: 48 89 f1                      movq    %rsi, %rcx
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  IMAGE_REL_AMD64_REL32        __imp_PyNumber_Negative
    // 16: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 1b: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 24: 8b 0e                         movl    (%rsi), %ecx
    // 26: 85 c9                         testl   %ecx, %ecx
    // 28: 78 06                         js      0x30 <_JIT_ENTRY+0x30>
    // 2a: ff c9                         decl    %ecx
    // 2c: 89 0e                         movl    %ecx, (%rsi)
    // 2e: 74 14                         je      0x44 <_JIT_ENTRY+0x44>
    // 30: 48 85 c0                      testq   %rax, %rax
    // 33: 74 23                         je      0x58 <_JIT_ENTRY+0x58>
    // 35: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 39: 48 83 c4 28                   addq    $0x28, %rsp
    // 3d: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 44: 48 89 f1                      movq    %rsi, %rcx
    // 47: 48 89 c6                      movq    %rax, %rsi
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 50: 48 89 f0                      movq    %rsi, %rax
    // 53: 48 85 c0                      testq   %rax, %rax
    // 56: 75 dd                         jne     0x35 <_JIT_ENTRY+0x35>
    // 58: 48 83 c4 28                   addq    $0x28, %rsp
    // 5c: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[99] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x75, 0xf8,
        0x4d, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0xf1,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8b,
        0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0xff, 0xc9, 0x89, 0x0e, 0x74, 0x14,
        0x48, 0x85, 0xc0, 0x74, 0x23, 0x49, 0x89, 0x45,
        0xf8, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x48,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf0, 0x48, 0x85, 0xc0, 0x75, 0xdd,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: &PyNumber_Negative+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Negative);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x14);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNARY_NOT.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  IMAGE_REL_AMD64_REL32        __imp__Py_FalseStruct
    // 7: 49 39 45 f8                   cmpq    %rax, -0x8(%r13)
    // b: 75 07                         jne     0x14 <_JIT_ENTRY+0x14>
    // d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  IMAGE_REL_AMD64_REL32        __imp__Py_TrueStruct
    // 14: 49 89 45 f8                   movq    %rax, -0x8(%r13)
    // 18: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[24] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x39, 0x45, 0xf8, 0x75, 0x07, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0xf8,
    };
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_EX.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // a: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // e: 0f b6 f0                      movzbl  %al, %esi
    // 11: 48 8d 0c f5 00 00 00 00       leaq    (,%rsi,8), %rcx
    // 19: 4c 01 e9                      addq    %r13, %rcx
    // 1c: 0f b6 dc                      movzbl  %ah, %ebx
    // 1f: 48 8d 04 d9                   leaq    (%rcx,%rbx,8), %rax
    // 23: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 28: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 2d: 4c 89 f1                      movq    %r14, %rcx
    // 30: 48 89 fa                      movq    %rdi, %rdx
    // 33: 41 89 f0                      movl    %esi, %r8d
    // 36: 41 89 d9                      movl    %ebx, %r9d
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  IMAGE_REL_AMD64_REL32        __imp__PyEval_UnpackIterableStackRef
    // 3f: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 44: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 4d: 8b 0f                         movl    (%rdi), %ecx
    // 4f: 85 c9                         testl   %ecx, %ecx
    // 51: 78 06                         js      0x59 <_JIT_ENTRY+0x59>
    // 53: ff c9                         decl    %ecx
    // 55: 89 0f                         movl    %ecx, (%rdi)
    // 57: 74 16                         je      0x6f <_JIT_ENTRY+0x6f>
    // 59: 85 c0                         testl   %eax, %eax
    // 5b: 74 23                         je      0x80 <_JIT_ENTRY+0x80>
    // 5d: 01 de                         addl    %ebx, %esi
    // 5f: 4d 8d 6c f5 00                leaq    (%r13,%rsi,8), %r13
    // 64: 48 83 c4 28                   addq    $0x28, %rsp
    // 68: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 6f: 48 89 f9                      movq    %rdi, %rcx
    // 72: 89 c7                         movl    %eax, %edi
    // 74: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7a <_JIT_ENTRY+0x7a>
    // 0000000000000076:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 7a: 89 f8                         movl    %edi, %eax
    // 7c: 85 c0                         testl   %eax, %eax
    // 7e: 75 dd                         jne     0x5d <_JIT_ENTRY+0x5d>
    // 80: 48 83 c4 28                   addq    $0x28, %rsp
    // 84: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8b <_JIT_ENTRY+0x8b>
    // 0000000000000087:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[139] = {
        0x48, 0x83, 0xec, 0x28, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x7d, 0xf8, 0x0f, 0xb6,
        0xf0, 0x48, 0x8d, 0x0c, 0xf5, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x01, 0xe9, 0x0f, 0xb6, 0xdc, 0x48,
        0x8d, 0x04, 0xd9, 0x4d, 0x89, 0x6c, 0x24, 0x40,
        0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x89, 0xf1,
        0x48, 0x89, 0xfa, 0x41, 0x89, 0xf0, 0x41, 0x89,
        0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d,
        0x8b, 0x6c, 0x24, 0x40, 0x49, 0xc7, 0x44, 0x24,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x0f, 0x85,
        0xc9, 0x78, 0x06, 0xff, 0xc9, 0x89, 0x0f, 0x74,
        0x16, 0x85, 0xc0, 0x74, 0x23, 0x01, 0xde, 0x4d,
        0x8d, 0x6c, 0xf5, 0x00, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xf9, 0x89, 0xc7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xf8, 0x85, 0xc0, 0x75, 0xdd,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x87, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE.o: file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // b: 44 0f b7 c7                   movzwl  %di, %r8d
    // f: 49 8b 75 f8                   movq    -0x8(%r13), %rsi
    // 13: 4a 8d 04 c5 f8 ff ff ff       leaq    -0x8(,%r8,8), %rax
    // 1b: 4c 01 e8                      addq    %r13, %rax
    // 1e: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 23: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 28: 4c 89 f1                      movq    %r14, %rcx
    // 2b: 48 89 f2                      movq    %rsi, %rdx
    // 2e: 41 b9 ff ff ff ff             movl    $0xffffffff, %r9d       # imm = 0xFFFFFFFF
    // 34: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3a <_JIT_ENTRY+0x3a>
    // 0000000000000036:  IMAGE_REL_AMD64_REL32        __imp__PyEval_UnpackIterableStackRef
    // 3a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 3f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // 48: 8b 0e                         movl    (%rsi), %ecx
    // 4a: 85 c9                         testl   %ecx, %ecx
    // 4c: 78 06                         js      0x54 <_JIT_ENTRY+0x54>
    // 4e: ff c9                         decl    %ecx
    // 50: 89 0e                         movl    %ecx, (%rsi)
    // 52: 74 17                         je      0x6b <_JIT_ENTRY+0x6b>
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 74 24                         je      0x7c <_JIT_ENTRY+0x7c>
    // 58: 0f b7 c7                      movzwl  %di, %eax
    // 5b: 4d 8d 6c c5 f8                leaq    -0x8(%r13,%rax,8), %r13
    // 60: 48 83 c4 28                   addq    $0x28, %rsp
    // 64: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 6b: 48 89 f1                      movq    %rsi, %rcx
    // 6e: 89 c6                         movl    %eax, %esi
    // 70: ff 15 00 00 00 00             callq   *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 76: 89 f0                         movl    %esi, %eax
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 75 dc                         jne     0x58 <_JIT_ENTRY+0x58>
    // 7c: 48 83 c4 28                   addq    $0x28, %rsp
    // 80: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[135] = {
        0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xc7, 0x49,
        0x8b, 0x75, 0xf8, 0x4a, 0x8d, 0x04, 0xc5, 0xf8,
        0xff, 0xff, 0xff, 0x4c, 0x01, 0xe8, 0x4d, 0x89,
        0x6c, 0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20,
        0x4c, 0x89, 0xf1, 0x48, 0x89, 0xf2, 0x41, 0xb9,
        0xff, 0xff, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x8b, 0x0e, 0x85, 0xc9, 0x78, 0x06, 0xff, 0xc9,
        0x89, 0x0e, 0x74, 0x17, 0x85, 0xc0, 0x74, 0x24,
        0x0f, 0xb7, 0xc7, 0x4d, 0x8d, 0x6c, 0xc5, 0xf8,
        0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xf1, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xf0,
        0x85, 0xc0, 0x75, 0xdc, 0x48, 0x83, 0xc4, 0x28,
        0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: OPARG
    // 8: &_PyEval_UnpackIterableStackRef+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterableStackRef);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x36, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_LIST.o:    file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyList_Type
    // 13: 75 4e                         jne     0x63 <_JIT_ENTRY+0x63>
    // 15: 48 8b 71 10                   movq    0x10(%rcx), %rsi
    // 19: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 20: 48 39 c6                      cmpq    %rax, %rsi
    // 23: 75 3e                         jne     0x63 <_JIT_ENTRY+0x63>
    // 25: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 2c: 66 85 c0                      testw   %ax, %ax
    // 2f: 74 3d                         je      0x6e <_JIT_ENTRY+0x6e>
    // 31: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 35: 48 8b 51 18                   movq    0x18(%rcx), %rdx
    // 39: 48 8d 7e 01                   leaq    0x1(%rsi), %rdi
    // 3d: eb 11                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 3f: 90                            nop
    // 40: 4c 89 00                      movq    %r8, (%rax)
    // 43: 48 83 c0 08                   addq    $0x8, %rax
    // 47: 48 ff cf                      decq    %rdi
    // 4a: 48 83 ff 01                   cmpq    $0x1, %rdi
    // 4e: 76 1e                         jbe     0x6e <_JIT_ENTRY+0x6e>
    // 50: 4c 8b 44 fa f0                movq    -0x10(%rdx,%rdi,8), %r8
    // 55: 41 8b 18                      movl    (%r8), %ebx
    // 58: 85 db                         testl   %ebx, %ebx
    // 5a: 78 e4                         js      0x40 <_JIT_ENTRY+0x40>
    // 5c: ff c3                         incl    %ebx
    // 5e: 41 89 18                      movl    %ebx, (%r8)
    // 61: eb dd                         jmp     0x40 <_JIT_ENTRY+0x40>
    // 63: 48 83 c4 28                   addq    $0x28, %rsp
    // 67: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 6e: 8b 01                         movl    (%rcx), %eax
    // 70: 85 c0                         testl   %eax, %eax
    // 72: 78 06                         js      0x7a <_JIT_ENTRY+0x7a>
    // 74: ff c8                         decl    %eax
    // 76: 89 01                         movl    %eax, (%rcx)
    // 78: 74 10                         je      0x8a <_JIT_ENTRY+0x8a>
    // 7a: 4d 8d 6c f5 f8                leaq    -0x8(%r13,%rsi,8), %r13
    // 7f: 48 83 c4 28                   addq    $0x28, %rsp
    // 83: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x8a <_JIT_ENTRY+0x8a>
    // 0000000000000086:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 8a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x90 <_JIT_ENTRY+0x90>
    // 000000000000008c:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 90: 4d 8d 6c f5 f8                leaq    -0x8(%r13,%rsi,8), %r13
    // 95: 48 83 c4 28                   addq    $0x28, %rsp
    // 99: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xa0 <_JIT_ENTRY+0xa0>
    // 000000000000009c:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[153] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x4e, 0x48, 0x8b, 0x71,
        0x10, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x39, 0xc6, 0x75, 0x3e, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x3d, 0x49, 0x8d, 0x45, 0xf8, 0x48, 0x8b, 0x51,
        0x18, 0x48, 0x8d, 0x7e, 0x01, 0xeb, 0x11, 0x90,
        0x4c, 0x89, 0x00, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xcf, 0x48, 0x83, 0xff, 0x01, 0x76, 0x1e,
        0x4c, 0x8b, 0x44, 0xfa, 0xf0, 0x41, 0x8b, 0x18,
        0x85, 0xdb, 0x78, 0xe4, 0xff, 0xc3, 0x41, 0x89,
        0x18, 0xeb, 0xdd, 0x48, 0x83, 0xc4, 0x28, 0x48,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x01,
        0x85, 0xc0, 0x78, 0x06, 0xff, 0xc8, 0x89, 0x01,
        0x74, 0x10, 0x4d, 0x8d, 0x6c, 0xf5, 0xf8, 0x48,
        0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x8d, 0x6c, 0xf5, 0xf8, 0x48, 0x83, 0xc4,
        0x28,
    };
    // 0: &PyList_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TUPLE.o:   file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_Type
    // 13: 75 4c                         jne     0x61 <_JIT_ENTRY+0x61>
    // 15: 48 8b 71 10                   movq    0x10(%rcx), %rsi
    // 19: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 20: 48 39 c6                      cmpq    %rax, %rsi
    // 23: 75 3c                         jne     0x61 <_JIT_ENTRY+0x61>
    // 25: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 2c: 66 85 c0                      testw   %ax, %ax
    // 2f: 74 3b                         je      0x6c <_JIT_ENTRY+0x6c>
    // 31: 49 8d 45 f8                   leaq    -0x8(%r13), %rax
    // 35: 48 8d 56 01                   leaq    0x1(%rsi), %rdx
    // 39: eb 15                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 3b: 0f 1f 44 00 00                nopl    (%rax,%rax)
    // 40: 48 89 38                      movq    %rdi, (%rax)
    // 43: 48 83 c0 08                   addq    $0x8, %rax
    // 47: 48 ff ca                      decq    %rdx
    // 4a: 48 83 fa 01                   cmpq    $0x1, %rdx
    // 4e: 76 1c                         jbe     0x6c <_JIT_ENTRY+0x6c>
    // 50: 48 8b 7c d1 08                movq    0x8(%rcx,%rdx,8), %rdi
    // 55: 8b 1f                         movl    (%rdi), %ebx
    // 57: 85 db                         testl   %ebx, %ebx
    // 59: 78 e5                         js      0x40 <_JIT_ENTRY+0x40>
    // 5b: ff c3                         incl    %ebx
    // 5d: 89 1f                         movl    %ebx, (%rdi)
    // 5f: eb df                         jmp     0x40 <_JIT_ENTRY+0x40>
    // 61: 48 83 c4 28                   addq    $0x28, %rsp
    // 65: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    // 6c: 8b 01                         movl    (%rcx), %eax
    // 6e: 85 c0                         testl   %eax, %eax
    // 70: 78 06                         js      0x78 <_JIT_ENTRY+0x78>
    // 72: ff c8                         decl    %eax
    // 74: 89 01                         movl    %eax, (%rcx)
    // 76: 74 10                         je      0x88 <_JIT_ENTRY+0x88>
    // 78: 4d 8d 6c f5 f8                leaq    -0x8(%r13,%rsi,8), %r13
    // 7d: 48 83 c4 28                   addq    $0x28, %rsp
    // 81: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x88 <_JIT_ENTRY+0x88>
    // 0000000000000084:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 8e: 4d 8d 6c f5 f8                leaq    -0x8(%r13,%rsi,8), %r13
    // 93: 48 83 c4 28                   addq    $0x28, %rsp
    // 97: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x9e <_JIT_ENTRY+0x9e>
    // 000000000000009a:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[151] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x4c, 0x48, 0x8b, 0x71,
        0x10, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x39, 0xc6, 0x75, 0x3c, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74,
        0x3b, 0x49, 0x8d, 0x45, 0xf8, 0x48, 0x8d, 0x56,
        0x01, 0xeb, 0x15, 0x0f, 0x1f, 0x44, 0x00, 0x00,
        0x48, 0x89, 0x38, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xca, 0x48, 0x83, 0xfa, 0x01, 0x76, 0x1c,
        0x48, 0x8b, 0x7c, 0xd1, 0x08, 0x8b, 0x1f, 0x85,
        0xdb, 0x78, 0xe5, 0xff, 0xc3, 0x89, 0x1f, 0xeb,
        0xdf, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x85, 0xc0,
        0x78, 0x06, 0xff, 0xc8, 0x89, 0x01, 0x74, 0x10,
        0x4d, 0x8d, 0x6c, 0xf5, 0xf8, 0x48, 0x83, 0xc4,
        0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d,
        0x6c, 0xf5, 0xf8, 0x48, 0x83, 0xc4, 0x28,
    };
    // 0: &PyTuple_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, state->instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _UNPACK_SEQUENCE_TWO_TUPLE.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 8: 48 8b 41 08                   movq    0x8(%rcx), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  IMAGE_REL_AMD64_REL32        __imp_PyTuple_Type
    // 13: 75 4c                         jne     0x61 <_JIT_ENTRY+0x61>
    // 15: 48 83 79 10 02                cmpq    $0x2, 0x10(%rcx)
    // 1a: 75 45                         jne     0x61 <_JIT_ENTRY+0x61>
    // 1c: 48 8b 71 18                   movq    0x18(%rcx), %rsi
    // 20: 8b 06                         movl    (%rsi), %eax
    // 22: 85 c0                         testl   %eax, %eax
    // 24: 78 04                         js      0x2a <_JIT_ENTRY+0x2a>
    // 26: ff c0                         incl    %eax
    // 28: 89 06                         movl    %eax, (%rsi)
    // 2a: 48 8b 79 20                   movq    0x20(%rcx), %rdi
    // 2e: 8b 07                         movl    (%rdi), %eax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 04                         js      0x38 <_JIT_ENTRY+0x38>
    // 34: ff c0                         incl    %eax
    // 36: 89 07                         movl    %eax, (%rdi)
    // 38: 8b 01                         movl    (%rcx), %eax
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 78 0c                         js      0x4a <_JIT_ENTRY+0x4a>
    // 3e: ff c8                         decl    %eax
    // 40: 89 01                         movl    %eax, (%rcx)
    // 42: 75 06                         jne     0x4a <_JIT_ENTRY+0x4a>
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 4a: 49 89 7d f8                   movq    %rdi, -0x8(%r13)
    // 4e: 49 89 75 00                   movq    %rsi, (%r13)
    // 52: 49 83 c5 08                   addq    $0x8, %r13
    // 56: 48 83 c4 28                   addq    $0x28, %rsp
    // 5a: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // 61: 48 83 c4 28                   addq    $0x28, %rsp
    // 65: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  IMAGE_REL_AMD64_REL32        __imp__JIT_JUMP_TARGET
    const unsigned char code_body[108] = {
        0x48, 0x83, 0xec, 0x28, 0x49, 0x8b, 0x4d, 0xf8,
        0x48, 0x8b, 0x41, 0x08, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x75, 0x4c, 0x48, 0x83, 0x79,
        0x10, 0x02, 0x75, 0x45, 0x48, 0x8b, 0x71, 0x18,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0,
        0x89, 0x06, 0x48, 0x8b, 0x79, 0x20, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x04, 0xff, 0xc0, 0x89, 0x07,
        0x8b, 0x01, 0x85, 0xc0, 0x78, 0x0c, 0xff, 0xc8,
        0x89, 0x01, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x7d, 0xf8, 0x49, 0x89,
        0x75, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83,
        0xc4, 0x28, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyTuple_Type+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, state->instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x14);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _WITH_EXCEPT_START.o:       file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 48 83 ec 50                   subq    $0x50, %rsp
    // 5: 49 8b 7d f8                   movq    -0x8(%r13), %rdi
    // 9: 49 8b 75 d8                   movq    -0x28(%r13), %rsi
    // d: 49 8b 5d e0                   movq    -0x20(%r13), %rbx
    // 11: 4c 8b 7f 08                   movq    0x8(%rdi), %r15
    // 15: 48 89 f9                      movq    %rdi, %rcx
    // 18: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  IMAGE_REL_AMD64_REL32        __imp_PyException_GetTraceback
    // 1e: 48 85 c0                      testq   %rax, %rax
    // 21: 74 1d                         je      0x40 <_JIT_ENTRY+0x40>
    // 23: 8b 08                         movl    (%rax), %ecx
    // 25: 85 c9                         testl   %ecx, %ecx
    // 27: 78 1e                         js      0x47 <_JIT_ENTRY+0x47>
    // 29: ff c9                         decl    %ecx
    // 2b: 89 08                         movl    %ecx, (%rax)
    // 2d: 75 18                         jne     0x47 <_JIT_ENTRY+0x47>
    // 2f: 48 89 c1                      movq    %rax, %rcx
    // 32: 48 89 c5                      movq    %rax, %rbp
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  IMAGE_REL_AMD64_REL32        __imp__Py_Dealloc
    // 3b: 48 89 e8                      movq    %rbp, %rax
    // 3e: eb 07                         jmp     0x47 <_JIT_ENTRY+0x47>
    // 40: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  IMAGE_REL_AMD64_REL32        __imp__Py_NoneStruct
    // 47: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
    // 50: 48 89 5c 24 28                movq    %rbx, 0x28(%rsp)
    // 55: 48 8d 54 24 30                leaq    0x30(%rsp), %rdx
    // 5a: 4c 89 7c 24 30                movq    %r15, 0x30(%rsp)
    // 5f: 48 89 7c 24 38                movq    %rdi, 0x38(%rsp)
    // 64: 48 89 44 24 40                movq    %rax, 0x40(%rsp)
    // 69: 48 b8 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rax # imm = 0x8000000000000003
    // 73: 4c 8d 40 01                   leaq    0x1(%rax), %r8
    // 77: 31 c9                         xorl    %ecx, %ecx
    // 79: 48 85 db                      testq   %rbx, %rbx
    // 7c: 0f 95 c1                      setne   %cl
    // 7f: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 84: 4c 0f 44 c0                   cmoveq  %rax, %r8
    // 88: c1 e1 03                      shll    $0x3, %ecx
    // 8b: 48 29 ca                      subq    %rcx, %rdx
    // 8e: 48 89 f1                      movq    %rsi, %rcx
    // 91: 45 31 c9                      xorl    %r9d, %r9d
    // 94: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  IMAGE_REL_AMD64_REL32        __imp_PyObject_Vectorcall
    // 9a: 4d 8b 6c 24 40                movq    0x40(%r12), %r13
    // 9f: 49 c7 44 24 40 00 00 00 00    movq    $0x0, 0x40(%r12)
    // a8: 48 85 c0                      testq   %rax, %rax
    // ab: 74 14                         je      0xc1 <_JIT_ENTRY+0xc1>
    // ad: 49 89 45 00                   movq    %rax, (%r13)
    // b1: 49 83 c5 08                   addq    $0x8, %r13
    // b5: 48 83 c4 50                   addq    $0x50, %rsp
    // b9: 5d                            popq    %rbp
    // ba: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    // c1: 48 83 c4 50                   addq    $0x50, %rsp
    // c5: 5d                            popq    %rbp
    // c6: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  IMAGE_REL_AMD64_REL32        __imp__JIT_ERROR_TARGET
    const unsigned char code_body[205] = {
        0x55, 0x48, 0x83, 0xec, 0x50, 0x49, 0x8b, 0x7d,
        0xf8, 0x49, 0x8b, 0x75, 0xd8, 0x49, 0x8b, 0x5d,
        0xe0, 0x4c, 0x8b, 0x7f, 0x08, 0x48, 0x89, 0xf9,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x1d, 0x8b, 0x08, 0x85, 0xc9, 0x78,
        0x1e, 0xff, 0xc9, 0x89, 0x08, 0x75, 0x18, 0x48,
        0x89, 0xc1, 0x48, 0x89, 0xc5, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xe8, 0xeb, 0x07,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x5c, 0x24, 0x28, 0x48, 0x8d, 0x54,
        0x24, 0x30, 0x4c, 0x89, 0x7c, 0x24, 0x30, 0x48,
        0x89, 0x7c, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24,
        0x40, 0x48, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x4c, 0x8d, 0x40, 0x01, 0x31,
        0xc9, 0x48, 0x85, 0xdb, 0x0f, 0x95, 0xc1, 0x4d,
        0x89, 0x6c, 0x24, 0x40, 0x4c, 0x0f, 0x44, 0xc0,
        0xc1, 0xe1, 0x03, 0x48, 0x29, 0xca, 0x48, 0x89,
        0xf1, 0x45, 0x31, 0xc9, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4d, 0x8b, 0x6c, 0x24, 0x40, 0x49,
        0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x14, 0x49, 0x89, 0x45,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0x83, 0xc4,
        0x50, 0x5d, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x50, 0x5d, 0x48, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: &PyException_GetTraceback+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &PyObject_Vectorcall+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyException_GetTraceback);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, state->instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x24);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, jit_state *state)
{
    // 
    // _YIELD_VALUE.o:     file format coff-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 4d f8                   movq    -0x8(%r13), %rcx
    // 4: 49 83 44 24 38 02             addq    $0x2, 0x38(%r12)
    // a: 49 83 c5 f8                   addq    $-0x8, %r13
    // e: 0f b6 05 00 00 00 00          movzbl  (%rip), %eax            # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  IMAGE_REL_AMD64_REL32        __imp__JIT_OPARG
    // 15: 04 fe                         addb    $-0x2, %al
    // 17: 41 88 44 24 fb                movb    %al, -0x5(%r12)
    // 1c: 4d 89 6c 24 40                movq    %r13, 0x40(%r12)
    // 21: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
    // 26: 49 89 46 78                   movq    %rax, 0x78(%r14)
    // 2a: 49 c7 44 24 e8 00 00 00 00    movq    $0x0, -0x18(%r12)
    // 33: 41 ff 46 2c                   incl    0x2c(%r14)
    // 37: 49 8b 44 24 08                movq    0x8(%r12), %rax
    // 3c: 49 89 46 48                   movq    %rax, 0x48(%r14)
    // 40: 49 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%r12)
    // 49: 4c 8b 68 40                   movq    0x40(%rax), %r13
    // 4d: 48 c7 40 40 00 00 00 00       movq    $0x0, 0x40(%rax)
    // 55: 49 89 4d 00                   movq    %rcx, (%r13)
    // 59: 49 83 c5 08                   addq    $0x8, %r13
    // 5d: 49 89 c4                      movq    %rax, %r12
    // 60: 48 ff 25 00 00 00 00          jmpq    *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  IMAGE_REL_AMD64_REL32        __imp__JIT_CONTINUE
    const unsigned char code_body[96] = {
        0x49, 0x8b, 0x4d, 0xf8, 0x49, 0x83, 0x44, 0x24,
        0x38, 0x02, 0x49, 0x83, 0xc5, 0xf8, 0x0f, 0xb6,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x41,
        0x88, 0x44, 0x24, 0xfb, 0x4d, 0x89, 0x6c, 0x24,
        0x40, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x49, 0x89,
        0x46, 0x78, 0x49, 0xc7, 0x44, 0x24, 0xe8, 0x00,
        0x00, 0x00, 0x00, 0x41, 0xff, 0x46, 0x2c, 0x49,
        0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x46, 0x48,
        0x49, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8b, 0x68, 0x40, 0x48, 0xc7, 0x40,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x4d,
        0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0x89, 0xc4,
    };
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
}

static_assert(SYMBOL_MASK_WORDS >= 1, "SYMBOL_MASK_WORDS too small");

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, jit_state *state);
    size_t code_size;
    size_t data_size;
    symbol_mask trampoline_mask;
} StencilGroup;

static const StencilGroup shim = {emit_shim, 261, 24, {0}};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 139, 40, {0}},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 63, 24, {0}},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 181, 40, {0}},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 181, 40, {0}},
    [_BINARY_OP_INPLACE_ADD_UNICODE] = {emit__BINARY_OP_INPLACE_ADD_UNICODE, 182, 64, {0}},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 63, 24, {0}},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 181, 40, {0}},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 63, 24, {0}},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 181, 40, {0}},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 183, 40, {0}},
    [_BINARY_SUBSCR] = {emit__BINARY_SUBSCR, 128, 32, {0}},
    [_BINARY_SUBSCR_CHECK_FUNC] = {emit__BINARY_SUBSCR_CHECK_FUNC, 96, 16, {0}},
    [_BINARY_SUBSCR_DICT] = {emit__BINARY_SUBSCR_DICT, 191, 56, {0}},
    [_BINARY_SUBSCR_INIT_CALL] = {emit__BINARY_SUBSCR_INIT_CALL, 208, 0, {0}},
    [_BINARY_SUBSCR_LIST_INT] = {emit__BINARY_SUBSCR_LIST_INT, 191, 56, {0}},
    [_BINARY_SUBSCR_STR_INT] = {emit__BINARY_SUBSCR_STR_INT, 342, 48, {0}},
    [_BINARY_SUBSCR_TUPLE_INT] = {emit__BINARY_SUBSCR_TUPLE_INT, 188, 56, {0}},
    [_BUILD_LIST] = {emit__BUILD_LIST, 83, 32, {0}},
    [_BUILD_MAP] = {emit__BUILD_MAP, 216, 40, {0}},
    [_BUILD_SET] = {emit__BUILD_SET, 356, 48, {0}},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 226, 40, {0}},
    [_BUILD_STRING] = {emit__BUILD_STRING, 171, 48, {0}},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 83, 32, {0}},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 293, 40, {0}},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 299, 48, {0}},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 315, 48, {0}},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 267, 48, {0}},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 116, 40, {0}},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 145, 40, {0}},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 281, 56, {0}},
    [_CALL_KW_NON_PY] = {emit__CALL_KW_NON_PY, 326, 40, {0}},
    [_CALL_LEN] = {emit__CALL_LEN, 266, 64, {0}},
    [_CALL_LIST_APPEND] = {emit__CALL_LIST_APPEND, 178, 40, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 306, 48, {0}},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 306, 48, {0}},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 273, 48, {0}},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 311, 48, {0}},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 300, 40, {0}},
    [_CALL_STR_1] = {emit__CALL_STR_1, 129, 48, {0}},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 129, 48, {0}},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 104, 32, {0}},
    [_CHECK_AND_ALLOCATE_OBJECT] = {emit__CHECK_AND_ALLOCATE_OBJECT, 223, 64, {0}},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 45, 24, {0}},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 26, 16, {0}},
    [_CHECK_ATTR_MODULE_PUSH_KEYS] = {emit__CHECK_ATTR_MODULE_PUSH_KEYS, 72, 32, {0}},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 25, 16, {0}},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 57, 24, {0}},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 337, 56, {0}},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 198, 56, {0}},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 33, 24, {0}},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 61, 24, {0}},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 63, 40, {0}},
    [_CHECK_FUNCTION_VERSION_INLINE] = {emit__CHECK_FUNCTION_VERSION_INLINE, 35, 32, {0}},
    [_CHECK_FUNCTION_VERSION_KW] = {emit__CHECK_FUNCTION_VERSION_KW, 63, 40, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 58, 40, {0}},
    [_CHECK_IS_NOT_PY_CALLABLE_KW] = {emit__CHECK_IS_NOT_PY_CALLABLE_KW, 58, 40, {0}},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 33, 16, {0}},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 85, 40, {0}},
    [_CHECK_METHOD_VERSION_KW] = {emit__CHECK_METHOD_VERSION_KW, 91, 40, {0}},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 21, 8, {0}},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 59, 16, {0}},
    [_CHECK_PERIODIC_IF_NOT_YIELD_FROM] = {emit__CHECK_PERIODIC_IF_NOT_YIELD_FROM, 70, 24, {0}},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 75, 16, {0}},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 52, 16, {0}},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 20, 16, {0}},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 32, 24, {0}},
    [_COMPARE_OP] = {emit__COMPARE_OP, 255, 64, {0}},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 216, 48, {0}},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 275, 48, {0}},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 202, 56, {0}},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 169, 56, {0}},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 193, 72, {0}},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 208, 80, {0}},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 110, 40, {0}},
    [_COPY] = {emit__COPY, 37, 8, {0}},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 166, 16, {0}},
    [_CREATE_INIT_FRAME] = {emit__CREATE_INIT_FRAME, 292, 56, {0}},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 108, 32, {0}},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 117, 40, {0}},
    [_DELETE_FAST] = {emit__DELETE_FAST, 142, 136, {0}},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 147, 80, {0}},
    [_DELETE_NAME] = {emit__DELETE_NAME, 183, 112, {0}},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 114, 24, {0}},
    [_DEOPT] = {emit__DEOPT, 40, 16, {0}},
    [_DICT_MERGE] = {emit__DICT_MERGE, 205, 48, {0}},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 255, 112, {0}},
    [_DYNAMIC_EXIT] = {emit__DYNAMIC_EXIT, 255, 24, {0}},
    [_END_SEND] = {emit__END_SEND, 60, 16, {0}},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 60, 24, {0}},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 86, 80, {0}},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 395, 32, {0}},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 107, 24, {0}},
    [_EXPAND_METHOD_KW] = {emit__EXPAND_METHOD_KW, 107, 24, {0}},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 24, 48, {0}},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 117, 40, {0}},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 128, 32, {0}},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 106, 32, {0}},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 186, 56, {0}},
    [_GET_AITER] = {emit__GET_AITER, 338, 200, {0}},
    [_GET_ANEXT] = {emit__GET_ANEXT, 68, 24, {0}},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 106, 40, {0}},
    [_GET_ITER] = {emit__GET_ITER, 99, 32, {0}},
    [_GET_LEN] = {emit__GET_LEN, 82, 32, {0}},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 217, 136, {0}},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 41, 16, {0}},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 41, 16, {0}},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 41, 16, {0}},
    [_GUARD_BUILTINS_VERSION_PUSH_KEYS] = {emit__GUARD_BUILTINS_VERSION_PUSH_KEYS, 56, 32, {0}},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 33, 8, {0}},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 33, 16, {0}},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 48, 32, {0}},
    [_GUARD_GLOBALS_VERSION_PUSH_KEYS] = {emit__GUARD_GLOBALS_VERSION_PUSH_KEYS, 56, 32, {0}},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 24, 16, {0}},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 72, 32, {0}},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 77, 32, {0}},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 24, 16, {0}},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 40, 24, {0}},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 24, 16, {0}},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 24, 16, {0}},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 52, 16, {0}},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 24, 16, {0}},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 37, 16, {0}},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 24, 16, {0}},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 24, 16, {0}},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 36, 24, {0}},
    [_IMPORT_FROM] = {emit__IMPORT_FROM, 91, 32, {0}},
    [_IMPORT_NAME] = {emit__IMPORT_NAME, 156, 40, {0}},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 107, 24, {0}},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 528, 8, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 195, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 213, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 222, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 231, 0, {0}},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 240, 0, {0}},
    [_INTERNAL_INCREMENT_OPT_COUNTER] = {emit__INTERNAL_INCREMENT_OPT_COUNTER, 12, 0, {0}},
    [_IS_NONE] = {emit__IS_NONE, 87, 40, {0}},
    [_IS_OP] = {emit__IS_OP, 121, 40, {0}},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 24, 16, {0}},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 24, 16, {0}},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 24, 16, {0}},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 46, 0, {0}},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 63, 24, {0}},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 43, 0, {0}},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 7, 8, {0}},
    [_LIST_APPEND] = {emit__LIST_APPEND, 106, 32, {0}},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 285, 128, {0}},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 262, 48, {0}},
    [_LOAD_ATTR_CLASS_0] = {emit__LOAD_ATTR_CLASS_0, 66, 24, {0}},
    [_LOAD_ATTR_CLASS_1] = {emit__LOAD_ATTR_CLASS_1, 63, 16, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE_0] = {emit__LOAD_ATTR_INSTANCE_VALUE_0, 86, 32, {0}},
    [_LOAD_ATTR_INSTANCE_VALUE_1] = {emit__LOAD_ATTR_INSTANCE_VALUE_1, 90, 32, {0}},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 33, 8, {0}},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 33, 8, {0}},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 33, 8, {0}},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 156, 40, {0}},
    [_LOAD_ATTR_MODULE_FROM_KEYS] = {emit__LOAD_ATTR_MODULE_FROM_KEYS, 156, 40, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 51, 16, {0}},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 51, 16, {0}},
    [_LOAD_ATTR_PROPERTY_FRAME] = {emit__LOAD_ATTR_PROPERTY_FRAME, 258, 24, {0}},
    [_LOAD_ATTR_SLOT_0] = {emit__LOAD_ATTR_SLOT_0, 86, 32, {0}},
    [_LOAD_ATTR_SLOT_1] = {emit__LOAD_ATTR_SLOT_1, 90, 32, {0}},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 175, 32, {0}},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 151, 80, {0}},
    [_LOAD_COMMON_CONSTANT] = {emit__LOAD_COMMON_CONSTANT, 55, 32, {0}},
    [_LOAD_CONST] = {emit__LOAD_CONST, 38, 8, {0}},
    [_LOAD_CONST_IMMORTAL] = {emit__LOAD_CONST_IMMORTAL, 28, 8, {0}},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 25, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 15, 8, {0}},
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = {emit__LOAD_CONST_INLINE_BORROW_WITH_NULL, 23, 8, {0}},
    [_LOAD_CONST_INLINE_WITH_NULL] = {emit__LOAD_CONST_INLINE_WITH_NULL, 33, 8, {0}},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 105, 32, {0}},
    [_LOAD_FAST] = {emit__LOAD_FAST, 30, 8, {0}},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 23, 0, {0}},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 23, 0, {0}},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 23, 0, {0}},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 23, 0, {0}},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 23, 0, {0}},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 23, 0, {0}},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 26, 0, {0}},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 26, 0, {0}},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 29, 8, {0}},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 129, 128, {0}},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 243, 48, {0}},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 123, 32, {0}},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 101, 32, {0}},
    [_LOAD_GLOBAL_BUILTINS_FROM_KEYS] = {emit__LOAD_GLOBAL_BUILTINS_FROM_KEYS, 102, 32, {0}},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 101, 32, {0}},
    [_LOAD_GLOBAL_MODULE_FROM_KEYS] = {emit__LOAD_GLOBAL_MODULE_FROM_KEYS, 102, 32, {0}},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 99, 48, {0}},
    [_LOAD_NAME] = {emit__LOAD_NAME, 90, 32, {0}},
    [_LOAD_SMALL_INT] = {emit__LOAD_SMALL_INT, 34, 16, {0}},
    [_LOAD_SMALL_INT_0] = {emit__LOAD_SMALL_INT_0, 20, 8, {0}},
    [_LOAD_SMALL_INT_1] = {emit__LOAD_SMALL_INT_1, 20, 8, {0}},
    [_LOAD_SMALL_INT_2] = {emit__LOAD_SMALL_INT_2, 20, 8, {0}},
    [_LOAD_SMALL_INT_3] = {emit__LOAD_SMALL_INT_3, 20, 8, {0}},
    [_LOAD_SPECIAL] = {emit__LOAD_SPECIAL, 190, 56, {0}},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 218, 56, {0}},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 286, 64, {0}},
    [_MAKE_CALLARGS_A_TUPLE] = {emit__MAKE_CALLARGS_A_TUPLE, 193, 56, {0}},
    [_MAKE_CELL] = {emit__MAKE_CELL, 92, 40, {0}},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 113, 40, {0}},
    [_MAKE_WARM] = {emit__MAKE_WARM, 40, 16, {0}},
    [_MAP_ADD] = {emit__MAP_ADD, 82, 24, {0}},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 194, 48, {0}},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 75, 24, {0}},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 54, 24, {0}},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 54, 24, {0}},
    [_MAYBE_EXPAND_METHOD] = {emit__MAYBE_EXPAND_METHOD, 127, 32, {0}},
    [_MAYBE_EXPAND_METHOD_KW] = {emit__MAYBE_EXPAND_METHOD_KW, 149, 32, {0}},
    [_NOP] = {emit__NOP, 0, 0, {0}},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 81, 16, {0}},
    [_POP_TOP] = {emit__POP_TOP, 45, 16, {0}},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 63, 24, {0}},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 48, 8, {0}},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 36, 0, {0}},
    [_PUSH_NULL] = {emit__PUSH_NULL, 12, 0, {0}},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 198, 32, {0}},
    [_PY_FRAME_KW] = {emit__PY_FRAME_KW, 243, 40, {0}},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 63, 24, {0}},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 31, 16, {0}},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 489, 32, {0}},
    [_RETURN_VALUE] = {emit__RETURN_VALUE, 68, 8, {0}},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 13, 8, {0}},
    [_SEND_GEN_FRAME] = {emit__SEND_GEN_FRAME, 114, 32, {0}},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 284, 120, {0}},
    [_SET_ADD] = {emit__SET_ADD, 110, 32, {0}},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 41, 16, {0}},
    [_SET_IP] = {emit__SET_IP, 12, 8, {0}},
    [_SET_UPDATE] = {emit__SET_UPDATE, 117, 40, {0}},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 66, 16, {0}},
    [_STORE_ATTR] = {emit__STORE_ATTR, 134, 32, {0}},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 148, 24, {0}},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 90, 24, {0}},
    [_STORE_ATTR_WITH_HINT] = {emit__STORE_ATTR_WITH_HINT, 215, 40, {0}},
    [_STORE_DEREF] = {emit__STORE_DEREF, 78, 16, {0}},
    [_STORE_FAST] = {emit__STORE_FAST, 67, 24, {0}},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 60, 16, {0}},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 60, 16, {0}},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 60, 16, {0}},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 60, 16, {0}},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 60, 16, {0}},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 60, 16, {0}},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 66, 16, {0}},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 66, 16, {0}},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 113, 32, {0}},
    [_STORE_NAME] = {emit__STORE_NAME, 237, 104, {0}},
    [_STORE_SLICE] = {emit__STORE_SLICE, 211, 40, {0}},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 144, 24, {0}},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 120, 40, {0}},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 204, 56, {0}},
    [_SWAP] = {emit__SWAP, 30, 8, {0}},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 15, 8, {0}},
    [_TO_BOOL] = {emit__TO_BOOL, 126, 48, {0}},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 24, 16, {0}},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 98, 48, {0}},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 101, 48, {0}},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 31, 24, {0}},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 119, 56, {0}},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 99, 32, {0}},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 99, 32, {0}},
    [_UNARY_NOT] = {emit__UNARY_NOT, 24, 16, {0}},
    [_UNPACK_EX] = {emit__UNPACK_EX, 139, 40, {0}},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 135, 40, {0}},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 153, 40, {0}},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 151, 40, {0}},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 108, 32, {0}},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 205, 48, {0}},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 96, 8, {0}},
};

static const void * const symbols_map[1] = {
    0
};
